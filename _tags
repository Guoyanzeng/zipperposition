# OASIS_START
# DO NOT EDIT (digest: 54a0603eb7e995d81154db0521e15702)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library logtk
"src/core/logtk.cmxs": use_logtk
"src/core/InnerTerm.cmx": for-pack(Logtk)
"src/core/Term.cmx": for-pack(Logtk)
"src/core/Type.cmx": for-pack(Logtk)
"src/core/Util.cmx": for-pack(Logtk)
"src/core/STerm.cmx": for-pack(Logtk)
"src/core/Interfaces.cmx": for-pack(Logtk)
"src/core/DBEnv.cmx": for-pack(Logtk)
"src/core/Position.cmx": for-pack(Logtk)
"src/core/Var.cmx": for-pack(Logtk)
"src/core/HVar.cmx": for-pack(Logtk)
"src/core/Defined_pos.cmx": for-pack(Logtk)
"src/core/Subst.cmx": for-pack(Logtk)
"src/core/Signature.cmx": for-pack(Logtk)
"src/core/Scoped.cmx": for-pack(Logtk)
"src/core/Unif.cmx": for-pack(Logtk)
"src/core/Unif_intf.cmx": for-pack(Logtk)
"src/core/Unif_constr.cmx": for-pack(Logtk)
"src/core/Unif_subst.cmx": for-pack(Logtk)
"src/core/HO_unif.cmx": for-pack(Logtk)
"src/core/TypeInference.cmx": for-pack(Logtk)
"src/core/Options.cmx": for-pack(Logtk)
"src/core/Comparison.cmx": for-pack(Logtk)
"src/core/Precedence.cmx": for-pack(Logtk)
"src/core/Builtin.cmx": for-pack(Logtk)
"src/core/Ordering.cmx": for-pack(Logtk)
"src/core/Skolem.cmx": for-pack(Logtk)
"src/core/Cnf.cmx": for-pack(Logtk)
"src/core/ID.cmx": for-pack(Logtk)
"src/core/Head.cmx": for-pack(Logtk)
"src/core/SLiteral.cmx": for-pack(Logtk)
"src/core/Index.cmx": for-pack(Logtk)
"src/core/Index_intf.cmx": for-pack(Logtk)
"src/core/Dtree.cmx": for-pack(Logtk)
"src/core/Fingerprint.cmx": for-pack(Logtk)
"src/core/NPDtree.cmx": for-pack(Logtk)
"src/core/Binder.cmx": for-pack(Logtk)
"src/core/Congruence.cmx": for-pack(Logtk)
"src/core/Congruence_intf.cmx": for-pack(Logtk)
"src/core/Lambda.cmx": for-pack(Logtk)
"src/core/FeatureVector.cmx": for-pack(Logtk)
"src/core/FV_tree.cmx": for-pack(Logtk)
"src/core/UntypedAST.cmx": for-pack(Logtk)
"src/core/Ind_ty.cmx": for-pack(Logtk)
"src/core/TypedSTerm.cmx": for-pack(Logtk)
"src/core/Statement.cmx": for-pack(Logtk)
"src/core/Flex_state.cmx": for-pack(Logtk)
"src/core/Compute_prec.cmx": for-pack(Logtk)
"src/core/Ordinal.cmx": for-pack(Logtk)
"src/core/Polynomial.cmx": for-pack(Logtk)
"src/core/Rewrite.cmx": for-pack(Logtk)
"src/core/Test_prop.cmx": for-pack(Logtk)
"src/core/Input_format.cmx": for-pack(Logtk)
"src/core/Output_format.cmx": for-pack(Logtk)
"src/core/Proof.cmx": for-pack(Logtk)
"src/core/Multisets.cmx": for-pack(Logtk)
"src/core/Literal.cmx": for-pack(Logtk)
"src/core/Literals.cmx": for-pack(Logtk)
"src/core/Int_lit.cmx": for-pack(Logtk)
"src/core/Rat_lit.cmx": for-pack(Logtk)
"src/core/Monome.cmx": for-pack(Logtk)
"src/core/lib/Hashcons.cmx": for-pack(Logtk)
"src/core/lib/ParseLocation.cmx": for-pack(Logtk)
"src/core/lib/Multiset.cmx": for-pack(Logtk)
"src/core/lib/LazyList.cmx": for-pack(Logtk)
"src/core/lib/Hash.cmx": for-pack(Logtk)
"src/core/lib/IArray.cmx": for-pack(Logtk)
"src/core/lib/AllocCache.cmx": for-pack(Logtk)
"src/core/lib/Multiset_intf.cmx": for-pack(Logtk)
"src/core/lib/signal.cmx": for-pack(Logtk)
"src/core/lib/UnionFind.cmx": for-pack(Logtk)
<src/core/*.ml{,i,y}>: oasis_library_logtk_ccopt
<src/core/lib/*.ml{,i,y}>: oasis_library_logtk_ccopt
"src/core/util_stubs.c": oasis_library_logtk_ccopt
<src/core/logtk.{cma,cmxa}>: use_liblogtk_stubs
<src/core/*.ml{,i,y}>: package(bytes)
<src/core/*.ml{,i,y}>: package(containers)
<src/core/*.ml{,i,y}>: package(containers.data)
<src/core/*.ml{,i,y}>: package(sequence)
<src/core/*.ml{,i,y}>: package(unix)
<src/core/*.ml{,i,y}>: package(zarith)
<src/core/lib/*.ml{,i,y}>: package(bytes)
<src/core/lib/*.ml{,i,y}>: package(containers)
<src/core/lib/*.ml{,i,y}>: package(containers.data)
<src/core/lib/*.ml{,i,y}>: package(sequence)
<src/core/lib/*.ml{,i,y}>: package(unix)
<src/core/lib/*.ml{,i,y}>: package(zarith)
"src/core/util_stubs.c": package(bytes)
"src/core/util_stubs.c": package(containers)
"src/core/util_stubs.c": package(containers.data)
"src/core/util_stubs.c": package(sequence)
"src/core/util_stubs.c": package(unix)
"src/core/util_stubs.c": package(zarith)
# Library logtk_proofs
"src/proofs/logtk_proofs.cmxs": use_logtk_proofs
"src/proofs/LLProof.cmx": for-pack(Logtk_proofs)
"src/proofs/LLProof_conv.cmx": for-pack(Logtk_proofs)
"src/proofs/LLProof_check.cmx": for-pack(Logtk_proofs)
"src/proofs/LLTerm.cmx": for-pack(Logtk_proofs)
<src/proofs/*.ml{,i,y}>: package(bytes)
<src/proofs/*.ml{,i,y}>: package(containers)
<src/proofs/*.ml{,i,y}>: package(containers.data)
<src/proofs/*.ml{,i,y}>: package(sequence)
<src/proofs/*.ml{,i,y}>: package(unix)
<src/proofs/*.ml{,i,y}>: package(zarith)
<src/proofs/*.ml{,i,y}>: use_logtk
# Library logtk_parsers
"src/parsers/logtk_parsers.cmxs": use_logtk_parsers
"src/parsers/parse_tptp.cmx": for-pack(Logtk_parsers)
"src/parsers/lex_tptp.cmx": for-pack(Logtk_parsers)
"src/parsers/ast_tptp.cmx": for-pack(Logtk_parsers)
"src/parsers/util_tptp.cmx": for-pack(Logtk_parsers)
"src/parsers/trace_tstp.cmx": for-pack(Logtk_parsers)
"src/parsers/parse_zf.cmx": for-pack(Logtk_parsers)
"src/parsers/lex_zf.cmx": for-pack(Logtk_parsers)
"src/parsers/util_zf.cmx": for-pack(Logtk_parsers)
"src/parsers/util_tip.cmx": for-pack(Logtk_parsers)
"src/parsers/Tip_ast.cmx": for-pack(Logtk_parsers)
"src/parsers/Tip_parser.cmx": for-pack(Logtk_parsers)
"src/parsers/Tip_lexer.cmx": for-pack(Logtk_parsers)
"src/parsers/Util_dk.cmx": for-pack(Logtk_parsers)
"src/parsers/parse_dk.cmx": for-pack(Logtk_parsers)
"src/parsers/lex_dk.cmx": for-pack(Logtk_parsers)
"src/parsers/Ast_dk.cmx": for-pack(Logtk_parsers)
"src/parsers/parsing_utils.cmx": for-pack(Logtk_parsers)
"src/parsers/callProver.cmx": for-pack(Logtk_parsers)
<src/parsers/*.ml{,i,y}>: package(bytes)
<src/parsers/*.ml{,i,y}>: package(containers)
<src/parsers/*.ml{,i,y}>: package(containers.data)
<src/parsers/*.ml{,i,y}>: package(sequence)
<src/parsers/*.ml{,i,y}>: package(unix)
<src/parsers/*.ml{,i,y}>: package(zarith)
<src/parsers/*.ml{,i,y}>: use_logtk
# Library logtk_solving
"src/solving/logtk_solving.cmxs": use_logtk_solving
"src/solving/lpo.cmx": for-pack(Logtk_solving)
<src/solving/*.ml{,i,y}>: package(bytes)
<src/solving/*.ml{,i,y}>: package(containers)
<src/solving/*.ml{,i,y}>: package(containers.data)
<src/solving/*.ml{,i,y}>: package(msat)
<src/solving/*.ml{,i,y}>: package(sequence)
<src/solving/*.ml{,i,y}>: package(unix)
<src/solving/*.ml{,i,y}>: package(zarith)
<src/solving/*.ml{,i,y}>: use_logtk
# Library logtk_arbitrary
"src/arbitrary/logtk_arbitrary.cmxs": use_logtk_arbitrary
"src/arbitrary/arTerm.cmx": for-pack(Logtk_arbitrary)
"src/arbitrary/arForm.cmx": for-pack(Logtk_arbitrary)
"src/arbitrary/arType.cmx": for-pack(Logtk_arbitrary)
"src/arbitrary/arID.cmx": for-pack(Logtk_arbitrary)
"src/arbitrary/arLiteral.cmx": for-pack(Logtk_arbitrary)
<src/arbitrary/*.ml{,i,y}>: package(bytes)
<src/arbitrary/*.ml{,i,y}>: package(containers)
<src/arbitrary/*.ml{,i,y}>: package(containers.data)
<src/arbitrary/*.ml{,i,y}>: package(qcheck)
<src/arbitrary/*.ml{,i,y}>: package(sequence)
<src/arbitrary/*.ml{,i,y}>: package(unix)
<src/arbitrary/*.ml{,i,y}>: package(zarith)
<src/arbitrary/*.ml{,i,y}>: use_logtk
# Library libzipperposition
"src/prover/libzipperposition.cmxs": use_libzipperposition
"src/prover/clauseQueue.cmx": for-pack(Libzipperposition)
"src/prover/clause.cmx": for-pack(Libzipperposition)
"src/prover/SClause.cmx": for-pack(Libzipperposition)
"src/prover/const.cmx": for-pack(Libzipperposition)
"src/prover/extensions.cmx": for-pack(Libzipperposition)
"src/prover/ctx.cmx": for-pack(Libzipperposition)
"src/prover/proofState.cmx": for-pack(Libzipperposition)
"src/prover/Bool_clause.cmx": for-pack(Libzipperposition)
"src/prover/saturate.cmx": for-pack(Libzipperposition)
"src/prover/selection.cmx": for-pack(Libzipperposition)
"src/prover/AC.cmx": for-pack(Libzipperposition)
"src/prover/AC_intf.cmx": for-pack(Libzipperposition)
"src/prover/simplM.cmx": for-pack(Libzipperposition)
"src/prover/params.cmx": for-pack(Libzipperposition)
"src/prover/env.cmx": for-pack(Libzipperposition)
"src/prover/signals.cmx": for-pack(Libzipperposition)
"src/prover/Classify_cst.cmx": for-pack(Libzipperposition)
"src/prover/ctx_intf.cmx": for-pack(Libzipperposition)
"src/prover/clause_intf.cmx": for-pack(Libzipperposition)
"src/prover/env_intf.cmx": for-pack(Libzipperposition)
"src/prover/proofState_intf.cmx": for-pack(Libzipperposition)
"src/prover/bBox.cmx": for-pack(Libzipperposition)
"src/prover/clauseContext.cmx": for-pack(Libzipperposition)
"src/prover/clauseQueue_intf.cmx": for-pack(Libzipperposition)
"src/prover/bool_lit.cmx": for-pack(Libzipperposition)
"src/prover/bool_lit_intf.cmx": for-pack(Libzipperposition)
"src/prover/sat_solver.cmx": for-pack(Libzipperposition)
"src/prover/sat_solver_intf.cmx": for-pack(Libzipperposition)
"src/prover/trail.cmx": for-pack(Libzipperposition)
"src/prover/Ind_cst.cmx": for-pack(Libzipperposition)
"src/prover/Cover_set.cmx": for-pack(Libzipperposition)
"src/prover/Cut_form.cmx": for-pack(Libzipperposition)
"src/prover/phases.cmx": for-pack(Libzipperposition)
"src/prover/phases_impl.cmx": for-pack(Libzipperposition)
"src/prover/calculi/avatar.cmx": for-pack(Libzipperposition)
"src/prover/calculi/avatar_intf.cmx": for-pack(Libzipperposition)
"src/prover/calculi/induction.cmx": for-pack(Libzipperposition)
"src/prover/calculi/induction_intf.cmx": for-pack(Libzipperposition)
"src/prover/calculi/superposition.cmx": for-pack(Libzipperposition)
"src/prover/calculi/superposition_intf.cmx": for-pack(Libzipperposition)
"src/prover/calculi/Rewriting.cmx": for-pack(Libzipperposition)
"src/prover/calculi/enumTypes.cmx": for-pack(Libzipperposition)
"src/prover/calculi/Arith_int.cmx": for-pack(Libzipperposition)
"src/prover/calculi/Arith_rat.cmx": for-pack(Libzipperposition)
"src/prover/calculi/heuristics.cmx": for-pack(Libzipperposition)
"src/prover/calculi/ind_types.cmx": for-pack(Libzipperposition)
"src/prover/calculi/fool.cmx": for-pack(Libzipperposition)
"src/prover/calculi/Higher_order.cmx": for-pack(Libzipperposition)
"src/prover/lib/simplex.cmx": for-pack(Libzipperposition)
<src/prover/*.ml{,i,y}>: package(bytes)
<src/prover/*.ml{,i,y}>: package(containers)
<src/prover/*.ml{,i,y}>: package(containers.data)
<src/prover/*.ml{,i,y}>: package(msat)
<src/prover/*.ml{,i,y}>: package(sequence)
<src/prover/*.ml{,i,y}>: package(unix)
<src/prover/*.ml{,i,y}>: package(zarith)
<src/prover/*.ml{,i,y}>: use_logtk
<src/prover/*.ml{,i,y}>: use_logtk_parsers
<src/prover/*.ml{,i,y}>: use_logtk_proofs
<src/prover/calculi/*.ml{,i,y}>: package(bytes)
<src/prover/calculi/*.ml{,i,y}>: package(containers)
<src/prover/calculi/*.ml{,i,y}>: package(containers.data)
<src/prover/calculi/*.ml{,i,y}>: package(msat)
<src/prover/calculi/*.ml{,i,y}>: package(sequence)
<src/prover/calculi/*.ml{,i,y}>: package(unix)
<src/prover/calculi/*.ml{,i,y}>: package(zarith)
<src/prover/calculi/*.ml{,i,y}>: use_logtk
<src/prover/calculi/*.ml{,i,y}>: use_logtk_parsers
<src/prover/calculi/*.ml{,i,y}>: use_logtk_proofs
<src/prover/lib/*.ml{,i,y}>: package(bytes)
<src/prover/lib/*.ml{,i,y}>: package(containers)
<src/prover/lib/*.ml{,i,y}>: package(containers.data)
<src/prover/lib/*.ml{,i,y}>: package(msat)
<src/prover/lib/*.ml{,i,y}>: package(sequence)
<src/prover/lib/*.ml{,i,y}>: package(unix)
<src/prover/lib/*.ml{,i,y}>: package(zarith)
<src/prover/lib/*.ml{,i,y}>: use_logtk
<src/prover/lib/*.ml{,i,y}>: use_logtk_parsers
<src/prover/lib/*.ml{,i,y}>: use_logtk_proofs
# Executable zipperposition
"src/main/zipperposition.native": package(bytes)
"src/main/zipperposition.native": package(containers)
"src/main/zipperposition.native": package(containers.data)
"src/main/zipperposition.native": package(msat)
"src/main/zipperposition.native": package(sequence)
"src/main/zipperposition.native": package(unix)
"src/main/zipperposition.native": package(zarith)
"src/main/zipperposition.native": use_libzipperposition
"src/main/zipperposition.native": use_logtk
"src/main/zipperposition.native": use_logtk_parsers
"src/main/zipperposition.native": use_logtk_proofs
<src/main/*.ml{,i,y}>: package(bytes)
<src/main/*.ml{,i,y}>: package(containers)
<src/main/*.ml{,i,y}>: package(containers.data)
<src/main/*.ml{,i,y}>: package(msat)
<src/main/*.ml{,i,y}>: package(sequence)
<src/main/*.ml{,i,y}>: package(unix)
<src/main/*.ml{,i,y}>: package(zarith)
<src/main/*.ml{,i,y}>: use_libzipperposition
<src/main/*.ml{,i,y}>: use_logtk
<src/main/*.ml{,i,y}>: use_logtk_parsers
<src/main/*.ml{,i,y}>: use_logtk_proofs
# Executable hornet
"src/hornet/hornet.native": package(bytes)
"src/hornet/hornet.native": package(containers)
"src/hornet/hornet.native": package(containers.data)
"src/hornet/hornet.native": package(msat)
"src/hornet/hornet.native": package(sequence)
"src/hornet/hornet.native": package(unix)
"src/hornet/hornet.native": package(zarith)
"src/hornet/hornet.native": use_logtk
"src/hornet/hornet.native": use_logtk_parsers
<src/hornet/*.ml{,i,y}>: package(bytes)
<src/hornet/*.ml{,i,y}>: package(containers)
<src/hornet/*.ml{,i,y}>: package(containers.data)
<src/hornet/*.ml{,i,y}>: package(msat)
<src/hornet/*.ml{,i,y}>: package(sequence)
<src/hornet/*.ml{,i,y}>: package(unix)
<src/hornet/*.ml{,i,y}>: package(zarith)
<src/hornet/*.ml{,i,y}>: use_logtk
<src/hornet/*.ml{,i,y}>: use_logtk_parsers
# Executable run_bench
"tests/bench/run_bench.native": package(benchmark)
"tests/bench/run_bench.native": package(bytes)
"tests/bench/run_bench.native": package(containers)
"tests/bench/run_bench.native": package(containers.data)
"tests/bench/run_bench.native": package(qcheck)
"tests/bench/run_bench.native": package(sequence)
"tests/bench/run_bench.native": package(unix)
"tests/bench/run_bench.native": package(zarith)
"tests/bench/run_bench.native": use_logtk
"tests/bench/run_bench.native": use_logtk_arbitrary
<tests/bench/*.ml{,i,y}>: package(benchmark)
<tests/bench/*.ml{,i,y}>: package(bytes)
<tests/bench/*.ml{,i,y}>: package(containers)
<tests/bench/*.ml{,i,y}>: package(containers.data)
<tests/bench/*.ml{,i,y}>: package(qcheck)
<tests/bench/*.ml{,i,y}>: package(sequence)
<tests/bench/*.ml{,i,y}>: package(unix)
<tests/bench/*.ml{,i,y}>: package(zarith)
<tests/bench/*.ml{,i,y}>: use_logtk
<tests/bench/*.ml{,i,y}>: use_logtk_arbitrary
# Executable run_tests
"tests/run_tests.native": package(bytes)
"tests/run_tests.native": package(containers)
"tests/run_tests.native": package(containers.data)
"tests/run_tests.native": package(oUnit)
"tests/run_tests.native": package(qcheck)
"tests/run_tests.native": package(sequence)
"tests/run_tests.native": package(unix)
"tests/run_tests.native": package(zarith)
"tests/run_tests.native": use_logtk
"tests/run_tests.native": use_logtk_arbitrary
"tests/run_tests.native": use_logtk_parsers
<tests/*.ml{,i,y}>: package(bytes)
<tests/*.ml{,i,y}>: package(containers)
<tests/*.ml{,i,y}>: package(containers.data)
<tests/*.ml{,i,y}>: package(oUnit)
<tests/*.ml{,i,y}>: package(qcheck)
<tests/*.ml{,i,y}>: package(sequence)
<tests/*.ml{,i,y}>: package(unix)
<tests/*.ml{,i,y}>: package(zarith)
<tests/*.ml{,i,y}>: use_logtk
<tests/*.ml{,i,y}>: use_logtk_arbitrary
<tests/*.ml{,i,y}>: use_logtk_parsers
# Executable type_check
"src/tools/type_check.native": package(bytes)
"src/tools/type_check.native": package(containers)
"src/tools/type_check.native": package(containers.data)
"src/tools/type_check.native": package(sequence)
"src/tools/type_check.native": package(unix)
"src/tools/type_check.native": package(zarith)
"src/tools/type_check.native": use_logtk
"src/tools/type_check.native": use_logtk_parsers
# Executable cnf_of
"src/tools/cnf_of.native": package(bytes)
"src/tools/cnf_of.native": package(containers)
"src/tools/cnf_of.native": package(containers.data)
"src/tools/cnf_of.native": package(sequence)
"src/tools/cnf_of.native": package(unix)
"src/tools/cnf_of.native": package(zarith)
"src/tools/cnf_of.native": use_logtk
"src/tools/cnf_of.native": use_logtk_parsers
# Executable tptp_to_zf
"src/tools/tptp_to_zf.native": package(bytes)
"src/tools/tptp_to_zf.native": package(containers)
"src/tools/tptp_to_zf.native": package(containers.data)
"src/tools/tptp_to_zf.native": package(sequence)
"src/tools/tptp_to_zf.native": package(unix)
"src/tools/tptp_to_zf.native": package(zarith)
"src/tools/tptp_to_zf.native": use_logtk
"src/tools/tptp_to_zf.native": use_logtk_parsers
# Executable proof_check_tstp
"src/tools/proof_check_tstp.native": package(bytes)
"src/tools/proof_check_tstp.native": package(containers)
"src/tools/proof_check_tstp.native": package(containers.data)
"src/tools/proof_check_tstp.native": package(sequence)
"src/tools/proof_check_tstp.native": package(unix)
"src/tools/proof_check_tstp.native": package(zarith)
"src/tools/proof_check_tstp.native": use_logtk
"src/tools/proof_check_tstp.native": use_logtk_parsers
<src/tools/*.ml{,i,y}>: package(bytes)
<src/tools/*.ml{,i,y}>: package(containers)
<src/tools/*.ml{,i,y}>: package(containers.data)
<src/tools/*.ml{,i,y}>: package(sequence)
<src/tools/*.ml{,i,y}>: package(unix)
<src/tools/*.ml{,i,y}>: package(zarith)
<src/tools/*.ml{,i,y}>: use_logtk
<src/tools/*.ml{,i,y}>: use_logtk_parsers
# Executable resolution1
"src/demo/resolution/resolution1.native": package(bytes)
"src/demo/resolution/resolution1.native": package(containers)
"src/demo/resolution/resolution1.native": package(containers.data)
"src/demo/resolution/resolution1.native": package(sequence)
"src/demo/resolution/resolution1.native": package(unix)
"src/demo/resolution/resolution1.native": package(zarith)
"src/demo/resolution/resolution1.native": use_logtk
"src/demo/resolution/resolution1.native": use_logtk_parsers
<src/demo/resolution/*.ml{,i,y}>: package(bytes)
<src/demo/resolution/*.ml{,i,y}>: package(containers)
<src/demo/resolution/*.ml{,i,y}>: package(containers.data)
<src/demo/resolution/*.ml{,i,y}>: package(sequence)
<src/demo/resolution/*.ml{,i,y}>: package(unix)
<src/demo/resolution/*.ml{,i,y}>: package(zarith)
<src/demo/resolution/*.ml{,i,y}>: use_logtk
<src/demo/resolution/*.ml{,i,y}>: use_logtk_parsers
# OASIS_STOP

# avoid compiler error
<src/parsers/parse_dk.*>: optimize(classic), inline(0)

<**/*.cmx>: inline(15)
true: bin_annot, no_alias_deps, use_menhir, color(always), optimize(3)

"tests/quick/": -traverse
"tests/quick/": not_hygienic
"Problems": -traverse
"tptp": -traverse
<*bench*/>: -traverse

<src/**/*.ml>: warn(+a-4-42-44-48-50-58-32-60@8)

<src/prover/const.cmx>: for-pack(Libzipperposition)

<src/**/*.cmx>: inline(20)
