# OASIS_START
# DO NOT EDIT (digest: bc5b1e62958ffcb52af589878224fa88)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library libzipperposition
"src/libzipperposition.cmxs": use_libzipperposition
"src/clauseQueue.cmx": for-pack(Libzipperposition)
"src/clause.cmx": for-pack(Libzipperposition)
"src/const.cmx": for-pack(Libzipperposition)
"src/extensions.cmx": for-pack(Libzipperposition)
"src/literal.cmx": for-pack(Libzipperposition)
"src/compactClause.cmx": for-pack(Libzipperposition)
"src/ctx.cmx": for-pack(Libzipperposition)
"src/proof.cmx": for-pack(Libzipperposition)
"src/proofState.cmx": for-pack(Libzipperposition)
"src/saturate.cmx": for-pack(Libzipperposition)
"src/selection.cmx": for-pack(Libzipperposition)
"src/superposition.cmx": for-pack(Libzipperposition)
"src/pFormula.cmx": for-pack(Libzipperposition)
"src/theories.cmx": for-pack(Libzipperposition)
"src/AC.cmx": for-pack(Libzipperposition)
"src/pEnv.cmx": for-pack(Libzipperposition)
"src/params.cmx": for-pack(Libzipperposition)
"src/env.cmx": for-pack(Libzipperposition)
"src/lib/lazyGraph.cmx": for-pack(Libzipperposition)
"src/lib/leftistheap.cmx": for-pack(Libzipperposition)
"src/lib/vector.cmx": for-pack(Libzipperposition)
"src/lib/sequence.cmx": for-pack(Libzipperposition)
"src/lib/smallSet.cmx": for-pack(Libzipperposition)
"src/lib/unionFind.cmx": for-pack(Libzipperposition)
"src/lib/choice.cmx": for-pack(Libzipperposition)
<src/lib/*.ml{,i}>: package(dynlink)
<src/lib/*.ml{,i}>: package(logtk)
<src/lib/*.ml{,i}>: package(unix)
<src/lib/*.ml{,i}>: package(zarith)
# Library libzipperposition_meta
"src/meta/libzipperposition_meta.cmxs": use_libzipperposition_meta
<src/meta/*.ml{,i}>: package(dynlink)
<src/meta/*.ml{,i}>: package(logtk)
<src/meta/*.ml{,i}>: package(logtk.meta)
<src/meta/*.ml{,i}>: package(unix)
<src/meta/*.ml{,i}>: package(zarith)
<src/meta/*.ml{,i}>: use_libzipperposition
# Executable zipperposition
"src/zipperposition.native": package(dynlink)
"src/zipperposition.native": package(logtk)
"src/zipperposition.native": package(logtk.meta)
"src/zipperposition.native": package(num)
"src/zipperposition.native": package(unix)
"src/zipperposition.native": package(zarith)
"src/zipperposition.native": use_libzipperposition
<src/*.ml{,i}>: package(dynlink)
<src/*.ml{,i}>: package(logtk)
<src/*.ml{,i}>: package(logtk.meta)
<src/*.ml{,i}>: package(num)
<src/*.ml{,i}>: package(unix)
<src/*.ml{,i}>: package(zarith)
<src/*.ml{,i}>: use_libzipperposition
# Executable run_tests
"tests/run_tests.native": package(dynlink)
"tests/run_tests.native": package(libzipperposition.arbitrary)
"tests/run_tests.native": package(logtk)
"tests/run_tests.native": package(logtk.arbitrary)
"tests/run_tests.native": package(logtk.meta)
"tests/run_tests.native": package(qcheck)
"tests/run_tests.native": package(unix)
"tests/run_tests.native": package(zarith)
"tests/run_tests.native": use_libzipperposition
<tests/*.ml{,i}>: package(dynlink)
<tests/*.ml{,i}>: package(libzipperposition.arbitrary)
<tests/*.ml{,i}>: package(logtk)
<tests/*.ml{,i}>: package(logtk.arbitrary)
<tests/*.ml{,i}>: package(logtk.meta)
<tests/*.ml{,i}>: package(qcheck)
<tests/*.ml{,i}>: package(unix)
<tests/*.ml{,i}>: package(zarith)
<tests/*.ml{,i}>: use_libzipperposition
# OASIS_STOP
<**/*.ml>: warn_K, warn_Y, warn_X
<src/const.cmx>: for-pack(Libzipperposition)
<**/*.cmx>: inline(15)
<plugins>: not_hygienic
true: classic_display
