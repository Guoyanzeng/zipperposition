# OASIS_START
# DO NOT EDIT (digest: 48f3b01735010c81c2817c63e29ee607)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library libzipperposition
"src/libzipperposition.cmxs": use_libzipperposition
"src/clauseQueue.cmx": for-pack(Libzipperposition)
"src/clause.cmx": for-pack(Libzipperposition)
"src/const.cmx": for-pack(Libzipperposition)
"src/extensions.cmx": for-pack(Libzipperposition)
"src/literal.cmx": for-pack(Libzipperposition)
"src/literals.cmx": for-pack(Libzipperposition)
"src/compactClause.cmx": for-pack(Libzipperposition)
"src/ctx.cmx": for-pack(Libzipperposition)
"src/proof.cmx": for-pack(Libzipperposition)
"src/proofState.cmx": for-pack(Libzipperposition)
"src/saturate.cmx": for-pack(Libzipperposition)
"src/selection.cmx": for-pack(Libzipperposition)
"src/pFormula.cmx": for-pack(Libzipperposition)
"src/theories.cmx": for-pack(Libzipperposition)
"src/AC.cmx": for-pack(Libzipperposition)
"src/pEnv.cmx": for-pack(Libzipperposition)
"src/params.cmx": for-pack(Libzipperposition)
"src/env.cmx": for-pack(Libzipperposition)
"src/monome.cmx": for-pack(Libzipperposition)
"src/arithLit.cmx": for-pack(Libzipperposition)
"src/signals.cmx": for-pack(Libzipperposition)
"src/multisets.cmx": for-pack(Libzipperposition)
"src/ctx_intf.cmx": for-pack(Libzipperposition)
"src/clause_intf.cmx": for-pack(Libzipperposition)
"src/env_intf.cmx": for-pack(Libzipperposition)
"src/proofState_intf.cmx": for-pack(Libzipperposition)
"src/bBox.cmx": for-pack(Libzipperposition)
"src/bBox_intf.cmx": for-pack(Libzipperposition)
"src/clauseContext.cmx": for-pack(Libzipperposition)
"src/boolSolver.cmx": for-pack(Libzipperposition)
"src/boolSolver_intf.cmx": for-pack(Libzipperposition)
"src/induction_helpers.cmx": for-pack(Libzipperposition)
"src/calculi/avatar.cmx": for-pack(Libzipperposition)
"src/calculi/induction.cmx": for-pack(Libzipperposition)
"src/calculi/induction_simple.cmx": for-pack(Libzipperposition)
"src/calculi/superposition.cmx": for-pack(Libzipperposition)
"src/calculi/chaining.cmx": for-pack(Libzipperposition)
"src/calculi/enumTypes.cmx": for-pack(Libzipperposition)
"src/calculi/arithInt.cmx": for-pack(Libzipperposition)
"src/calculi/heuristics.cmx": for-pack(Libzipperposition)
"src/meta/metaProverState.cmx": for-pack(Libzipperposition)
"src/lib/lazyGraph.cmx": for-pack(Libzipperposition)
"src/lib/smallSet.cmx": for-pack(Libzipperposition)
"src/lib/unionFind.cmx": for-pack(Libzipperposition)
"src/lib/choice.cmx": for-pack(Libzipperposition)
"src/lib/mixtbl.cmx": for-pack(Libzipperposition)
"src/lib/signal.cmx": for-pack(Libzipperposition)
"src/msat/zipperposition_msat.cmx": for-pack(Libzipperposition)
<src/calculi/*.ml{,i,y}>: package(containers)
<src/calculi/*.ml{,i,y}>: package(containers.advanced)
<src/calculi/*.ml{,i,y}>: package(containers.io)
<src/calculi/*.ml{,i,y}>: package(dynlink)
<src/calculi/*.ml{,i,y}>: package(gen)
<src/calculi/*.ml{,i,y}>: package(logtk)
<src/calculi/*.ml{,i,y}>: package(logtk.meta)
<src/calculi/*.ml{,i,y}>: package(logtk.parsers)
<src/calculi/*.ml{,i,y}>: package(msat)
<src/calculi/*.ml{,i,y}>: package(ppx_deriving.std)
<src/calculi/*.ml{,i,y}>: package(qbf)
<src/calculi/*.ml{,i,y}>: package(sequence)
<src/calculi/*.ml{,i,y}>: package(unix)
<src/calculi/*.ml{,i,y}>: package(zarith)
<src/meta/*.ml{,i,y}>: package(containers)
<src/meta/*.ml{,i,y}>: package(containers.advanced)
<src/meta/*.ml{,i,y}>: package(containers.io)
<src/meta/*.ml{,i,y}>: package(dynlink)
<src/meta/*.ml{,i,y}>: package(gen)
<src/meta/*.ml{,i,y}>: package(logtk)
<src/meta/*.ml{,i,y}>: package(logtk.meta)
<src/meta/*.ml{,i,y}>: package(logtk.parsers)
<src/meta/*.ml{,i,y}>: package(msat)
<src/meta/*.ml{,i,y}>: package(ppx_deriving.std)
<src/meta/*.ml{,i,y}>: package(qbf)
<src/meta/*.ml{,i,y}>: package(sequence)
<src/meta/*.ml{,i,y}>: package(unix)
<src/meta/*.ml{,i,y}>: package(zarith)
<src/lib/*.ml{,i,y}>: package(containers)
<src/lib/*.ml{,i,y}>: package(containers.advanced)
<src/lib/*.ml{,i,y}>: package(containers.io)
<src/lib/*.ml{,i,y}>: package(dynlink)
<src/lib/*.ml{,i,y}>: package(gen)
<src/lib/*.ml{,i,y}>: package(logtk)
<src/lib/*.ml{,i,y}>: package(logtk.meta)
<src/lib/*.ml{,i,y}>: package(logtk.parsers)
<src/lib/*.ml{,i,y}>: package(msat)
<src/lib/*.ml{,i,y}>: package(ppx_deriving.std)
<src/lib/*.ml{,i,y}>: package(qbf)
<src/lib/*.ml{,i,y}>: package(sequence)
<src/lib/*.ml{,i,y}>: package(unix)
<src/lib/*.ml{,i,y}>: package(zarith)
<src/msat/*.ml{,i,y}>: package(containers)
<src/msat/*.ml{,i,y}>: package(containers.advanced)
<src/msat/*.ml{,i,y}>: package(containers.io)
<src/msat/*.ml{,i,y}>: package(dynlink)
<src/msat/*.ml{,i,y}>: package(gen)
<src/msat/*.ml{,i,y}>: package(logtk)
<src/msat/*.ml{,i,y}>: package(logtk.meta)
<src/msat/*.ml{,i,y}>: package(logtk.parsers)
<src/msat/*.ml{,i,y}>: package(msat)
<src/msat/*.ml{,i,y}>: package(ppx_deriving.std)
<src/msat/*.ml{,i,y}>: package(qbf)
<src/msat/*.ml{,i,y}>: package(sequence)
<src/msat/*.ml{,i,y}>: package(unix)
<src/msat/*.ml{,i,y}>: package(zarith)
# Executable zipperposition
"src/zipperposition.native": package(containers)
"src/zipperposition.native": package(containers.advanced)
"src/zipperposition.native": package(containers.io)
"src/zipperposition.native": package(dynlink)
"src/zipperposition.native": package(gen)
"src/zipperposition.native": package(logtk)
"src/zipperposition.native": package(logtk.meta)
"src/zipperposition.native": package(logtk.parsers)
"src/zipperposition.native": package(msat)
"src/zipperposition.native": package(ppx_deriving.std)
"src/zipperposition.native": package(qbf)
"src/zipperposition.native": package(sequence)
"src/zipperposition.native": package(unix)
"src/zipperposition.native": package(zarith)
"src/zipperposition.native": use_libzipperposition
# Executable zipperposition_quantor
"src/zipperposition_quantor.native": package(containers)
"src/zipperposition_quantor.native": package(containers.advanced)
"src/zipperposition_quantor.native": package(containers.io)
"src/zipperposition_quantor.native": package(dynlink)
"src/zipperposition_quantor.native": package(gen)
"src/zipperposition_quantor.native": package(logtk)
"src/zipperposition_quantor.native": package(logtk.meta)
"src/zipperposition_quantor.native": package(logtk.parsers)
"src/zipperposition_quantor.native": package(msat)
"src/zipperposition_quantor.native": package(ppx_deriving.std)
"src/zipperposition_quantor.native": package(qbf)
"src/zipperposition_quantor.native": package(qbf.quantor)
"src/zipperposition_quantor.native": package(sequence)
"src/zipperposition_quantor.native": package(unix)
"src/zipperposition_quantor.native": package(zarith)
"src/zipperposition_quantor.native": use_libzipperposition
<src/*.ml{,i,y}>: package(containers)
<src/*.ml{,i,y}>: package(containers.advanced)
<src/*.ml{,i,y}>: package(containers.io)
<src/*.ml{,i,y}>: package(dynlink)
<src/*.ml{,i,y}>: package(gen)
<src/*.ml{,i,y}>: package(logtk)
<src/*.ml{,i,y}>: package(logtk.meta)
<src/*.ml{,i,y}>: package(logtk.parsers)
<src/*.ml{,i,y}>: package(msat)
<src/*.ml{,i,y}>: package(ppx_deriving.std)
<src/*.ml{,i,y}>: package(qbf)
<src/*.ml{,i,y}>: package(qbf.quantor)
<src/*.ml{,i,y}>: package(sequence)
<src/*.ml{,i,y}>: package(unix)
<src/*.ml{,i,y}>: package(zarith)
<src/*.ml{,i,y}>: use_libzipperposition
# Executable run_tests
"tests/run_tests.native": package(containers)
"tests/run_tests.native": package(containers.advanced)
"tests/run_tests.native": package(containers.io)
"tests/run_tests.native": package(dynlink)
"tests/run_tests.native": package(gen)
"tests/run_tests.native": package(logtk)
"tests/run_tests.native": package(logtk.arbitrary)
"tests/run_tests.native": package(logtk.meta)
"tests/run_tests.native": package(logtk.parsers)
"tests/run_tests.native": package(msat)
"tests/run_tests.native": package(ppx_deriving.std)
"tests/run_tests.native": package(qbf)
"tests/run_tests.native": package(qcheck)
"tests/run_tests.native": package(sequence)
"tests/run_tests.native": package(unix)
"tests/run_tests.native": package(zarith)
"tests/run_tests.native": use_libzipperposition
<tests/*.ml{,i,y}>: package(containers)
<tests/*.ml{,i,y}>: package(containers.advanced)
<tests/*.ml{,i,y}>: package(containers.io)
<tests/*.ml{,i,y}>: package(dynlink)
<tests/*.ml{,i,y}>: package(gen)
<tests/*.ml{,i,y}>: package(logtk)
<tests/*.ml{,i,y}>: package(logtk.arbitrary)
<tests/*.ml{,i,y}>: package(logtk.meta)
<tests/*.ml{,i,y}>: package(logtk.parsers)
<tests/*.ml{,i,y}>: package(msat)
<tests/*.ml{,i,y}>: package(ppx_deriving.std)
<tests/*.ml{,i,y}>: package(qbf)
<tests/*.ml{,i,y}>: package(qcheck)
<tests/*.ml{,i,y}>: package(sequence)
<tests/*.ml{,i,y}>: package(unix)
<tests/*.ml{,i,y}>: package(zarith)
<tests/*.ml{,i,y}>: use_libzipperposition
# OASIS_STOP
<**/*.ml>: warn_K, warn_Y, warn_X
<src/const.cmx>: for-pack(Libzipperposition)
<**/*.cmx>: inline(15)
<plugins>: not_hygienic
true: no_alias_deps
