# OASIS_START
# DO NOT EDIT (digest: 022ac8faa513867e9f61a2f8cb9ad401)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library libzipperposition
"src/libzipperposition.cmxs": use_libzipperposition
"src/clauseQueue.cmx": for-pack(Libzipperposition)
"src/clause.cmx": for-pack(Libzipperposition)
"src/const.cmx": for-pack(Libzipperposition)
"src/extensions.cmx": for-pack(Libzipperposition)
"src/literal.cmx": for-pack(Libzipperposition)
"src/metaProverState.cmx": for-pack(Libzipperposition)
"src/compactClause.cmx": for-pack(Libzipperposition)
"src/ctx.cmx": for-pack(Libzipperposition)
"src/proof.cmx": for-pack(Libzipperposition)
"src/proofState.cmx": for-pack(Libzipperposition)
"src/saturate.cmx": for-pack(Libzipperposition)
"src/selection.cmx": for-pack(Libzipperposition)
"src/superposition.cmx": for-pack(Libzipperposition)
"src/pFormula.cmx": for-pack(Libzipperposition)
"src/theories.cmx": for-pack(Libzipperposition)
"src/AC.cmx": for-pack(Libzipperposition)
"src/pEnv.cmx": for-pack(Libzipperposition)
"src/params.cmx": for-pack(Libzipperposition)
"src/env.cmx": for-pack(Libzipperposition)
"src/monome.cmx": for-pack(Libzipperposition)
"src/arithElim.cmx": for-pack(Libzipperposition)
"src/cancellativeInference.cmx": for-pack(Libzipperposition)
"src/arithTerm.cmx": for-pack(Libzipperposition)
"src/arithLit.cmx": for-pack(Libzipperposition)
"src/containers/lazyGraph.cmx": for-pack(Libzipperposition)
"src/containers/leftistheap.cmx": for-pack(Libzipperposition)
"src/containers/vector.cmx": for-pack(Libzipperposition)
"src/containers/sequence.cmx": for-pack(Libzipperposition)
"src/containers/smallSet.cmx": for-pack(Libzipperposition)
"src/containers/unionFind.cmx": for-pack(Libzipperposition)
<src/containers/*.ml{,i}>: package(dynlink)
<src/containers/*.ml{,i}>: package(logtk)
<src/containers/*.ml{,i}>: package(logtk.meta)
<src/containers/*.ml{,i}>: package(num)
<src/containers/*.ml{,i}>: package(unix)
# Library libzipperposition_arbitrary
"src/arbitrary/libzipperposition_arbitrary.cmxs": use_libzipperposition_arbitrary
"src/arbitrary/arMonome.cmx": for-pack(Libzipperposition_arbitrary)
"src/arbitrary/arArith.cmx": for-pack(Libzipperposition_arbitrary)
"src/arbitrary/arInterval.cmx": for-pack(Libzipperposition_arbitrary)
<src/arbitrary/*.ml{,i}>: package(dynlink)
<src/arbitrary/*.ml{,i}>: package(logtk)
<src/arbitrary/*.ml{,i}>: package(logtk.arbitrary)
<src/arbitrary/*.ml{,i}>: package(logtk.meta)
<src/arbitrary/*.ml{,i}>: package(num)
<src/arbitrary/*.ml{,i}>: package(qcheck)
<src/arbitrary/*.ml{,i}>: package(unix)
<src/arbitrary/*.ml{,i}>: use_libzipperposition
# Executable zipperposition
"src/zipperposition.native": package(dynlink)
"src/zipperposition.native": package(logtk)
"src/zipperposition.native": package(logtk.meta)
"src/zipperposition.native": package(num)
"src/zipperposition.native": package(unix)
"src/zipperposition.native": use_libzipperposition
<src/*.ml{,i}>: package(dynlink)
<src/*.ml{,i}>: package(logtk)
<src/*.ml{,i}>: package(logtk.meta)
<src/*.ml{,i}>: package(num)
<src/*.ml{,i}>: package(unix)
<src/*.ml{,i}>: use_libzipperposition
# Executable run_tests
"tests/run_tests.native": package(dynlink)
"tests/run_tests.native": package(logtk)
"tests/run_tests.native": package(logtk.arbitrary)
"tests/run_tests.native": package(logtk.meta)
"tests/run_tests.native": package(num)
"tests/run_tests.native": package(qcheck)
"tests/run_tests.native": package(unix)
"tests/run_tests.native": use_libzipperposition
"tests/run_tests.native": use_libzipperposition_arbitrary
<tests/*.ml{,i}>: package(dynlink)
<tests/*.ml{,i}>: package(logtk)
<tests/*.ml{,i}>: package(logtk.arbitrary)
<tests/*.ml{,i}>: package(logtk.meta)
<tests/*.ml{,i}>: package(num)
<tests/*.ml{,i}>: package(qcheck)
<tests/*.ml{,i}>: package(unix)
<tests/*.ml{,i}>: use_libzipperposition
<tests/*.ml{,i}>: use_libzipperposition_arbitrary
# OASIS_STOP
<src/const.cmx>: for-pack(Libzipperposition)
<**/*.cmx>: inline(15)
<plugins>: not_hygienic
true: classic_display
