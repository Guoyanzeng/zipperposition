
# expect: sat

data nat := Z | S nat.

val[infix "+"] plus : nat -> nat -> nat.
rewrite forall x. plus Z x = x.
rewrite forall x y. plus (S x) y = S (plus x y).

val[infix "×"] mult : nat -> nat -> nat.
rewrite forall x. mult Z x = Z.
rewrite forall x y. mult (S x) y = plus y (mult x y).

val[prefix "!"] fact : nat -> nat.
rewrite fact Z = S Z.
rewrite forall n. fact (S n) = mult (S n) (fact n).

val[infix "≤"] leq : nat -> nat -> prop.
rewrite forall n. leq Z n <=> true.
rewrite forall m n. leq (S m) (S n) <=> leq m n.

