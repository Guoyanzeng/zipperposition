# expect: unsat

# exercize rewriting

# if A inter B != empty, B inter C != empty, but A inter C=empty,
# there must be at least two elements in B

val set : type -> type.

val empty : pi a. set a.
val[infix "∈"] mem : pi a. a -> set a -> prop.
val[infix "∩"] inter : pi a. set a -> set a -> set a.
val[infix "∪"] union : pi a. set a -> set a -> set a.
val[infix "⊆"] subeq : pi a. set a -> set a -> prop.

rewrite
  forall a (x:a). ~ mem x empty.

rewrite
  forall a s1 s2 x.
    mem a x (union a s1 s2) <=> mem a x s1 || mem a x s2.

rewrite
  forall a s1 s2 x.
    mem a x (inter a s1 s2) <=> mem a x s1 && mem a x s2.

rewrite
  forall a s1 s2.
    subeq a s1 s2 <=> (forall x. mem a x s1 => mem a x s2).

# extensionality
rewrite
  forall a (s1 s2 : set a).
  s1 = s2 <=> (subeq s1 s2 && subeq s2 s1).


goal
  forall a (A B C : set a).
  (inter A B != empty && inter B C != empty && inter A C = empty) =>
  (exists (xab xbc:a). xab != xbc && mem xab B && mem xbc B).

