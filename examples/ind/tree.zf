# expect: unsat
include "nat.zf".

data tree := empty | node tree term tree.

def rev : tree -> tree where
  rev empty = empty;
  forall (L:tree).
    (forall (R:tree).
       (forall (X:term). ((rev (node L X R)) = (node (rev R) X (rev L))))).

def size : tree -> nat where
  size empty = z;
  forall (L:tree).
    (forall (R:tree).
       (forall (X:term).
          ((size (node L X R)) = (plus (s z) (plus (size L) (size R)))))).

def subtree : tree -> tree -> prop where
  forall T1 T2. subtree T1 T2 <=>
    ( T1 = empty ||
      T1 = T2 ||
      match T2 with
        | empty -> false
        | node L X R -> subtree T1 L || subtree T1 R
      end).

def mem : term -> tree -> prop where
  forall (X:term). ~ (mem X empty);
  forall (X:term).
    forall (Y:term).
    forall (L:tree).
    forall (R:tree).
      mem X (node L Y R) <=>
      (X = Y || mem X L || mem X R).
