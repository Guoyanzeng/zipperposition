# expect: unsat

include "list.zf".

# not trivial, because of the subproof of `a+b=b+a`

def sum : list -> nat where
  (sum nil) = z;
  forall (N:nat). (forall (L:list). ((sum (cons N L)) = (plus N (sum L)))).

lemma forall X. plus X z = X.
lemma forall X Y Z. plus X (plus Y Z) = plus (plus X Y) Z.
lemma forall X Y. plus X Y = plus Y X.
lemma forall L1 X L2. append (append L1 (cons X nil)) L2 = append L1 (cons X L2).
lemma forall L1 L2. sum (append L1 L2) = plus (sum L1) (sum L2).

goal forall (L:list). ((sum (rev L)) = (sum L)).

