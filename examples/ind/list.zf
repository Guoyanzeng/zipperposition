# expect: sat


include "nat.zf".

data list :=
  | nil
  | cons nat list.

val count : nat -> list -> nat.
val length : list -> nat.
val take : nat -> list -> list.
val drop : nat -> list -> list.
val append : list -> list -> list.
val rev : list -> list.
val mem : nat -> list -> prop.
val last : list -> nat.
val butlast : list -> list.

assert forall (X:nat). ((count X nil) = z).
assert
  forall (X:nat). (forall (L:list). ((count X (cons X L)) = (s (count X L)))).
assert
  forall (X:nat).
    (forall (Y:nat).
       (forall (L:list). ((X != Y) => ((count X (cons Y L)) = (count X L))))).

assert (length nil) = z.
assert
  forall (X:nat). (forall (L:list). ((length (cons X L)) = (s (length L)))).

assert forall (L:list). ((append nil L) = L).
assert
  forall (X:nat).
    (forall (L:list).
       (forall (L2:list). ((append (cons X L) L2) = (cons X (append L L2))))).

assert forall (L:list). ((take z L) = nil).
assert
  forall (N:nat).
    (forall (X:nat).
       (forall (L:list). ((take (s N) (cons X L)) = (cons X (take N L))))).

assert forall (L:list). ((drop z L) = L).
assert
  forall (N:nat).
    (forall (X:nat).
       (forall (L:list). ((drop (s N) (cons X L)) = (drop N L)))).

assert (rev nil) = nil.
assert
  forall (X:nat).
    (forall (L:list). ((rev (cons X L)) = (append (rev L) (cons X nil)))).

assert forall (X:nat). (~ (mem X nil)).
assert forall (X:nat) Y (L:list).
  mem X (cons Y L) <=> (X = Y || mem X L).
#assert forall (X:nat). (forall (L:list). (mem X (cons X L))).
#assert
#  forall (X:nat).
#    (forall (Y:nat). (forall (L:list). ((mem X L) => (mem X (cons Y L))))).

assert forall (X:nat). ((last (cons X nil)) = X).
assert
  forall (X:nat).
    (forall (L:list). ((L != nil) => ((last (cons X L)) = (last L)))).

assert forall (X:nat). ((butlast (cons X nil)) = nil).
assert
  forall (X:nat).
    (forall (L:list).
       ((L != nil) => ((butlast (cons X L)) = (cons X (butlast L))))).

