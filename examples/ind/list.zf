# expect: sat


include "nat.zf".

data list :=
  | nil
  | cons nat list.

def count : nat -> list -> nat where
  forall (X:nat). count X nil = z;
  forall (X:nat) (Y:nat) (L:list).
    count X (cons Y L) =
      (if X=Y
      then s (count X L)
      else count X L).

def length : list -> nat where
  (length nil) = z;
  forall (X:nat). (forall (L:list). ((length (cons X L)) = (s (length L)))).

def[infix "++"] append : list -> list -> list where
  forall (L:list). ((append nil L) = L);
  forall (X:nat).
    (forall (L:list).
       (forall (L2:list). ((append (cons X L) L2) = (cons X (append L L2))))).

def take : nat -> list -> list where
  forall (L:list). ((take z L) = nil);
  forall (N:nat).
    (forall (X:nat).
     (forall (L:list). ((take (s N) (cons X L)) = (cons X (take N L))))).

def drop : nat -> list -> list where
  forall (L:list). ((drop z L) = L);
  forall (N:nat).
   (forall (X:nat).
    (forall (L:list). ((drop (s N) (cons X L)) = (drop N L)))).

def rev : list -> list where
  (rev nil) = nil;
  forall (X:nat).
    (forall (L:list). ((rev (cons X L)) = (append (rev L) (cons X nil)))).

def mem : nat -> list -> prop where
  forall (X:nat). (~ (mem X nil));
  forall (X:nat) Y (L:list).
    mem X (cons Y L) <=> (X = Y || mem X L).
#assert forall (X:nat). (forall (L:list). (mem X (cons X L))).
#assert
#  forall (X:nat).
#    (forall (Y:nat). (forall (L:list). ((mem X L) => (mem X (cons Y L))))).


def last : list -> nat where
  forall (X:nat). ((last (cons X nil)) = X);
  forall (X:nat).
    forall (L:list). last (cons X L) = last L.

def butlast : list -> list where
  forall (X:nat). ((butlast (cons X nil)) = nil);
  forall (X:nat).
    forall (L:list).
      butlast (cons X L) = cons X (butlast L).

