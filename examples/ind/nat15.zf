val term : type.
data nat := z | s nat.
val plus : nat -> nat -> nat.
val minus : nat -> nat -> nat.
val less : nat -> nat -> prop.
val leq : nat -> nat -> prop.
assert forall (X:nat). ((plus z X) = X).
assert forall (X:nat). (forall (Y:nat). ((plus (s X) Y) = (s (plus X Y)))).
assert forall (X:nat). ((minus X z) = X).
assert forall (X:nat). (forall (Y:nat). ((minus (s X) (s Y)) = (minus X Y))).
assert forall (X:nat). (less z (s X)).
assert forall (X:nat). (forall (Y:nat). ((less (s X) (s Y)) <=> (less X Y))).
assert forall (X:nat). (leq z X).
assert forall (X:nat). (forall (Y:nat). ((leq (s X) (s Y)) <=> (leq X Y))).
val odd : nat -> prop.
val even : nat -> prop.
assert odd (s z).
assert forall (N:nat). ((even N) => (odd (s N))).
assert even z.
assert forall (N:nat). ((odd N) => (even (s N))).
goal forall (N:nat). (even (plus N N)).
