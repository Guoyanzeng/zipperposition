
% lists of naturals

include('nat.ax').

tff(ty_cons, type, cons : (nat * list) > list).
tff(ty_nil, type, nil : list).

tff(ty_count, type, count : (nat*list) > nat).
tff(ty_length, type, length : list > nat).
tff(ty_take, type, take : (nat * list) > list).
tff(ty_drop, type, drop : (nat * list) > list).
tff(ty_append, type, append : (list * list) > list).
tff(ty_rev, type, rev : list > list).
tff(ty_mem, type, mem : (nat * list) > $o).
tff(ty_last, type, last : list > nat).
tff(ty_butlast, type, butlast : list > list).

tff(count_1, axiom, ![X:nat]: count(X,nil) = z).
tff(count_2, axiom, ![X:nat, L:list]:
    count(X,cons(X,L)) = s(count(X,L))).
tff(count_3, axiom, ![X:nat, Y:nat, L:list]:
    (X !=Y => count(X,cons(Y,L)) = count(X,L))).

tff(length_1, axiom, length(nil) = z).
tff(length_2, axiom, ![X:nat, L:list]: length(cons(X,L)) = s(length(L))).

tff(append_1, axiom, ![L:list]: append(nil,L) = L).
tff(append_2, axiom, ![X:nat, L:list, L2:list]:
    append(cons(X,L), L2) = cons(X,append(L,L2))).

tff(take_1, axiom, ![L:list]: take(z, L) = nil).
tff(take_2, axiom, ![N:nat, X:nat, L:list]:
    take(s(N), cons(X,L)) = cons(X,take(N,L))).

tff(drop_1, axiom, ![L:list]: drop(z, L) = L).
tff(drop_2, axiom, ![N:nat, X:nat, L:list]:
    drop(s(N), cons(X,L)) = drop(N,L)).

tff(rev_1, axiom, rev(nil) = nil).
tff(rev_2, axiom, ![X:nat, L:list]: rev(cons(X,L)) = append(rev(L),cons(X,nil))).

tff(mem_1, axiom, ![X:nat]: ~ mem(X,nil)).
tff(mem_2, axiom, ![X:nat, L:list]: mem(X,cons(X,L))).
tff(mem_3, axiom, ![X:nat, Y:nat, L:list]: (mem(X,L) => mem(X, cons(Y,L)))).

tff(last_1, axiom, ![X:nat]: last(cons(X,nil)) = X).
tff(last_2, axiom, ![X:nat, L:list]:
    (L != nil => last(cons(X,L)) = last(L))).

tff(butlast_1, axiom, ![X:nat]: butlast(cons(X,nil)) = nil).
tff(butlast_2, axiom, ![X:nat, L:list]:
    (L != nil=> butlast(cons(X,L)) = cons(X,butlast(L)))).
