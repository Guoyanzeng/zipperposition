val term : type.
data tree := empty | node tree term tree.
val rev : tree -> tree.
data nat := z | s nat.
val size : tree -> nat.
val subtree : tree -> tree -> prop.
val mem : term -> tree -> prop.
assert (rev empty) = empty.
assert
  forall (L:tree).
    (forall (R:tree).
       (forall (X:term). ((rev (node L X R)) = (node (rev R) X (rev L))))).
assert (size empty) = z.
val plus : nat -> nat -> nat.
assert
  forall (L:tree).
    (forall (R:tree).
       (forall (X:term).
          ((size (node L X R)) = (plus (s z) (plus (size L) (size R)))))).
assert forall (T:tree). (subtree T T).
assert
  forall (T:tree).
    (forall (X:term).
       (forall (L:tree).
          (forall (R:tree). ((subtree T L) => (subtree T (node L X R)))))).
assert
  forall (T:tree).
    (forall (X:term).
       (forall (L:tree).
          (forall (R:tree). ((subtree T R) => (subtree T (node L X R)))))).
assert forall (X:term). (~ (mem X empty)).
assert
  forall (X:term).
    (forall (Y:term).
       (forall (L:tree).
          (forall (R:tree).
             (((mem X R) || (mem X L)) => (mem X (node L Y R)))))).
assert
  forall (X:term). (forall (L:tree). (forall (R:tree). (mem X (node L X R)))).
val plus : nat -> nat -> nat.
val minus : nat -> nat -> nat.
val less : nat -> nat -> prop.
val leq : nat -> nat -> prop.
assert forall (X:nat). ((plus z X) = X).
assert forall (X:nat). (forall (Y:nat). ((plus (s X) Y) = (s (plus X Y)))).
assert forall (X:nat). ((minus X z) = X).
assert forall (X:nat). (forall (Y:nat). ((minus (s X) (s Y)) = (minus X Y))).
assert forall (X:nat). (less z (s X)).
assert forall (X:nat). (forall (Y:nat). ((less (s X) (s Y)) <=> (less X Y))).
assert forall (X:nat). (leq z X).
assert forall (X:nat). (forall (Y:nat). ((leq (s X) (s Y)) <=> (leq X Y))).
val lt : nat -> nat -> prop.
goal
  forall (L:tree).
    (forall (R:tree). (forall (X:term). (lt (size L) (size (node L X R))))).
