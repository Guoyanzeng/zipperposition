include "separation.zf".

val default_value : pi a. a.

# Definitions from list.gh

data list a := nil | cons a (list a).

def head : pi a. list a -> a where
  head nil = default_value;
  forall hd tl. head (cons hd tl) = hd.

def tail : pi a. list a -> list a where
  tail nil = nil;
  forall hd tl. tail (cons hd tl) = tl.

def length : pi a. list a -> int where
  length nil = 0;
  forall hd tl. length (cons hd tl) = 1 + length tl.

def[infix "++"] append : pi a. list a -> list a -> list a where
  forall l. append nil l = l;
  forall hd tl l. append (cons hd tl) l = cons hd (append tl l).

def reverse : pi a. list a -> list a where
  reverse nil = nil;
  forall hd tl. reverse (cons hd tl) = append (reverse tl) (cons hd nil).

def nth : pi a. int -> list a -> a where
  forall n. nth n nil = default_value;
  forall n hd tl. nth n (cons hd tl) = (if n = 0 then hd else nth (n - 1) tl).

def[infix "∈"] mem : pi a. a -> list a -> prop where
  forall x. mem x nil = false;
  forall x hd tl. mem x (cons hd tl) = (x = hd || mem x tl).

def distinct : pi a. list a -> prop where
  distinct nil = true;
  forall hd tl. distinct (cons hd tl) = (~mem hd tl && distinct tl).

def take : pi a. int -> list a -> list a where
  forall n. take n nil = nil;
  forall n hd tl. take n (cons hd tl) =
     (if n = 0 then nil else cons hd (take (n - 1) tl)).

def drop : pi a. int -> list a -> list a where
  forall n. drop n nil = nil;
  forall n hd tl. drop n (cons hd tl) =
     (if n = 0 then cons hd tl else drop (n - 1) tl).

def remove : pi a. a -> list a -> list a where
  forall x. remove x nil = nil;
  forall x hd tl. remove x (cons hd tl) =
          (if hd = x then tl else cons hd (remove x tl)).

def remove_nth : pi a. int -> list a -> list a where
  forall n. remove_nth n nil = nil;
  forall n hd tl. remove_nth n (cons hd tl) =
           (if n = 0 then tl else cons hd (remove_nth (n - 1) tl)).

def index_of : pi a. a -> list a -> int where
  forall x. index_of x nil = 0;
  forall x hd tl. index_of x (cons hd tl) =
       (if hd = x then 0 else 1 + index_of x tl).

def foreach : pi a b. list a -> (a -> heap b -> prop) -> heap b -> prop where
   forall a b p (h : heap b). foreach (nil a) p h = true;
   forall a b (hd : a) tl p (h : heap b).
      foreach (cons hd tl) p h =
        (exists h1 h2.
          h = heap_merge h1 h2 &&
          disjoint h1 h2 &&
          p hd h1 &&
          foreach tl p h2).

def map : pi a b. (a -> b) -> list a -> list b where
   forall f. map f nil = nil;
   forall f hd tl. map f (cons hd tl) = cons (f hd) (map f tl).

# "list_forall" and "list_exists" are called "forall" and "exists" respectively in VeriFast but these are keywords in zf.

def list_forall : pi a. list a -> (a -> prop) -> prop where
   forall p. list_forall nil p = true;
   forall hd tl p. list_forall (cons hd tl) p = (p hd && list_forall tl p).

def list_exists : pi a. list a -> (a -> prop) -> prop where
   forall p. list_exists nil p = false;
   forall hd tl p. list_exists (cons hd tl) p = (p hd || list_exists tl p).

def update : pi a. int -> a -> list a -> list a where
   forall i y. update i y nil = nil;
   forall i y hd tl. update i y (cons hd tl) =
      (if i = 0 then cons y tl else cons hd (update (i - 1) y tl)).

def all_eq : pi a. list a -> a -> prop where
   forall x. all_eq nil x = true;
   forall hd tl x. all_eq (cons hd tl) x = (hd = x && all_eq tl x).

def count : pi a. list a -> (a -> prop) -> int where
   forall p. count nil p = 0;
   forall hd tl p. count (cons hd tl) p = count tl p + (if p hd then 1 else 0).

# Definitions from listex.gh

def max : int -> list int -> int where
   forall x. max x nil = x;
   forall x hd tl. max x (cons hd tl) = (if x < hd then max hd tl else max x tl).

def fold_left : pi a b. a -> (a -> b -> a) -> list b -> a where
   forall acc f. fold_left acc f nil = acc;
   forall acc f hd tl. fold_left acc f (cons hd tl) = fold_left (f acc hd) f tl.

def remove_all : pi a. list a -> list a -> list a where
   forall l. remove_all nil l = l;
   forall hd tl l. remove_all (cons hd tl) l = remove hd (remove_all tl l).

def filter : pi a. (a -> prop) -> list a -> list a where
   forall f. filter f nil = nil;
   forall f hd tl. filter f (cons hd tl) =
      (if f hd then cons hd (filter f tl) else filter f tl).

def contains : pi a. list a -> a -> prop where
  forall l x. contains l x = mem x l.

# Source file uses partial applications of contains that seem not
# supported by Zipperpostion. We eta-expand instead.

def[infix "⊆"] subset : pi a. list a -> list a -> prop where
  forall l1 l2. subset l1 l2 = list_forall l1 (fun x. contains l2 x).

def[infix "∩"] intersection : pi a. list a -> list a -> list a where
  forall l1 l2. intersection l1 l2 = filter (fun x. contains l1 x) l2.

def foreachp : pi a b. list a -> (a -> heap b -> prop) -> heap b -> prop where
  forall a b (l : list a) (p : a -> heap b -> prop) h.
     foreachp l p h =
       (if l = nil then
          h = emp
        else
          (exists h1 h2.
            h = heap_merge h1 h2 &&
            disjoint h1 h2 &&
            p (head l) h1 &&
            foreachp (tail l) p h2)).

