| length_nonnegative         | forall a (l : list a). length l >= 0.                                                                                                                                                                                  |
| append_nil                 | forall a (l : list a). append l nil = l.                                                                                                                                                                               |
| append_assoc               | forall a (l1 l2 l3 : list a). append (append l1 l2) l3 = append l1 (append l2 l3).                                                                                                                                     |
| length_append              | forall a (l1 l2 : list a). length (append l1 l2) = length l1 + length l2.                                                                                                                                              |
| nth_append                 | forall a (l1 l2 : list a) i. 0 <= i && i < length(l1) => nth i l1 = nth i (append l1 l2).                                                                                                                              |
| nth_append_r               | forall a (l1 l2 : list a) i. 0 <= i && i < length(l2) => nth i l2 = nth (length l1 + i) (append l1 l2).                                                                                                                |
| reverse_append             | forall a (l1 l2 : list a). reverse (append l1 l2) = append (reverse l2) (reverse l1).                                                                                                                                  |
| reverse_reverse            | forall a (l : list a). reverse (reverse l) = l.                                                                                                                                                                        |
| mem_nth                    | forall a n (l : list a). (0 <= n && n < length l) => (mem (nth n l) l = true).                                                                                                                                         |
| mem_append                 | forall a (x : a) (l1 l2 : list a). mem x (append l1 l2) = (mem x l1 OR mem x l2).                                                                                                                                      |
| take_0                     | forall a (l : list a). take 0 l = nil.                                                                                                                                                                                 |
| take_length                | forall a (l : list a). take (length l) l = l.                                                                                                                                                                          |
| length_take                | forall a n (l : list a). 0 <= n && n <= length l => length (take n l) = n.                                                                                                                                             |
| nth_take                   | forall a i n (l : list a). 0 <= i && i < n && n <= length l => nth i (take n l) = nth i l.                                                                                                                             |
| drop_0                     | forall a (l : list a). drop 0 l = l.                                                                                                                                                                                   |
| drop_n_plus_one            | forall a n (l : list a). 0 <= n && n < length l => drop n l = cons (nth n l) (drop (n + 1) l).                                                                                                                         |
| drop_length                | forall a (l : list a). drop (length l) l = nil.                                                                                                                                                                        |
| length_drop                | forall a n (l : list a). 0 <= n && n <= length l => length (drop n l) = length l - n.                                                                                                                                  |
| drop_n_take_n              | forall a n (l : list a). drop n (take n l) = nil.                                                                                                                                                                      |
| length_remove              | forall a (x : a) (l : list a). length (remove x l) = (if mem x l then length l - 1 else length l).                                                                                                                     |
| drop_take_remove_nth       | forall a (l : list a) n. 0 <= n && n < length l => append (take n l) (tail (drop n l)) = remove_nth n l.                                                                                                               |
| append_take_drop_n         | forall a (l : list a) n. 0 <= n && n < length l => append (take n l) (drop n l) = l.                                                                                                                                   |
| mem_index_of               | forall a (x : a) (l : list a). mem x l = true => (0 <= index_of x l && index_of x l < length l).                                                                                                                       |
| foreach_remove             | forall a b (x : a) (l : list a) p (h : heap b). functional_heap h && foreach l p h && mem x l = true => (exists h1 h2. h = heap_merge h1 h2 && disjoint h1 h2 && foreach (remove x l) p h1 && p x h2).                   |
| foreach_unremove           | forall a b (x : a) (l : list a) p (h1 h2 : heap b). functional_heap (heap_merge h1 h2) && disjoint h1 h2 && foreach (remove x l) p h1 && mem x l = true && p x h2 => foreach l p (heap_merge h1 h2).                   |
| foreach_append             | forall a b (l1 l2 : list a) p (h1 h2 : heap b). functional_heap (heap_merge h1 h2) && disjoint h1 h2 && foreach l1 p h1 && foreach l2 p h2 => foreach (append l1 l2) p (heap_merge h1 h2).                             |
| nth_update                 | forall a i j (y : a) (l : list a). 0 <= i && i < length l && 0 <= j && j < length l => nth i (update j y l) = (if i = j then y else nth i l).                                                                          |
| length_update              | forall a i (y : a) (l : list a). length (update i y l) = length l.                                                                                                                                                     |
| all_eq_nth                 | forall a (l : list a) (x : a) i. all_eq l x && 0 <= i && i < length l => nth i l = x.                                                                                                                                  |
| count_nonnegative          | forall a (l : list a) p. 0 <= count l p.                                                                                                                                                                               |
| count_remove               | forall a (l : list a) p (x : a). mem x l = true => count (remove x l) p = count l p - (if p x then 1 else 0).                                                                                                          |
| count_zero_mem             | forall a (l : list a) p (x : a). count l p = 0 && mem x l = true => ~ p x.                                                                                                                                             |
| count_non_zero             | forall a (l : list a) p. count l p != 0 => (exists result. mem result l && p result).                                                                                                                                  |
| count_append               | forall a (l1 l2 : list a) p. count (append l1 l2) p = count l1 p + count l2 p.                                                                                                                                         |
| take_plus_one              | forall a i (l : list a). 0 <= i && i < length l => take (i + 1) l = append (take i l) (cons (nth i l) nil).                                                                                                            |
| take_append                | forall a n (l1 l2 : list a). 0 <= n && n < length l1 => take n (append l1 l2) = take n l1.                                                                                                                             |
| distinct_mem_nth_take      | forall a (l : list a) i. distinct l = true && 0 <= i && i < length l => ~ mem (nth i l) (take i l).                                                                                                                    |
| nth_drop                   | forall a n k (l : list a). 0 <= n && 0 <= k && n + k < length l => nth n (drop k l) = nth (n + k) l.                                                                                                                   |
| neq_mem_remove             | forall a (x y : a) (l : list a). x != y => mem x (remove y l) = mem x l.                                                                                                                                               |
| mem_remove_mem             | forall a (x y : a) (l : list a). mem x (remove y l) = true => mem x l = true.                                                                                                                                          |
| remove_commutes            | forall a (l : list a) (x y : a). remove x (remove y l) = remove y (remove x l).                                                                                                                                        |
| distinct_mem_remove        | forall a (x : a) (l : list a). distinct l = true => ~ mem x (remove x l).                                                                                                                                              |
| distinct_remove            | forall a (x : a) (l : list a). distinct l = true => distinct (remove x l) = true.                                                                                                                                      |
| mem_nth_index_of           | forall a (x : a) (l : list a). mem x l = true => nth (index_of x l) l = x.                                                                                                                                             |
| index_of_append_l          | forall a (x : a) (l1 l2 : list a). mem x l1 = true => index_of x (append l1 l2) = index_of x l1.                                                                                                                       |
| index_of_append_r          | forall a (x : a) (l1 l2 : list a). ~ mem x l1 => index_of x (append l1 l2) = length l1 + index_of x l2.                                                                                                                |
| nth_index_of               | forall a i (l : list a). distinct l = true && 0 <= i && i < length l => index_of (nth i l) l = i.                                                                                                                      |
| map_append                 | forall a b f (l1 l2 : list a). map f (append l1 l2) = append (map f l1) (map f l2).                                                                                                                                    |
| mem_map                    | forall a b (x : a) (l : list a) f. mem x l = true => mem (f x) (map f l) = true.                                                                                                                                       |
| forall_append              | forall a (l1 l2 : list a) p. list_forall (append l1 l2) p = (list_forall l1 p && list_forall l2 p).                                                                                                                    |
| forall_mem                 | forall a (x : a) (l : list a) p. list_forall l p = true && mem x l = true => p x = true.                                                                                                                               |
| forall_drop                | forall a (l : list a) p i. list_forall l p = true => list_forall (drop i l) p = true.                                                                                                                                  |
| mem_max                    | forall x l. mem (max x l) (cons x l) = true.                                                                                                                                                                           |
| fold_left_append           | forall a b (acc : a) f (l1 l2 : list b). fold_left acc f (append l1 l2) = fold_left (fold_left acc f l1) f l2.                                                                                                         |
| append_drop_take           | forall a (l : list a) i. 0 <= i && i < length l => append (take i l) (drop i l) = l.                                                                                                                                   |
| drop_append                | forall a n (l1 l2 : list a). length l1 <= n => drop n (append l1 l2) = drop (n - length l1) l2.                                                                                                                        |
| remove_all_nil             | forall a (l : list a). remove_all l nil = nil.                                                                                                                                                                         |
| remove_all_cons            | forall a (l1 : list a) (y : a) (l2 : list a). ~ mem y l1 => remove_all l1 (cons y l2) = cons y (remove_all l1 l2).                                                                                                     |
| mem_remove_all             | forall a (x : a) (l1 l2 : list a). mem x l2 = true && ~ mem x l1 => mem x (remove_all l1 l2) = true.                                                                                                                   |
| remove_remove_all          | forall a (x : a) (l1 l2 : list a). remove x (remove_all l1 l2) = remove_all l1 (remove x l2).                                                                                                                          |
| subset_intersection        | forall a (l1 l2 : list a). subset l1 l2 = true => intersection l2 l1 = l1.                                                                                                                                             |
| intersection_nil           | forall a (l : list a). intersection nil l = nil.                                                                                                                                                                       |
| subset_intersection_subset | forall a (l1 l2 : list a). subset l1 l2 = true => subset l1 (intersection l1 l2) = true.                                                                                                                               |
| mem_intersection           | forall a (x : a) (l1 l2 : list a). mem x (intersection l1 l2) = (mem x l1 && mem x l2).                                                                                                                                |
| subset_refl                | forall a (l : list a). subset l l = true.                                                                                                                                                                              |
| mem_subset                 | forall a (x : a) (l1 l2 : list a). mem x l1 = true && subset l1 l2 => mem x l2 = true.                                                                                                                                 |
| subset_cons                | forall a (x : a) (l : list a). subset l (cons x l) = true.                                                                                                                                                             |
| subset_trans               | forall a (l1 l2 l3 : list a). subset l1 l2 = true && subset l2 l3 = true => subset l1 l3 = true.                                                                                                                       |
| subset_remove_all          | forall a (l1 l2 : list a). subset (remove_all l1 l2) l2 = true.                                                                                                                                                        |
| not_mem_intersection       | forall a (x : a) (l1 l2 : list a). ~ mem x l2 => intersection l1 l2 = intersection (remove x l1) l2.                                                                                                                   |
| remove_intersection        | forall a (x : a) (l1 l2 : list a). ~ mem x (remove x (intersection l1 l2)) && ~ mem x (remove x l1) => remove x (intersection l1 l2) = intersection (remove x l1) l2.                                                  |
| foreach_remove_nth         | forall a b n (l : list a) p (h : heap b). functional_heap h && foreach l p h && 0 <= n && n < length l => (exists h1 h2. h = heap_merge h1 h2 && disjoint h1 h2 && foreach (remove_nth n l) p h1 && p (nth n l) h2).   |
| foreach_unremove_nth       | forall a b n (l : list a) p (h1 h2 : heap b). functional_heap (heap_merge h1 h2) && disjoint h1 h2 && 0 <= n && n < length l && foreach (remove_nth n l) p h1 && p (nth n l) h2 => foreach l p (heap_merge h1 h2).     |
| foreachp_remove            | forall a b (x : a) (l : list a) p (h : heap b). functional_heap h && foreachp l p h && mem x l = true => (exists h1 h2. h = heap_merge h1 h2 && disjoint h1 h2 && foreachp (remove x l) p h1 && p x h2).               |
| foreachp_unremove          | forall a b (x : a) (l : list a) p (h1 h2 : heap b). functional_heap (heap_merge h1 h2) && disjoint h1 h2 && foreachp (remove x l) p h1 && mem x l = true && p x h2 => foreachp l p (heap_merge h1 h2).                 |
| foreachp_remove_nth        | forall a b n (l : list a) p (h : heap b). functional_heap h && foreachp l p h && 0 <= n && n < length l => (exists h1 h2. h = heap_merge h1 h2 && disjoint h1 h2 && foreachp (remove_nth n l) p h1 && p (nth n l) h2). |
| foreachp_unremove_nth      | forall a b (l : list a) n p (h1 h2 : heap b). functional_heap (heap_merge h1 h2) && disjoint h1 h2 && foreachp (remove_nth n l) p h1 && 0 <= n && n < length l && p (nth n l) h2 => foreachp l p (heap_merge h1 h2).   |
