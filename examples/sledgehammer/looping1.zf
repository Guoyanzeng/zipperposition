# TIMEFORMAT='%3R'; { time (exec 2>&1; /home/simon/bin/zipperposition -i zf -o tstp -nc --timeout 30 /home/simon/.isabelle/prob_zipperposition_1 ) ; }
#  This file was generated by Isabelle (most likely Sledgehammer)
#  2016-06-10 11:47:38.915
# vim:ft=zf
# expect: unsat

# NOTE: rewriting loops :(

val i : type.
val bool_ : type.
val num_ : type.
val nat_ : type.
val one_one_nat_ : nat_.
val plus_plus_nat_ : nat_ -> nat_ -> nat_.
val plus_plus_num_ : num_ -> num_ -> num_.
val suc_ : nat_ -> nat_.
val bitM_ : num_ -> num_.
val bit0_ : num_ -> num_.
val bit1_ : num_ -> num_.
val one_ : num_.
val numeral_numeral_nat_ : num_ -> nat_.
val pred_numeral_ : num_ -> nat_.
val fFalse_ : bool_.
val fTrue_ : bool_.
val pp_ : bool_ -> prop.
val p_ : nat_ -> prop.
rewrite forall (M_ : num_) (N_ : num_). ((bit1_ M_) = (bit0_ N_)) <=> false. # simpN
rewrite forall (M_ : num_) (N_ : num_). ((bit0_ M_) = (bit1_ N_)) <=> false. # simpN
rewrite forall (M_ : num_). ((bit1_ M_) = one_) <=> false. # simpN
rewrite forall (N_ : num_). (one_ = (bit1_ N_)) <=> false. # simpN
rewrite forall (M_ : num_). ((bit0_ M_) = one_) <=> false. # simpN
rewrite forall (N_ : num_). (one_ = (bit0_ N_)) <=> false. # simpN
assert forall (N_ : num_). (numeral_numeral_nat_ (bit1_ N_)) = (suc_ (numeral_numeral_nat_ (bit0_ N_))). # no role
assert forall (Y_ : num_). (~ (Y_ = one_)) => ((forall (X2_ : num_). ~ (Y_ = (bit0_ X2_))) => (~ (forall (X3_ : num_). ~ (Y_ = (bit1_ X3_))))). # not a rewrite rule
rewrite forall (X3_2 : num_) (Y3_ : num_). ((bit1_ X3_2) = (bit1_ Y3_)) <=> (X3_2 = Y3_). # simpN
rewrite forall (M_ : num_) (N_ : num_). ((bit1_ M_) = (bit1_ N_)) <=> (M_ = N_). # simpN
rewrite forall (X2_2 : num_) (Y2_ : num_). ((bit0_ X2_2) = (bit0_ Y2_)) <=> (X2_2 = Y2_). # simpN
rewrite forall (M_ : num_) (N_ : num_). ((bit0_ M_) = (bit0_ N_)) <=> (M_ = N_). # simpN
rewrite forall (M_ : num_) (N_ : num_). ((numeral_numeral_nat_ M_) = (numeral_numeral_nat_ N_)) <=> (M_ = N_). # simpN
assert forall (X2_2 : num_). ~ (one_ = (bit0_ X2_2)). # no role
assert forall (X3_2 : num_). ~ (one_ = (bit1_ X3_2)). # no role
assert forall (X2_2 : num_) (X3_2 : num_). ~ ((bit0_ X2_2) = (bit1_ X3_2)). # no role
rewrite forall (Nat_ : nat_) (Nat_2 : nat_). ((suc_ Nat_) = (suc_ Nat_2)) <=> (Nat_ = Nat_2). # simpN
rewrite forall (X2_2 : nat_) (Y2_ : nat_). ((suc_ X2_2) = (suc_ Y2_)) <=> (X2_2 = Y2_). # simpN
rewrite (suc_ one_one_nat_) = (numeral_numeral_nat_ (bit0_ one_)). # simpN
rewrite forall (K_ : num_). (pred_numeral_ (bit1_ K_)) = (numeral_numeral_nat_ (bit0_ K_)). # simpN
rewrite forall (N_ : nat_). (plus_plus_nat_ N_ (numeral_numeral_nat_ (bit0_ one_))) = (suc_ (suc_ N_)). # simpN
rewrite forall (V_ : num_) (W_ : num_) (Z_ : nat_). (plus_plus_nat_ (numeral_numeral_nat_ V_) (plus_plus_nat_ (numeral_numeral_nat_ W_) Z_)) = (plus_plus_nat_ (numeral_numeral_nat_ (plus_plus_num_ V_ W_)) Z_). # simpN
rewrite forall (M_ : num_) (N_ : num_). (plus_plus_nat_ (numeral_numeral_nat_ M_) (numeral_numeral_nat_ N_)) = (numeral_numeral_nat_ (plus_plus_num_ M_ N_)). # simpN
rewrite forall (M_ : nat_) (N_ : nat_). (plus_plus_nat_ M_ (suc_ N_)) = (suc_ (plus_plus_nat_ M_ N_)). # simpN
rewrite forall (N_ : num_). ((numeral_numeral_nat_ N_) = one_one_nat_) <=> (N_ = one_). # simpN
rewrite forall (N_ : num_). (one_one_nat_ = (numeral_numeral_nat_ N_)) <=> (one_ = N_). # simpN
rewrite forall (N_ : nat_) (K_ : num_). ((suc_ N_) = (numeral_numeral_nat_ K_)) <=> (N_ = (pred_numeral_ K_)). # simpN
rewrite forall (K_ : num_) (N_ : nat_). ((numeral_numeral_nat_ K_) = (suc_ N_)) <=> ((pred_numeral_ K_) = N_). # simpN
rewrite forall (N_ : num_). (plus_plus_nat_ (numeral_numeral_nat_ N_) one_one_nat_) = (numeral_numeral_nat_ (plus_plus_num_ N_ one_)). # simpN
rewrite forall (N_ : num_). (plus_plus_nat_ one_one_nat_ (numeral_numeral_nat_ N_)) = (numeral_numeral_nat_ (plus_plus_num_ one_ N_)). # simpN
rewrite (plus_plus_nat_ one_one_nat_ one_one_nat_) = (numeral_numeral_nat_ (bit0_ one_)). # simpN
rewrite forall (N_ : nat_). (plus_plus_nat_ (numeral_numeral_nat_ (bit0_ one_)) N_) = (suc_ (suc_ N_)). # simpN
assert forall (X_ : num_). (plus_plus_nat_ one_one_nat_ (numeral_numeral_nat_ X_)) = (plus_plus_nat_ (numeral_numeral_nat_ X_) one_one_nat_). # no role
assert forall (M_ : nat_) (K_ : nat_) (N_ : nat_). ((plus_plus_nat_ M_ K_) = (plus_plus_nat_ N_ K_)) <=> (M_ = N_). # no role
assert forall (K_ : nat_) (M_ : nat_) (N_ : nat_). ((plus_plus_nat_ K_ M_) = (plus_plus_nat_ K_ N_)) <=> (M_ = N_). # no role
assert forall (N_ : nat_). (suc_ N_) = (plus_plus_nat_ one_one_nat_ N_). # no role
assert forall (N_ : nat_). (suc_ N_) = (plus_plus_nat_ N_ one_one_nat_). # no role
assert forall (M_ : nat_) (N_ : nat_). (plus_plus_nat_ (suc_ M_) N_) = (plus_plus_nat_ M_ (suc_ N_)). # no role
rewrite forall (M_ : nat_) (N_ : nat_). (plus_plus_nat_ (suc_ M_) N_) = (suc_ (plus_plus_nat_ M_ N_)). # rec defN
rewrite forall (N_ : num_). (numeral_numeral_nat_ (bit1_ N_)) = (plus_plus_nat_ (plus_plus_nat_ (numeral_numeral_nat_ N_) (numeral_numeral_nat_ N_)) one_one_nat_). # rec defN
assert (plus_plus_nat_ one_one_nat_ one_one_nat_) = (numeral_numeral_nat_ (bit0_ one_)). # no role
rewrite forall (N_ : num_). (numeral_numeral_nat_ (bit0_ N_)) = (plus_plus_nat_ (numeral_numeral_nat_ N_) (numeral_numeral_nat_ N_)). # rec defN
rewrite (numeral_numeral_nat_ one_) = one_one_nat_. # non rec defN
assert (numeral_numeral_nat_ one_) = one_one_nat_. # no role
assert forall (K_ : num_). (numeral_numeral_nat_ K_) = (suc_ (pred_numeral_ K_)). # no role
assert forall (X_ : nat_) (Y_ : nat_). ((suc_ X_) = (suc_ Y_)) => (X_ = Y_). # not a rewrite rule
assert forall (N_ : nat_). ~ (N_ = (suc_ N_)). # no role
assert forall (N_ : nat_). (suc_ (suc_ (suc_ N_))) = (plus_plus_nat_ (numeral_numeral_nat_ (bit1_ one_)) N_). # no role
rewrite forall (B_ : nat_) (A_ : nat_) (C_ : nat_). ((plus_plus_nat_ B_ A_) = (plus_plus_nat_ C_ A_)) <=> (B_ = C_). # simpN
rewrite forall (A_ : nat_) (B_ : nat_) (C_ : nat_). ((plus_plus_nat_ A_ B_) = (plus_plus_nat_ A_ C_)) <=> (B_ = C_). # simpN
rewrite forall (K_ : num_). (pred_numeral_ (bit0_ K_)) = (numeral_numeral_nat_ (bitM_ K_)). # simpN
rewrite forall (M_ : num_) (N_ : num_). (plus_plus_num_ (bit0_ M_) (bit0_ N_)) = (bit0_ (plus_plus_num_ M_ N_)). # simpN
rewrite (plus_plus_num_ one_ one_) = (bit0_ one_). # simpN
rewrite forall (M_ : num_) (N_ : num_). (plus_plus_num_ (bit0_ M_) (bit1_ N_)) = (bit1_ (plus_plus_num_ M_ N_)). # simpN
rewrite forall (M_ : num_) (N_ : num_). (plus_plus_num_ (bit1_ M_) (bit0_ N_)) = (bit1_ (plus_plus_num_ M_ N_)). # simpN
rewrite forall (N_ : num_). (suc_ (numeral_numeral_nat_ N_)) = (numeral_numeral_nat_ (plus_plus_num_ N_ one_)). # simpN
rewrite forall (N_ : num_). (plus_plus_num_ one_ (bit0_ N_)) = (bit1_ N_). # simpN
rewrite forall (N_ : num_). (plus_plus_num_ one_ (bit1_ N_)) = (bit0_ (plus_plus_num_ N_ one_)). # simpN
rewrite forall (M_ : num_). (plus_plus_num_ (bit0_ M_) one_) = (bit1_ M_). # simpN
rewrite forall (M_ : num_). (plus_plus_num_ (bit1_ M_) one_) = (bit0_ (plus_plus_num_ M_ one_)). # simpN
rewrite forall (M_ : num_) (N_ : num_). (plus_plus_num_ (bit1_ M_) (bit1_ N_)) = (bit0_ (plus_plus_num_ (plus_plus_num_ M_ N_) one_)). # simpN
assert forall (N_ : num_). (plus_plus_num_ one_ N_) = (plus_plus_num_ N_ one_). # no role
assert forall (N_ : num_). (plus_plus_num_ one_ (bitM_ N_)) = (bit0_ N_). # no role
assert forall (N_ : num_). (plus_plus_num_ (bitM_ N_) one_) = (bit0_ N_). # no role
rewrite (bitM_ one_) = one_. # non rec defN
assert forall (A_ : nat_) (B_ : nat_) (C_ : nat_). (plus_plus_nat_ (plus_plus_nat_ A_ B_) C_) = (plus_plus_nat_ A_ (plus_plus_nat_ B_ C_)). # no role
assert forall (I_ : nat_) (J_ : nat_) (K_ : nat_) (L_ : nat_). ((I_ = J_) && (K_ = L_)) => ((plus_plus_nat_ I_ K_) = (plus_plus_nat_ J_ L_)). # not a rewrite rule
assert forall (A_ : nat_) (B_ : nat_) (C_ : nat_). (plus_plus_nat_ (plus_plus_nat_ A_ B_) C_) = (plus_plus_nat_ A_ (plus_plus_nat_ B_ C_)). # no role
assert forall (A_ : nat_) (B_ : nat_). (plus_plus_nat_ A_ B_) = (plus_plus_nat_ B_ A_). # no role
assert forall (B_ : nat_) (A_ : nat_) (C_ : nat_). (plus_plus_nat_ B_ (plus_plus_nat_ A_ C_)) = (plus_plus_nat_ A_ (plus_plus_nat_ B_ C_)). # no role
assert forall (A_ : nat_) (B_ : nat_) (C_ : nat_). ((plus_plus_nat_ A_ B_) = (plus_plus_nat_ A_ C_)) => (B_ = C_). # not a rewrite rule
assert forall (B_ : nat_) (A_ : nat_) (C_ : nat_). ((plus_plus_nat_ B_ A_) = (plus_plus_nat_ C_ A_)) => (B_ = C_). # not a rewrite rule
assert forall (X_ : nat_). (one_one_nat_ = X_) <=> (X_ = one_one_nat_). # no role
rewrite forall (N_ : num_). (bitM_ (bit0_ N_)) = (bit1_ (bitM_ N_)). # rec defN
rewrite forall (N_ : num_). (bitM_ (bit1_ N_)) = (bit1_ (bit0_ N_)). # non rec defN
assert forall (V_ : num_) (N_ : nat_). (suc_ (plus_plus_nat_ (numeral_numeral_nat_ V_) N_)) = (plus_plus_nat_ (numeral_numeral_nat_ (plus_plus_num_ V_ one_)) N_). # no role
assert forall (N_ : num_). (numeral_numeral_nat_ (bit0_ N_)) = (suc_ (numeral_numeral_nat_ (bitM_ N_))). # no role
assert pp_ fTrue_. # no role
assert ~ (pp_ fFalse_). # no role
assert p_ (numeral_numeral_nat_ (bit0_ (bit1_ (bit1_ (bit1_ one_))))). # no role
goal p_ (suc_ (suc_ (suc_ (numeral_numeral_nat_ (bit1_ (bit1_ (bit0_ (bit1_ one_)))))))).
