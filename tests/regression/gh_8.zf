
# issue #8

# expect: unsat

data list a := nil | cons a (list a).

def[infix "âˆˆ"] mem : pi a. a -> list a -> prop where
  forall x. mem x nil = false;
  forall x hd tl. mem x (cons hd tl) = (x = hd || mem x tl).

def count : pi a. list a -> (a -> prop) -> int where
   forall p. count nil p = 0;
   forall hd tl p. count (cons hd tl) p = count tl p + (if p hd then 1 else 0).

goal forall a (l : list a) p (x : a). count l p != 0 => (exists result. mem result l && p result).
