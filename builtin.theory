
% Builtin theories and lemma

% generic patterns

eq_1(f,g) is f = g.
neq_1(f,g) is f != g.
apply_1(f, g) is f(g).
apply_2(f, g, h) is f(g, h).
universal_1(f) is f(X).

% ac

associative(f) is f(X,f(Y,Z)) = f(f(X,Y), Z).
commutative(f) is f(X,Y) = f(Y,X).

theory ac(f) is
  associative(f) and
  commutative(f).

% functional relations

functional(p) is ~p(X,Y,Z) | ~p(X,Y,Z2) | Z=Z2.
total(p, f) is p(X,Y,f(X,Y)).
total_function(p, f) is p(X,Y,Z) <=> Z = f(X,Y).

lemma total_function(p,f) if functional(p) and total(p, f).

% monoid

left_identity(mult, e) is mult(e, X) = X.
right_identity(mult, e) is mult(X, e) = X.

theory monoid(mult, e) is
  left_identity(mult, e) and
  right_identity(mult, e) and
  associative(mult).

% group

left_inverse(mult, e, inverse) is mult(inverse(X), X) = e.
right_inverse(mult, e, inverse) is mult(X, inverse(X)) = e.

theory group(mult, e, inverse) is
  monoid(mult, e) and
  left_inverse(mult, e, inverse) and
  right_inverse(mult, e, inverse).

theory abelian_group(mult, e, inverse) is
  group(mult, e, inverse) and
  commutative(mult).

% basic set

subset_definition(member, subset) is ~member(X,Y) | ~subset(Y,Z) | member(X,Z).
subset_element(member, subset, sk) is subset(X,Y) | member(sk, X) | ~member(sk, Y).
set_equal(subset) is ~subset(X,Y) | ~subset(Y,X) | X=Y.
set_equal1(subset) is subset(X,Y) | X != Y.
set_equal2(subset) is subset(Y,X) | X != Y.

theory set(member, subset) is
  subset_definition(member, subset) and
  subset_element(member, subset, sk) and
  set_equal(subset) and
  set_equal1(subset) and
  set_equal2(subset).

% subgroup theory

subgroup_inverse(in_subgroup, inverse) is ~in_subgroup(X) | in_subgroup(inverse(X)).
subgroup_mult(in_subgroup, mult) is ~in_subgroup(X) | ~in_subgroup(Y) |
                                    in_subgroup(mult(X,Y)).

theory subgroup(mult, e, inverse, in_subgroup) is
  group(mult, e, inverse) and
  subgroup_inverse(in_subgroup, inverse) and
  subgroup_mult(in_subgroup, mult).

lemma apply_1(in_subgroup, e) if
  subgroup(mult, e, inverse, in_subgroup).

% ring

left_distributive(mult, sum) is mult(X, sum(Y,Z)) = sum(mult(X,Y), mult(X,Z)).
right_distributive(mult, sum) is mult(sum(X,Y),Z) = sum(mult(X,Z), mult(Y,Z)).

theory ring(mult, one, add, zero, add_inverse) is
  abelian_group(add, zero, add_inverse) and
  monoid(mult, one) and
  left_distributive(mult, sum) and
  right_distributive(mult, sum).

theory commutative_ring(mult, one, add, zero, add_inverse) is
  ring(mult, one, add, zero, add_inverse) and
  commutative(mult).

% boolean algebra

theory bool_algebra(add, zero, mult, one, inverse) is
  commutative(add) and
  commutative(mult) and
  left_inverse(add, inverse, one) and     % X or not(X) = true
  right_inverse(add, inverse, one) and
  left_inverse(mult, inverse, zero) and   % X and not(X) = false
  right_inverse(mult, inverse, zero) and
  left_distributive(mult, add) and        % X or (Y and Z) = XorY and XorZ
  right_distributive(mult, add) and
  left_distributive(add, mult) and        % X and (Y or Z) = XandY or XandZ
  right_distributive(add, mult) and
  left_identity(add, zero) and            % X or false = X
  right_identity(add, zero) and
  left_identity(mult, one) and            % X and true = X
  right_identity(mult, one).

% basic relations
    
reflexive(r) is r(X,X).
irreflexive(r) is ~r(X,X).
transitive(r) is ~r(X,Y) | ~r(Y,Z) | r(X,Z).
antisymmetric(r) is ~r(X,Y) | ~r(Y,X) | X=Y.
symmetric(r) is ~r(X,Y) | r(Y,X).

% orders and partial orders

theory partial_order(r) is
  reflexive(r) and
  transitive(r) and
  antisymmetric(r).

theory strict_partial_order(r) is
  irreflexive(r) and
  transitive(r) and
  antisymmetric(r).

% lattices

idempotent(op) is op(X,X) = X.

theory semi_lattice(meet) is
  ac(meet) and
  idempotent(meet).

absorption(f1, f2) is f1(X, f2(X, Y)) = X.

theory lattice(meet, join) is
  semi_lattice(meet) and
  semi_lattice(join) and
  absorption(meet, join) and
  absorption(join, meet).

% vim:syntax=ocaml
