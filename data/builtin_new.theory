% Builtin theories and lemmas (new syntax)
% vim:shiftwidth=2:

axiom (associative F) <-
  holds [F ?x (F ?y ?z) = F (F ?x ?y) ?z].

axiom (commutative F) <-
  holds [F ?x ?y = F ?y ?x].

theory (ac F) <-
  axiom (associative F),
  axiom (commutative F).

axiom (associative F) <-
  theory (ac F).
axiom (commutative F) <-
  theory (ac F).

% a few general definitions (mostly form "rewriting, solving, proving")

axiom (involutive F) <-
  holds [F (F ?x) = ?x].

axiom (idempotent F) <-
  holds [F ?x ?x = ?x].

axiom (endomorphism {fun=H, op=Mult}) <-
  holds [H (Mult ?x ?y) = Mult (H ?x) (H ?y)].

axiom (unit_endomorphism {fun=H, elem=E}) <-
  holds [H E = E].

axiom (anti_endomorphism {fun=H, op=Mult}) <-
  holds [H (Mult ?x ?y) = Mult (H ?y) (H ?x)].

axiom (homomorphism {fun=H, op1=Mult, op2=Add}) <-
  holds [H (Mult ?x ?y) = Add (H ?x) (H ?y)].

axiom (left_identity {op=Mult, elem=E}) <-
  holds [Mult E ?x = ?x].

axiom (right_identity {op=Mult, elem=E}) <-
  holds [Mult ?x E = ?x].

axiom (right_inverse {op=Mult, inverse=I, elem=E}) <-
  holds [Mult (I ?x) ?x = E].

axiom (left_inverse {op=Mult, inverse=I, elem=E}) <-
  holds [Mult ?x (I ?x) = E].

axiom (left_absorb {op=Mult, elem=E}) <-
  holds [Mult E ?x = E].

axiom (right_absorb {op=Mult, elem=E}) <-
  holds [Mult ?x E = E].

% functional relations

axiom (functional1 P) <-
  holds [~ (P ?x ?y), ~ (P ?x ?z), ?y = ?z].

axiom (total1 {pred=P, fun=F}) <-
  holds [P ?x (F ?x)].

axiom (functional2 P) <-
  holds [~ (P ?x ?y ?z), ~ (P ?x ?y ?z2), ?z = ?z2].

axiom (total2 {pred=P, fun=F}) <-
  holds [P ?x ?y (F ?x ?y)].

lemma [P ?x ?y <=> ?y = F ?x] <-
  axiom (functional1 P),
  axiom (total1 {pred=P, fun=F}).

lemma [P ?x ?y ?z <=> ?z = F ?x ?y] <-
  axiom (functional2 P),
  axiom (total2 {pred=P, fun=F}).

% monoid

theory (monoid {op=Mult, neutral=E}) <-
  axiom (left_identity {op=Mult, elem=E}),
  axiom (right_identity {op=Mult, elem=E}),
  axiom (associative Mult).

axiom (associative F) <-
  theory (monoid {op=F | _}).

% group : TODO
