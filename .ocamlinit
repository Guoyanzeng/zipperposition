#use "topfind";;
#require "zarith";;
#require "containers";;
#require "sequence";;
#directory "_build/src/";;
#directory "_build/src/base";;
#directory "_build/src/extended";;
#directory "_build/src/parsers";;
#directory "_build/src/meta/";;
#directory "_build/src/arbitrary/";;
#directory "_build/tests/";;

print_endline "load base lib....";;
#load "logtk.cma";;
open Logtk;;
module ST = ScopedTerm;;
module T = FOTerm;;
module PT = PrologTerm;;
module Sym = Symbol;;
let (~<) = Symbol.of_string;;
#install_printer Symbol.fmt;;
#install_printer Type.fmt;;
#install_printer FOTerm.fmt;;
#install_printer PrologTerm.fmt;;
#install_printer Formula.FO.fmt;;
#install_printer HOTerm.fmt;;
#install_printer Substs.fmt;;
#install_printer Signature.fmt;;
#install_printer ParseLocation.fmt;;
#install_printer Precedence.fmt;;
#install_printer Ordering.fmt;;
#install_printer Position.fmt;;
module F = Logtk.Formula;;
module HOT = Logtk.HOTerm;;

(* optional part: parser *)
print_endline "load parsers....";;
#load "logtk_parsers.cma";;
open Logtk_parsers;;
#install_printer Ast_tptp.Untyped.fmt;;
#install_printer Ast_tptp.Typed.fmt;;
#install_printer Ast_tptp.fmt_general;;
#install_printer Ast_tptp.fmt_role;;
let pterm s =
    let t = Parse_tptp.parse_term Lex_tptp.token (Lexing.from_string s) in
    let tyctx = TypeInference.Ctx.create Signature.TPTP.base in
    let _, clos = TypeInference.FO.infer_exn tyctx t in
    clos tyctx
;;
let pform s =
    let f = Parse_tptp.parse_formula Lex_tptp.token (Lexing.from_string s) in
    let tyctx = TypeInference.Ctx.create Signature.TPTP.base in
    TypeInference.FO.convert_form_exn ~ctx:tyctx f
;;

(* optional part: extended *)
print_endline "load extended lib....";;
#load "logtk_extended.cma";;
#install_printer Logtk.Transform.fmt;;
#install_printer Logtk.Trace_tstp.fmt;;

(* optional part: meta *)
print_endline "load meta prover....";;
#load "logtk_meta.cma";;
#install_printer Logtk_meta.MetaPattern.fmt;;
#install_printer Logtk_meta.MetaPattern.EncodedForm.fmt;;
#install_printer Logtk_meta.MetaPattern.Set.fmt;;
#install_printer Logtk_meta.MetaKB.fmt;;
open Logtk_meta;;
let ppat s =
    let f = pform s in
    let f = MetaPattern.EncodedForm.encode f in
    MetaPattern.create f;;
(* optional part: arbitrary *)
#require "qcheck";;
#load "logtk_arbitrary.cma";;
open Logtk_arbitrary;;
open QCheck;;
(* vim:syntax=ocaml
*)
