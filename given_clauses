0.049[zip.saturate] ### step     1 ###
0.049[zip.saturate]
    given (1 steps, penalty 1): `[zero_zero_a ≠ one_one_a*]/418`
0.049[zip.saturate] ### step     2 ###
0.049[zip.saturate]
    given (2 steps, penalty 1): `[zero_zero_poly_a ≠ one_one_poly_a*]/419`
0.049[zip.saturate] ### step     3 ###
0.049[zip.saturate]
    given (3 steps, penalty 1): `[zero_zero_nat ≠ one_one_nat*]/420`
0.049[zip.saturate] ### step     4 ###
0.049[zip.saturate]
    given (4 steps, penalty 1):
      `[zero_zero_poly_nat ≠ one_one_poly_nat*]/421`
0.049[zip.saturate] ### step     5 ###
0.049[zip.saturate]
    given (5 steps, penalty 1):
      `[zero_z2096148049poly_a ≠ one_one_poly_poly_a*]/422`
0.049[zip.saturate] ### step     6 ###
0.049[zip.saturate] given (6 steps, penalty 1): `[¬pp fFalse*]/541`
0.049[zip.saturate] ### step     7 ###
0.049[zip.saturate] given (7 steps, penalty 1): `[pp fTrue*]/540`
0.049[zip.saturate] ### step     8 ###
0.050[zip.saturate]
    given (8 steps, penalty 1): `[¬fundam396953934nt_a_a (poly_a2 p)*]/1`
0.050[zip.saturate] ### step     9 ###
0.050[zip.saturate]
    given (9 steps, penalty 1):
      `[¬pp (pos_poly_nat zero_zero_poly_nat)*]/451`
0.050[zip.saturate] ### step    10 ###
0.050[zip.saturate]
    given (10 steps, penalty 5):
      `forall A0 A1 (F2:A0 → A1) (F3:A0 → A1).
       [F2 = F3* ∨ F2 (zf_ext_diff F2 F3) ≠ F3 (zf_ext_diff F2 F3)*]/0`
0.051[zip.saturate] ### step    11 ###
0.051[zip.saturate]
    given (11 steps, penalty 1):
      `[c ≠ zero_zero_a+* ∨ cs ≠ zero_zero_poly_a]/6`
0.051[zip.saturate] ### step    12 ###
0.051[zip.saturate]
    given (12 steps, penalty 1):
      `[reflect_poly_a zero_zero_poly_a = zero_zero_poly_a*]/59`
0.051[zip.saturate] ### step    13 ###
0.051[zip.saturate]
    given (13 steps, penalty 1):
      `[reflect_poly_nat zero_zero_poly_nat = zero_zero_poly_nat*]/60`
0.052[zip.saturate] ### step    14 ###
0.052[zip.saturate]
    given (14 steps, penalty 1):
      `[reflect_poly_poly_a zero_z2096148049poly_a = zero_z2096148049poly_a*]/61`
0.052[zip.saturate] ### step    15 ###
0.052[zip.saturate]
    given (15 steps, penalty 1):
      `[degree_a zero_zero_poly_a = zero_zero_nat*]/306`
0.052[zip.saturate] ### step    16 ###
0.052[zip.saturate]
    given (16 steps, penalty 1):
      `[degree_nat zero_zero_poly_nat = zero_zero_nat*]/307`
0.052[zip.saturate] ### step    17 ###
0.052[zip.saturate]
    given (17 steps, penalty 1):
      `[degree_poly_a zero_z2096148049poly_a = zero_zero_nat*]/308`
0.053[zip.saturate] ### step    18 ###
0.053[zip.saturate]
    given (18 steps, penalty 1):
      `[zero_z1059985641ly_nat = abs_poly_poly_nat aTP_Lamm_ae*]/452`
0.053[zip.saturate] ### step    19 ###
0.053[zip.saturate]
    given (19 steps, penalty 1):
      `[zero_z2064990175poly_a = abs_poly_poly_poly_a aTP_Lamm_af*]/453`
0.053[zip.saturate] ### step    20 ###
0.053[zip.saturate]
    given (20 steps, penalty 1):
      `[zero_zero_poly_a = abs_poly_a aTP_Lamm_ag*]/454`
0.054[zip.saturate] ### step    21 ###
0.054[zip.saturate]
    given (21 steps, penalty 1):
      `[zero_zero_poly_nat = abs_poly_nat aTP_Lamm_ah*]/455`
0.054[zip.saturate] ### step    22 ###
0.054[zip.saturate]
    given (22 steps, penalty 1):
      `[zero_z2096148049poly_a = abs_poly_poly_a aTP_Lamm_ai*]/456`
0.055[zip.saturate] ### step    23 ###
0.055[zip.saturate]
    given (23 steps, penalty 1):
      `[neg_nu976519853_inc_a zero_zero_a = one_one_a*]/466`
0.055[zip.saturate] ### step    24 ###
0.055[zip.saturate]
    given (24 steps, penalty 1):
      `[neg_nu1855370811poly_a zero_zero_poly_a = one_one_poly_a*]/467`
0.055[zip.saturate] ### step    25 ###
0.055[zip.saturate]
    given (25 steps, penalty 1):
      `[neg_nu1613852873poly_a zero_z2096148049poly_a = one_one_poly_poly_a*]/468`
0.055[zip.saturate] ### step    26 ###
0.055[zip.saturate]
    given (26 steps, penalty 1):
      `forall (X660:nat). [aTP_Lamm_af X660 = zero_z2096148049poly_a*]/535`
0.055[zip.saturate] ### step    27 ###
0.055[zip.saturate]
    given (27 steps, penalty 1):
      `forall (X661:nat). [aTP_Lamm_ae X661 = zero_zero_poly_nat*]/536`
0.056[zip.saturate] ### step    28 ###
0.056[zip.saturate]
    given (28 steps, penalty 1):
      `forall (X662:nat). [aTP_Lamm_ai X662 = zero_zero_poly_a*]/537`
0.056[zip.saturate] ### step    29 ###
0.056[zip.saturate]
    given (29 steps, penalty 1):
      `forall (X663:nat). [aTP_Lamm_ah X663 = zero_zero_nat*]/538`
0.056[zip.saturate] ### step    30 ###
0.056[zip.saturate]
    given (30 steps, penalty 1):
      `forall (X664:nat). [aTP_Lamm_ag X664 = zero_zero_a*]/539`
0.057[zip.saturate] ### step    31 ###
0.057[zip.saturate]
    given (31 steps, penalty 1):
      `forall (F0:a → a) (X1:a) (X2:a).
       [F0 X2 = F0 X1* ∨ ¬fundam396953934nt_a_a F0*]/2`
0.058[zip.saturate] ### step    42 ###
0.058[zip.saturate]
    given (42 steps, penalty 1):
      `forall (F3:a → a).
       [fundam396953934nt_a_a F3* ∨ F3 (sk_X F3) ≠ F3 (sk_Y F3)*]/3`
0.059[zip.saturate] ### step    45 ###
0.059[zip.saturate]
    given (45 steps, penalty 1):
      `forall (X430:nat). [¬pp (ord_less_nat X430 zero_zero_nat)*]/370`
0.059[zip.saturate] ### step    48 ###
0.059[zip.saturate]
    given (48 steps, penalty 1):
      `forall (X478:nat). [¬pp (ord_less_nat X478 X478)*]/408`
0.060[zip.saturate] ### step    53 ###
0.060[zip.saturate]
    given (53 steps, penalty 1):
      `forall (X4:a). [poly_a2 cs X4 = zero_zero_a* ∨ X4 = zero_zero_a]/4`
0.061[zip.saturate] ### step    56 ###
0.061[zip.saturate]
    given (56 steps, penalty 1):
      `[¬pp (rsquarefree_a zero_zero_poly_a)*]/575`
0.062[zip.saturate] ### step    57 ###
0.062[zip.saturate]
    given (57 steps, penalty 1):
      `[¬pp (rsquarefree_poly_a zero_z2096148049poly_a)*]/576`
0.062[zip.saturate] ### step    58 ###
0.062[zip.saturate]
    given (58 steps, penalty 1):
      `[¬fundam396953934nt_a_a (poly_a2 (pCons_a c cs))*]/12`
0.063[zip.saturate] ### step    59 ###
0.063[zip.saturate]
    given (59 steps, penalty 1):
      `forall (X115:poly_a).
       [X115 = zero_zero_poly_a ∨ 
        fundam758496022size_a X115 ≠ zero_zero_nat+*]/115`
0.064[zip.saturate] ### step    60 ###
0.064[zip.saturate]
    given (60 steps, penalty 1):
      `forall (X117:poly_nat).
       [X117 = zero_zero_poly_nat ∨ 
        fundam164439480ze_nat X117 ≠ zero_zero_nat+*]/117`
0.064[zip.saturate] ### step    61 ###
0.065[zip.saturate]
    given (61 steps, penalty 1):
      `forall (X119:poly_poly_a).
       [X119 = zero_z2096148049poly_a ∨ 
        fundam283162788poly_a X119 ≠ zero_zero_nat+*]/119`
0.065[zip.saturate] ### step    62 ###
0.065[zip.saturate]
    given (62 steps, penalty 1):
      `forall (X130:poly_a).
       [X130 = zero_zero_poly_a ∨ ¬pp (is_zero_a X130)+*]/124`
0.066[zip.saturate] ### step    63 ###
0.066[zip.saturate]
    given (63 steps, penalty 1):
      `forall (X132:poly_nat).
       [X132 = zero_zero_poly_nat ∨ ¬pp (is_zero_nat X132)+*]/126`
0.066[zip.saturate] ### step    64 ###
0.066[zip.saturate]
    given (64 steps, penalty 1):
      `forall (X5:a) (X6:a).
       [poly_a2 (pCons_a c cs) X6 = poly_a2 (pCons_a c cs) X5*]/5`
0.069[zip.saturate] ### step    65 ###
0.069[zip.saturate]
    given (65 steps, penalty 1):
      `forall (X134:poly_poly_a).
       [X134 = zero_z2096148049poly_a ∨ ¬pp (is_zero_poly_a X134)+*]/128`
0.070[zip.saturate] ### step    66 ###
0.070[zip.saturate]
    given (66 steps, penalty 1):
      `forall (X7:poly_nat).
       [poly_poly_nat2 zero_z1059985641ly_nat X7 = zero_zero_poly_nat*]/7`
0.070[zip.saturate] ### step    67 ###
0.070[zip.saturate]
    given (67 steps, penalty 1):
      `forall (X8:poly_poly_a).
       [poly_poly_poly_a2 zero_z2064990175poly_a X8 = zero_z2096148049poly_a*]/8`
0.071[zip.saturate] ### step    68 ###
0.071[zip.saturate]
    given (68 steps, penalty 1):
      `forall (X9:poly_a).
       [poly_poly_a2 zero_z2096148049poly_a X9 = zero_zero_poly_a*]/9`
0.071[zip.saturate] ### step    69 ###
0.071[zip.saturate]
    given (69 steps, penalty 1):
      `forall (X10:nat). [poly_nat2 zero_zero_poly_nat X10 = zero_zero_nat*]/10`
0.071[zip.saturate] ### step    70 ###
0.072[zip.saturate]
    given (70 steps, penalty 1):
      `forall (X11:a). [poly_a2 zero_zero_poly_a X11 = zero_zero_a*]/11`
0.073[zip.saturate] ### step    71 ###
0.073[zip.saturate]
    given (71 steps, penalty 1):
      `[pCons_a zero_zero_a zero_zero_poly_a = zero_zero_poly_a*]/23`
0.074[zip.saturate] ### step    72 ###
0.074[zip.saturate]
    given (72 steps, penalty 1):
      `[pCons_poly_a zero_zero_poly_a zero_z2096148049poly_a
         = zero_z2096148049poly_a*]/24`
0.074[zip.saturate] ### step    73 ###
0.074[zip.saturate]
    given (73 steps, penalty 1):
      `[pCons_nat zero_zero_nat zero_zero_poly_nat = zero_zero_poly_nat*]/25`
0.075[zip.saturate] ### step    74 ###
0.075[zip.saturate]
    given (74 steps, penalty 1):
      `[pCons_poly_nat zero_zero_poly_nat zero_z1059985641ly_nat
         = zero_z1059985641ly_nat*]/26`
0.075[zip.saturate] ### step    75 ###
0.075[zip.saturate]
    given (75 steps, penalty 1):
      `[pCons_poly_poly_a zero_z2096148049poly_a zero_z2064990175poly_a
         = zero_z2064990175poly_a*]/27`
0.076[zip.saturate] ### step    76 ###
0.076[zip.saturate]
    given (76 steps, penalty 1):
      `forall (X136:nat).
       [poly_cutoff_a X136 zero_zero_poly_a = zero_zero_poly_a*]/130`
0.077[zip.saturate] ### step    77 ###
0.077[zip.saturate]
    given (77 steps, penalty 1):
      `forall (X137:nat).
       [poly_cutoff_nat X137 zero_zero_poly_nat = zero_zero_poly_nat*]/131`
0.078[zip.saturate] ### step    78 ###
0.078[zip.saturate]
    given (78 steps, penalty 1):
      `forall (X138:nat).
       [poly_cutoff_poly_a X138 zero_z2096148049poly_a
         = zero_z2096148049poly_a*]/132`
0.079[zip.saturate] ### step    79 ###
0.079[zip.saturate]
    given (79 steps, penalty 1):
      `forall (X155:nat).
       [poly_shift_a X155 zero_zero_poly_a = zero_zero_poly_a*]/146`
0.079[zip.saturate] ### step    80 ###
0.079[zip.saturate]
    given (80 steps, penalty 1):
      `forall (X156:nat).
       [poly_shift_nat X156 zero_zero_poly_nat = zero_zero_poly_nat*]/147`
0.080[zip.saturate] ### step    81 ###
0.080[zip.saturate]
    given (81 steps, penalty 1):
      `forall (X157:nat).
       [poly_shift_poly_a X157 zero_z2096148049poly_a
         = zero_z2096148049poly_a*]/148`
0.080[zip.saturate] ### step    82 ###
0.080[zip.saturate]
    given (82 steps, penalty 1):
      `forall (X178:a).
       [synthetic_div_a zero_zero_poly_a X178 = zero_zero_poly_a*]/169`
0.081[zip.saturate] ### step    83 ###
0.081[zip.saturate]
    given (83 steps, penalty 1):
      `forall (X179:nat).
       [synthetic_div_nat zero_zero_poly_nat X179 = zero_zero_poly_nat*]/170`
0.081[zip.saturate] ### step    84 ###
0.081[zip.saturate]
    given (84 steps, penalty 1):
      `forall (X180:poly_a).
       [synthetic_div_poly_a zero_z2096148049poly_a X180
         = zero_z2096148049poly_a*]/171`
0.081[zip.saturate] ### step    85 ###
0.081[zip.saturate]
    given (85 steps, penalty 1):
      `forall (X181:nat).
       [coeff_poly_nat zero_z1059985641ly_nat X181 = zero_zero_poly_nat*]/172`
0.082[zip.saturate] ### step    86 ###
0.082[zip.saturate]
    given (86 steps, penalty 1):
      `forall (X182:nat).
       [coeff_poly_poly_a zero_z2064990175poly_a X182
         = zero_z2096148049poly_a*]/173`
0.082[zip.saturate] ### step    87 ###
0.082[zip.saturate]
    given (87 steps, penalty 1):
      `forall (X183:nat). [coeff_a zero_zero_poly_a X183 = zero_zero_a*]/174`
0.083[zip.saturate] ### step    88 ###
0.083[zip.saturate]
    given (88 steps, penalty 1):
      `forall (X184:nat).
       [coeff_nat zero_zero_poly_nat X184 = zero_zero_nat*]/175`
0.083[zip.saturate] ### step    89 ###
0.083[zip.saturate]
    given (89 steps, penalty 1):
      `forall (X185:nat).
       [coeff_poly_a zero_z2096148049poly_a X185 = zero_zero_poly_a*]/176`
0.084[zip.saturate] ### step    90 ###
0.084[zip.saturate]
    given (90 steps, penalty 1):
      `forall (X188:nat). [monom_a zero_zero_a X188 = zero_zero_poly_a*]/178`
0.084[zip.saturate] ### step    91 ###
0.084[zip.saturate]
    given (91 steps, penalty 1):
      `forall (X189:nat).
       [monom_poly_a zero_zero_poly_a X189 = zero_z2096148049poly_a*]/179`
0.084[zip.saturate] ### step    92 ###
0.084[zip.saturate]
    given (92 steps, penalty 1):
      `forall (X190:nat).
       [monom_nat zero_zero_nat X190 = zero_zero_poly_nat*]/180`
0.087[zip.saturate] ### step    93 ###
0.088[zip.saturate]
    given (93 steps, penalty 1):
      `forall (X191:nat).
       [monom_poly_nat zero_zero_poly_nat X191 = zero_z1059985641ly_nat*]/181`
0.090[zip.saturate] ### step    94 ###
0.090[zip.saturate]
    given (94 steps, penalty 1):
      `forall (X192:nat).
       [monom_poly_poly_a zero_z2096148049poly_a X192
         = zero_z2064990175poly_a*]/182`
0.094[zip.saturate] ### step   100 ###
0.096[zip.saturate]
    given (100 steps, penalty 1):
      `forall (X298:a).
       [fundam2103719732poly_a zero_zero_poly_a X298 = zero_zero_poly_a*]/252`
0.097[zip.saturate] ### step   101 ###
0.097[zip.saturate]
    given (101 steps, penalty 1):
      `forall (X299:nat).
       [fundam1481276954ly_nat zero_zero_poly_nat X299 = zero_zero_poly_nat*]/253`
0.098[zip.saturate] ### step   102 ###
0.098[zip.saturate]
    given (102 steps, penalty 1):
      `forall (X300:poly_a).
       [fundam932970690poly_a zero_z2096148049poly_a X300
         = zero_z2096148049poly_a*]/254`
0.099[zip.saturate] ### step   103 ###
0.099[zip.saturate]
    given (103 steps, penalty 1):
      `forall (X362:poly_a).
       [pcompose_a zero_zero_poly_a X362 = zero_zero_poly_a*]/303`
0.100[zip.saturate] ### step   104 ###
0.100[zip.saturate]
    given (104 steps, penalty 1):
      `forall (X363:poly_nat).
       [pcompose_nat zero_zero_poly_nat X363 = zero_zero_poly_nat*]/304`
0.102[zip.saturate] ### step   105 ###
0.102[zip.saturate]
    given (105 steps, penalty 1):
      `forall (X364:poly_poly_a).
       [pcompose_poly_a zero_z2096148049poly_a X364 = zero_z2096148049poly_a*]/305`
0.104[zip.saturate] ### step   106 ###
0.104[zip.saturate]
    given (106 steps, penalty 1):
      `forall (X365:a). [poly_a2 one_one_poly_a X365 = one_one_a*]/309`
0.105[zip.saturate] ### step   107 ###
0.105[zip.saturate]
    given (107 steps, penalty 1):
      `forall (X366:poly_a).
       [poly_poly_a2 one_one_poly_poly_a X366 = one_one_poly_a*]/310`
0.105[zip.saturate] ### step   108 ###
0.105[zip.saturate]
    given (108 steps, penalty 1):
      `forall (X367:nat). [poly_nat2 one_one_poly_nat X367 = one_one_nat*]/311`
0.106[zip.saturate] ### step   109 ###
0.106[zip.saturate]
    given (109 steps, penalty 1):
      `[pCons_a one_one_a zero_zero_poly_a = one_one_poly_a*]/328`
0.107[zip.saturate] ### step   110 ###
0.107[zip.saturate]
    given (110 steps, penalty 1):
      `[pCons_nat one_one_nat zero_zero_poly_nat = one_one_poly_nat*]/329`
0.107[zip.saturate] ### step   111 ###
0.107[zip.saturate]
    given (111 steps, penalty 1):
      `[pCons_poly_a one_one_poly_a zero_z2096148049poly_a
         = one_one_poly_poly_a*]/330`
0.108[zip.saturate] ### step   115 ###
0.108[zip.saturate]
    given (115 steps, penalty 1):
      `[monom_nat one_one_nat zero_zero_nat = one_one_poly_nat*]/335`
0.109[zip.saturate] ### step   119 ###
0.109[zip.saturate]
    given (119 steps, penalty 1):
      `[pp (ord_less_nat zero_zero_nat one_one_nat)*]/400`
0.112[zip.saturate] ### step   121 ###
0.112[zip.saturate]
    given (121 steps, penalty 1):
      `forall (X538:nat). [pp (ord_less_eq_nat zero_zero_nat X538)*]/469`
0.114[zip.saturate] ### step   122 ###
0.114[zip.saturate]
    given (122 steps, penalty 1):
      `forall (X539:nat). [minus_minus_nat X539 X539 = zero_zero_nat*]/470`
0.116[zip.saturate] ### step   123 ###
0.116[zip.saturate]
    given (123 steps, penalty 1):
      `forall (X540:nat).
       [minus_minus_nat zero_zero_nat X540 = zero_zero_nat*]/471`
0.118[zip.saturate] ### step   124 ###
0.118[zip.saturate]
    given (124 steps, penalty 1):
      `forall (X551:nat). [minus_minus_nat X551 zero_zero_nat = X551*]/478`
0.118[zip.saturate] ### step   126 ###
0.119[zip.saturate]
    given (126 steps, penalty 1):
      `forall (X597:nat). [pp (ord_less_eq_nat X597 X597)*]/503`
0.119[zip.saturate] ### step   127 ###
0.119[zip.saturate]
    given (127 steps, penalty 1):
      `forall (X685:bool). [X685 = fFalse* ∨ X685 = fTrue*]/552`
0.125[zip.saturate] ### step   128 ###
0.125[zip.saturate]
    given (128 steps, penalty 1):
      `[rsquarefree_a zero_zero_poly_a = fFalse*]/611`
0.126[zip.saturate] ### step   130 ###
0.126[zip.saturate]
    given (130 steps, penalty 1):
      `[rsquarefree_poly_a zero_z2096148049poly_a = fFalse*]/613`
0.128[zip.saturate] ### step   132 ###
0.128[zip.saturate]
    given (132 steps, penalty 1):
      `[pos_poly_nat zero_zero_poly_nat = fFalse*]/615`
0.129[zip.saturate] ### step   135 ###
0.129[zip.saturate]
    given (135 steps, penalty 1):
      `forall (X0:bool). [¬pp X0+* ∨ X0 = fTrue*]/635`
0.129[zip.saturate] ### step   136 ###
0.129[zip.saturate]
    given (136 steps, penalty 1):
      `forall (X0:bool). [fTrue ≠ fFalse+* ∨ X0 = fFalse*]/639`
0.130[zip.saturate] ### step   137 ###
0.130[zip.saturate]
    given (137 steps, penalty 1):
      `forall (X0:bool). [fFalse ≠ fTrue+* ∨ X0 = fTrue*]/641`
0.131[zip.saturate] ### step   138 ###
0.131[zip.saturate]
    given (138 steps, penalty 1):
      `forall (X0:nat). [ord_less_nat X0 zero_zero_nat = fFalse*]/625`
0.132[zip.saturate] ### step   141 ###
0.132[zip.saturate]
    given (141 steps, penalty 1):
      `forall (X0:nat). [ord_less_nat X0 X0 = fFalse*]/627`
0.135[zip.saturate] ### step   144 ###
0.135[zip.saturate]
    given (144 steps, penalty 1):
      `forall (X0:bool). [pp X0* ∨ X0 = fFalse*]/630`
0.139[zip.saturate] ### step   145 ###
0.139[zip.saturate]
    given (145 steps, penalty 1):
      `forall (X0:nat). [ord_less_eq_nat zero_zero_nat X0 = fTrue*]/648`
0.142[zip.saturate] ### step   148 ###
0.142[zip.saturate]
    given (148 steps, penalty 1):
      `forall (X0:nat). [ord_less_eq_nat X0 X0 = fTrue*]/649`
0.144[zip.saturate] ### step   150 ###
0.144[zip.saturate]
    given (150 steps, penalty 1):
      `[ord_less_nat zero_zero_nat one_one_nat = fTrue*]/650`
0.146[zip.saturate] ### step   155 ###
0.146[zip.saturate]
    given (155 steps, penalty 1):
      `[fundam758496022size_a zero_zero_poly_a = zero_zero_nat*]/696`
0.147[zip.saturate] ### step   156 ###
0.147[zip.saturate]
    given (156 steps, penalty 1):
      `[fundam164439480ze_nat zero_zero_poly_nat = zero_zero_nat*]/699`
0.148[zip.saturate] ### step   157 ###
0.148[zip.saturate]
    given (157 steps, penalty 1):
      `[fundam283162788poly_a zero_z2096148049poly_a = zero_zero_nat*]/702`
0.148[zip.saturate] ### step   158 ###
0.149[zip.saturate]
    given (158 steps, penalty 1): `[pp (is_zero_a zero_zero_poly_a)*]/705`
0.150[zip.saturate] ### step   159 ###
0.150[zip.saturate]
    given (159 steps, penalty 1): `[is_zero_a zero_zero_poly_a = fTrue*]/707`
0.152[zip.saturate] ### step   161 ###
0.152[zip.saturate]
    given (161 steps, penalty 1):
      `[true ∨ is_zero_a zero_zero_poly_a = fFalse*]/709`
0.154[zip.saturate] ### step   162 ###
0.154[zip.saturate]
    given (162 steps, penalty 1):
      `[pp (is_zero_nat zero_zero_poly_nat)*]/718`
0.155[zip.saturate] ### step   163 ###
0.155[zip.saturate]
    given (163 steps, penalty 1):
      `[is_zero_nat zero_zero_poly_nat = fTrue*]/720`
0.156[zip.saturate] ### step   165 ###
0.156[zip.saturate]
    given (165 steps, penalty 1):
      `[true ∨ is_zero_nat zero_zero_poly_nat = fFalse*]/722`
0.157[zip.saturate] ### step   166 ###
0.157[zip.saturate]
    given (166 steps, penalty 1):
      `[pp (is_zero_poly_a zero_z2096148049poly_a)*]/731`
0.158[zip.saturate] ### step   167 ###
0.158[zip.saturate]
    given (167 steps, penalty 1):
      `[is_zero_poly_a zero_z2096148049poly_a = fTrue*]/733`
0.159[zip.saturate] ### step   169 ###
0.159[zip.saturate]
    given (169 steps, penalty 1):
      `[true ∨ is_zero_poly_a zero_z2096148049poly_a = fFalse*]/735`
0.160[zip.saturate] ### step   181 ###
0.160[zip.saturate]
    given (181 steps, penalty 1):
      `forall (X0:a).
       [neg_nu976519853_inc_a X0 = one_one_a* ∨ 
        ¬fundam396953934nt_a_a neg_nu976519853_inc_a+*]/558`
0.161[zip.saturate] ### step   183 ###
0.161[zip.saturate]
    given (183 steps, penalty 1):
      `forall (X0:poly_a). [X0 = zero_zero_poly_a ∨ is_zero_a X0 = fFalse*]/617`
0.162[zip.saturate] ### step   185 ###
0.162[zip.saturate]
    given (185 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [X0 = zero_z2096148049poly_a ∨ is_zero_poly_a X0 = fFalse*]/619`
0.163[zip.saturate] ### step   187 ###
0.163[zip.saturate]
    given (187 steps, penalty 1):
      `forall (X0:poly_nat).
       [X0 = zero_zero_poly_nat ∨ is_zero_nat X0 = fFalse*]/621`
0.165[zip.saturate] ### step   195 ###
0.165[zip.saturate]
    given (195 steps, penalty 1):
      `forall (X22:poly_poly_nat) (X23:poly_nat).
       [X22 = zero_z1059985641ly_nat ∨ 
        pCons_poly_nat X23 X22 ≠ zero_z1059985641ly_nat+*]/28`
0.165[zip.saturate] ### step   196 ###
0.165[zip.saturate]
    given (196 steps, penalty 1):
      `forall (X22:poly_poly_nat) (X23:poly_nat).
       [X23 = zero_zero_poly_nat ∨ 
        pCons_poly_nat X23 X22 ≠ zero_z1059985641ly_nat+*]/29`
0.166[zip.saturate] ### step   197 ###
0.166[zip.saturate]
    given (197 steps, penalty 1):
      `forall (X25:poly_poly_poly_a) (X26:poly_poly_a).
       [X25 = zero_z2064990175poly_a ∨ 
        pCons_poly_poly_a X26 X25 ≠ zero_z2064990175poly_a+*]/31`
0.166[zip.saturate] ### step   198 ###
0.167[zip.saturate]
    given (198 steps, penalty 1):
      `forall (X25:poly_poly_poly_a) (X26:poly_poly_a).
       [X26 = zero_z2096148049poly_a ∨ 
        pCons_poly_poly_a X26 X25 ≠ zero_z2064990175poly_a+*]/32`
0.168[zip.saturate] ### step   199 ###
0.168[zip.saturate]
    given (199 steps, penalty 1):
      `forall (X28:poly_a) (X29:a).
       [X28 = zero_zero_poly_a ∨ pCons_a X29 X28 ≠ zero_zero_poly_a+*]/34`
0.170[zip.saturate] ### step   200 ###
0.170[zip.saturate]
    given (200 steps, penalty 1):
      `forall (X28:poly_a) (X29:a).
       [X29 = zero_zero_a ∨ pCons_a X29 X28 ≠ zero_zero_poly_a+*]/35`
0.171[zip.saturate] ### step   202 ###
0.171[zip.saturate]
    given (202 steps, penalty 1):
      `forall (X31:poly_nat) (X32:nat).
       [X31 = zero_zero_poly_nat ∨ 
        pCons_nat X32 X31 ≠ zero_zero_poly_nat+*]/37`
0.172[zip.saturate] ### step   203 ###
0.172[zip.saturate]
    given (203 steps, penalty 1):
      `forall (X31:poly_nat) (X32:nat).
       [X32 = zero_zero_nat ∨ pCons_nat X32 X31 ≠ zero_zero_poly_nat+*]/38`
0.174[zip.saturate] ### step   205 ###
0.174[zip.saturate]
    given (205 steps, penalty 1):
      `forall (X34:poly_poly_a) (X35:poly_a).
       [X34 = zero_z2096148049poly_a ∨ 
        pCons_poly_a X35 X34 ≠ zero_z2096148049poly_a+*]/40`
0.175[zip.saturate] ### step   206 ###
0.175[zip.saturate]
    given (206 steps, penalty 1):
      `forall (X34:poly_poly_a) (X35:poly_a).
       [X35 = zero_zero_poly_a ∨ 
        pCons_poly_a X35 X34 ≠ zero_z2096148049poly_a+*]/41`
0.176[zip.saturate] ### step   208 ###
0.176[zip.saturate]
    given (208 steps, penalty 1):
      `forall (X193:poly_nat) (X194:nat).
       [X193 = zero_zero_poly_nat ∨ 
        monom_poly_nat X193 X194 ≠ zero_z1059985641ly_nat+*]/183`
0.177[zip.saturate] ### step   209 ###
0.177[zip.saturate]
    given (209 steps, penalty 1):
      `forall (X196:poly_poly_a) (X197:nat).
       [X196 = zero_z2096148049poly_a ∨ 
        monom_poly_poly_a X196 X197 ≠ zero_z2064990175poly_a+*]/185`
0.179[zip.saturate] ### step   210 ###
0.179[zip.saturate]
    given (210 steps, penalty 1):
      `forall (X199:a) (X200:nat).
       [X199 = zero_zero_a ∨ monom_a X199 X200 ≠ zero_zero_poly_a+*]/187`
0.180[zip.saturate] ### step   211 ###
0.181[zip.saturate]
    given (211 steps, penalty 1):
      `forall (X202:nat) (X203:nat).
       [X202 = zero_zero_nat ∨ monom_nat X202 X203 ≠ zero_zero_poly_nat+*]/189`
0.182[zip.saturate] ### step   213 ###
0.182[zip.saturate]
    given (213 steps, penalty 1):
      `forall (X205:poly_a) (X206:nat).
       [X205 = zero_zero_poly_a ∨ 
        monom_poly_a X205 X206 ≠ zero_z2096148049poly_a+*]/191`
0.183[zip.saturate] ### step   214 ###
0.183[zip.saturate]
    given (214 steps, penalty 1):
      `forall (X289:poly_a) (X290:a).
       [X289 = zero_zero_poly_a ∨ 
        fundam2103719732poly_a X289 X290 ≠ zero_zero_poly_a+*]/246`
0.184[zip.saturate] ### step   215 ###
0.184[zip.saturate]
    given (215 steps, penalty 1):
      `forall (X292:poly_nat) (X293:nat).
       [X292 = zero_zero_poly_nat ∨ 
        fundam1481276954ly_nat X292 X293 ≠ zero_zero_poly_nat+*]/248`
0.185[zip.saturate] ### step   216 ###
0.185[zip.saturate]
    given (216 steps, penalty 1):
      `forall (X295:poly_poly_a) (X296:poly_a).
       [X295 = zero_z2096148049poly_a ∨ 
        fundam932970690poly_a X295 X296 ≠ zero_z2096148049poly_a+*]/250`
0.187[zip.saturate] ### step   217 ###
0.187[zip.saturate]
    given (217 steps, penalty 1):
      `forall (X423:nat) (X424:nat).
       [X423 = zero_zero_nat ∨ monom_nat X424 X423 ≠ one_one_poly_nat+*]/364`
0.188[zip.saturate] ### step   219 ###
0.188[zip.saturate]
    given (219 steps, penalty 1):
      `forall (X423:nat) (X424:nat).
       [X424 = one_one_nat ∨ monom_nat X424 X423 ≠ one_one_poly_nat+*]/365`
0.192[zip.saturate] ### step   221 ###
0.192[zip.saturate]
    given (221 steps, penalty 1):
      `forall (X473:nat).
       [X473 = zero_zero_nat ∨ ¬pp (ord_less_nat X473 one_one_nat)+*]/403`
0.197[zip.saturate] ### step   223 ###
0.197[zip.saturate]
    given (223 steps, penalty 1):
      `forall (X554:nat).
       [X554 = zero_zero_nat ∨ ¬pp (ord_less_eq_nat X554 zero_zero_nat)+*]/480`
0.199[zip.saturate] ### step   224 ###
0.199[zip.saturate]
    given (224 steps, penalty 1):
      `forall (X675:nat) (X676:nat).
       [X676 = X675 ∨ ¬pp (fequal_nat X676 X675)+*]/547`
0.200[zip.saturate] ### step   225 ###
0.200[zip.saturate]
    given (225 steps, penalty 1):
      `forall (X0:nat). [true ∨ ord_less_eq_nat zero_zero_nat X0 = fFalse*]/622`
0.202[zip.saturate] ### step   226 ###
0.202[zip.saturate]
    given (226 steps, penalty 1):
      `[true ∨ ord_less_nat zero_zero_nat one_one_nat = fFalse*]/623`
0.203[zip.saturate] ### step   227 ###
0.203[zip.saturate]
    given (227 steps, penalty 1):
      `[coeff_nat one_one_poly_nat (degree_nat one_one_poly_nat)
         = one_one_nat*]/334`
0.204[zip.saturate] ### step   228 ###
0.204[zip.saturate]
    given (228 steps, penalty 1):
      `forall (X456:a).
       [degree_a (pCons_a X456 zero_zero_poly_a) = zero_zero_nat*]/385`
0.206[zip.saturate] ### step   230 ###
0.206[zip.saturate]
    given (230 steps, penalty 1):
      `[degree_a one_one_poly_a = zero_zero_nat*]/873`
0.207[zip.saturate] ### step   231 ###
0.207[zip.saturate]
    given (231 steps, penalty 1):
      `forall (X457:nat).
       [degree_nat (pCons_nat X457 zero_zero_poly_nat) = zero_zero_nat*]/386`
0.208[zip.saturate] ### step   233 ###
0.208[zip.saturate]
    given (233 steps, penalty 1):
      `[degree_nat one_one_poly_nat = zero_zero_nat*]/875`
0.209[zip.saturate] ### step   234 ###
0.209[zip.saturate]
    given (234 steps, penalty 1):
      `[coeff_nat one_one_poly_nat zero_zero_nat = one_one_nat*]/876`
0.210[zip.saturate] ### step   235 ###
0.210[zip.saturate]
    given (235 steps, penalty 1):
      `forall (X458:poly_a).
       [degree_poly_a (pCons_poly_a X458 zero_z2096148049poly_a)
         = zero_zero_nat*]/387`
0.211[zip.saturate] ### step   237 ###
0.211[zip.saturate]
    given (237 steps, penalty 1):
      `[degree_poly_a one_one_poly_poly_a = zero_zero_nat*]/878`
0.212[zip.saturate] ### step   238 ###
0.212[zip.saturate]
    given (238 steps, penalty 1):
      `forall (X665:a) (X666:a). [if_a fFalse X666 X665 = X665*]/542`
0.214[zip.saturate] ### step   239 ###
0.214[zip.saturate]
    given (239 steps, penalty 1):
      `forall (X667:a) (X668:a). [if_a fTrue X667 X668 = X667*]/543`
0.217[zip.saturate] ### step   240 ###
0.217[zip.saturate]
    given (240 steps, penalty 1):
      `forall (X669:nat) (X670:nat). [if_nat fFalse X670 X669 = X669*]/544`
0.220[zip.saturate] ### step   241 ###
0.220[zip.saturate]
    given (241 steps, penalty 1):
      `forall (X671:nat) (X672:nat). [if_nat fTrue X671 X672 = X671*]/545`
0.221[zip.saturate] ### step   242 ###
0.221[zip.saturate]
    given (242 steps, penalty 1):
      `forall (X677:poly_a) (X678:poly_a).
       [if_poly_a fFalse X678 X677 = X677*]/548`
0.224[zip.saturate] ### step   243 ###
0.224[zip.saturate]
    given (243 steps, penalty 1):
      `forall (X679:poly_a) (X680:poly_a).
       [if_poly_a fTrue X679 X680 = X679*]/549`
0.229[zip.saturate] ### step   244 ###
0.229[zip.saturate]
    given (244 steps, penalty 1):
      `forall (X681:poly_nat) (X682:poly_nat).
       [if_poly_nat fFalse X682 X681 = X681*]/550`
0.232[zip.saturate] ### step   245 ###
0.232[zip.saturate]
    given (245 steps, penalty 1):
      `forall (X683:poly_nat) (X684:poly_nat).
       [if_poly_nat fTrue X683 X684 = X683*]/551`
0.236[zip.saturate] ### step   246 ###
0.236[zip.saturate]
    given (246 steps, penalty 1):
      `forall (X686:poly_poly_a) (X687:poly_poly_a).
       [if_poly_poly_a fFalse X687 X686 = X686*]/553`
0.239[zip.saturate] ### step   247 ###
0.239[zip.saturate]
    given (247 steps, penalty 1):
      `forall (X688:poly_poly_a) (X689:poly_poly_a).
       [if_poly_poly_a fTrue X688 X689 = X688*]/554`
0.241[zip.saturate] ### step   248 ###
0.241[zip.saturate]
    given (248 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [fFalse ≠ ord_less_eq_nat X0 X0+* ∨ X1 = fTrue*]/686`
0.243[zip.saturate] ### step   251 ###
0.243[zip.saturate]
    given (251 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [ord_less_eq_nat X0 X0 ≠ fFalse+* ∨ X1 = fFalse*]/687`
0.245[zip.saturate] ### step   252 ###
0.245[zip.saturate]
    given (252 steps, penalty 1):
      `forall (X1:bool). [X1 = fFalse* ∨ true]/944`
0.260[zip.saturate] ### step   255 ###
0.260[zip.saturate]
    given (255 steps, penalty 1):
      `forall (X0:a) (X1:a) (X2:a).
       [X1 = X2* ∨ ¬fundam396953934nt_a_a (if_a fFalse X0)+*]/884`
0.268[zip.saturate] ### step   268 ###
0.268[zip.saturate]
    given (268 steps, penalty 1):
      `[poly_cutoff_a zero_zero_nat one_one_poly_a = zero_zero_poly_a*]/1028`
0.270[zip.saturate] ### step   269 ###
0.270[zip.saturate]
    given (269 steps, penalty 1):
      `[poly_cutoff_nat zero_zero_nat one_one_poly_nat = zero_zero_poly_nat*]/1029`
0.273[zip.saturate] ### step   270 ###
0.273[zip.saturate]
    given (270 steps, penalty 1):
      `[poly_cutoff_poly_a zero_zero_nat one_one_poly_poly_a
         = zero_z2096148049poly_a*]/1030`
0.278[zip.saturate] ### step   271 ###
0.278[zip.saturate]
    given (271 steps, penalty 1):
      `[poly_shift_a zero_zero_nat one_one_poly_a = one_one_poly_a*]/1031`
0.281[zip.saturate] ### step   272 ###
0.281[zip.saturate]
    given (272 steps, penalty 1):
      `[poly_shift_nat zero_zero_nat one_one_poly_nat = one_one_poly_nat*]/1032`
0.283[zip.saturate] ### step   273 ###
0.283[zip.saturate]
    given (273 steps, penalty 1):
      `[poly_shift_poly_a zero_zero_nat one_one_poly_poly_a
         = one_one_poly_poly_a*]/1033`
0.285[zip.saturate] ### step   279 ###
0.285[zip.saturate]
    given (279 steps, penalty 1):
      `forall (X674:nat). [pp (fequal_nat X674 X674)*]/1041`
0.289[zip.saturate] ### step   280 ###
0.289[zip.saturate]
    given (280 steps, penalty 1):
      `forall (X0:nat). [fequal_nat X0 X0 = fTrue*]/1043`
0.296[zip.saturate] ### step   282 ###
0.296[zip.saturate]
    given (282 steps, penalty 1):
      `forall (F559:nat → bool) (X561:nat).
       [pp (F559 X561)* ∨ ¬zip_tseitin1 X561 F559*]/486`
0.302[zip.saturate] ### step   283 ###
0.302[zip.saturate]
    given (283 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬zip_tseitin1 X1 F0* ∨ F0 X1 = fTrue*]/1051`
0.309[zip.saturate] ### step   284 ###
0.310[zip.saturate]
    given (284 steps, penalty 1):
      `forall (X37:poly_a).
       [X37 = zero_zero_poly_a ∨ 
        poly_a2 (reflect_poly_a X37) zero_zero_a ≠ zero_zero_a+*]/43`
0.312[zip.saturate] ### step   285 ###
0.312[zip.saturate]
    given (285 steps, penalty 1):
      `forall (X39:poly_poly_a).
       [X39 = zero_z2096148049poly_a ∨ 
        poly_poly_a2 (reflect_poly_poly_a X39) zero_zero_poly_a
         ≠ zero_zero_poly_a+*]/45`
0.313[zip.saturate] ### step   286 ###
0.313[zip.saturate]
    given (286 steps, penalty 1):
      `forall (X41:poly_nat).
       [X41 = zero_zero_poly_nat ∨ 
        poly_nat2 (reflect_poly_nat X41) zero_zero_nat ≠ zero_zero_nat+*]/47`
0.318[zip.saturate] ### step   288 ###
0.318[zip.saturate]
    given (288 steps, penalty 1):
      `forall (X43:poly_poly_nat).
       [X43 = zero_z1059985641ly_nat ∨ 
        poly_poly_nat2 (reflec781175074ly_nat X43) zero_zero_poly_nat
         ≠ zero_zero_poly_nat+*]/49`
0.320[zip.saturate] ### step   289 ###
0.320[zip.saturate]
    given (289 steps, penalty 1):
      `forall (X45:poly_poly_poly_a).
       [X45 = zero_z2064990175poly_a ∨ 
        poly_poly_poly_a2 (reflec581648976poly_a X45) zero_z2096148049poly_a
         ≠ zero_z2096148049poly_a+*]/51`
0.322[zip.saturate] ### step   290 ###
0.322[zip.saturate]
    given (290 steps, penalty 1):
      `forall (X139:poly_a).
       [X139 = zero_zero_poly_a ∨ 
        coeff_a (reflect_poly_a X139) zero_zero_nat ≠ zero_zero_a+*]/133`
0.323[zip.saturate] ### step   291 ###
0.323[zip.saturate]
    given (291 steps, penalty 1):
      `forall (X141:poly_poly_a).
       [X141 = zero_z2096148049poly_a ∨ 
        coeff_poly_a (reflect_poly_poly_a X141) zero_zero_nat
         ≠ zero_zero_poly_a+*]/135`
0.325[zip.saturate] ### step   292 ###
0.325[zip.saturate]
    given (292 steps, penalty 1):
      `forall (X143:poly_nat).
       [X143 = zero_zero_poly_nat ∨ 
        coeff_nat (reflect_poly_nat X143) zero_zero_nat ≠ zero_zero_nat+*]/137`
0.326[zip.saturate] ### step   293 ###
0.327[zip.saturate]
    given (293 steps, penalty 1):
      `forall (X145:poly_poly_nat).
       [X145 = zero_z1059985641ly_nat ∨ 
        coeff_poly_nat (reflec781175074ly_nat X145) zero_zero_nat
         ≠ zero_zero_poly_nat+*]/139`
0.327[zip.saturate] ### step   294 ###
0.328[zip.saturate]
    given (294 steps, penalty 1):
      `forall (X147:poly_poly_poly_a).
       [X147 = zero_z2064990175poly_a ∨ 
        coeff_poly_poly_a (reflec581648976poly_a X147) zero_zero_nat
         ≠ zero_z2096148049poly_a+*]/141`
0.329[zip.saturate] ### step   295 ###
0.329[zip.saturate]
    given (295 steps, penalty 1):
      `forall (X374:poly_a).
       [X374 = zero_zero_poly_a ∨ 
        coeff_a X374 (degree_a X374) ≠ zero_zero_a+*]/315`
0.331[zip.saturate] ### step   296 ###
0.331[zip.saturate]
    given (296 steps, penalty 1):
      `[coeff_a one_one_poly_a zero_zero_nat ≠ zero_zero_a*]/1094`
0.332[zip.saturate] ### step   297 ###
0.332[zip.saturate]
    given (297 steps, penalty 1):
      `forall (X376:poly_poly_a).
       [X376 = zero_z2096148049poly_a ∨ 
        coeff_poly_a X376 (degree_poly_a X376) ≠ zero_zero_poly_a+*]/317`
0.333[zip.saturate] ### step   298 ###
0.333[zip.saturate]
    given (298 steps, penalty 1):
      `[coeff_poly_a one_one_poly_poly_a zero_zero_nat ≠ zero_zero_poly_a*]/1102`
0.334[zip.saturate] ### step   299 ###
0.334[zip.saturate]
    given (299 steps, penalty 1):
      `forall (X378:poly_nat).
       [X378 = zero_zero_poly_nat ∨ 
        coeff_nat X378 (degree_nat X378) ≠ zero_zero_nat+*]/319`
0.337[zip.saturate] ### step   301 ###
0.337[zip.saturate]
    given (301 steps, penalty 1):
      `forall (X380:poly_poly_nat).
       [X380 = zero_z1059985641ly_nat ∨ 
        coeff_poly_nat X380 (degree_poly_nat X380) ≠ zero_zero_poly_nat+*]/321`
0.338[zip.saturate] ### step   302 ###
0.338[zip.saturate]
    given (302 steps, penalty 1):
      `forall (X382:poly_poly_poly_a).
       [X382 = zero_z2064990175poly_a ∨ 
        coeff_poly_poly_a X382 (degree_poly_poly_a X382)
         ≠ zero_z2096148049poly_a+*]/323`
0.344[zip.saturate] ### step   308 ###
0.345[zip.saturate]
    given (308 steps, penalty 1):
      `forall (X462:poly_a) (X463:a).
       [degree_a X462 = zero_zero_nat ∨ 
        synthetic_div_a X462 X463 ≠ zero_zero_poly_a+*]/391`
0.352[zip.saturate] ### step   310 ###
0.352[zip.saturate]
    given (310 steps, penalty 1):
      `forall (X465:poly_nat) (X466:nat).
       [degree_nat X465 = zero_zero_nat ∨ 
        synthetic_div_nat X465 X466 ≠ zero_zero_poly_nat+*]/393`
0.354[zip.saturate] ### step   312 ###
0.354[zip.saturate]
    given (312 steps, penalty 1):
      `forall (X468:poly_poly_a) (X469:poly_a).
       [degree_poly_a X468 = zero_zero_nat ∨ 
        synthetic_div_poly_a X468 X469 ≠ zero_z2096148049poly_a+*]/395`
0.356[zip.saturate] ### step   315 ###
0.356[zip.saturate]
    given (315 steps, penalty 1):
      `forall (X318:nat).
       [poly_cutoff_a X318 one_one_poly_a = one_one_poly_a* ∨ 
        X318 = zero_zero_nat]/272`
0.358[zip.saturate] ### step   316 ###
0.358[zip.saturate]
    given (316 steps, penalty 1):
      `forall (X320:nat).
       [poly_cutoff_nat X320 one_one_poly_nat = one_one_poly_nat* ∨ 
        X320 = zero_zero_nat]/274`
0.359[zip.saturate] ### step   317 ###
0.359[zip.saturate]
    given (317 steps, penalty 1):
      `forall (X322:nat).
       [poly_cutoff_poly_a X322 one_one_poly_poly_a = one_one_poly_poly_a* ∨ 
        X322 = zero_zero_nat]/276`
0.361[zip.saturate] ### step   318 ###
0.361[zip.saturate]
    given (318 steps, penalty 1):
      `forall (X329:nat).
       [poly_shift_a X329 one_one_poly_a = zero_zero_poly_a* ∨ 
        X329 = zero_zero_nat]/283`
0.362[zip.saturate] ### step   319 ###
0.362[zip.saturate]
    given (319 steps, penalty 1):
      `forall (X331:nat).
       [poly_shift_nat X331 one_one_poly_nat = zero_zero_poly_nat* ∨ 
        X331 = zero_zero_nat]/285`
0.363[zip.saturate] ### step   320 ###
0.363[zip.saturate]
    given (320 steps, penalty 1):
      `forall (X333:nat).
       [poly_shift_poly_a X333 one_one_poly_poly_a = zero_z2096148049poly_a* ∨ 
        X333 = zero_zero_nat]/287`
0.364[zip.saturate] ### step   321 ###
0.364[zip.saturate]
    given (321 steps, penalty 1):
      `forall (X360:nat).
       [X360 = zero_zero_nat ∨ pp (ord_less_nat zero_zero_nat X360)*]/301`
0.370[zip.saturate] ### step   331 ###
0.370[zip.saturate]
    given (331 steps, penalty 1):
      `forall (X0:nat).
       [ord_less_nat X0 one_one_nat = fFalse* ∨ X0 = zero_zero_nat]/840`
0.372[zip.saturate] ### step   335 ###
0.372[zip.saturate]
    given (335 steps, penalty 1):
      `forall (X0:nat).
       [ord_less_eq_nat X0 zero_zero_nat = fFalse* ∨ X0 = zero_zero_nat]/850`
0.382[zip.saturate] ### step   338 ###
0.382[zip.saturate]
    given (338 steps, penalty 1):
      `forall (X0:nat) (X1:nat). [fequal_nat X1 X0 = fFalse* ∨ X1 = X0]/858`
0.384[zip.saturate] ### step   341 ###
0.384[zip.saturate]
    given (341 steps, penalty 1):
      `forall (X0:nat).
       [X0 = zero_zero_nat ∨ ord_less_nat zero_zero_nat X0 = fTrue*]/1150`
0.387[zip.saturate] ### step   343 ###
0.387[zip.saturate]
    given (343 steps, penalty 1):
      `forall (X462:poly_a) (X464:a).
       [synthetic_div_a X462 X464 = zero_zero_poly_a* ∨ 
        degree_a X462 ≠ zero_zero_nat]/392`
0.388[zip.saturate] ### step   345 ###
0.388[zip.saturate]
    given (345 steps, penalty 1):
      `forall (X465:poly_nat) (X467:nat).
       [synthetic_div_nat X465 X467 = zero_zero_poly_nat* ∨ 
        degree_nat X465 ≠ zero_zero_nat]/394`
0.389[zip.saturate] ### step   346 ###
0.389[zip.saturate]
    given (346 steps, penalty 1):
      `forall (X468:poly_poly_a) (X470:poly_a).
       [synthetic_div_poly_a X468 X470 = zero_z2096148049poly_a* ∨ 
        degree_poly_a X468 ≠ zero_zero_nat]/396`
0.390[zip.saturate] ### step   347 ###
0.391[zip.saturate]
    given (347 steps, penalty 1):
      `forall (X94:poly_a). [X94 = pCons_a (sk_A212 X94) (sk_P312 X94)*]/89`
0.392[zip.saturate] ### step   348 ###
0.392[zip.saturate]
    given (348 steps, penalty 1):
      `[sk_A212 zero_zero_poly_a = zero_zero_a*]/1219`
0.393[zip.saturate] ### step   349 ###
0.393[zip.saturate]
    given (349 steps, penalty 1):
      `[sk_P312 zero_zero_poly_a = zero_zero_poly_a*]/1220`
0.394[zip.saturate] ### step   352 ###
0.394[zip.saturate]
    given (352 steps, penalty 1):
      `forall (X95:poly_a). [X95 = pCons_a (sk_A213 X95) (sk_Q29 X95)*]/90`
0.395[zip.saturate] ### step   353 ###
0.395[zip.saturate]
    given (353 steps, penalty 1):
      `[sk_A213 zero_zero_poly_a = zero_zero_a*]/1227`
0.396[zip.saturate] ### step   354 ###
0.396[zip.saturate]
    given (354 steps, penalty 1):
      `[sk_Q29 zero_zero_poly_a = zero_zero_poly_a*]/1228`
0.397[zip.saturate] ### step   357 ###
0.397[zip.saturate]
    given (357 steps, penalty 1):
      `forall (X301:poly_a).
       [poly_a2 X301 zero_zero_a = coeff_a X301 zero_zero_nat*]/255`
0.400[zip.saturate] ### step   358 ###
0.400[zip.saturate]
    given (358 steps, penalty 1):
      `[coeff_a one_one_poly_a zero_zero_nat = one_one_a*]/1238`
0.401[zip.saturate] ### step   362 ###
0.401[zip.saturate]
    given (362 steps, penalty 1):
      `forall (X302:poly_poly_a).
       [poly_poly_a2 X302 zero_zero_poly_a = coeff_poly_a X302 zero_zero_nat*]/256`
0.403[zip.saturate] ### step   363 ###
0.403[zip.saturate]
    given (363 steps, penalty 1):
      `[coeff_poly_a one_one_poly_poly_a zero_zero_nat = one_one_poly_a*]/1251`
0.404[zip.saturate] ### step   367 ###
0.404[zip.saturate]
    given (367 steps, penalty 1):
      `forall (X303:poly_nat).
       [poly_nat2 X303 zero_zero_nat = coeff_nat X303 zero_zero_nat*]/257`
0.406[zip.saturate] ### step   371 ###
0.406[zip.saturate]
    given (371 steps, penalty 1):
      `forall (X304:poly_poly_nat).
       [poly_poly_nat2 X304 zero_zero_poly_nat
         = coeff_poly_nat X304 zero_zero_nat*]/258`
0.407[zip.saturate] ### step   373 ###
0.407[zip.saturate]
    given (373 steps, penalty 1):
      `forall (X305:poly_poly_poly_a).
       [poly_poly_poly_a2 X305 zero_z2096148049poly_a
         = coeff_poly_poly_a X305 zero_zero_nat*]/259`
0.409[zip.saturate] ### step   376 ###
0.409[zip.saturate]
    given (376 steps, penalty 1):
      `forall (X306:a).
       [monom_a X306 zero_zero_nat = pCons_a X306 zero_zero_poly_a*]/260`
0.410[zip.saturate] ### step   378 ###
0.410[zip.saturate]
    given (378 steps, penalty 1):
      `[monom_a one_one_a zero_zero_nat = one_one_poly_a*]/1276`
0.411[zip.saturate] ### step   381 ###
0.411[zip.saturate]
    given (381 steps, penalty 1):
      `forall (X456:a).
       [degree_a (monom_a X456 zero_zero_nat) = zero_zero_nat*]/1277`
0.412[zip.saturate] ### step   384 ###
0.412[zip.saturate]
    given (384 steps, penalty 1):
      `forall (X307:nat).
       [monom_nat X307 zero_zero_nat = pCons_nat X307 zero_zero_poly_nat*]/261`
0.414[zip.saturate] ### step   388 ###
0.414[zip.saturate]
    given (388 steps, penalty 1):
      `forall (X457:nat).
       [degree_nat (monom_nat X457 zero_zero_nat) = zero_zero_nat*]/1287`
0.415[zip.saturate] ### step   391 ###
0.415[zip.saturate]
    given (391 steps, penalty 1):
      `forall (X308:poly_a).
       [monom_poly_a X308 zero_zero_nat
         = pCons_poly_a X308 zero_z2096148049poly_a*]/262`
0.417[zip.saturate] ### step   393 ###
0.417[zip.saturate]
    given (393 steps, penalty 1):
      `[monom_poly_a one_one_poly_a zero_zero_nat = one_one_poly_poly_a*]/1294`
0.418[zip.saturate] ### step   396 ###
0.418[zip.saturate]
    given (396 steps, penalty 1):
      `forall (X458:poly_a).
       [degree_poly_a (monom_poly_a X458 zero_zero_nat) = zero_zero_nat*]/1295`
0.423[zip.saturate] ### step   410 ###
0.423[zip.saturate]
    given (410 steps, penalty 1):
      `forall (X186:a) (X187:poly_a).
       [coeff_a (pCons_a X186 X187) zero_zero_nat = X186*]/177`
0.424[zip.saturate] ### step   411 ###
0.424[zip.saturate]
    given (411 steps, penalty 1):
      `forall (X0:poly_a). [coeff_a X0 zero_zero_nat = sk_A213 X0*]/1315`
0.426[zip.saturate] ### step   412 ###
0.426[zip.saturate]
    given (412 steps, penalty 1):
      `[sk_A213 one_one_poly_a = one_one_a*]/1321`
0.427[zip.saturate] ### step   415 ###
0.427[zip.saturate]
    given (415 steps, penalty 1):
      `forall (X139:poly_a).
       [X139 = zero_zero_poly_a ∨ 
        sk_A213 (reflect_poly_a X139) ≠ zero_zero_a+*]/1318`
0.428[zip.saturate] ### step   416 ###
0.428[zip.saturate]
    given (416 steps, penalty 1):
      `forall (X0:poly_a). [coeff_a X0 zero_zero_nat = sk_A212 X0*]/1316`
0.430[zip.saturate] ### step   419 ###
0.430[zip.saturate]
    given (419 steps, penalty 1):
      `forall (X0:poly_a). [sk_A212 X0 = sk_A213 X0*]/1329`
0.432[zip.saturate] ### step   420 ###
0.432[zip.saturate] given (420 steps, penalty 1): `[sk_A212 = sk_A213*]/1337`
0.433[zip.saturate] ### step   422 ###
0.433[zip.saturate]
    given (422 steps, penalty 1):
      `[sk_A212 one_one_poly_a = one_one_a*]/1336`
0.434[zip.saturate] ### step   425 ###
0.434[zip.saturate]
    given (425 steps, penalty 1):
      `forall (X139:poly_a).
       [X139 = zero_zero_poly_a ∨ 
        sk_A212 (reflect_poly_a X139) ≠ zero_zero_a+*]/1335`
0.435[zip.saturate] ### step   426 ###
0.435[zip.saturate]
    given (426 steps, penalty 1):
      `forall (X186:a) (X187:poly_a). [sk_A212 (pCons_a X186 X187) = X186*]/1343`
0.437[zip.saturate] ### step   427 ###
0.437[zip.saturate]
    given (427 steps, penalty 1):
      `forall (X301:poly_a). [poly_a2 X301 zero_zero_a = sk_A212 X301*]/1347`
0.440[zip.saturate] ### step   432 ###
0.440[zip.saturate]
    given (432 steps, penalty 1):
      `[one_one_poly_a = pCons_a one_one_a (sk_Q29 one_one_poly_a)*]/1324`
0.442[zip.saturate] ### step   438 ###
0.442[zip.saturate]
    given (438 steps, penalty 1):
      `[one_one_poly_a = pCons_a one_one_a (sk_P312 one_one_poly_a)*]/1339`
0.443[zip.saturate] ### step   442 ###
0.443[zip.saturate]
    given (442 steps, penalty 1):
      `forall (X0:a). [sk_A212 (monom_a X0 zero_zero_nat) = X0*]/1346`
0.445[zip.saturate] ### step   446 ###
0.445[zip.saturate]
    given (446 steps, penalty 1):
      `forall (X95:poly_a). [X95 = pCons_a (sk_A212 X95) (sk_Q29 X95)*]/1332`
0.449[zip.saturate] ### step   450 ###
0.449[zip.saturate]
    given (450 steps, penalty 1):
      `forall (X0:a). [c = poly_a2 (pCons_a c cs) X0*]/1360`
0.451[zip.saturate] ### step   455 ###
0.452[zip.saturate]
    given (455 steps, penalty 1):
      `forall (X573:nat) (X574:nat).
       [pp (ord_less_eq_nat (minus_minus_nat X573 X574) X573)*]/492`
0.455[zip.saturate] ### step   462 ###
0.455[zip.saturate]
    given (462 steps, penalty 1):
      `forall (X0:bool) (X1:bool).
       [X1 = X0* ∨ X0 = fFalse* ∨ X1 = fFalse*]/629`
0.499[zip.saturate] ### step   466 ###
0.499[zip.saturate]
    given (466 steps, penalty 1):
      `forall (X0:bool) (X1:bool). [X1 = X0* ∨ X0 = fTrue* ∨ X1 = fTrue*]/634`
0.524[zip.saturate] ### step   474 ###
0.525[zip.saturate]
    given (474 steps, penalty 1):
      `forall (X0:nat) (X1:nat). [ord_less_nat X1 X1 = ord_less_nat X0 X0*]/661`
0.533[zip.saturate] ### step   476 ###
0.533[zip.saturate]
    given (476 steps, penalty 1):
      `forall (X0:bool) (X1:bool). [¬pp X0+* ∨ X1 = fFalse* ∨ X0 = X1*]/1509`
0.545[zip.saturate] ### step   485 ###
0.545[zip.saturate]
    given (485 steps, penalty 1):
      `forall (X0:nat) (X1:bool). [X1 = ord_less_nat X0 X0* ∨ X1 = fTrue*]/662`
0.565[zip.saturate] ### step   493 ###
0.565[zip.saturate]
    given (493 steps, penalty 1):
      `forall (X0:bool) (X1:bool). [X1 = X0* ∨ pp X0* ∨ pp X1*]/670`
0.580[zip.saturate] ### step   494 ###
0.580[zip.saturate]
    given (494 steps, penalty 1):
      `forall (X0:bool) (X1:nat). [ord_less_nat X1 X1 = X0* ∨ pp X0*]/671`
0.589[zip.saturate] ### step   495 ###
0.589[zip.saturate]
    given (495 steps, penalty 1):
      `forall (X0:bool) (X1:bool). [X1 = X0* ∨ pp X0* ∨ X1 = fTrue*]/672`
0.621[zip.saturate] ### step   504 ###
0.621[zip.saturate]
    given (504 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [ord_less_eq_nat X1 X1 = ord_less_eq_nat X0 X0*]/685`
0.636[zip.saturate] ### step   505 ###
0.636[zip.saturate]
    given (505 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [X1 = ord_less_eq_nat X0 X0* ∨ X1 = fFalse*]/688`
0.669[zip.saturate] ### step   521 ###
0.669[zip.saturate]
    given (521 steps, penalty 1):
      `[coeff_poly_nat (reflec781175074ly_nat zero_z1059985641ly_nat) 
         zero_zero_nat = zero_zero_poly_nat*]/1893`
0.676[zip.saturate] ### step   523 ###
0.676[zip.saturate]
    given (523 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [ord_less_eq_nat (minus_minus_nat X0 X1) X0 = fTrue*]/1402`
0.691[zip.saturate] ### step   542 ###
0.692[zip.saturate]
    given (542 steps, penalty 1):
      `[coeff_poly_poly_a (reflec581648976poly_a zero_z2064990175poly_a) 
         zero_zero_nat = zero_z2096148049poly_a*]/1998`
0.700[zip.saturate] ### step   543 ###
0.700[zip.saturate]
    given (543 steps, penalty 1):
      `forall (X2:bool). [X2 = fTrue* ∨ true]/2024`
0.713[zip.saturate] ### step   553 ###
0.713[zip.saturate]
    given (553 steps, penalty 1):
      `forall (X47:a) (X48:poly_a).
       [order_a X47 X48 = zero_zero_nat* ∨ poly_a2 X48 X47 = zero_zero_a]/53`
0.721[zip.saturate] ### step   564 ###
0.721[zip.saturate]
    given (564 steps, penalty 1):
      `forall (X49:poly_a) (X50:poly_poly_a).
       [order_poly_a X49 X50 = zero_zero_nat* ∨ 
        poly_poly_a2 X50 X49 = zero_zero_poly_a]/54`
0.724[zip.saturate] ### step   572 ###
0.724[zip.saturate]
    given (572 steps, penalty 1):
      `forall (F484:nat → bool) (X485:nat).
       [¬pp (F484 (sk_N2 F484))* ∨ pp (F484 X485)*]/412`
0.735[zip.saturate] ### step   575 ###
0.735[zip.saturate]
    given (575 steps, penalty 1):
      `forall (X51:poly_poly_a) (X52:poly_poly_poly_a).
       [order_poly_poly_a X51 X52 = zero_zero_nat* ∨ 
        poly_poly_poly_a2 X52 X51 = zero_z2096148049poly_a]/55`
0.742[zip.saturate] ### step   582 ###
0.742[zip.saturate]
    given (582 steps, penalty 1):
      `forall (F488:nat → bool) (X489:nat).
       [¬pp (F488 (sk_N21 F488))* ∨ pp (F488 X489)*]/415`
0.777[zip.saturate] ### step   586 ###
0.777[zip.saturate]
    given (586 steps, penalty 1):
      `forall (X53:poly_a) (X54:poly_a) (X55:a) (X56:a).
       [X54 = X53* ∨ pCons_a X56 X54 ≠ pCons_a X55 X53+*]/56`
0.785[zip.saturate] ### step   597 ###
0.785[zip.saturate]
    given (597 steps, penalty 1):
      `forall (X53:poly_a) (X54:poly_a) (X55:a) (X56:a).
       [X56 = X55* ∨ pCons_a X56 X54 ≠ pCons_a X55 X53+*]/57`
0.802[zip.saturate] ### step   628 ###
0.802[zip.saturate]
    given (628 steps, penalty 1):
      `forall (X548:nat) (X549:nat).
       [pp (ord_less_eq_nat X548 X549) ∨ 
        minus_minus_nat X548 X549 ≠ zero_zero_nat+*]/476`
0.807[zip.saturate] ### step   641 ###
0.807[zip.saturate]
    given (641 steps, penalty 1):
      `forall (X58:a).
       [reflect_poly_a (monom_a X58 zero_zero_nat)
         = monom_a X58 zero_zero_nat*]/2547`
0.819[zip.saturate] ### step   652 ###
0.819[zip.saturate]
    given (652 steps, penalty 1):
      `forall (X59:nat).
       [reflect_poly_nat (monom_nat X59 zero_zero_nat)
         = monom_nat X59 zero_zero_nat*]/2686`
0.823[zip.saturate] ### step   655 ###
0.823[zip.saturate]
    given (655 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [ord_less_nat X0 X0 ≠ fTrue+* ∨ X1 = fTrue*]/2601`
0.825[zip.saturate] ### step   663 ###
0.825[zip.saturate]
    given (663 steps, penalty 1):
      `forall (X60:poly_a).
       [reflect_poly_poly_a (monom_poly_a X60 zero_zero_nat)
         = monom_poly_a X60 zero_zero_nat*]/2742`
0.831[zip.saturate] ### step   674 ###
0.831[zip.saturate]
    given (674 steps, penalty 1):
      `forall (F61:poly_a → poly_a → bool) (X62:poly_a) (X63:poly_a).
       [¬pp
           (F61 (pCons_a (sk_A2 F61) (sk_P3 F61)) 
             (pCons_a (sk_B2 F61) (sk_Q2 F61)))* ∨ 
        ¬pp (F61 zero_zero_poly_a zero_zero_poly_a)* ∨ pp (F61 X62 X63)*]/65`
0.843[zip.saturate] ### step   685 ###
0.843[zip.saturate]
    given (685 steps, penalty 1):
      `forall (F0:poly_a → poly_a → bool).
       [pp (F0 (sk_P3 F0) (sk_Q2 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_a zero_zero_poly_a)*]/2860`
0.850[zip.saturate] ### step   694 ###
0.850[zip.saturate]
    given (694 steps, penalty 1):
      `forall (F64:poly_a → poly_nat → bool) (X65:poly_a) (X66:poly_nat).
       [¬pp
           (F64 (pCons_a (sk_A21 F64) (sk_P31 F64)) 
             (pCons_nat (sk_B21 F64) (sk_Q21 F64)))* ∨ 
        ¬pp (F64 zero_zero_poly_a zero_zero_poly_nat)* ∨ pp (F64 X65 X66)*]/67`
0.863[zip.saturate] ### step   705 ###
0.864[zip.saturate]
    given (705 steps, penalty 1):
      `forall (F0:poly_a → poly_nat → bool).
       [pp (F0 (sk_P31 F0) (sk_Q21 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_a zero_zero_poly_nat)*]/2945`
0.877[zip.saturate] ### step   716 ###
0.877[zip.saturate]
    given (716 steps, penalty 1):
      `forall (F67:poly_a → poly_poly_a → bool) (X68:poly_a) 
              (X69:poly_poly_a).
       [¬pp
           (F67 (pCons_a (sk_A22 F67) (sk_P32 F67)) 
             (pCons_poly_a (sk_B22 F67) (sk_Q22 F67)))* ∨ 
        ¬pp (F67 zero_zero_poly_a zero_z2096148049poly_a)* ∨ 
        pp (F67 X68 X69)*]/69`
0.886[zip.saturate] ### step   723 ###
0.886[zip.saturate]
    given (723 steps, penalty 1):
      `forall (X546:nat) (X547:nat).
       [minus_minus_nat X546 X547 = zero_zero_nat* ∨ 
        ¬pp (ord_less_eq_nat X546 X547)]/475`
0.893[zip.saturate] ### step   727 ###
0.893[zip.saturate]
    given (727 steps, penalty 1):
      `forall (F0:poly_a → poly_poly_a → bool).
       [pp (F0 (sk_P32 F0) (sk_Q22 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_a zero_z2096148049poly_a)*]/3045`
0.905[zip.saturate] ### step   738 ###
0.905[zip.saturate]
    given (738 steps, penalty 1):
      `forall (F70:poly_nat → poly_a → bool) (X71:poly_nat) (X72:poly_a).
       [¬pp
           (F70 (pCons_nat (sk_A23 F70) (sk_P33 F70)) 
             (pCons_a (sk_B23 F70) (sk_Q23 F70)))* ∨ 
        ¬pp (F70 zero_zero_poly_nat zero_zero_poly_a)* ∨ pp (F70 X71 X72)*]/71`
0.926[zip.saturate] ### step   747 ###
0.926[zip.saturate]
    given (747 steps, penalty 1):
      `forall (X557:nat) (X558:nat) (F559:nat → bool).
       [zip_tseitin0 X557 X558 F559* ∨ ¬pp (ord_less_eq_nat X557 X558)]/483`
0.933[zip.saturate] ### step   749 ###
0.933[zip.saturate]
    given (749 steps, penalty 1):
      `forall (F0:poly_nat → poly_a → bool).
       [pp (F0 (sk_P33 F0) (sk_Q23 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_nat zero_zero_poly_a)*]/3196`
0.940[zip.saturate] ### step   750 ###
0.940[zip.saturate]
    given (750 steps, penalty 1):
      `forall (X598:nat) (X599:nat).
       [pp (ord_less_eq_nat X599 X598)* ∨ ¬pp (ord_less_nat X599 X598)]/505`
0.950[zip.saturate] ### step   760 ###
0.950[zip.saturate]
    given (760 steps, penalty 1):
      `forall (F73:poly_nat → poly_nat → bool) (X74:poly_nat) 
              (X75:poly_nat).
       [¬pp
           (F73 (pCons_nat (sk_A24 F73) (sk_P34 F73)) 
             (pCons_nat (sk_B24 F73) (sk_Q24 F73)))* ∨ 
        ¬pp (F73 zero_zero_poly_nat zero_zero_poly_nat)* ∨ 
        pp (F73 X74 X75)*]/73`
0.965[zip.saturate] ### step   769 ###
0.965[zip.saturate]
    given (769 steps, penalty 1):
      `forall (X441:a) (X442:nat).
       [X441 = zero_zero_a ∨ degree_a (monom_a X441 X442) = X442*]/375`
0.984[zip.saturate] ### step   771 ###
0.984[zip.saturate]
    given (771 steps, penalty 1):
      `forall (F0:poly_nat → poly_nat → bool).
       [pp (F0 (sk_P34 F0) (sk_Q24 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_nat zero_zero_poly_nat)*]/3465`
0.996[zip.saturate] ### step   782 ###
0.996[zip.saturate]
    given (782 steps, penalty 1):
      `forall (F76:poly_nat → poly_poly_a → bool) (X77:poly_nat) 
              (X78:poly_poly_a).
       [¬pp
           (F76 (pCons_nat (sk_A25 F76) (sk_P35 F76)) 
             (pCons_poly_a (sk_B25 F76) (sk_Q25 F76)))* ∨ 
        ¬pp (F76 zero_zero_poly_nat zero_z2096148049poly_a)* ∨ 
        pp (F76 X77 X78)*]/75`
1.026[zip.saturate] ### step   791 ###
1.027[zip.saturate]
    given (791 steps, penalty 1):
      `forall (X0:bool) (X1:nat). [¬pp X0+* ∨ X0 = ord_less_eq_nat X1 X1*]/3515`
1.036[zip.saturate] ### step   793 ###
1.036[zip.saturate]
    given (793 steps, penalty 1):
      `forall (F0:poly_nat → poly_poly_a → bool).
       [pp (F0 (sk_P35 F0) (sk_Q25 F0))* ∨ 
        ¬pp (F0 zero_zero_poly_nat zero_z2096148049poly_a)*]/3606`
1.057[zip.saturate] ### step   804 ###
1.057[zip.saturate]
    given (804 steps, penalty 1):
      `forall (F79:poly_poly_a → poly_a → bool) (X80:poly_poly_a) 
              (X81:poly_a).
       [¬pp
           (F79 (pCons_poly_a (sk_A26 F79) (sk_P36 F79)) 
             (pCons_a (sk_B26 F79) (sk_Q26 F79)))* ∨ 
        ¬pp (F79 zero_z2096148049poly_a zero_zero_poly_a)* ∨ 
        pp (F79 X80 X81)*]/77`
1.082[zip.saturate] ### step   815 ###
1.082[zip.saturate]
    given (815 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_a → bool).
       [pp (F0 (sk_P36 F0) (sk_Q26 F0))* ∨ 
        ¬pp (F0 zero_z2096148049poly_a zero_zero_poly_a)*]/3728`
1.105[zip.saturate] ### step   826 ###
1.105[zip.saturate]
    given (826 steps, penalty 1):
      `forall (F82:poly_poly_a → poly_nat → bool) (X83:poly_poly_a) 
              (X84:poly_nat).
       [¬pp
           (F82 (pCons_poly_a (sk_A27 F82) (sk_P37 F82)) 
             (pCons_nat (sk_B27 F82) (sk_Q27 F82)))* ∨ 
        ¬pp (F82 zero_z2096148049poly_a zero_zero_poly_nat)* ∨ 
        pp (F82 X83 X84)*]/79`
1.128[zip.saturate] ### step   837 ###
1.128[zip.saturate]
    given (837 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_nat → bool).
       [pp (F0 (sk_P37 F0) (sk_Q27 F0))* ∨ 
        ¬pp (F0 zero_z2096148049poly_a zero_zero_poly_nat)*]/3805`
1.217[zip.saturate] ### step   848 ###
1.217[zip.saturate]
    given (848 steps, penalty 1):
      `forall (F85:poly_poly_a → poly_poly_a → bool) (X86:poly_poly_a) 
              (X87:poly_poly_a).
       [¬pp
           (F85 (pCons_poly_a (sk_A28 F85) (sk_P38 F85)) 
             (pCons_poly_a (sk_B28 F85) (sk_Q28 F85)))* ∨ 
        ¬pp (F85 zero_z2096148049poly_a zero_z2096148049poly_a)* ∨ 
        pp (F85 X86 X87)*]/81`
1.244[zip.saturate] ### step   851 ###
1.244[zip.saturate]
    given (851 steps, penalty 1):
      `[reflect_poly_a one_one_poly_a = monom_a one_one_a zero_zero_nat*]/3900`
1.253[zip.saturate] ### step   852 ###
1.253[zip.saturate]
    given (852 steps, penalty 1):
      `[reflect_poly_nat one_one_poly_nat
         = monom_nat one_one_nat zero_zero_nat*]/3903`
1.264[zip.saturate] ### step   853 ###
1.264[zip.saturate]
    given (853 steps, penalty 1):
      `[reflect_poly_poly_a one_one_poly_poly_a
         = monom_poly_a one_one_poly_a zero_zero_nat*]/3966`
1.266[zip.saturate] ### step   854 ###
1.266[zip.saturate]
    given (854 steps, penalty 1):
      `forall (X1:poly_a) (X2:a). [X1 = sk_Q29 (pCons_a X2 X1)*]/4112`
1.277[zip.saturate] ### step   855 ###
1.277[zip.saturate]
    given (855 steps, penalty 1):
      `[reflect_poly_a one_one_poly_a ≠ zero_zero_poly_a*]/4316`
1.278[zip.saturate] ### step   856 ###
1.278[zip.saturate]
    given (856 steps, penalty 1):
      `[reflect_poly_nat one_one_poly_nat ≠ zero_zero_poly_nat*]/4318`
1.279[zip.saturate] ### step   857 ###
1.279[zip.saturate]
    given (857 steps, penalty 1):
      `[reflect_poly_poly_a one_one_poly_poly_a ≠ zero_z2096148049poly_a*]/4320`
1.280[zip.saturate] ### step   858 ###
1.280[zip.saturate]
    given (858 steps, penalty 1):
      `[reflect_poly_a one_one_poly_a = one_one_poly_a*]/4289`
1.282[zip.saturate] ### step   859 ###
1.282[zip.saturate]
    given (859 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_poly_a → bool).
       [pp (F0 (sk_P38 F0) (sk_Q28 F0))* ∨ 
        ¬pp (F0 zero_z2096148049poly_a zero_z2096148049poly_a)*]/4327`
1.308[zip.saturate] ### step   863 ###
1.308[zip.saturate]
    given (863 steps, penalty 1):
      `[reflect_poly_nat one_one_poly_nat = one_one_poly_nat*]/4296`
1.312[zip.saturate] ### step   867 ###
1.312[zip.saturate]
    given (867 steps, penalty 1):
      `[reflect_poly_poly_a one_one_poly_poly_a = one_one_poly_poly_a*]/4303`
1.315[zip.saturate] ### step   870 ###
1.315[zip.saturate]
    given (870 steps, penalty 1):
      `forall (F88:poly_a → bool) (X89:poly_a).
       [¬pp (F88 (pCons_a (sk_A29 F88) (sk_P39 F88)))* ∨ pp (F88 X89)*]/83`
1.339[zip.saturate] ### step   876 ###
1.339[zip.saturate]
    given (876 steps, penalty 1):
      `forall (X0:poly_a). [sk_P312 X0 = sk_Q29 X0*]/4310`
1.340[zip.saturate] ### step   877 ###
1.340[zip.saturate] given (877 steps, penalty 1): `[sk_P312 = sk_Q29*]/4375`
1.342[zip.saturate] ### step   881 ###
1.342[zip.saturate]
    given (881 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [sk_P39 F0 = zero_zero_poly_a* ∨ pp (F0 (sk_P39 F0))*]/4379`
1.359[zip.saturate] ### step   882 ###
1.359[zip.saturate]
    given (882 steps, penalty 1):
      `[sk_P39 is_zero_a = zero_zero_poly_a*]/4384`
1.360[zip.saturate] ### step   887 ###
1.360[zip.saturate]
    given (887 steps, penalty 1):
      `forall (X1:poly_a) (X2:a). [X1 = sk_P312 (pCons_a X2 X1)*]/4113`
1.362[zip.saturate] ### step   892 ###
1.362[zip.saturate]
    given (892 steps, penalty 1):
      `forall (F90:poly_nat → bool) (X91:poly_nat).
       [¬pp (F90 (pCons_nat (sk_A210 F90) (sk_P310 F90)))* ∨ pp (F90 X91)*]/85`
1.385[zip.saturate] ### step   895 ###
1.385[zip.saturate]
    given (895 steps, penalty 1):
      `forall (X0:a).
       [zero_zero_poly_a = sk_P312 (monom_a X0 zero_zero_nat)*]/4412`
1.386[zip.saturate] ### step   897 ###
1.386[zip.saturate]
    given (897 steps, penalty 1):
      `[zero_zero_poly_a = sk_P312 one_one_poly_a*]/4415`
1.388[zip.saturate] ### step   903 ###
1.388[zip.saturate]
    given (903 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [sk_P310 F0 = zero_zero_poly_nat* ∨ pp (F0 (sk_P310 F0))*]/4423`
1.398[zip.saturate] ### step   904 ###
1.398[zip.saturate]
    given (904 steps, penalty 1):
      `[sk_P310 is_zero_nat = zero_zero_poly_nat*]/4428`
1.399[zip.saturate] ### step   908 ###
1.399[zip.saturate]
    given (908 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [pCons_a X1 X0 ≠ one_one_poly_a+* ∨ X1 = one_one_a*]/3886`
1.400[zip.saturate] ### step   910 ###
1.400[zip.saturate]
    given (910 steps, penalty 1):
      `forall (X0:a).
       [monom_a X0 zero_zero_nat ≠ one_one_poly_a+* ∨ X0 = one_one_a]/4431`
1.402[zip.saturate] ### step   914 ###
1.402[zip.saturate]
    given (914 steps, penalty 1):
      `forall (F92:poly_poly_a → bool) (X93:poly_poly_a).
       [¬pp (F92 (pCons_poly_a (sk_A211 F92) (sk_P311 F92)))* ∨ 
        pp (F92 X93)*]/87`
1.433[zip.saturate] ### step   925 ###
1.433[zip.saturate]
    given (925 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [sk_P311 F0 = zero_z2096148049poly_a* ∨ pp (F0 (sk_P311 F0))*]/4461`
1.443[zip.saturate] ### step   926 ###
1.443[zip.saturate]
    given (926 steps, penalty 1):
      `[sk_P311 is_zero_poly_a = zero_z2096148049poly_a*]/4466`
1.446[zip.saturate] ### step   942 ###
1.446[zip.saturate]
    given (942 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬pp (F0 (sk_N2 F0))* ∨ F0 X1 = fTrue*]/3853`
1.453[zip.saturate] ### step   943 ###
1.453[zip.saturate]
    given (943 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬zip_tseitin1 (sk_N2 F0) F0* ∨ pp (F0 X1)*]/3860`
1.462[zip.saturate] ### step   944 ###
1.462[zip.saturate]
    given (944 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬pp (F0 (sk_N21 F0))* ∨ F0 X1 = fTrue*]/3863`
1.473[zip.saturate] ### step   946 ###
1.473[zip.saturate]
    given (946 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬zip_tseitin1 (sk_N21 F0) F0* ∨ pp (F0 X1)*]/3871`
1.481[zip.saturate] ### step   948 ###
1.481[zip.saturate]
    given (948 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [pCons_a X1 X0 ≠ one_one_poly_a+* ∨ X0 = zero_zero_poly_a]/4483`
1.498[zip.saturate] ### step   953 ###
1.498[zip.saturate]
    given (953 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬zip_tseitin1 (sk_N2 F0) F0* ∨ F0 X1 = fTrue*]/4539`
1.504[zip.saturate] ### step   956 ###
1.504[zip.saturate]
    given (956 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool).
       [pp (F0 (sk_P313 F0))* ∨ ¬pp (F0 zero_z1059985641ly_nat)*]/4553`
1.520[zip.saturate] ### step   960 ###
1.520[zip.saturate]
    given (960 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [pCons_a X2 X1 ≠ monom_a X0 zero_zero_nat+* ∨ 
        X1 = zero_zero_poly_a]/3877`
1.522[zip.saturate] ### step   962 ###
1.522[zip.saturate]
    given (962 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat X1 X0) ∨ ord_less_eq_nat X1 X0 = fTrue*]/4049`
1.526[zip.saturate] ### step   963 ###
1.526[zip.saturate]
    given (963 steps, penalty 1):
      `forall (X443:poly_a) (X444:nat).
       [X443 = zero_zero_poly_a ∨ 
        degree_poly_a (monom_poly_a X443 X444) = X444*]/376`
1.540[zip.saturate] ### step   966 ###
1.540[zip.saturate]
    given (966 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬zip_tseitin1 (sk_N21 F0) F0* ∨ F0 X1 = fTrue*]/4620`
1.552[zip.saturate] ### step   967 ###
1.552[zip.saturate]
    given (967 steps, penalty 1):
      `forall (F96:poly_poly_nat → bool) (X97:poly_poly_nat).
       [¬pp (F96 (pCons_poly_nat (sk_A214 F96) (sk_P313 F96)))* ∨ 
        ¬pp (F96 zero_z1059985641ly_nat)* ∨ pp (F96 X97)*]/92`
1.583[zip.saturate] ### step   975 ###
1.583[zip.saturate]
    given (975 steps, penalty 1):
      `forall (X445:nat) (X446:nat).
       [X445 = zero_zero_nat ∨ degree_nat (monom_nat X445 X446) = X446*]/377`
1.585[zip.saturate] ### step   976 ###
1.585[zip.saturate]
    given (976 steps, penalty 1):
      `forall (X447:poly_nat) (X448:nat).
       [X447 = zero_zero_poly_nat ∨ 
        degree_poly_nat (monom_poly_nat X447 X448) = X448*]/378`
1.588[zip.saturate] ### step   977 ###
1.588[zip.saturate]
    given (977 steps, penalty 1):
      `forall (X449:poly_poly_a) (X450:nat).
       [X449 = zero_z2096148049poly_a ∨ 
        degree_poly_poly_a (monom_poly_poly_a X449 X450) = X450*]/379`
1.599[zip.saturate] ### step   978 ###
1.599[zip.saturate]
    given (978 steps, penalty 1):
      `forall (F96:poly_poly_nat → bool) (X97:poly_poly_nat).
       [sk_A214 F96 ≠ zero_zero_poly_nat* ∨ 
        sk_P313 F96 ≠ zero_z1059985641ly_nat ∨ 
        ¬pp (F96 zero_z1059985641ly_nat)* ∨ pp (F96 X97)*]/93`
1.626[zip.saturate] ### step   980 ###
1.626[zip.saturate]
    given (980 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool).
       [¬pp (F0 zero_z1059985641ly_nat)* ∨ F0 (sk_P313 F0) = fTrue*]/4703`
1.665[zip.saturate] ### step   989 ###
1.665[zip.saturate]
    given (989 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool).
       [pp (F0 (sk_P314 F0))* ∨ ¬pp (F0 zero_z2064990175poly_a)*]/4820`
1.705[zip.saturate] ### step   990 ###
1.705[zip.saturate]
    given (990 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a). [if_a X0 X2 X1 = X1* ∨ pp X0]/879`
1.707[zip.saturate] ### step   991 ###
1.707[zip.saturate]
    given (991 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a). [if_a X0 X2 X1 = X1* ∨ X0 = fTrue]/881`
1.711[zip.saturate] ### step   992 ###
1.711[zip.saturate]
    given (992 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a). [if_a X0 X1 X2 = X1* ∨ X0 = fFalse]/887`
1.713[zip.saturate] ### step   994 ###
1.713[zip.saturate]
    given (994 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat). [if_nat X0 X2 X1 = X1* ∨ pp X0]/893`
1.726[zip.saturate] ### step   996 ###
1.726[zip.saturate]
    given (996 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat).
       [if_nat X0 X2 X1 = X1* ∨ X0 = fTrue]/895`
1.730[zip.saturate] ### step   997 ###
1.730[zip.saturate]
    given (997 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat).
       [if_nat X0 X1 X2 = X1* ∨ X0 = fFalse]/897`
1.738[zip.saturate] ### step  1000 ###
1.738[zip.saturate]
    given (1000 steps, penalty 1):
      `forall (F98:poly_poly_poly_a → bool) (X99:poly_poly_poly_a).
       [¬pp (F98 (pCons_poly_poly_a (sk_A215 F98) (sk_P314 F98)))* ∨ 
        ¬pp (F98 zero_z2064990175poly_a)* ∨ pp (F98 X99)*]/95`
1.767[zip.saturate] ### step  1001 ###
1.767[zip.saturate]
    given (1001 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a X0 X2 X1 = X1* ∨ pp X0]/899`
1.771[zip.saturate] ### step  1002 ###
1.771[zip.saturate]
    given (1002 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a X0 X2 X1 = X1* ∨ X0 = fTrue]/901`
1.775[zip.saturate] ### step  1003 ###
1.775[zip.saturate]
    given (1003 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a X0 X1 X2 = X1* ∨ X0 = fFalse]/903`
1.780[zip.saturate] ### step  1005 ###
1.780[zip.saturate]
    given (1005 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat X0 X2 X1 = X1* ∨ pp X0]/905`
1.782[zip.saturate] ### step  1006 ###
1.782[zip.saturate]
    given (1006 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat X0 X2 X1 = X1* ∨ X0 = fTrue]/907`
1.784[zip.saturate] ### step  1007 ###
1.784[zip.saturate]
    given (1007 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat X0 X1 X2 = X1* ∨ X0 = fFalse]/909`
1.786[zip.saturate] ### step  1009 ###
1.786[zip.saturate]
    given (1009 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a X0 X2 X1 = X1* ∨ pp X0]/911`
1.805[zip.saturate] ### step  1011 ###
1.805[zip.saturate]
    given (1011 steps, penalty 1):
      `forall (F98:poly_poly_poly_a → bool) (X99:poly_poly_poly_a).
       [sk_A215 F98 ≠ zero_z2096148049poly_a* ∨ 
        sk_P314 F98 ≠ zero_z2064990175poly_a ∨ 
        ¬pp (F98 zero_z2064990175poly_a)* ∨ pp (F98 X99)*]/96`
1.841[zip.saturate] ### step  1022 ###
1.841[zip.saturate]
    given (1022 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [pp (F0 (sk_P315 F0))* ∨ ¬pp (F0 zero_zero_poly_a)*]/5039`
1.880[zip.saturate] ### step  1033 ###
1.880[zip.saturate]
    given (1033 steps, penalty 1):
      `forall (F100:poly_a → bool) (X101:poly_a).
       [¬pp (F100 (pCons_a (sk_A216 F100) (sk_P315 F100)))* ∨ 
        ¬pp (F100 zero_zero_poly_a)* ∨ pp (F100 X101)*]/98`
1.920[zip.saturate] ### step  1034 ###
1.920[zip.saturate]
    given (1034 steps, penalty 1):
      `[sk_P315 is_zero_a = zero_zero_poly_a*]/5106`
1.942[zip.saturate] ### step  1041 ###
1.942[zip.saturate]
    given (1041 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool).
       [¬pp (F0 zero_z2064990175poly_a)* ∨ F0 (sk_P314 F0) = fTrue*]/4992`
1.976[zip.saturate] ### step  1042 ###
1.976[zip.saturate]
    given (1042 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [¬pp (F0 zero_zero_poly_a)* ∨ F0 (sk_P315 F0) = fTrue*]/5095`
2.008[zip.saturate] ### step  1043 ###
2.008[zip.saturate]
    given (1043 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a X0 X2 X1 = X1* ∨ X0 = fTrue]/913`
2.015[zip.saturate] ### step  1044 ###
2.015[zip.saturate]
    given (1044 steps, penalty 1):
      `forall (F100:poly_a → bool) (X101:poly_a).
       [sk_A216 F100 ≠ zero_zero_a* ∨ 
        sk_P315 F100 ≠ zero_zero_poly_a ∨ 
        ¬pp (F100 zero_zero_poly_a)* ∨ pp (F100 X101)*]/99`
2.054[zip.saturate] ### step  1045 ###
2.054[zip.saturate]
    given (1045 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a X0 X1 X2 = X1* ∨ X0 = fFalse]/915`
2.061[zip.saturate] ### step  1053 ###
2.061[zip.saturate]
    given (1053 steps, penalty 1):
      `forall (X0:poly_a) (X1:bool).
       [X0 = zero_zero_poly_a ∨ is_zero_a X0 = X1* ∨ X1 = fTrue*]/1913`
2.083[zip.saturate] ### step  1054 ###
2.083[zip.saturate]
    given (1054 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:bool).
       [X0 = zero_z2096148049poly_a ∨ is_zero_poly_a X0 = X1* ∨ 
        X1 = fTrue*]/1915`
2.106[zip.saturate] ### step  1055 ###
2.106[zip.saturate]
    given (1055 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [pp (F0 (sk_P316 F0))* ∨ ¬pp (F0 zero_zero_poly_nat)*]/5215`
2.137[zip.saturate] ### step  1057 ###
2.137[zip.saturate]
    given (1057 steps, penalty 1):
      `forall (X0:poly_nat) (X1:bool).
       [X0 = zero_zero_poly_nat ∨ is_zero_nat X0 = X1* ∨ X1 = fTrue*]/1917`
2.161[zip.saturate] ### step  1061 ###
2.161[zip.saturate]
    given (1061 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat).
       [X0 = zero_zero_poly_a ∨ is_zero_a X0 = ord_less_nat X1 X1*]/2419`
2.165[zip.saturate] ### step  1064 ###
2.165[zip.saturate]
    given (1064 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat).
       [X0 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X0 = ord_less_nat X1 X1*]/2421`
2.168[zip.saturate] ### step  1065 ###
2.168[zip.saturate]
    given (1065 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [X0 = zero_zero_poly_nat ∨ is_zero_nat X0 = ord_less_nat X1 X1*]/2423`
2.193[zip.saturate] ### step  1066 ###
2.193[zip.saturate]
    given (1066 steps, penalty 1):
      `forall (F102:poly_nat → bool) (X103:poly_nat).
       [¬pp (F102 (pCons_nat (sk_A217 F102) (sk_P316 F102)))* ∨ 
        ¬pp (F102 zero_zero_poly_nat)* ∨ pp (F102 X103)*]/101`
2.222[zip.saturate] ### step  1067 ###
2.222[zip.saturate]
    given (1067 steps, penalty 1):
      `forall (X0:poly_a).
       [X0 = zero_zero_poly_a* ∨ sk_A216 is_zero_a ≠ zero_zero_a+*]/5308`
2.228[zip.saturate] ### step  1076 ###
2.228[zip.saturate]
    given (1076 steps, penalty 1):
      `forall (X0:poly_a) (X1:bool).
       [pp X1* ∨ is_zero_a X0 = X1* ∨ X0 = zero_zero_poly_a]/2605`
2.247[zip.saturate] ### step  1077 ###
2.247[zip.saturate]
    given (1077 steps, penalty 1):
      `forall (F102:poly_nat → bool) (X103:poly_nat).
       [sk_A217 F102 ≠ zero_zero_nat* ∨ 
        sk_P316 F102 ≠ zero_zero_poly_nat ∨ 
        ¬pp (F102 zero_zero_poly_nat)* ∨ pp (F102 X103)*]/102`
2.268[zip.saturate] ### step  1079 ###
2.268[zip.saturate]
    given (1079 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:bool).
       [pp X1* ∨ is_zero_poly_a X0 = X1* ∨ X0 = zero_z2096148049poly_a]/2606`
2.283[zip.saturate] ### step  1082 ###
2.283[zip.saturate]
    given (1082 steps, penalty 1):
      `forall (X0:poly_nat) (X1:bool).
       [pp X1* ∨ is_zero_nat X0 = X1* ∨ X0 = zero_zero_poly_nat]/2607`
2.299[zip.saturate] ### step  1088 ###
2.299[zip.saturate]
    given (1088 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [pp (F0 (sk_P317 F0))* ∨ ¬pp (F0 zero_z2096148049poly_a)*]/5434`
2.327[zip.saturate] ### step  1099 ###
2.327[zip.saturate]
    given (1099 steps, penalty 1):
      `forall (F104:poly_poly_a → bool) (X105:poly_poly_a).
       [¬pp (F104 (pCons_poly_a (sk_A218 F104) (sk_P317 F104)))* ∨ 
        ¬pp (F104 zero_z2096148049poly_a)* ∨ pp (F104 X105)*]/104`
2.355[zip.saturate] ### step  1101 ###
2.355[zip.saturate]
    given (1101 steps, penalty 1):
      `forall (X158:poly_nat) (X159:nat) (X160:poly_nat).
       [X158 = X160* ∨ 
        monom_poly_nat X158 X159
         ≠ pCons_poly_nat X160 zero_z1059985641ly_nat+*]/150`
2.368[zip.saturate] ### step  1103 ###
2.368[zip.saturate]
    given (1103 steps, penalty 1):
      `forall (X0:poly_a) (X1:bool).
       [is_zero_a X0 ≠ fTrue+* ∨ X1 = fTrue* ∨ X0 = zero_zero_poly_a]/5540`
2.381[zip.saturate] ### step  1109 ###
2.381[zip.saturate]
    given (1109 steps, penalty 1):
      `forall (F104:poly_poly_a → bool) (X105:poly_poly_a).
       [sk_A218 F104 ≠ zero_zero_poly_a* ∨ 
        sk_P317 F104 ≠ zero_z2096148049poly_a ∨ 
        ¬pp (F104 zero_z2096148049poly_a)* ∨ pp (F104 X105)*]/105`
2.406[zip.saturate] ### step  1112 ###
2.406[zip.saturate]
    given (1112 steps, penalty 1):
      `forall (X162:poly_poly_a) (X163:nat) (X164:poly_poly_a).
       [X162 = X164* ∨ 
        monom_poly_poly_a X162 X163
         ≠ pCons_poly_poly_a X164 zero_z2064990175poly_a+*]/154`
2.407[zip.saturate] ### step  1113 ###
2.407[zip.saturate]
    given (1113 steps, penalty 1):
      `forall (X166:a) (X167:nat) (X168:a).
       [X166 = X168* ∨ monom_a X166 X167 ≠ monom_a X168 zero_zero_nat+*]/5624`
2.416[zip.saturate] ### step  1119 ###
2.416[zip.saturate]
    given (1119 steps, penalty 1):
      `forall (X170:nat) (X171:nat) (X172:nat).
       [X170 = X172* ∨ 
        monom_nat X170 X171 ≠ monom_nat X172 zero_zero_nat+*]/5667`
2.419[zip.saturate] ### step  1120 ###
2.419[zip.saturate]
    given (1120 steps, penalty 1):
      `forall (X106:poly_a) (X107:a).
       [X106 = zero_zero_poly_a ∨ 
        order_a X107 X106 ≠ zero_zero_nat+* ∨ 
        poly_a2 X106 X107 ≠ zero_zero_a]/106`
2.428[zip.saturate] ### step  1121 ###
2.428[zip.saturate]
    given (1121 steps, penalty 1):
      `forall (X174:poly_a) (X175:nat) (X176:poly_a).
       [X174 = X176* ∨ 
        monom_poly_a X174 X175 ≠ monom_poly_a X176 zero_zero_nat+*]/5711`
2.430[zip.saturate] ### step  1122 ###
2.430[zip.saturate]
    given (1122 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [ord_less_nat X0 X0 ≠ ord_less_eq_nat X1 X1+* ∨ X2 = fTrue*]/924`
2.446[zip.saturate] ### step  1123 ###
2.446[zip.saturate]
    given (1123 steps, penalty 1):
      `[sk_P316 is_zero_nat = zero_zero_poly_nat*]/5813`
2.447[zip.saturate] ### step  1124 ###
2.447[zip.saturate]
    given (1124 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:bool).
       [is_zero_poly_a X0 ≠ fTrue+* ∨ X1 = fTrue* ∨ 
        X0 = zero_z2096148049poly_a]/5781`
2.451[zip.saturate] ### step  1129 ###
2.451[zip.saturate]
    given (1129 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [¬pp (F0 zero_zero_poly_nat)* ∨ F0 (sk_P316 F0) = fTrue*]/5785`
2.477[zip.saturate] ### step  1134 ###
2.477[zip.saturate]
    given (1134 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [ord_less_eq_nat X1 X1 ≠ ord_less_nat X0 X0+* ∨ X2 = fFalse*]/932`
2.479[zip.saturate] ### step  1135 ###
2.479[zip.saturate]
    given (1135 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ ¬zip_tseitin1 X1 F0* ∨ X2 = fTrue*]/1054`
2.493[zip.saturate] ### step  1141 ###
2.493[zip.saturate]
    given (1141 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 X1 F0* ∨ X2 = fFalse*]/1055`
2.500[zip.saturate] ### step  1142 ###
2.500[zip.saturate]
    given (1142 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (fequal_nat X1 (sk_N2 (fequal_nat X1)))+* ∨ X1 = X0*]/3851`
2.517[zip.saturate] ### step  1143 ###
2.517[zip.saturate]
    given (1143 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (fequal_nat X1 (sk_N21 (fequal_nat X1)))+* ∨ X1 = X0*]/3861`
2.521[zip.saturate] ### step  1144 ###
2.521[zip.saturate]
    given (1144 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [pCons_a X2 X1 ≠ monom_a X0 zero_zero_nat+* ∨ X2 = X0*]/3888`
2.585[zip.saturate] ### step  1152 ###
2.585[zip.saturate]
    given (1152 steps, penalty 1):
      `forall (X109:poly_poly_a) (X110:poly_a).
       [X109 = zero_z2096148049poly_a ∨ 
        order_poly_a X110 X109 ≠ zero_zero_nat+* ∨ 
        poly_poly_a2 X109 X110 ≠ zero_zero_poly_a]/109`
2.593[zip.saturate] ### step  1174 ###
2.593[zip.saturate]
    given (1174 steps, penalty 1):
      `forall (X0:poly_nat) (X1:bool).
       [is_zero_nat X0 ≠ fTrue+* ∨ X1 = fTrue* ∨ 
        X0 = zero_zero_poly_nat]/6039`
2.597[zip.saturate] ### step  1184 ###
2.597[zip.saturate]
    given (1184 steps, penalty 1):
      `forall (X112:poly_poly_poly_a) (X113:poly_poly_a).
       [X112 = zero_z2064990175poly_a ∨ 
        order_poly_poly_a X113 X112 ≠ zero_zero_nat+* ∨ 
        poly_poly_poly_a2 X112 X113 ≠ zero_z2096148049poly_a]/112`
2.603[zip.saturate] ### step  1220 ###
2.603[zip.saturate]
    given (1220 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬zip_tseitin1 (sk_N2 (fequal_nat X1)) (fequal_nat X1)+* ∨ X1 = X0*]/4541`
2.613[zip.saturate] ### step  1229 ###
2.613[zip.saturate]
    given (1229 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬zip_tseitin1 (sk_N21 (fequal_nat X1)) (fequal_nat X1)+* ∨ 
        X1 = X0*]/4622`
2.616[zip.saturate] ### step  1234 ###
2.616[zip.saturate]
    given (1234 steps, penalty 1):
      `forall (X0:poly_a).
       [X0 = zero_zero_poly_a* ∨ 
        ¬pp (is_zero_a (monom_a (sk_A216 is_zero_a) zero_zero_nat))+*]/5134`
2.640[zip.saturate] ### step  1238 ###
2.640[zip.saturate]
    given (1238 steps, penalty 1):
      `forall (X0:poly_nat).
       [X0 = zero_zero_poly_nat* ∨ 
        ¬pp (is_zero_nat (monom_nat (sk_A217 is_zero_nat) zero_zero_nat))+*]/6367`
2.655[zip.saturate] ### step  1239 ###
2.655[zip.saturate]
    given (1239 steps, penalty 1):
      `forall (X0:poly_nat).
       [X0 = zero_zero_poly_nat* ∨ sk_A217 is_zero_nat ≠ zero_zero_nat+*]/6608`
2.668[zip.saturate] ### step  1241 ###
2.668[zip.saturate]
    given (1241 steps, penalty 1):
      `forall (X259:a) (X260:nat) (X261:nat) (X262:a).
       [X259 = X262* ∨ monom_a X259 X261 ≠ monom_a X262 X260+*]/222`
2.674[zip.saturate] ### step  1246 ###
2.674[zip.saturate]
    given (1246 steps, penalty 1):
      `forall (X264:poly_a) (X265:nat) (X266:nat) (X267:poly_a).
       [X264 = X267* ∨ monom_poly_a X264 X266 ≠ monom_poly_a X267 X265+*]/226`
2.688[zip.saturate] ### step  1254 ###
2.688[zip.saturate]
    given (1254 steps, penalty 1):
      `forall (X269:nat) (X270:nat) (X271:nat) (X272:nat).
       [X269 = X272* ∨ monom_nat X269 X271 ≠ monom_nat X272 X270+*]/230`
2.689[zip.saturate] ### step  1255 ###
2.689[zip.saturate]
    given (1255 steps, penalty 1):
      `forall (X274:poly_nat) (X275:nat) (X276:nat) (X277:poly_nat).
       [X274 = X277* ∨ 
        monom_poly_nat X274 X276 ≠ monom_poly_nat X277 X275+*]/234`
2.730[zip.saturate] ### step  1259 ###
2.730[zip.saturate]
    given (1259 steps, penalty 1):
      `forall (X279:poly_poly_a) (X280:nat) (X281:nat) (X282:poly_poly_a).
       [X279 = X282* ∨ 
        monom_poly_poly_a X279 X281 ≠ monom_poly_poly_a X282 X280+*]/238`
2.733[zip.saturate] ### step  1261 ###
2.733[zip.saturate]
    given (1261 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:a).
       [¬fundam396953934nt_a_a (if_a X0 X1)+* ∨ pp X0 ∨ X2 = X3*]/1008`
2.743[zip.saturate] ### step  1266 ###
2.743[zip.saturate]
    given (1266 steps, penalty 1):
      `forall (X0:nat) (X1:a) (X2:a) (X3:a).
       [¬fundam396953934nt_a_a (if_a (ord_less_nat X0 X0) X1)+* ∨ X2 = X3*]/1009`
2.757[zip.saturate] ### step  1274 ###
2.757[zip.saturate]
    given (1274 steps, penalty 1):
      `forall (X121:poly_nat) (X122:nat) (X123:nat).
       [synthetic_div_nat (pCons_nat X123 X121) X122
         = pCons_nat (poly_nat2 X121 X122) (synthetic_div_nat X121 X122)*]/121`
2.759[zip.saturate] ### step  1275 ###
2.759[zip.saturate]
    given (1275 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:a).
       [¬fundam396953934nt_a_a (if_a X0 X1)+* ∨ X0 = fTrue ∨ X2 = X3*]/1010`
2.781[zip.saturate] ### step  1279 ###
2.781[zip.saturate]
    given (1279 steps, penalty 1):
      `forall (X459:poly_a).
       [X459 = monom_a (sk_A219 X459) zero_zero_nat* ∨ 
        degree_a X459 ≠ zero_zero_nat]/7016`
2.788[zip.saturate] ### step  1280 ###
2.788[zip.saturate]
    given (1280 steps, penalty 1):
      `[sk_P317 is_zero_poly_a = zero_z2096148049poly_a*]/7034`
2.795[zip.saturate] ### step  1281 ###
2.795[zip.saturate]
    given (1281 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [¬pp (F0 zero_z2096148049poly_a)* ∨ F0 (sk_P317 F0) = fTrue*]/7020`
2.849[zip.saturate] ### step  1282 ###
2.849[zip.saturate]
    given (1282 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [X0 = zero_z2096148049poly_a* ∨ 
        sk_A218 is_zero_poly_a ≠ zero_zero_poly_a+*]/7145`
2.857[zip.saturate] ### step  1285 ###
2.857[zip.saturate]
    given (1285 steps, penalty 1):
      `forall (X124:poly_poly_a) (X125:poly_a) (X126:poly_a).
       [synthetic_div_poly_a (pCons_poly_a X126 X124) X125
         = pCons_poly_a (poly_poly_a2 X124 X125) 
            (synthetic_div_poly_a X124 X125)*]/122`
2.895[zip.saturate] ### step  1296 ###
2.895[zip.saturate]
    given (1296 steps, penalty 1):
      `forall (X127:poly_a) (X128:a) (X129:a).
       [synthetic_div_a (pCons_a X129 X127) X128
         = pCons_a (poly_a2 X127 X128) (synthetic_div_a X127 X128)*]/123`
2.900[zip.saturate] ### step  1299 ###
2.900[zip.saturate]
    given (1299 steps, penalty 1):
      `forall (X0:poly_a).
       [one_one_poly_poly_a ≠ monom_poly_a X0 zero_zero_nat+* ∨ 
        one_one_poly_a = X0]/7175`
2.902[zip.saturate] ### step  1301 ###
2.902[zip.saturate]
    given (1301 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [monom_a X1 X0 ≠ one_one_poly_a+* ∨ X1 = one_one_a*]/7162`
2.905[zip.saturate] ### step  1302 ###
2.905[zip.saturate]
    given (1302 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [monom_poly_a X1 X0 ≠ one_one_poly_poly_a+* ∨ X1 = one_one_poly_a*]/7173`
2.914[zip.saturate] ### step  1323 ###
2.914[zip.saturate]
    given (1323 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [X0 = zero_z2096148049poly_a* ∨ 
        ¬pp
           (is_zero_poly_a
             (monom_poly_a (sk_A218 is_zero_poly_a) zero_zero_nat))+*]/7044`
2.930[zip.saturate] ### step  1328 ###
2.930[zip.saturate]
    given (1328 steps, penalty 1):
      `forall (X460:poly_nat).
       [X460 = monom_nat (sk_A220 X460) zero_zero_nat* ∨ 
        degree_nat X460 ≠ zero_zero_nat]/7388`
2.967[zip.saturate] ### step  1331 ###
2.968[zip.saturate]
    given (1331 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [fTrue ≠ ord_less_nat X0 X0+* ∨ X1 = fFalse*]/7514`
2.977[zip.saturate] ### step  1346 ###
2.978[zip.saturate]
    given (1346 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:nat → bool) (X3:nat).
       [X1 = X0* ∨ fFalse ≠ F2 X3* ∨ ¬zip_tseitin1 X3 F2*]/7599`
3.007[zip.saturate] ### step  1347 ###
3.007[zip.saturate]
    given (1347 steps, penalty 1):
      `forall (F1:nat → bool) (X2:nat).
       [fFalse ≠ F1 X2* ∨ ¬zip_tseitin1 X2 F1*]/7670`
3.011[zip.saturate] ### step  1358 ###
3.011[zip.saturate]
    given (1358 steps, penalty 1):
      `forall (X461:poly_poly_a).
       [X461 = monom_poly_a (sk_A221 X461) zero_zero_nat* ∨ 
        degree_poly_a X461 ≠ zero_zero_nat]/7681`
3.029[zip.saturate] ### step  1363 ###
3.029[zip.saturate]
    given (1363 steps, penalty 1):
      `forall (X536:nat) (X537:poly_nat).
       [pp (pos_poly_nat (pCons_nat X536 X537))* ∨ ¬pp (pos_poly_nat X537)]/465`
3.046[zip.saturate] ### step  1367 ###
3.046[zip.saturate]
    given (1367 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a).
       [fTrue ≠ is_zero_a X1+* ∨ is_zero_a X1 = X0* ∨ 
        X1 = zero_zero_poly_a]/5538`
3.048[zip.saturate] ### step  1368 ###
3.048[zip.saturate]
    given (1368 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a).
       [fTrue ≠ is_zero_poly_a X1+* ∨ is_zero_poly_a X1 = X0* ∨ 
        X1 = zero_z2096148049poly_a]/5779`
3.069[zip.saturate] ### step  1382 ###
3.069[zip.saturate]
    given (1382 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat).
       [fTrue ≠ is_zero_nat X1+* ∨ is_zero_nat X1 = X0* ∨ 
        X1 = zero_zero_poly_nat]/6037`
3.070[zip.saturate] ### step  1383 ###
3.070[zip.saturate]
    given (1383 steps, penalty 1):
      `forall (X413:poly_a) (X414:nat).
       [coeff_a X413 X414 = zero_zero_a ∨ 
        ¬pp (ord_less_nat (degree_a X413) X414)+*]/356`
3.097[zip.saturate] ### step  1388 ###
3.097[zip.saturate]
    given (1388 steps, penalty 1):
      `forall (X415:poly_poly_a) (X416:nat).
       [coeff_poly_a X415 X416 = zero_zero_poly_a ∨ 
        ¬pp (ord_less_nat (degree_poly_a X415) X416)+*]/357`
3.112[zip.saturate] ### step  1391 ###
3.112[zip.saturate]
    given (1391 steps, penalty 1):
      `forall (X417:poly_nat) (X418:nat).
       [coeff_nat X417 X418 = zero_zero_nat ∨ 
        ¬pp (ord_less_nat (degree_nat X417) X418)+*]/358`
3.133[zip.saturate] ### step  1401 ###
3.133[zip.saturate]
    given (1401 steps, penalty 1):
      `forall (X419:poly_poly_nat) (X420:nat).
       [coeff_poly_nat X419 X420 = zero_zero_poly_nat ∨ 
        ¬pp (ord_less_nat (degree_poly_nat X419) X420)+*]/359`
3.139[zip.saturate] ### step  1402 ###
3.139[zip.saturate]
    given (1402 steps, penalty 1):
      `forall (X421:poly_poly_poly_a) (X422:nat).
       [coeff_poly_poly_a X421 X422 = zero_z2096148049poly_a ∨ 
        ¬pp (ord_less_nat (degree_poly_poly_a X421) X422)+*]/360`
3.144[zip.saturate] ### step  1403 ###
3.144[zip.saturate]
    given (1403 steps, penalty 1):
      `forall (X513:nat) (X514:poly_a).
       [poly_cutoff_a X513 X514 = abs_poly_a (aTP_Lamm_a X513 X514)*]/444`
3.145[zip.saturate] ### step  1404 ###
3.145[zip.saturate]
    given (1404 steps, penalty 1):
      `forall (X515:nat) (X516:poly_poly_a).
       [poly_cutoff_poly_a X515 X516
         = abs_poly_poly_a (aTP_Lamm_aa X515 X516)*]/445`
3.147[zip.saturate] ### step  1405 ###
3.147[zip.saturate]
    given (1405 steps, penalty 1):
      `forall (X517:nat) (X518:poly_nat).
       [poly_cutoff_nat X517 X518 = abs_poly_nat (aTP_Lamm_ab X517 X518)*]/446`
3.157[zip.saturate] ### step  1408 ###
3.157[zip.saturate]
    given (1408 steps, penalty 1):
      `forall (X519:nat) (X520:poly_poly_nat).
       [poly_cutoff_poly_nat X519 X520
         = abs_poly_poly_nat (aTP_Lamm_ac X519 X520)*]/447`
3.158[zip.saturate] ### step  1409 ###
3.158[zip.saturate]
    given (1409 steps, penalty 1):
      `forall (X521:nat) (X522:poly_poly_poly_a).
       [poly_c1841332160poly_a X521 X522
         = abs_poly_poly_poly_a (aTP_Lamm_ad X521 X522)*]/448`
3.166[zip.saturate] ### step  1412 ###
3.166[zip.saturate]
    given (1412 steps, penalty 1):
      `forall (X525:a) (X526:nat).
       [monom_a X525 X526 = abs_poly_a (aTP_Lamm_aj X525 X526)*]/457`
3.184[zip.saturate] ### step  1432 ###
3.184[zip.saturate]
    given (1432 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [synthetic_div_nat (monom_nat X1 zero_zero_nat) X0
         = zero_zero_poly_nat*]/8396`
3.188[zip.saturate] ### step  1433 ###
3.188[zip.saturate]
    given (1433 steps, penalty 1):
      `[sk_A219 one_one_poly_a = one_one_a*]/8412`
3.191[zip.saturate] ### step  1434 ###
3.191[zip.saturate]
    given (1434 steps, penalty 1):
      `[sk_A219 zero_zero_poly_a = zero_zero_a*]/8418`
3.194[zip.saturate] ### step  1435 ###
3.194[zip.saturate]
    given (1435 steps, penalty 1):
      `forall (X0:poly_a).
       [zero_zero_poly_a = sk_P312 X0* ∨ degree_a X0 ≠ zero_zero_nat]/8403`
3.197[zip.saturate] ### step  1436 ###
3.197[zip.saturate]
    given (1436 steps, penalty 1):
      `forall (X1:poly_a) (X2:a).
       [X1 = zero_zero_poly_a ∨ 
        degree_a (pCons_a X2 X1) ≠ zero_zero_nat+*]/8414`
3.199[zip.saturate] ### step  1437 ###
3.199[zip.saturate]
    given (1437 steps, penalty 1):
      `forall (X0:poly_a).
       [sk_A212 X0 = sk_A219 X0* ∨ degree_a X0 ≠ zero_zero_nat]/8406`
3.205[zip.saturate] ### step  1444 ###
3.205[zip.saturate]
    given (1444 steps, penalty 1):
      `forall (X527:poly_a) (X528:nat).
       [monom_poly_a X527 X528 = abs_poly_poly_a (aTP_Lamm_ak X527 X528)*]/458`
3.209[zip.saturate] ### step  1449 ###
3.209[zip.saturate]
    given (1449 steps, penalty 1):
      `forall (X529:nat) (X530:nat).
       [monom_nat X529 X530 = abs_poly_nat (aTP_Lamm_al X529 X530)*]/459`
3.211[zip.saturate] ### step  1450 ###
3.211[zip.saturate]
    given (1450 steps, penalty 1):
      `forall (X531:poly_nat) (X532:nat).
       [monom_poly_nat X531 X532 = abs_poly_poly_nat (aTP_Lamm_am X531 X532)*]/460`
3.232[zip.saturate] ### step  1452 ###
3.232[zip.saturate]
    given (1452 steps, penalty 1):
      `forall (X533:poly_poly_a) (X534:nat).
       [monom_poly_poly_a X533 X534
         = abs_poly_poly_poly_a (aTP_Lamm_an X533 X534)*]/461`
3.243[zip.saturate] ### step  1457 ###
3.243[zip.saturate]
    given (1457 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_a).
       [synthetic_div_poly_a (monom_poly_a X1 zero_zero_nat) X0
         = zero_z2096148049poly_a*]/8579`
3.245[zip.saturate] ### step  1460 ###
3.245[zip.saturate]
    given (1460 steps, penalty 1):
      `forall (X0:a) (X1:a).
       [synthetic_div_a (monom_a X1 zero_zero_nat) X0 = zero_zero_poly_a*]/8583`
3.255[zip.saturate] ### step  1461 ###
3.255[zip.saturate]
    given (1461 steps, penalty 1):
      `[sk_A220 one_one_poly_nat = one_one_nat*]/8673`
3.278[zip.saturate] ### step  1462 ###
3.278[zip.saturate]
    given (1462 steps, penalty 1):
      `[sk_A220 zero_zero_poly_nat = zero_zero_nat*]/8679`
3.280[zip.saturate] ### step  1470 ###
3.280[zip.saturate]
    given (1470 steps, penalty 1):
      `forall (X0:poly_nat) (X2:bool).
       [fTrue ≠ is_zero_nat X0+* ∨ X0 = zero_zero_poly_nat ∨ 
        X2 = fFalse*]/8683`
3.281[zip.saturate] ### step  1471 ###
3.281[zip.saturate]
    given (1471 steps, penalty 1):
      `forall (X0:poly_poly_a) (X2:bool).
       [fTrue ≠ is_zero_poly_a X0+* ∨ X0 = zero_z2096148049poly_a ∨ 
        X2 = fFalse*]/8684`
3.315[zip.saturate] ### step  1473 ###
3.315[zip.saturate]
    given (1473 steps, penalty 1):
      `forall (X0:poly_a) (X2:bool).
       [fTrue ≠ is_zero_a X0+* ∨ X0 = zero_zero_poly_a ∨ X2 = fFalse*]/8685`
3.319[zip.saturate] ### step  1491 ###
3.319[zip.saturate]
    given (1491 steps, penalty 1):
      `forall (X149:a) (X150:a).
       [fundam2103719732poly_a (monom_a X149 zero_zero_nat) X150
         = monom_a X149 zero_zero_nat*]/8967`
3.322[zip.saturate] ### step  1502 ###
3.322[zip.saturate]
    given (1502 steps, penalty 1):
      `forall (X151:nat) (X152:nat).
       [fundam1481276954ly_nat (monom_nat X151 zero_zero_nat) X152
         = monom_nat X151 zero_zero_nat*]/8978`
3.344[zip.saturate] ### step  1503 ###
3.345[zip.saturate]
    given (1503 steps, penalty 1):
      `[sk_A221 one_one_poly_poly_a = one_one_poly_a*]/9175`
3.356[zip.saturate] ### step  1504 ###
3.356[zip.saturate]
    given (1504 steps, penalty 1):
      `[sk_A221 zero_z2096148049poly_a = zero_zero_poly_a*]/9179`
3.428[zip.saturate] ### step  1513 ###
3.428[zip.saturate]
    given (1513 steps, penalty 1):
      `forall (X153:poly_a) (X154:poly_a).
       [fundam932970690poly_a (monom_poly_a X153 zero_zero_nat) X154
         = monom_poly_a X153 zero_zero_nat*]/9865`
3.429[zip.saturate] ### step  1514 ###
3.429[zip.saturate]
    given (1514 steps, penalty 1):
      `forall (X1:poly_a) (X2:bool).
       [is_zero_a X1 = X2* ∨ true ∨ X1 = zero_zero_poly_a]/9636`
3.437[zip.saturate] ### step  1515 ###
3.437[zip.saturate]
    given (1515 steps, penalty 1):
      `forall (X1:poly_poly_a) (X2:bool).
       [is_zero_poly_a X1 = X2* ∨ true ∨ X1 = zero_z2096148049poly_a]/9665`
3.449[zip.saturate] ### step  1516 ###
3.449[zip.saturate]
    given (1516 steps, penalty 1):
      `forall (X1:poly_nat) (X2:bool).
       [is_zero_nat X1 = X2* ∨ true ∨ X1 = zero_zero_poly_nat]/9694`
3.457[zip.saturate] ### step  1517 ###
3.457[zip.saturate]
    given (1517 steps, penalty 1):
      `forall (X0:poly_a) (X1:bool).
       [is_zero_a X0 = X1* ∨ X0 = zero_zero_poly_a ∨ fTrue ≠ fFalse]/9639`
3.465[zip.saturate] ### step  1518 ###
3.465[zip.saturate]
    given (1518 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:bool).
       [is_zero_poly_a X0 = X1* ∨ X0 = zero_z2096148049poly_a ∨ 
        fTrue ≠ fFalse]/9668`
3.475[zip.saturate] ### step  1524 ###
3.475[zip.saturate]
    given (1524 steps, penalty 1):
      `forall (X0:nat).
       [synthetic_div_nat one_one_poly_nat X0 = zero_zero_poly_nat*]/9870`
3.477[zip.saturate] ### step  1530 ###
3.477[zip.saturate]
    given (1530 steps, penalty 1):
      `forall (X0:poly_nat) (X1:bool).
       [is_zero_nat X0 = X1* ∨ X0 = zero_zero_poly_nat ∨ fTrue ≠ fFalse]/9697`
3.485[zip.saturate] ### step  1532 ###
3.485[zip.saturate]
    given (1532 steps, penalty 1):
      `forall (X0:poly_nat).
       [¬pp (pos_poly_nat (sk_P310 pos_poly_nat))+* ∨ 
        pp (pos_poly_nat X0)*]/9184`
3.489[zip.saturate] ### step  1533 ###
3.489[zip.saturate]
    given (1533 steps, penalty 1):
      `forall (X0:nat) (F1:nat → bool) (X2:nat).
       [ord_less_nat X0 X0 ≠ F1 X2* ∨ ¬zip_tseitin1 X2 F1*]/9107`
3.516[zip.saturate] ### step  1535 ###
3.517[zip.saturate]
    given (1535 steps, penalty 1):
      `forall (X0:poly_a).
       [synthetic_div_poly_a one_one_poly_poly_a X0 = zero_z2096148049poly_a*]/9906`
3.518[zip.saturate] ### step  1537 ###
3.518[zip.saturate]
    given (1537 steps, penalty 1):
      `forall (X0:a). [synthetic_div_a one_one_poly_a X0 = zero_zero_poly_a*]/9911`
3.522[zip.saturate] ### step  1539 ###
3.522[zip.saturate]
    given (1539 steps, penalty 1):
      `forall (X0:a).
       [fundam2103719732poly_a one_one_poly_a X0 = one_one_poly_a*]/10137`
3.534[zip.saturate] ### step  1540 ###
3.534[zip.saturate]
    given (1540 steps, penalty 1):
      `forall (X0:nat).
       [fundam1481276954ly_nat one_one_poly_nat X0 = one_one_poly_nat*]/10139`
3.535[zip.saturate] ### step  1542 ###
3.535[zip.saturate]
    given (1542 steps, penalty 1):
      `forall (X0:poly_a).
       [fundam932970690poly_a one_one_poly_poly_a X0 = one_one_poly_poly_a*]/10145`
3.544[zip.saturate] ### step  1554 ###
3.544[zip.saturate]
    given (1554 steps, penalty 1):
      `forall (X158:poly_nat) (X159:nat) (X160:poly_nat).
       [X158 = zero_zero_poly_nat ∨ X159 = zero_zero_nat ∨ 
        monom_poly_nat X158 X159
         ≠ pCons_poly_nat X160 zero_z1059985641ly_nat+*]/149`
3.548[zip.saturate] ### step  1564 ###
3.548[zip.saturate]
    given (1564 steps, penalty 1):
      `forall (X0:nat).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_a one_one_poly_a X0 = zero_zero_a*]/9342`
3.551[zip.saturate] ### step  1566 ###
3.551[zip.saturate]
    given (1566 steps, penalty 1):
      `forall (X0:nat).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_poly_a one_one_poly_poly_a X0 = zero_zero_poly_a*]/9402`
3.562[zip.saturate] ### step  1568 ###
3.563[zip.saturate]
    given (1568 steps, penalty 1):
      `forall (X0:nat).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_nat one_one_poly_nat X0 = zero_zero_nat*]/9462`
3.567[zip.saturate] ### step  1586 ###
3.567[zip.saturate]
    given (1586 steps, penalty 1):
      `forall (X161:poly_nat).
       [monom_poly_nat X161 zero_zero_nat
         = pCons_poly_nat X161 zero_z1059985641ly_nat*]/10427`
3.582[zip.saturate] ### step  1597 ###
3.582[zip.saturate]
    given (1597 steps, penalty 1):
      `forall (X162:poly_poly_a) (X163:nat) (X164:poly_poly_a).
       [X162 = zero_z2096148049poly_a ∨ X163 = zero_zero_nat ∨ 
        monom_poly_poly_a X162 X163
         ≠ pCons_poly_poly_a X164 zero_z2064990175poly_a+*]/153`
3.587[zip.saturate] ### step  1616 ###
3.587[zip.saturate]
    given (1616 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [¬pp (pos_poly_nat X0) ∨ pos_poly_nat (pCons_nat X1 X0) = fTrue*]/9182`
3.591[zip.saturate] ### step  1617 ###
3.591[zip.saturate]
    given (1617 steps, penalty 1):
      `forall (X0:poly_a).
       [X0 = monom_a (sk_A212 X0) zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat]/9890`
3.604[zip.saturate] ### step  1626 ###
3.604[zip.saturate]
    given (1626 steps, penalty 1):
      `forall (X557:nat) (X558:nat) (F559:nat → bool).
       [zip_tseitin0 X557 X558 F559* ∨ pp (F559 X557)*]/484`
3.624[zip.saturate] ### step  1627 ###
3.624[zip.saturate]
    given (1627 steps, penalty 1):
      `forall (X0:nat) (X1:a) (X2:a). [if_a (ord_less_nat X0 X0) X2 X1 = X1*]/880`
3.633[zip.saturate] ### step  1628 ###
3.633[zip.saturate]
    given (1628 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a).
       [X1 = zero_zero_poly_a* ∨ fTrue ≠ fFalse+* ∨ ¬pp X0*]/10694`
3.633[zip.saturate] ### step  1629 ###
3.633[zip.saturate]
    given (1629 steps, penalty 1):
      `forall (X165:poly_poly_a).
       [monom_poly_poly_a X165 zero_zero_nat
         = pCons_poly_poly_a X165 zero_z2064990175poly_a*]/10695`
3.638[zip.saturate] ### step  1631 ###
3.638[zip.saturate]
    given (1631 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_a).
       [X2 = zero_zero_poly_a* ∨ fTrue ≠ fFalse+* ∨ X0 = X1*]/10687`
3.657[zip.saturate] ### step  1640 ###
3.657[zip.saturate]
    given (1640 steps, penalty 1):
      `forall (X166:a) (X167:nat) (X168:a).
       [X166 = zero_zero_a ∨ X167 = zero_zero_nat ∨ 
        monom_a X166 X167 ≠ monom_a X168 zero_zero_nat+*]/10790`
3.663[zip.saturate] ### step  1648 ###
3.663[zip.saturate]
    given (1648 steps, penalty 1):
      `forall (X0:poly_a). [X0 = zero_zero_poly_a* ∨ fTrue ≠ fFalse+*]/10798`
3.674[zip.saturate] ### step  1649 ###
3.674[zip.saturate]
    given (1649 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a).
       [X1 = zero_z2096148049poly_a* ∨ fTrue ≠ fFalse+* ∨ ¬pp X0*]/10871`
3.677[zip.saturate] ### step  1652 ###
3.677[zip.saturate]
    given (1652 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_poly_a).
       [X2 = zero_z2096148049poly_a* ∨ fTrue ≠ fFalse+* ∨ X0 = X1*]/10864`
3.687[zip.saturate] ### step  1667 ###
3.687[zip.saturate]
    given (1667 steps, penalty 1):
      `forall (X0:nat) (X1:a) (X2:a).
       [if_a (ord_less_eq_nat X0 X0) X1 X2 = X1*]/886`
3.722[zip.saturate] ### step  1676 ###
3.722[zip.saturate]
    given (1676 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [X0 = zero_z2096148049poly_a* ∨ fTrue ≠ fFalse+*]/10983`
3.724[zip.saturate] ### step  1680 ###
3.724[zip.saturate]
    given (1680 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat).
       [if_nat (ord_less_nat X0 X0) X2 X1 = X1*]/894`
3.738[zip.saturate] ### step  1683 ###
3.738[zip.saturate]
    given (1683 steps, penalty 1):
      `forall (X170:nat) (X171:nat) (X172:nat).
       [X170 = zero_zero_nat ∨ X171 = zero_zero_nat ∨ 
        monom_nat X170 X171 ≠ monom_nat X172 zero_zero_nat+*]/11045`
3.743[zip.saturate] ### step  1684 ###
3.743[zip.saturate]
    given (1684 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat).
       [X1 = zero_zero_poly_nat* ∨ fTrue ≠ fFalse+* ∨ ¬pp X0*]/11067`
3.744[zip.saturate] ### step  1686 ###
3.744[zip.saturate]
    given (1686 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_nat).
       [X2 = zero_zero_poly_nat* ∨ fTrue ≠ fFalse+* ∨ X0 = X1*]/11060`
3.750[zip.saturate] ### step  1695 ###
3.750[zip.saturate]
    given (1695 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [synthetic_div_nat (pCons_nat X1 one_one_poly_nat) X0
         = one_one_poly_nat*]/11043`
3.771[zip.saturate] ### step  1703 ###
3.771[zip.saturate]
    given (1703 steps, penalty 1):
      `forall (X0:poly_nat).
       [X0 = zero_zero_poly_nat* ∨ fTrue ≠ fFalse+*]/11171`
3.774[zip.saturate] ### step  1709 ###
3.774[zip.saturate]
    given (1709 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat).
       [if_nat (ord_less_eq_nat X0 X0) X1 X2 = X1*]/896`
3.788[zip.saturate] ### step  1713 ###
3.788[zip.saturate]
    given (1713 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a) (X2:poly_a).
       [if_poly_a (ord_less_nat X0 X0) X2 X1 = X1*]/900`
3.800[zip.saturate] ### step  1714 ###
3.800[zip.saturate]
    given (1714 steps, penalty 1):
      `forall (X0:poly_nat).
       [sk_P310 pos_poly_nat = zero_zero_poly_nat* ∨ pp (pos_poly_nat X0)*]/11274`
3.826[zip.saturate] ### step  1717 ###
3.826[zip.saturate]
    given (1717 steps, penalty 1):
      `forall (X0:nat). [¬zip_tseitin1 X0 (ord_less_nat X0)*]/11354`
3.832[zip.saturate] ### step  1724 ###
3.832[zip.saturate]
    given (1724 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_a).
       [synthetic_div_poly_a (pCons_poly_a X1 one_one_poly_poly_a) X0
         = one_one_poly_poly_a*]/11369`
3.835[zip.saturate] ### step  1726 ###
3.835[zip.saturate]
    given (1726 steps, penalty 1):
      `forall (X174:poly_a) (X175:nat) (X176:poly_a).
       [X174 = zero_zero_poly_a ∨ X175 = zero_zero_nat ∨ 
        monom_poly_a X174 X175 ≠ monom_poly_a X176 zero_zero_nat+*]/11377`
3.837[zip.saturate] ### step  1728 ###
3.837[zip.saturate]
    given (1728 steps, penalty 1):
      `forall (X0:a) (X1:a).
       [synthetic_div_a (pCons_a X1 one_one_poly_a) X0 = one_one_poly_a*]/11374`
3.840[zip.saturate] ### step  1732 ###
3.840[zip.saturate]
    given (1732 steps, penalty 1):
      `forall (X0:poly_nat) (F1:nat → bool) (X2:nat).
       [is_zero_nat X0 ≠ F1 X2* ∨ X0 = zero_zero_poly_nat ∨ 
        ¬zip_tseitin1 X2 F1*]/11308`
3.848[zip.saturate] ### step  1744 ###
3.848[zip.saturate]
    given (1744 steps, penalty 1):
      `forall (X0:poly_poly_a) (F1:nat → bool) (X2:nat).
       [is_zero_poly_a X0 ≠ F1 X2* ∨ X0 = zero_z2096148049poly_a ∨ 
        ¬zip_tseitin1 X2 F1*]/11309`
3.862[zip.saturate] ### step  1754 ###
3.862[zip.saturate]
    given (1754 steps, penalty 1):
      `forall (X0:poly_a) (F1:nat → bool) (X2:nat).
       [is_zero_a X0 ≠ F1 X2* ∨ X0 = zero_zero_poly_a ∨ 
        ¬zip_tseitin1 X2 F1*]/11310`
3.868[zip.saturate] ### step  1755 ###
3.868[zip.saturate]
    given (1755 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a) (X2:poly_a).
       [if_poly_a (ord_less_eq_nat X0 X0) X1 X2 = X1*]/902`
3.872[zip.saturate] ### step  1756 ###
3.872[zip.saturate]
    given (1756 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (ord_less_nat X0 X0) X2 X1 = X1*]/906`
3.896[zip.saturate] ### step  1766 ###
3.896[zip.saturate]
    given (1766 steps, penalty 1):
      `forall (X0:nat) (X1:bool) (X2:poly_a).
       [ord_less_eq_nat X0 X0 ≠ fFalse+* ∨ ¬pp X1* ∨ 
        X2 = zero_zero_poly_a*]/11571`
4.009[zip.saturate] ### step  1767 ###
4.009[zip.saturate]
    given (1767 steps, penalty 1):
      `forall (X1:poly_a). [true ∨ X1 = zero_zero_poly_a*]/12274`
4.018[zip.saturate] ### step  1768 ###
4.018[zip.saturate]
    given (1768 steps, penalty 1):
      `forall (X1:poly_poly_a). [true ∨ X1 = zero_z2096148049poly_a*]/12364`
4.082[zip.saturate] ### step  1769 ###
4.082[zip.saturate]
    given (1769 steps, penalty 1):
      `forall (X1:poly_nat). [true ∨ X1 = zero_zero_poly_nat*]/12460`
4.103[zip.saturate] ### step  1770 ###
4.103[zip.saturate]
    given (1770 steps, penalty 1):
      `forall (X1:nat).
       [degree_nat (pCons_nat X1 one_one_poly_nat) ≠ zero_zero_nat*]/12445`
4.110[zip.saturate] ### step  1772 ###
4.110[zip.saturate]
    given (1772 steps, penalty 1):
      `forall (X1:poly_a).
       [degree_poly_a (pCons_poly_a X1 one_one_poly_poly_a) ≠ zero_zero_nat*]/12805`
4.116[zip.saturate] ### step  1774 ###
4.116[zip.saturate]
    given (1774 steps, penalty 1):
      `forall (X1:a).
       [degree_a (pCons_a X1 one_one_poly_a) ≠ zero_zero_nat*]/12813`
4.121[zip.saturate] ### step  1800 ###
4.121[zip.saturate]
    given (1800 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [ord_less_eq_nat X0 X0 ≠ fFalse+* ∨ X1 = zero_zero_poly_a*]/11701`
4.135[zip.saturate] ### step  1801 ###
4.135[zip.saturate]
    given (1801 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [ord_less_eq_nat X0 X0 ≠ fFalse+* ∨ X1 = zero_z2096148049poly_a*]/11876`
4.146[zip.saturate] ### step  1802 ###
4.146[zip.saturate]
    given (1802 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [ord_less_eq_nat X0 X0 ≠ fFalse+* ∨ X1 = zero_zero_poly_nat*]/12064`
4.154[zip.saturate] ### step  1812 ###
4.154[zip.saturate]
    given (1812 steps, penalty 1):
      `forall (X0:poly_nat).
       [sk_P310 pos_poly_nat = zero_zero_poly_nat* ∨ 
        pos_poly_nat X0 = fTrue*]/12186`
4.166[zip.saturate] ### step  1854 ###
4.166[zip.saturate]
    given (1854 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [monom_a X1 X0 ≠ one_one_poly_a+* ∨ X0 = zero_zero_nat ∨ 
        X1 = zero_zero_a]/11678`
4.181[zip.saturate] ### step  1858 ###
4.181[zip.saturate]
    given (1858 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [monom_poly_a X1 X0 ≠ one_one_poly_poly_a+* ∨ 
        X0 = zero_zero_nat ∨ X1 = zero_zero_poly_a]/12503`
4.252[zip.saturate] ### step  1923 ###
4.252[zip.saturate]
    given (1923 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_a).
       [ord_less_eq_nat X1 X1 ≠ ord_less_nat X0 X0+* ∨ 
        X2 = zero_zero_poly_a*]/13408`
4.269[zip.saturate] ### step  1926 ###
4.269[zip.saturate]
    given (1926 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [fTrue ≠ ord_less_nat X0 X0+* ∨ X1 = zero_zero_poly_a*]/13946`
4.283[zip.saturate] ### step  1935 ###
4.283[zip.saturate]
    given (1935 steps, penalty 1):
      `forall (X0:poly_nat) (X2:poly_a).
       [fTrue ≠ is_zero_nat X0+* ∨ X0 = zero_zero_poly_nat ∨ 
        X2 = zero_zero_poly_a*]/14036`
4.291[zip.saturate] ### step  1938 ###
4.291[zip.saturate]
    given (1938 steps, penalty 1):
      `forall (X0:poly_poly_a) (X2:poly_a).
       [fTrue ≠ is_zero_poly_a X0+* ∨ X0 = zero_z2096148049poly_a ∨ 
        X2 = zero_zero_poly_a*]/14037`
4.299[zip.saturate] ### step  1941 ###
4.299[zip.saturate]
    given (1941 steps, penalty 1):
      `forall (X0:poly_a).
       [fTrue ≠ is_zero_a X0+* ∨ X0 = zero_zero_poly_a]/14294`
4.313[zip.saturate] ### step  1967 ###
4.313[zip.saturate]
    given (1967 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_poly_a).
       [ord_less_eq_nat X1 X1 ≠ ord_less_nat X0 X0+* ∨ 
        X2 = zero_z2096148049poly_a*]/13469`
4.343[zip.saturate] ### step  1970 ###
4.343[zip.saturate]
    given (1970 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [fTrue ≠ ord_less_nat X0 X0+* ∨ X1 = zero_z2096148049poly_a*]/14421`
4.365[zip.saturate] ### step  1979 ###
4.365[zip.saturate]
    given (1979 steps, penalty 1):
      `forall (X0:poly_nat) (X2:poly_poly_a).
       [fTrue ≠ is_zero_nat X0+* ∨ X0 = zero_zero_poly_nat ∨ 
        X2 = zero_z2096148049poly_a*]/14501`
4.373[zip.saturate] ### step  1982 ###
4.373[zip.saturate]
    given (1982 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [fTrue ≠ is_zero_poly_a X0+* ∨ X0 = zero_z2096148049poly_a]/14694`
4.384[zip.saturate] ### step  2007 ###
4.384[zip.saturate]
    given (2007 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_nat).
       [ord_less_eq_nat X1 X1 ≠ ord_less_nat X0 X0+* ∨ 
        X2 = zero_zero_poly_nat*]/13530`
4.405[zip.saturate] ### step  2009 ###
4.405[zip.saturate]
    given (2009 steps, penalty 1):
      `forall (X208:a) (X210:nat). [coeff_a (monom_a X208 X210) X210 = X208*]/14896`
4.412[zip.saturate] ### step  2015 ###
4.412[zip.saturate]
    given (2015 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [fTrue ≠ ord_less_nat X0 X0+* ∨ X1 = zero_zero_poly_nat*]/14819`
4.429[zip.saturate] ### step  2020 ###
4.429[zip.saturate]
    given (2020 steps, penalty 1):
      `forall (X209:nat) (X210:nat) (X211:a).
       [coeff_a (monom_a X211 X209) X210 = zero_zero_a* ∨ X209 = X210]/194`
4.434[zip.saturate] ### step  2025 ###
4.434[zip.saturate]
    given (2025 steps, penalty 1):
      `forall (X0:nat).
       [coeff_a one_one_poly_a X0 = zero_zero_a* ∨ zero_zero_nat = X0]/15043`
4.437[zip.saturate] ### step  2027 ###
4.437[zip.saturate]
    given (2027 steps, penalty 1):
      `forall (X0:poly_nat).
       [fTrue ≠ is_zero_nat X0+* ∨ X0 = zero_zero_poly_nat]/15054`
4.444[zip.saturate] ### step  2031 ###
4.444[zip.saturate]
    given (2031 steps, penalty 1):
      `forall (X212:poly_a) (X214:nat).
       [coeff_poly_a (monom_poly_a X212 X214) X214 = X212*]/15119`
4.447[zip.saturate] ### step  2042 ###
4.447[zip.saturate]
    given (2042 steps, penalty 1):
      `forall (X213:nat) (X214:nat) (X215:poly_a).
       [coeff_poly_a (monom_poly_a X215 X213) X214 = zero_zero_poly_a* ∨ 
        X213 = X214]/196`
4.450[zip.saturate] ### step  2043 ###
4.450[zip.saturate]
    given (2043 steps, penalty 1):
      `forall (X0:nat).
       [coeff_poly_a one_one_poly_poly_a X0 = zero_zero_poly_a* ∨ 
        zero_zero_nat = X0]/15136`
4.455[zip.saturate] ### step  2053 ###
4.455[zip.saturate]
    given (2053 steps, penalty 1):
      `forall (X216:nat) (X218:nat).
       [coeff_nat (monom_nat X216 X218) X218 = X216*]/15156`
4.460[zip.saturate] ### step  2057 ###
4.460[zip.saturate]
    given (2057 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [zero_zero_a = sk_A212 (monom_a X1 X0)* ∨ X0 = zero_zero_nat]/15039`
4.468[zip.saturate] ### step  2064 ###
4.468[zip.saturate]
    given (2064 steps, penalty 1):
      `forall (X217:nat) (X218:nat) (X219:nat).
       [coeff_nat (monom_nat X219 X217) X218 = zero_zero_nat* ∨ X217 = X218]/198`
4.471[zip.saturate] ### step  2065 ###
4.471[zip.saturate]
    given (2065 steps, penalty 1):
      `forall (X0:nat).
       [coeff_nat one_one_poly_nat X0 = zero_zero_nat* ∨ zero_zero_nat = X0]/15178`
4.476[zip.saturate] ### step  2075 ###
4.476[zip.saturate]
    given (2075 steps, penalty 1):
      `forall (X220:poly_nat) (X222:nat).
       [coeff_poly_nat (monom_poly_nat X220 X222) X222 = X220*]/15193`
4.479[zip.saturate] ### step  2086 ###
4.479[zip.saturate]
    given (2086 steps, penalty 1):
      `forall (X221:nat) (X222:nat) (X223:poly_nat).
       [coeff_poly_nat (monom_poly_nat X223 X221) X222 = zero_zero_poly_nat* ∨ 
        X221 = X222]/200`
4.482[zip.saturate] ### step  2091 ###
4.482[zip.saturate]
    given (2091 steps, penalty 1):
      `forall (X0:poly_a).
       [coeff_a X0 zero_zero_nat = sk_A219 X0* ∨ 
        degree_a X0 ≠ zero_zero_nat]/14898`
4.486[zip.saturate] ### step  2096 ###
4.486[zip.saturate]
    given (2096 steps, penalty 1):
      `forall (X0:a). [sk_A219 (monom_a X0 zero_zero_nat) = X0*]/15216`
4.488[zip.saturate] ### step  2097 ###
4.488[zip.saturate]
    given (2097 steps, penalty 1):
      `forall (X224:poly_poly_a) (X226:nat).
       [coeff_poly_poly_a (monom_poly_poly_a X224 X226) X226 = X224*]/15248`
4.490[zip.saturate] ### step  2108 ###
4.490[zip.saturate]
    given (2108 steps, penalty 1):
      `forall (X225:nat) (X226:nat) (X227:poly_poly_a).
       [coeff_poly_poly_a (monom_poly_poly_a X227 X225) X226
         = zero_z2096148049poly_a* ∨ 
        X225 = X226]/202`
4.493[zip.saturate] ### step  2110 ###
4.493[zip.saturate]
    given (2110 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [coeff_poly_a X0 zero_zero_nat = sk_A221 X0* ∨ 
        degree_poly_a X0 ≠ zero_zero_nat]/15120`
4.496[zip.saturate] ### step  2117 ###
4.496[zip.saturate]
    given (2117 steps, penalty 1):
      `forall (X0:poly_a). [sk_A221 (monom_poly_a X0 zero_zero_nat) = X0*]/15273`
4.499[zip.saturate] ### step  2119 ###
4.499[zip.saturate]
    given (2119 steps, penalty 1):
      `forall (X228:a) (X229:nat).
       [X228 = zero_zero_a ∨ 
        order_a zero_zero_a (monom_a X228 X229) = X229*]/203`
4.502[zip.saturate] ### step  2121 ###
4.502[zip.saturate]
    given (2121 steps, penalty 1):
      `[order_a zero_zero_a one_one_poly_a = zero_zero_nat*]/15317`
4.503[zip.saturate] ### step  2124 ###
4.503[zip.saturate]
    given (2124 steps, penalty 1):
      `forall (X0:poly_nat).
       [coeff_nat X0 zero_zero_nat = sk_A220 X0* ∨ 
        degree_nat X0 ≠ zero_zero_nat]/15157`
4.507[zip.saturate] ### step  2130 ###
4.507[zip.saturate]
    given (2130 steps, penalty 1):
      `forall (X230:poly_a) (X231:nat).
       [X230 = zero_zero_poly_a ∨ 
        order_poly_a zero_zero_poly_a (monom_poly_a X230 X231) = X231*]/204`
4.510[zip.saturate] ### step  2131 ###
4.510[zip.saturate]
    given (2131 steps, penalty 1):
      `[order_poly_a zero_zero_poly_a one_one_poly_poly_a = zero_zero_nat*]/15373`
4.513[zip.saturate] ### step  2134 ###
4.513[zip.saturate]
    given (2134 steps, penalty 1):
      `forall (X0:nat). [sk_A220 (monom_nat X0 zero_zero_nat) = X0*]/15338`
4.517[zip.saturate] ### step  2138 ###
4.517[zip.saturate]
    given (2138 steps, penalty 1):
      `forall (X1:nat) (X2:a).
       [X2 = zero_zero_a ∨ X1 = zero_zero_nat ∨ 
        degree_a (monom_a X2 X1) ≠ zero_zero_nat+*]/12255`
4.520[zip.saturate] ### step  2140 ###
4.520[zip.saturate]
    given (2140 steps, penalty 1):
      `forall (X1:nat) (X2:nat).
       [X2 = zero_zero_nat ∨ X1 = zero_zero_nat ∨ 
        degree_nat (monom_nat X2 X1) ≠ zero_zero_nat+*]/12382`
4.524[zip.saturate] ### step  2141 ###
4.524[zip.saturate]
    given (2141 steps, penalty 1):
      `forall (X232:poly_poly_a) (X233:nat).
       [X232 = zero_z2096148049poly_a ∨ 
        order_poly_poly_a zero_z2096148049poly_a 
         (monom_poly_poly_a X232 X233) = X233*]/205`
4.532[zip.saturate] ### step  2142 ###
4.532[zip.saturate]
    given (2142 steps, penalty 1):
      `forall (X1:nat) (X2:poly_a).
       [X2 = zero_zero_poly_a ∨ X1 = zero_zero_nat ∨ 
        degree_poly_a (monom_poly_a X2 X1) ≠ zero_zero_nat+*]/12808`
4.534[zip.saturate] ### step  2143 ###
4.534[zip.saturate]
    given (2143 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (ord_less_eq_nat X0 X0) X1 X2 = X1*]/908`
4.542[zip.saturate] ### step  2151 ###
4.542[zip.saturate]
    given (2151 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (ord_less_nat X0 X0) X2 X1 = X1*]/912`
4.550[zip.saturate] ### step  2152 ###
4.550[zip.saturate]
    given (2152 steps, penalty 1):
      `forall (X234:poly_a).
       [reflect_poly_a (reflect_poly_a X234) = X234* ∨ 
        sk_A212 X234 = zero_zero_a]/15550`
4.553[zip.saturate] ### step  2160 ###
4.553[zip.saturate]
    given (2160 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (ord_less_eq_nat X0 X0) X1 X2 = X1*]/914`
4.564[zip.saturate] ### step  2163 ###
4.564[zip.saturate]
    given (2163 steps, penalty 1):
      `forall (X235:poly_poly_a).
       [reflect_poly_poly_a (reflect_poly_poly_a X235) = X235* ∨ 
        coeff_poly_a X235 zero_zero_nat = zero_zero_poly_a]/207`
4.567[zip.saturate] ### step  2174 ###
4.567[zip.saturate]
    given (2174 steps, penalty 1):
      `forall (X236:poly_nat).
       [reflect_poly_nat (reflect_poly_nat X236) = X236* ∨ 
        coeff_nat X236 zero_zero_nat = zero_zero_nat]/208`
4.576[zip.saturate] ### step  2185 ###
4.576[zip.saturate]
    given (2185 steps, penalty 1):
      `forall (X237:poly_poly_nat).
       [reflec781175074ly_nat (reflec781175074ly_nat X237) = X237* ∨ 
        coeff_poly_nat X237 zero_zero_nat = zero_zero_poly_nat]/209`
4.583[zip.saturate] ### step  2196 ###
4.583[zip.saturate]
    given (2196 steps, penalty 1):
      `forall (X238:poly_poly_poly_a).
       [reflec581648976poly_a (reflec581648976poly_a X238) = X238* ∨ 
        coeff_poly_poly_a X238 zero_zero_nat = zero_z2096148049poly_a]/210`
4.589[zip.saturate] ### step  2224 ###
4.589[zip.saturate]
    given (2224 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 (sk_N2 F0) = fFalse* ∨ pp (F0 X1)*]/3859`
4.615[zip.saturate] ### step  2225 ###
4.615[zip.saturate]
    given (2225 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 (sk_N21 F0) = fFalse* ∨ pp (F0 X1)*]/3870`
4.648[zip.saturate] ### step  2226 ###
4.648[zip.saturate]
    given (2226 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [sk_P39 F0 = zero_zero_poly_a* ∨ F0 (sk_P39 F0) = fTrue*]/4383`
4.671[zip.saturate] ### step  2227 ###
4.671[zip.saturate]
    given (2227 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [sk_P310 F0 = zero_zero_poly_nat* ∨ F0 (sk_P310 F0) = fTrue*]/4427`
4.687[zip.saturate] ### step  2228 ###
4.687[zip.saturate]
    given (2228 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [sk_P311 F0 = zero_z2096148049poly_a* ∨ F0 (sk_P311 F0) = fTrue*]/4465`
4.709[zip.saturate] ### step  2230 ###
4.709[zip.saturate]
    given (2230 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 (sk_N2 F0) = fFalse* ∨ F0 X1 = fTrue*]/4538`
4.731[zip.saturate] ### step  2231 ###
4.731[zip.saturate]
    given (2231 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 (sk_N21 F0) = fFalse* ∨ F0 X1 = fTrue*]/4619`
4.759[zip.saturate] ### step  2233 ###
4.759[zip.saturate]
    given (2233 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool).
       [F0 zero_z1059985641ly_nat = fFalse* ∨ pp (F0 (sk_P313 F0))*]/4708`
4.799[zip.saturate] ### step  2234 ###
4.799[zip.saturate]
    given (2234 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool).
       [F0 zero_z1059985641ly_nat = fFalse* ∨ F0 (sk_P313 F0) = fTrue*]/4989`
4.831[zip.saturate] ### step  2235 ###
4.831[zip.saturate]
    given (2235 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool).
       [F0 zero_z2064990175poly_a = fFalse* ∨ pp (F0 (sk_P314 F0))*]/4997`
4.868[zip.saturate] ### step  2237 ###
4.868[zip.saturate]
    given (2237 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [F0 zero_zero_poly_a = fFalse* ∨ pp (F0 (sk_P315 F0))*]/5100`
4.914[zip.saturate] ### step  2238 ###
4.915[zip.saturate]
    given (2238 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool).
       [F0 zero_z2064990175poly_a = fFalse* ∨ F0 (sk_P314 F0) = fTrue*]/5212`
4.980[zip.saturate] ### step  2239 ###
4.980[zip.saturate]
    given (2239 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [F0 zero_zero_poly_a = fFalse* ∨ F0 (sk_P315 F0) = fTrue*]/5289`
5.026[zip.saturate] ### step  2241 ###
5.026[zip.saturate]
    given (2241 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [F0 zero_zero_poly_nat = fFalse* ∨ pp (F0 (sk_P316 F0))*]/5790`
5.081[zip.saturate] ### step  2244 ###
5.081[zip.saturate]
    given (2244 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [F0 zero_z2096148049poly_a = fFalse* ∨ pp (F0 (sk_P317 F0))*]/7028`
5.123[zip.saturate] ### step  2247 ###
5.123[zip.saturate]
    given (2247 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [F0 zero_zero_poly_nat = fFalse* ∨ F0 (sk_P316 F0) = fTrue*]/7466`
5.163[zip.saturate] ### step  2250 ###
5.163[zip.saturate]
    given (2250 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [F0 zero_z2096148049poly_a = fFalse* ∨ F0 (sk_P317 F0) = fTrue*]/8521`
5.209[zip.saturate] ### step  2253 ###
5.209[zip.saturate]
    given (2253 steps, penalty 1):
      `forall (X0:poly_nat).
       [pos_poly_nat (sk_P310 pos_poly_nat) = fFalse* ∨ 
        pp (pos_poly_nat X0)*]/11282`
5.225[zip.saturate] ### step  2256 ###
5.225[zip.saturate]
    given (2256 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [zip_tseitin0 X1 X2 F0* ∨ F0 X1 = fTrue*]/11498`
5.248[zip.saturate] ### step  2272 ###
5.248[zip.saturate]
    given (2272 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_nat).
       [sk_P310 pos_poly_nat = zero_zero_poly_nat* ∨ 
        pos_poly_nat X1 = pos_poly_nat X0*]/13846`
5.262[zip.saturate] ### step  2276 ###
5.262[zip.saturate]
    given (2276 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [sk_A221 (reflect_poly_poly_a X0) ≠ zero_zero_poly_a+* ∨ 
        degree_poly_a (reflect_poly_poly_a X0) ≠ zero_zero_nat ∨ 
        X0 = zero_z2096148049poly_a]/15258`
5.268[zip.saturate] ### step  2277 ###
5.268[zip.saturate]
    given (2277 steps, penalty 1):
      `forall (X0:poly_nat).
       [sk_A220 (reflect_poly_nat X0) ≠ zero_zero_nat+* ∨ 
        degree_nat (reflect_poly_nat X0) ≠ zero_zero_nat ∨ 
        X0 = zero_zero_poly_nat]/15324`
5.277[zip.saturate] ### step  2317 ###
5.277[zip.saturate]
    given (2317 steps, penalty 1):
      `forall (X259:a) (X260:nat) (X261:nat) (X262:a).
       [X259 = zero_zero_a ∨ X261 = X260* ∨ 
        monom_a X259 X261 ≠ monom_a X262 X260+*]/221`
5.286[zip.saturate] ### step  2349 ###
5.286[zip.saturate]
    given (2349 steps, penalty 1):
      `forall (X264:poly_a) (X265:nat) (X266:nat) (X267:poly_a).
       [X264 = zero_zero_poly_a ∨ X266 = X265* ∨ 
        monom_poly_a X264 X266 ≠ monom_poly_a X267 X265+*]/225`
5.290[zip.saturate] ### step  2356 ###
5.290[zip.saturate]
    given (2356 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [fTrue ≠ ord_less_nat X1 X1+* ∨ X0 = ord_less_nat X1 X1*]/2598`
5.295[zip.saturate] ### step  2360 ###
5.295[zip.saturate]
    given (2360 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [fFalse ≠ ord_less_eq_nat X1 X1+* ∨ X0 = ord_less_eq_nat X1 X1*]/3668`
5.303[zip.saturate] ### step  2372 ###
5.303[zip.saturate]
    given (2372 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_a).
       [X0 = zero_zero_poly_a ∨ X1 = zero_zero_poly_a ∨ 
        is_zero_a X1 = is_zero_a X0*]/5371`
5.308[zip.saturate] ### step  2379 ###
5.308[zip.saturate]
    given (2379 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_a).
       [X0 = zero_z2096148049poly_a ∨ X1 = zero_zero_poly_a ∨ 
        is_zero_a X1 = is_zero_poly_a X0*]/5373`
5.312[zip.saturate] ### step  2380 ###
5.312[zip.saturate]
    given (2380 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_a).
       [X0 = zero_zero_poly_nat ∨ X1 = zero_zero_poly_a ∨ 
        is_zero_a X1 = is_zero_nat X0*]/5375`
5.317[zip.saturate] ### step  2383 ###
5.317[zip.saturate]
    given (2383 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_poly_a).
       [X0 = zero_z2096148049poly_a ∨ X1 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X1 = is_zero_poly_a X0*]/5608`
5.329[zip.saturate] ### step  2384 ###
5.329[zip.saturate]
    given (2384 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_poly_a).
       [X0 = zero_zero_poly_nat ∨ X1 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X1 = is_zero_nat X0*]/5610`
5.348[zip.saturate] ### step  2388 ###
5.348[zip.saturate]
    given (2388 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_nat).
       [X0 = zero_zero_poly_nat ∨ X1 = zero_zero_poly_nat ∨ 
        is_zero_nat X1 = is_zero_nat X0*]/5865`
5.356[zip.saturate] ### step  2392 ###
5.356[zip.saturate]
    given (2392 steps, penalty 1):
      `forall (X269:nat) (X270:nat) (X271:nat) (X272:nat).
       [X269 = zero_zero_nat ∨ X271 = X270* ∨ 
        monom_nat X269 X271 ≠ monom_nat X272 X270+*]/229`
5.368[zip.saturate] ### step  2435 ###
5.368[zip.saturate]
    given (2435 steps, penalty 1):
      `forall (X274:poly_nat) (X275:nat) (X276:nat) (X277:poly_nat).
       [X274 = zero_zero_poly_nat ∨ X276 = X275* ∨ 
        monom_poly_nat X274 X276 ≠ monom_poly_nat X277 X275+*]/233`
5.386[zip.saturate] ### step  2468 ###
5.386[zip.saturate]
    given (2468 steps, penalty 1):
      `forall (X279:poly_poly_a) (X280:nat) (X281:nat) (X282:poly_poly_a).
       [X279 = zero_z2096148049poly_a ∨ X281 = X280* ∨ 
        monom_poly_poly_a X279 X281 ≠ monom_poly_poly_a X282 X280+*]/237`
5.390[zip.saturate] ### step  2473 ###
5.390[zip.saturate]
    given (2473 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [ord_less_eq_nat X2 X2 = F0 X1* ∨ ¬zip_tseitin1 X1 F0*]/1053`
5.412[zip.saturate] ### step  2474 ###
5.412[zip.saturate]
    given (2474 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [X2 = F0 X1* ∨ ¬zip_tseitin1 X1 F0* ∨ X2 = fFalse*]/1057`
5.484[zip.saturate] ### step  2483 ###
5.484[zip.saturate]
    given (2483 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [poly_a2 X0 X1 = sk_A212 X0* ∨ 
        ¬fundam396953934nt_a_a (poly_a2 X0)+*]/1358`
5.488[zip.saturate] ### step  2488 ###
5.488[zip.saturate]
    given (2488 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a X0 X1 X2 = X1* ∨ true ∨ pp X0]/2675`
5.491[zip.saturate] ### step  2490 ###
5.491[zip.saturate]
    given (2490 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat X0 X1 X2 = X1* ∨ true ∨ pp X0]/2676`
5.509[zip.saturate] ### step  2492 ###
5.509[zip.saturate]
    given (2492 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a X0 X1 X2 = X1* ∨ true ∨ pp X0]/2677`
5.511[zip.saturate] ### step  2493 ###
5.511[zip.saturate]
    given (2493 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat).
       [if_nat X0 X1 X2 = X1* ∨ true ∨ pp X0]/2678`
5.513[zip.saturate] ### step  2494 ###
5.513[zip.saturate]
    given (2494 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a).
       [if_a X0 X1 X2 = X1* ∨ true ∨ pp X0]/2679`
5.524[zip.saturate] ### step  2543 ###
5.524[zip.saturate]
    given (2543 steps, penalty 1):
      `forall (X0:poly_nat).
       [pos_poly_nat X0 ≠ fFalse+* ∨ 
        sk_P310 pos_poly_nat = zero_zero_poly_nat*]/16316`
5.530[zip.saturate] ### step  2557 ###
5.530[zip.saturate]
    given (2557 steps, penalty 1):
      `forall (X0:poly_a).
       [¬pp (is_zero_a (monom_a (sk_A29 is_zero_a) zero_zero_nat))+* ∨ 
        X0 = zero_zero_poly_a*]/16339`
5.536[zip.saturate] ### step  2558 ###
5.536[zip.saturate]
    given (2558 steps, penalty 1):
      `forall (X0:poly_nat).
       [¬pp (is_zero_nat (monom_nat (sk_A210 is_zero_nat) zero_zero_nat))+* ∨ 
        X0 = zero_zero_poly_nat*]/16340`
5.547[zip.saturate] ### step  2565 ###
5.547[zip.saturate]
    given (2565 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [¬pp
           (is_zero_poly_a
             (monom_poly_a (sk_A211 is_zero_poly_a) zero_zero_nat))+* ∨ 
        X0 = zero_z2096148049poly_a*]/16361`
5.553[zip.saturate] ### step  2566 ###
5.553[zip.saturate]
    given (2566 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ ¬pp (F0 (sk_N2 F0))* ∨ X2 = fTrue*]/4491`
5.581[zip.saturate] ### step  2567 ###
5.581[zip.saturate]
    given (2567 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N2 F0))* ∨ X2 = fFalse*]/4492`
5.602[zip.saturate] ### step  2568 ###
5.602[zip.saturate]
    given (2568 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ ¬pp (F0 (sk_N21 F0))* ∨ X2 = fTrue*]/4570`
5.644[zip.saturate] ### step  2570 ###
5.644[zip.saturate]
    given (2570 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N21 F0))* ∨ X2 = fFalse*]/4571`
5.663[zip.saturate] ### step  2571 ###
5.663[zip.saturate]
    given (2571 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ X2 = fTrue*]/4652`
5.681[zip.saturate] ### step  2572 ###
5.681[zip.saturate]
    given (2572 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ X2 = fFalse*]/4653`
5.706[zip.saturate] ### step  2573 ###
5.706[zip.saturate]
    given (2573 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ X2 = fTrue*]/4841`
5.722[zip.saturate] ### step  2574 ###
5.722[zip.saturate]
    given (2574 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ X2 = fFalse*]/4842`
5.740[zip.saturate] ### step  2575 ###
5.740[zip.saturate]
    given (2575 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P313 F0)* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X1 = fTrue*]/4939`
5.765[zip.saturate] ### step  2576 ###
5.765[zip.saturate]
    given (2576 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X1 = fFalse*]/4940`
5.789[zip.saturate] ### step  2577 ###
5.789[zip.saturate]
    given (2577 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P314 F0)* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X1 = fTrue*]/5161`
5.817[zip.saturate] ### step  2578 ###
5.817[zip.saturate]
    given (2578 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X1 = fFalse*]/5162`
5.846[zip.saturate] ### step  2579 ###
5.846[zip.saturate]
    given (2579 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P315 F0)* ∨ ¬pp (F0 zero_zero_poly_a)* ∨ 
        X1 = fTrue*]/5237`
5.879[zip.saturate] ### step  2581 ###
5.879[zip.saturate]
    given (2581 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_a)* ∨ 
        X1 = fFalse*]/5238`
5.894[zip.saturate] ### step  2582 ###
5.894[zip.saturate]
    given (2582 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat) (X3:bool).
       [is_zero_nat X0 ≠ ord_less_eq_nat X1 X1+* ∨ 
        X0 = zero_zero_poly_nat ∨ X3 = fTrue*]/7219`
5.898[zip.saturate] ### step  2583 ###
5.898[zip.saturate]
    given (2583 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat) (X3:bool).
       [is_zero_poly_a X0 ≠ ord_less_eq_nat X1 X1+* ∨ 
        X0 = zero_z2096148049poly_a ∨ X3 = fTrue*]/7220`
5.901[zip.saturate] ### step  2584 ###
5.901[zip.saturate]
    given (2584 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat) (X3:bool).
       [is_zero_a X0 ≠ ord_less_eq_nat X1 X1+* ∨ 
        X0 = zero_zero_poly_a ∨ X3 = fTrue*]/7221`
5.905[zip.saturate] ### step  2585 ###
5.905[zip.saturate]
    given (2585 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P316 F0)* ∨ ¬pp (F0 zero_zero_poly_nat)* ∨ 
        X1 = fTrue*]/7407`
5.926[zip.saturate] ### step  2586 ###
5.926[zip.saturate]
    given (2586 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_nat)* ∨ 
        X1 = fFalse*]/7408`
5.950[zip.saturate] ### step  2588 ###
5.950[zip.saturate]
    given (2588 steps, penalty 1):
      `forall (X0:poly_nat) (X2:nat) (X3:bool).
       [ord_less_eq_nat X2 X2 ≠ is_zero_nat X0+* ∨ 
        X0 = zero_zero_poly_nat ∨ X3 = fFalse*]/7474`
5.955[zip.saturate] ### step  2589 ###
5.955[zip.saturate]
    given (2589 steps, penalty 1):
      `forall (X0:poly_poly_a) (X2:nat) (X3:bool).
       [ord_less_eq_nat X2 X2 ≠ is_zero_poly_a X0+* ∨ 
        X0 = zero_z2096148049poly_a ∨ X3 = fFalse*]/7475`
5.966[zip.saturate] ### step  2590 ###
5.966[zip.saturate]
    given (2590 steps, penalty 1):
      `forall (X0:poly_a) (X2:nat) (X3:bool).
       [ord_less_eq_nat X2 X2 ≠ is_zero_a X0+* ∨ 
        X0 = zero_zero_poly_a ∨ X3 = fFalse*]/7476`
5.987[zip.saturate] ### step  2594 ###
5.988[zip.saturate]
    given (2594 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P317 F0)* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X1 = fTrue*]/8460`
6.000[zip.saturate] ### step  2595 ###
6.000[zip.saturate]
    given (2595 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X1 = fFalse*]/8461`
6.024[zip.saturate] ### step  2596 ###
6.024[zip.saturate]
    given (2596 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_a).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X1 = zero_zero_poly_a*]/11684`
6.038[zip.saturate] ### step  2597 ###
6.038[zip.saturate]
    given (2597 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_a).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_nat)* ∨ 
        X1 = zero_zero_poly_a*]/11685`
6.056[zip.saturate] ### step  2598 ###
6.056[zip.saturate]
    given (2598 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_a).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_a)* ∨ 
        X1 = zero_zero_poly_a*]/11686`
6.075[zip.saturate] ### step  2599 ###
6.075[zip.saturate]
    given (2599 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_a).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X1 = zero_zero_poly_a*]/11687`
6.098[zip.saturate] ### step  2600 ###
6.098[zip.saturate]
    given (2600 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_a).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X1 = zero_zero_poly_a*]/11688`
6.113[zip.saturate] ### step  2601 ###
6.113[zip.saturate]
    given (2601 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X2 = zero_zero_poly_a*]/11689`
6.133[zip.saturate] ### step  2602 ###
6.133[zip.saturate]
    given (2602 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X2 = zero_zero_poly_a*]/11690`
6.157[zip.saturate] ### step  2604 ###
6.158[zip.saturate]
    given (2604 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X2 = zero_zero_poly_a*]/11692`
6.181[zip.saturate] ### step  2605 ###
6.181[zip.saturate]
    given (2605 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X2 = zero_zero_poly_a*]/11693`
6.195[zip.saturate] ### step  2606 ###
6.195[zip.saturate]
    given (2606 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X1 = zero_z2096148049poly_a*]/11859`
6.212[zip.saturate] ### step  2607 ###
6.212[zip.saturate]
    given (2607 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_poly_a).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_nat)* ∨ 
        X1 = zero_z2096148049poly_a*]/11860`
6.232[zip.saturate] ### step  2608 ###
6.232[zip.saturate]
    given (2608 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_a)* ∨ 
        X1 = zero_z2096148049poly_a*]/11861`
6.245[zip.saturate] ### step  2609 ###
6.245[zip.saturate]
    given (2609 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X1 = zero_z2096148049poly_a*]/11862`
6.269[zip.saturate] ### step  2611 ###
6.269[zip.saturate]
    given (2611 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_poly_a).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X1 = zero_z2096148049poly_a*]/11863`
6.286[zip.saturate] ### step  2612 ###
6.286[zip.saturate]
    given (2612 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X2 = zero_z2096148049poly_a*]/11864`
6.306[zip.saturate] ### step  2613 ###
6.306[zip.saturate]
    given (2613 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X2 = zero_z2096148049poly_a*]/11865`
6.345[zip.saturate] ### step  2618 ###
6.345[zip.saturate]
    given (2618 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X2 = zero_z2096148049poly_a*]/11867`
6.360[zip.saturate] ### step  2619 ###
6.360[zip.saturate]
    given (2619 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X2 = zero_z2096148049poly_a*]/11868`
6.375[zip.saturate] ### step  2620 ###
6.375[zip.saturate]
    given (2620 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_nat).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X1 = zero_zero_poly_nat*]/12047`
6.400[zip.saturate] ### step  2621 ###
6.400[zip.saturate]
    given (2621 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_nat).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_nat)* ∨ 
        X1 = zero_zero_poly_nat*]/12048`
6.413[zip.saturate] ### step  2622 ###
6.413[zip.saturate]
    given (2622 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_nat).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ ¬pp (F0 zero_zero_poly_a)* ∨ 
        X1 = zero_zero_poly_nat*]/12049`
6.432[zip.saturate] ### step  2623 ###
6.432[zip.saturate]
    given (2623 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_nat).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X1 = zero_zero_poly_nat*]/12050`
6.462[zip.saturate] ### step  2624 ###
6.462[zip.saturate]
    given (2624 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_nat).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X1 = zero_zero_poly_nat*]/12051`
6.514[zip.saturate] ### step  2625 ###
6.514[zip.saturate]
    given (2625 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X2 = zero_zero_poly_nat*]/12052`
6.528[zip.saturate] ### step  2626 ###
6.528[zip.saturate]
    given (2626 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X2 = zero_zero_poly_nat*]/12053`
6.541[zip.saturate] ### step  2627 ###
6.541[zip.saturate]
    given (2627 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X2 = zero_zero_poly_nat*]/12055`
6.562[zip.saturate] ### step  2629 ###
6.562[zip.saturate]
    given (2629 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X2 = zero_zero_poly_nat*]/12056`
6.588[zip.saturate] ### step  2630 ###
6.588[zip.saturate]
    given (2630 steps, penalty 1):
      `forall (X0:poly_nat) (X2:nat) (X3:poly_a).
       [ord_less_eq_nat X2 X2 ≠ is_zero_nat X0+* ∨ 
        X0 = zero_zero_poly_nat ∨ X3 = zero_zero_poly_a*]/13906`
6.593[zip.saturate] ### step  2631 ###
6.593[zip.saturate]
    given (2631 steps, penalty 1):
      `forall (X0:poly_poly_a) (X2:nat) (X3:poly_a).
       [ord_less_eq_nat X2 X2 ≠ is_zero_poly_a X0+* ∨ 
        X0 = zero_z2096148049poly_a ∨ X3 = zero_zero_poly_a*]/13907`
6.597[zip.saturate] ### step  2632 ###
6.597[zip.saturate]
    given (2632 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [ord_less_eq_nat X0 X0 ≠ is_zero_a X1+* ∨ X1 = zero_zero_poly_a]/16883`
6.601[zip.saturate] ### step  2633 ###
6.601[zip.saturate]
    given (2633 steps, penalty 1):
      `forall (X0:poly_nat) (X2:nat) (X3:poly_poly_a).
       [ord_less_eq_nat X2 X2 ≠ is_zero_nat X0+* ∨ 
        X0 = zero_zero_poly_nat ∨ X3 = zero_z2096148049poly_a*]/14381`
6.611[zip.saturate] ### step  2634 ###
6.611[zip.saturate]
    given (2634 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [ord_less_eq_nat X0 X0 ≠ is_zero_poly_a X1+* ∨ 
        X1 = zero_z2096148049poly_a]/16884`
6.618[zip.saturate] ### step  2636 ###
6.618[zip.saturate]
    given (2636 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [ord_less_eq_nat X0 X0 ≠ is_zero_nat X1+* ∨ 
        X1 = zero_zero_poly_nat]/16886`
6.623[zip.saturate] ### step  2639 ###
6.623[zip.saturate]
    given (2639 steps, penalty 1):
      `forall (X0:poly_nat) (X1:a) (X3:a) (X4:a).
       [¬fundam396953934nt_a_a (if_a (is_zero_nat X0) X1)+* ∨ 
        X0 = zero_zero_poly_nat ∨ X3 = X4*]/8338`
6.626[zip.saturate] ### step  2640 ###
6.626[zip.saturate]
    given (2640 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:a) (X3:a) (X4:a).
       [¬fundam396953934nt_a_a (if_a (is_zero_poly_a X0) X1)+* ∨ 
        X0 = zero_z2096148049poly_a ∨ X3 = X4*]/8339`
6.630[zip.saturate] ### step  2641 ###
6.630[zip.saturate]
    given (2641 steps, penalty 1):
      `forall (X0:poly_a) (X1:a) (X3:a) (X4:a).
       [¬fundam396953934nt_a_a (if_a (is_zero_a X0) X1)+* ∨ 
        X0 = zero_zero_poly_a ∨ X3 = X4*]/8340`
6.634[zip.saturate] ### step  2642 ###
6.635[zip.saturate]
    given (2642 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [fFalse ≠ ord_less_eq_nat X1 X0+* ∨ ¬pp (ord_less_nat X1 X0) ∨ 
        X2 = fTrue*]/4732`
6.649[zip.saturate] ### step  2644 ###
6.649[zip.saturate]
    given (2644 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [ord_less_eq_nat X1 X0 ≠ fFalse+* ∨ ¬pp (ord_less_nat X1 X0) ∨ 
        X2 = fFalse*]/4733`
6.654[zip.saturate] ### step  2645 ###
6.654[zip.saturate]
    given (2645 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_a).
       [ord_less_eq_nat X1 X0 ≠ fFalse+* ∨ ¬pp (ord_less_nat X1 X0) ∨ 
        X2 = zero_zero_poly_a*]/11691`
6.660[zip.saturate] ### step  2646 ###
6.660[zip.saturate]
    given (2646 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_poly_a).
       [ord_less_eq_nat X1 X0 ≠ fFalse+* ∨ ¬pp (ord_less_nat X1 X0) ∨ 
        X2 = zero_z2096148049poly_a*]/11866`
6.665[zip.saturate] ### step  2647 ###
6.665[zip.saturate]
    given (2647 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_nat).
       [ord_less_eq_nat X1 X0 ≠ fFalse+* ∨ ¬pp (ord_less_nat X1 X0) ∨ 
        X2 = zero_zero_poly_nat*]/12054`
6.679[zip.saturate] ### step  2686 ###
6.679[zip.saturate]
    given (2686 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [X1 = X0 ∨ fequal_nat X1 X0 = X2* ∨ X2 = fTrue*]/1862`
6.713[zip.saturate] ### step  2687 ###
6.713[zip.saturate]
    given (2687 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [X0 = zero_zero_nat ∨ ord_less_eq_nat X0 zero_zero_nat = X1* ∨ 
        X1 = fTrue*]/1920`
6.750[zip.saturate] ### step  2688 ###
6.750[zip.saturate]
    given (2688 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [X0 = zero_zero_nat ∨ ord_less_nat X0 one_one_nat = X1* ∨ 
        X1 = fTrue*]/1924`
6.778[zip.saturate] ### step  2696 ###
6.778[zip.saturate]
    given (2696 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [X0 = zero_zero_nat ∨ ord_less_nat zero_zero_nat X0 = X1* ∨ 
        X1 = fFalse*]/2335`
6.806[zip.saturate] ### step  2699 ###
6.806[zip.saturate]
    given (2699 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat).
       [X1 = X0 ∨ fequal_nat X1 X0 = ord_less_nat X2 X2*]/2393`
6.816[zip.saturate] ### step  2700 ###
6.816[zip.saturate]
    given (2700 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [X0 = zero_zero_nat ∨ 
        ord_less_eq_nat X0 zero_zero_nat = ord_less_nat X1 X1*]/2426`
6.840[zip.saturate] ### step  2703 ###
6.840[zip.saturate]
    given (2703 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [X0 = zero_zero_nat ∨ 
        ord_less_nat X0 one_one_nat = ord_less_nat X1 X1*]/2430`
6.846[zip.saturate] ### step  2704 ###
6.846[zip.saturate]
    given (2704 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [pp X2* ∨ fequal_nat X1 X0 = X2* ∨ X1 = X0]/2603`
6.871[zip.saturate] ### step  2705 ###
6.871[zip.saturate]
    given (2705 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [pp X1* ∨ ord_less_eq_nat X0 zero_zero_nat = X1* ∨ 
        X0 = zero_zero_nat]/2608`
6.913[zip.saturate] ### step  2706 ###
6.913[zip.saturate]
    given (2706 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [pp X1* ∨ ord_less_nat X0 one_one_nat = X1* ∨ X0 = zero_zero_nat]/2609`
6.951[zip.saturate] ### step  2718 ###
6.951[zip.saturate]
    given (2718 steps, penalty 1):
      `forall (X309:poly_a).
       [sk_A212 (reflect_poly_a X309) = coeff_a X309 (degree_a X309)*]/17111`
6.957[zip.saturate] ### step  2729 ###
6.958[zip.saturate]
    given (2729 steps, penalty 1):
      `forall (X310:poly_poly_a).
       [coeff_poly_a (reflect_poly_poly_a X310) zero_zero_nat
         = coeff_poly_a X310 (degree_poly_a X310)*]/17117`
6.964[zip.saturate] ### step  2731 ###
6.964[zip.saturate]
    given (2731 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [X0 = zero_zero_nat ∨ 
        ord_less_nat zero_zero_nat X0 = ord_less_eq_nat X1 X1*]/4206`
6.977[zip.saturate] ### step  2740 ###
6.977[zip.saturate]
    given (2740 steps, penalty 1):
      `forall (X311:poly_nat).
       [coeff_nat (reflect_poly_nat X311) zero_zero_nat
         = coeff_nat X311 (degree_nat X311)*]/17127`
6.989[zip.saturate] ### step  2751 ###
6.989[zip.saturate]
    given (2751 steps, penalty 1):
      `forall (X312:poly_poly_nat).
       [coeff_poly_nat (reflec781175074ly_nat X312) zero_zero_nat
         = coeff_poly_nat X312 (degree_poly_nat X312)*]/17139`
6.997[zip.saturate] ### step  2757 ###
6.997[zip.saturate]
    given (2757 steps, penalty 1):
      `forall (X0:poly_nat) (X1:a) (X2:a).
       [if_a (is_zero_nat X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_nat]/11505`
7.000[zip.saturate] ### step  2758 ###
7.000[zip.saturate]
    given (2758 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:a) (X2:a).
       [if_a (is_zero_poly_a X0) X2 X1 = X1* ∨ X0 = zero_z2096148049poly_a]/11506`
7.017[zip.saturate] ### step  2760 ###
7.017[zip.saturate]
    given (2760 steps, penalty 1):
      `forall (X0:poly_a) (X1:a) (X2:a).
       [if_a (is_zero_a X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_a]/11507`
7.029[zip.saturate] ### step  2762 ###
7.029[zip.saturate]
    given (2762 steps, penalty 1):
      `forall (X313:poly_poly_poly_a).
       [coeff_poly_poly_a (reflec581648976poly_a X313) zero_zero_nat
         = coeff_poly_poly_a X313 (degree_poly_poly_a X313)*]/17208`
7.040[zip.saturate] ### step  2773 ###
7.041[zip.saturate]
    given (2773 steps, penalty 1):
      `forall (X314:poly_a).
       [pcompose_a X314 zero_zero_poly_a
         = monom_a (sk_A212 X314) zero_zero_nat*]/17226`
7.046[zip.saturate] ### step  2776 ###
7.046[zip.saturate]
    given (2776 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat) (X2:nat).
       [if_nat (is_zero_nat X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_nat]/11905`
7.050[zip.saturate] ### step  2777 ###
7.050[zip.saturate]
    given (2777 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat) (X2:nat).
       [if_nat (is_zero_poly_a X0) X2 X1 = X1* ∨ 
        X0 = zero_z2096148049poly_a]/11906`
7.059[zip.saturate] ### step  2778 ###
7.059[zip.saturate]
    given (2778 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat) (X2:nat).
       [if_nat (is_zero_a X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_a]/11907`
7.068[zip.saturate] ### step  2781 ###
7.068[zip.saturate]
    given (2781 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_a) (X2:poly_a).
       [if_poly_a (is_zero_nat X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_nat]/12139`
7.073[zip.saturate] ### step  2782 ###
7.073[zip.saturate]
    given (2782 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_a) (X2:poly_a).
       [if_poly_a (is_zero_poly_a X0) X2 X1 = X1* ∨ 
        X0 = zero_z2096148049poly_a]/12140`
7.081[zip.saturate] ### step  2783 ###
7.081[zip.saturate]
    given (2783 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_a) (X2:poly_a).
       [if_poly_a (is_zero_a X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_a]/12141`
7.084[zip.saturate] ### step  2784 ###
7.084[zip.saturate]
    given (2784 steps, penalty 1):
      `forall (X315:poly_nat).
       [pcompose_nat X315 zero_zero_poly_nat
         = monom_nat (coeff_nat X315 zero_zero_nat) zero_zero_nat*]/17233`
7.096[zip.saturate] ### step  2795 ###
7.096[zip.saturate]
    given (2795 steps, penalty 1):
      `forall (X316:poly_poly_a).
       [pcompose_poly_a X316 zero_z2096148049poly_a
         = monom_poly_a (coeff_poly_a X316 zero_zero_nat) zero_zero_nat*]/17248`
7.104[zip.saturate] ### step  2807 ###
7.104[zip.saturate]
    given (2807 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (is_zero_nat X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_nat]/12684`
7.119[zip.saturate] ### step  2809 ###
7.119[zip.saturate]
    given (2809 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (is_zero_poly_a X0) X2 X1 = X1* ∨ 
        X0 = zero_z2096148049poly_a]/12685`
7.129[zip.saturate] ### step  2810 ###
7.129[zip.saturate]
    given (2810 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (is_zero_a X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_a]/12686`
7.138[zip.saturate] ### step  2824 ###
7.138[zip.saturate]
    given (2824 steps, penalty 1):
      `forall (X0:poly_nat) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (is_zero_nat X0) X2 X1 = X1* ∨ 
        X0 = zero_zero_poly_nat]/15507`
7.142[zip.saturate] ### step  2825 ###
7.142[zip.saturate]
    given (2825 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (is_zero_poly_a X0) X2 X1 = X1* ∨ 
        X0 = zero_z2096148049poly_a]/15508`
7.149[zip.saturate] ### step  2826 ###
7.149[zip.saturate]
    given (2826 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (is_zero_a X0) X2 X1 = X1* ∨ X0 = zero_zero_poly_a]/15509`
7.157[zip.saturate] ### step  2829 ###
7.157[zip.saturate]
    given (2829 steps, penalty 1):
      `forall (X403:poly_a) (X404:nat).
       [coeff_a X403 (sk_I X403 X404) ≠ zero_zero_a+* ∨ 
        ¬pp (ord_less_nat X404 (degree_a X403))]/346`
7.165[zip.saturate] ### step  2830 ###
7.165[zip.saturate]
    given (2830 steps, penalty 1):
      `forall (X405:poly_poly_a) (X406:nat).
       [coeff_poly_a X405 (sk_I1 X405 X406) ≠ zero_zero_poly_a+* ∨ 
        ¬pp (ord_less_nat X406 (degree_poly_a X405))]/348`
7.169[zip.saturate] ### step  2831 ###
7.169[zip.saturate]
    given (2831 steps, penalty 1):
      `forall (X407:poly_nat) (X408:nat).
       [coeff_nat X407 (sk_I2 X407 X408) ≠ zero_zero_nat+* ∨ 
        ¬pp (ord_less_nat X408 (degree_nat X407))]/350`
7.172[zip.saturate] ### step  2832 ###
7.172[zip.saturate]
    given (2832 steps, penalty 1):
      `forall (X409:poly_poly_nat) (X410:nat).
       [coeff_poly_nat X409 (sk_I3 X409 X410) ≠ zero_zero_poly_nat+* ∨ 
        ¬pp (ord_less_nat X410 (degree_poly_nat X409))]/352`
7.176[zip.saturate] ### step  2833 ###
7.176[zip.saturate]
    given (2833 steps, penalty 1):
      `forall (X411:poly_poly_poly_a) (X412:nat).
       [coeff_poly_poly_a X411 (sk_I4 X411 X412) ≠ zero_z2096148049poly_a+* ∨ 
        ¬pp (ord_less_nat X412 (degree_poly_poly_a X411))]/354`
7.187[zip.saturate] ### step  2860 ###
7.187[zip.saturate]
    given (2860 steps, penalty 1):
      `forall (X505:poly_a).
       [pp (rsquarefree_a X505) ∨ X505 = zero_zero_poly_a ∨ 
        order_a (sk_A3 X505) X505 ≠ zero_zero_nat+*]/436`
7.198[zip.saturate] ### step  2861 ###
7.198[zip.saturate]
    given (2861 steps, penalty 1):
      `forall (X323:poly_a).
       [degree_a (reflect_poly_a X323) = degree_a X323* ∨ 
        sk_A212 X323 = zero_zero_a]/17429`
7.202[zip.saturate] ### step  2863 ###
7.202[zip.saturate]
    given (2863 steps, penalty 1):
      `forall (X505:poly_a).
       [pp (rsquarefree_a X505) ∨ X505 = zero_zero_poly_a ∨ 
        order_a (sk_A3 X505) X505 ≠ one_one_nat+*]/437`
7.207[zip.saturate] ### step  2864 ###
7.207[zip.saturate]
    given (2864 steps, penalty 1):
      `forall (X508:poly_poly_a).
       [pp (rsquarefree_poly_a X508) ∨ X508 = zero_z2096148049poly_a ∨ 
        order_poly_a (sk_A31 X508) X508 ≠ zero_zero_nat+*]/440`
7.211[zip.saturate] ### step  2865 ###
7.211[zip.saturate]
    given (2865 steps, penalty 1):
      `forall (X508:poly_poly_a).
       [pp (rsquarefree_poly_a X508) ∨ X508 = zero_z2096148049poly_a ∨ 
        order_poly_a (sk_A31 X508) X508 ≠ one_one_nat+*]/441`
7.214[zip.saturate] ### step  2866 ###
7.214[zip.saturate]
    given (2866 steps, penalty 1):
      `forall (X524:poly_nat).
       [pp (pos_poly_nat X524) ∨ 
        ¬pp (ord_less_nat zero_zero_nat (coeff_nat X524 (degree_nat X524)))+*]/450`
7.231[zip.saturate] ### step  2867 ###
7.231[zip.saturate]
    given (2867 steps, penalty 1):
      `forall (X535:poly_nat) (X536:nat).
       [pp (pos_poly_nat X535) ∨ X535 = zero_zero_poly_nat ∨ 
        ¬pp (pos_poly_nat (pCons_nat X536 X535))+*]/462`
7.242[zip.saturate] ### step  2868 ###
7.242[zip.saturate]
    given (2868 steps, penalty 1):
      `forall (X543:nat) (X544:nat).
       [pp (ord_less_nat X543 X544) ∨ 
        ¬pp (ord_less_nat zero_zero_nat (minus_minus_nat X544 X543))+*]/473`
7.254[zip.saturate] ### step  2869 ###
7.254[zip.saturate]
    given (2869 steps, penalty 1):
      `forall (X552:nat) (X553:nat).
       [minus_minus_nat X552 X553 ≠ zero_zero_nat+* ∨ X553 = X552 ∨ 
        minus_minus_nat X553 X552 ≠ zero_zero_nat*]/479`
7.256[zip.saturate] ### step  2870 ###
7.256[zip.saturate]
    given (2870 steps, penalty 1):
      `forall (X590:nat) (X591:nat).
       [¬pp (ord_less_eq_nat X590 X591)+* ∨ X591 = X590 ∨ 
        ¬pp (ord_less_eq_nat X591 X590)*]/500`
7.265[zip.saturate] ### step  2871 ###
7.265[zip.saturate]
    given (2871 steps, penalty 1):
      `forall (X599:nat) (X600:nat).
       [pp (ord_less_nat X599 X600) ∨ 
        ¬pp (ord_less_eq_nat X599 X600)+* ∨ X599 = X600]/506`
7.299[zip.saturate] ### step  2872 ###
7.299[zip.saturate]
    given (2872 steps, penalty 1):
      `forall (X324:poly_poly_a).
       [degree_poly_a (reflect_poly_poly_a X324) = degree_poly_a X324* ∨ 
        coeff_poly_a X324 zero_zero_nat = zero_zero_poly_a]/278`
7.303[zip.saturate] ### step  2883 ###
7.303[zip.saturate]
    given (2883 steps, penalty 1):
      `forall (X325:poly_nat).
       [degree_nat (reflect_poly_nat X325) = degree_nat X325* ∨ 
        coeff_nat X325 zero_zero_nat = zero_zero_nat]/279`
7.306[zip.saturate] ### step  2885 ###
7.306[zip.saturate]
    given (2885 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat) (X2:nat).
       [synthetic_div_nat (pCons_nat X2 X1) X0 ≠ zero_zero_poly_nat+* ∨ 
        poly_nat2 X1 X0 = zero_zero_nat]/8384`
7.310[zip.saturate] ### step  2886 ###
7.311[zip.saturate]
    given (2886 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat) (X2:nat).
       [synthetic_div_nat (pCons_nat X2 X1) X0 ≠ zero_zero_poly_nat+* ∨ 
        synthetic_div_nat X1 X0 = zero_zero_poly_nat]/8385`
7.314[zip.saturate] ### step  2887 ###
7.314[zip.saturate]
    given (2887 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_poly_a) (X2:poly_a).
       [synthetic_div_poly_a (pCons_poly_a X2 X1) X0
         ≠ zero_z2096148049poly_a+* ∨ 
        poly_poly_a2 X1 X0 = zero_zero_poly_a]/8532`
7.320[zip.saturate] ### step  2888 ###
7.320[zip.saturate]
    given (2888 steps, penalty 1):
      `forall (X0:poly_a) (X1:poly_poly_a) (X2:poly_a).
       [synthetic_div_poly_a (pCons_poly_a X2 X1) X0
         ≠ zero_z2096148049poly_a+* ∨ 
        synthetic_div_poly_a X1 X0 = zero_z2096148049poly_a]/8533`
7.328[zip.saturate] ### step  2893 ###
7.328[zip.saturate]
    given (2893 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [synthetic_div_a (pCons_a X2 X1) X0 ≠ one_one_poly_a+* ∨ 
        synthetic_div_a X1 X0 = zero_zero_poly_a]/8550`
7.330[zip.saturate] ### step  2894 ###
7.330[zip.saturate]
    given (2894 steps, penalty 1):
      `forall (X326:poly_poly_nat).
       [degree_poly_nat (reflec781175074ly_nat X326) = degree_poly_nat X326* ∨ 
        coeff_poly_nat X326 zero_zero_nat = zero_zero_poly_nat]/280`
7.333[zip.saturate] ### step  2895 ###
7.333[zip.saturate]
    given (2895 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [synthetic_div_a (pCons_a X2 X1) X0 ≠ one_one_poly_a+* ∨ 
        poly_a2 X1 X0 = one_one_a]/8551`
7.339[zip.saturate] ### step  2896 ###
7.339[zip.saturate]
    given (2896 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [synthetic_div_a (pCons_a X2 X1) X0 ≠ zero_zero_poly_a+* ∨ 
        poly_a2 X1 X0 = zero_zero_a]/8557`
7.358[zip.saturate] ### step  2898 ###
7.358[zip.saturate]
    given (2898 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [synthetic_div_a (pCons_a X2 X1) X0 ≠ zero_zero_poly_a+* ∨ 
        synthetic_div_a X1 X0 = zero_zero_poly_a]/8558`
7.364[zip.saturate] ### step  2905 ###
7.364[zip.saturate]
    given (2905 steps, penalty 1):
      `forall (X327:poly_poly_poly_a).
       [degree_poly_poly_a (reflec581648976poly_a X327)
         = degree_poly_poly_a X327* ∨ 
        coeff_poly_poly_a X327 zero_zero_nat = zero_z2096148049poly_a]/281`
7.382[zip.saturate] ### step  2976 ###
7.383[zip.saturate]
    given (2976 steps, penalty 1):
      `forall (X334:poly_a) (X335:nat) (X336:nat).
       [coeff_a (poly_cutoff_a X336 X334) X335 = coeff_a X334 X335* ∨ 
        ¬pp (ord_less_nat X335 X336)]/288`
7.390[zip.saturate] ### step  2983 ###
7.390[zip.saturate]
    given (2983 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (ord_less_nat X0 X0) X1 X2 = X1* ∨ true]/2932`
7.399[zip.saturate] ### step  2984 ###
7.399[zip.saturate]
    given (2984 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (ord_less_nat X0 X0) X1 X2 = X1* ∨ true]/2933`
7.404[zip.saturate] ### step  2985 ###
7.404[zip.saturate]
    given (2985 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a) (X2:poly_a).
       [if_poly_a (ord_less_nat X0 X0) X1 X2 = X1* ∨ true]/2934`
7.410[zip.saturate] ### step  2986 ###
7.410[zip.saturate]
    given (2986 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat).
       [if_nat (ord_less_nat X0 X0) X1 X2 = X1* ∨ true]/2935`
7.418[zip.saturate] ### step  2987 ###
7.418[zip.saturate]
    given (2987 steps, penalty 1):
      `forall (X335:nat) (X336:nat) (X337:poly_a).
       [coeff_a (poly_cutoff_a X336 X337) X335 = zero_zero_a* ∨ 
        pp (ord_less_nat X335 X336)]/289`
7.423[zip.saturate] ### step  2988 ###
7.423[zip.saturate]
    given (2988 steps, penalty 1):
      `forall (X0:nat) (X1:a) (X2:a).
       [if_a (ord_less_nat X0 X0) X1 X2 = X1* ∨ true]/2936`
7.429[zip.saturate] ### step  2989 ###
7.429[zip.saturate]
    given (2989 steps, penalty 1):
      `forall (X0:poly_a).
       [reflect_poly_a X0 = monom_a (sk_A219 X0) zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat]/8400`
7.469[zip.saturate] ### step  2993 ###
7.469[zip.saturate]
    given (2993 steps, penalty 1):
      `forall (X0:poly_nat).
       [reflect_poly_nat X0 = monom_nat (sk_A220 X0) zero_zero_nat* ∨ 
        degree_nat X0 ≠ zero_zero_nat]/8640`
7.473[zip.saturate] ### step  2994 ###
7.473[zip.saturate]
    given (2994 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [reflect_poly_poly_a X0 = monom_poly_a (sk_A221 X0) zero_zero_nat* ∨ 
        degree_poly_a X0 ≠ zero_zero_nat]/9124`
7.479[zip.saturate] ### step  2995 ###
7.479[zip.saturate]
    given (2995 steps, penalty 1):
      `forall (X0:poly_a).
       [reflect_poly_a X0 = monom_a (sk_A212 X0) zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat]/11451`
7.486[zip.saturate] ### step  2998 ###
7.486[zip.saturate]
    given (2998 steps, penalty 1):
      `forall (X338:poly_poly_a) (X339:nat) (X340:nat).
       [coeff_poly_a (poly_cutoff_poly_a X340 X338) X339
         = coeff_poly_a X338 X339* ∨ 
        ¬pp (ord_less_nat X339 X340)]/290`
7.498[zip.saturate] ### step  3009 ###
7.498[zip.saturate]
    given (3009 steps, penalty 1):
      `forall (X339:nat) (X340:nat) (X341:poly_poly_a).
       [coeff_poly_a (poly_cutoff_poly_a X340 X341) X339 = zero_zero_poly_a* ∨ 
        pp (ord_less_nat X339 X340)]/291`
7.506[zip.saturate] ### step  3019 ###
7.506[zip.saturate]
    given (3019 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat).
       [coeff_a X0 X1 = zero_zero_a* ∨ degree_a X0 ≠ zero_zero_nat+* ∨ 
        zero_zero_nat = X1]/15040`
7.512[zip.saturate] ### step  3020 ###
7.512[zip.saturate]
    given (3020 steps, penalty 1):
      `forall (X342:poly_nat) (X343:nat) (X344:nat).
       [coeff_nat (poly_cutoff_nat X344 X342) X343 = coeff_nat X342 X343* ∨ 
        ¬pp (ord_less_nat X343 X344)]/292`
7.520[zip.saturate] ### step  3022 ###
7.520[zip.saturate]
    given (3022 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat).
       [coeff_poly_a X0 X1 = zero_zero_poly_a* ∨ 
        degree_poly_a X0 ≠ zero_zero_nat+* ∨ zero_zero_nat = X1]/15134`
7.522[zip.saturate] ### step  3023 ###
7.523[zip.saturate]
    given (3023 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [coeff_nat X0 X1 = zero_zero_nat* ∨ 
        degree_nat X0 ≠ zero_zero_nat+* ∨ zero_zero_nat = X1]/15176`
7.524[zip.saturate] ### step  3024 ###
7.524[zip.saturate]
    given (3024 steps, penalty 1):
      `forall (X1:poly_a) (X2:a).
       [X2 = sk_A219 (pCons_a X2 X1)* ∨ 
        degree_a (pCons_a X2 X1) ≠ zero_zero_nat]/8413`
7.528[zip.saturate] ### step  3025 ###
7.528[zip.saturate]
    given (3025 steps, penalty 1):
      `forall (X1:nat) (X2:a).
       [sk_A219 (monom_a X2 X1) = X2* ∨ 
        degree_a (monom_a X2 X1) ≠ zero_zero_nat]/8415`
7.538[zip.saturate] ### step  3028 ###
7.538[zip.saturate]
    given (3028 steps, penalty 1):
      `forall (X1:nat) (X2:nat).
       [sk_A220 (monom_nat X2 X1) = X2* ∨ 
        degree_nat (monom_nat X2 X1) ≠ zero_zero_nat]/8676`
7.555[zip.saturate] ### step  3031 ###
7.555[zip.saturate]
    given (3031 steps, penalty 1):
      `forall (X343:nat) (X344:nat) (X345:poly_nat).
       [coeff_nat (poly_cutoff_nat X344 X345) X343 = zero_zero_nat* ∨ 
        pp (ord_less_nat X343 X344)]/293`
7.563[zip.saturate] ### step  3033 ###
7.563[zip.saturate]
    given (3033 steps, penalty 1):
      `forall (X1:nat) (X2:poly_a).
       [sk_A221 (monom_poly_a X2 X1) = X2* ∨ 
        degree_poly_a (monom_poly_a X2 X1) ≠ zero_zero_nat]/9176`
7.567[zip.saturate] ### step  3036 ###
7.567[zip.saturate]
    given (3036 steps, penalty 1):
      `forall (X1:nat) (X2:a).
       [sk_A212 (monom_a X2 X1) = X2* ∨ 
        degree_a (monom_a X2 X1) ≠ zero_zero_nat]/11478`
7.571[zip.saturate] ### step  3038 ###
7.571[zip.saturate]
    given (3038 steps, penalty 1):
      `forall (X346:poly_poly_nat) (X347:nat) (X348:nat).
       [coeff_poly_nat (poly_cutoff_poly_nat X348 X346) X347
         = coeff_poly_nat X346 X347* ∨ 
        ¬pp (ord_less_nat X347 X348)]/294`
7.575[zip.saturate] ### step  3039 ###
7.575[zip.saturate]
    given (3039 steps, penalty 1):
      `forall (X368:a) (X369:poly_a).
       [pcompose_a (monom_a X368 zero_zero_nat) X369
         = monom_a X368 zero_zero_nat*]/17922`
7.579[zip.saturate] ### step  3040 ###
7.579[zip.saturate]
    given (3040 steps, penalty 1):
      `forall (X370:nat) (X371:poly_nat).
       [pcompose_nat (monom_nat X370 zero_zero_nat) X371
         = monom_nat X370 zero_zero_nat*]/17923`
7.600[zip.saturate] ### step  3041 ###
7.600[zip.saturate]
    given (3041 steps, penalty 1):
      `forall (X372:poly_a) (X373:poly_poly_a).
       [pcompose_poly_a (monom_poly_a X372 zero_zero_nat) X373
         = monom_poly_a X372 zero_zero_nat*]/17924`
7.612[zip.saturate] ### step  3042 ###
7.612[zip.saturate]
    given (3042 steps, penalty 1):
      `forall (X347:nat) (X348:nat) (X349:poly_poly_nat).
       [coeff_poly_nat (poly_cutoff_poly_nat X348 X349) X347
         = zero_zero_poly_nat* ∨ 
        pp (ord_less_nat X347 X348)]/295`
7.617[zip.saturate] ### step  3043 ###
7.617[zip.saturate]
    given (3043 steps, penalty 1):
      `forall (X390:poly_a).
       [pcompose_a X390 (pCons_a zero_zero_a one_one_poly_a) = X390*]/17925`
7.620[zip.saturate] ### step  3044 ###
7.620[zip.saturate]
    given (3044 steps, penalty 1):
      `forall (X391:poly_poly_a).
       [pcompose_poly_a X391 
         (pCons_poly_a zero_zero_poly_a one_one_poly_poly_a) = X391*]/17926`
7.625[zip.saturate] ### step  3045 ###
7.625[zip.saturate]
    given (3045 steps, penalty 1):
      `forall (X392:poly_nat).
       [pcompose_nat X392 (pCons_nat zero_zero_nat one_one_poly_nat) = X392*]/17927`
7.636[zip.saturate] ### step  3047 ###
7.636[zip.saturate]
    given (3047 steps, penalty 1):
      `forall (X393:poly_poly_nat).
       [pcompose_poly_nat X393 
         (pCons_poly_nat zero_zero_poly_nat 
           (monom_poly_nat one_one_poly_nat zero_zero_nat))
         = X393*]/17960`
7.647[zip.saturate] ### step  3048 ###
7.647[zip.saturate]
    given (3048 steps, penalty 1):
      `forall (X394:poly_poly_poly_a).
       [pcompose_poly_poly_a X394 
         (pCons_poly_poly_a zero_z2096148049poly_a 
           (monom_poly_poly_a one_one_poly_poly_a zero_zero_nat))
         = X394*]/17997`
7.651[zip.saturate] ### step  3049 ###
7.651[zip.saturate]
    given (3049 steps, penalty 1):
      `forall (X565:nat) (X566:nat).
       [pp (ord_less_eq_nat X565 X566)* ∨ pp (ord_less_eq_nat X566 X565)*]/488`
7.677[zip.saturate] ### step  3053 ###
7.677[zip.saturate]
    given (3053 steps, penalty 1):
      `forall (X350:poly_poly_poly_a) (X351:nat) (X352:nat).
       [coeff_poly_poly_a (poly_c1841332160poly_a X352 X350) X351
         = coeff_poly_poly_a X350 X351* ∨ 
        ¬pp (ord_less_nat X351 X352)]/296`
7.684[zip.saturate] ### step  3058 ###
7.684[zip.saturate]
    given (3058 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:bool).
       [X1 = X0* ∨ X2 = fFalse* ∨ X0 = X2* ∨ pp X1*]/1499`
7.754[zip.saturate] ### step  3059 ###
7.754[zip.saturate]
    given (3059 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 = X0* ∨ X2 = fFalse* ∨ X0 = X2*]/1502`
7.791[zip.saturate] ### step  3064 ###
7.791[zip.saturate]
    given (3064 steps, penalty 1):
      `forall (X351:nat) (X352:nat) (X353:poly_poly_poly_a).
       [coeff_poly_poly_a (poly_c1841332160poly_a X352 X353) X351
         = zero_z2096148049poly_a* ∨ 
        pp (ord_less_nat X351 X352)]/297`
7.793[zip.saturate] ### step  3065 ###
7.793[zip.saturate]
    given (3065 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:bool).
       [X1 = X0* ∨ X2 = fFalse* ∨ X0 = X2* ∨ X1 = fTrue*]/1504`
7.880[zip.saturate] ### step  3075 ###
7.880[zip.saturate]
    given (3075 steps, penalty 1):
      `forall (X354:poly_a) (X355:a).
       [X354 = zero_zero_poly_a ∨ 
        sk_A212 (reflect_poly_a (pCons_a X355 X354))
         = coeff_a X354 (degree_a X354)*]/18035`
7.894[zip.saturate] ### step  3086 ###
7.894[zip.saturate]
    given (3086 steps, penalty 1):
      `forall (X356:poly_nat) (X357:nat).
       [X356 = zero_zero_poly_nat ∨ 
        coeff_nat (reflect_poly_nat (pCons_nat X357 X356)) zero_zero_nat
         = coeff_nat X356 (degree_nat X356)*]/18088`
7.902[zip.saturate] ### step  3097 ###
7.902[zip.saturate]
    given (3097 steps, penalty 1):
      `forall (X358:poly_poly_a) (X359:poly_a).
       [X358 = zero_z2096148049poly_a ∨ 
        coeff_poly_a (reflect_poly_poly_a (pCons_poly_a X359 X358)) 
         zero_zero_nat = coeff_poly_a X358 (degree_poly_a X358)*]/18098`
7.912[zip.saturate] ### step  3112 ###
7.912[zip.saturate]
    given (3112 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:bool).
       [ord_less_eq_nat X1 X1 = X0* ∨ X2 = fTrue* ∨ X0 = X2*]/1930`
7.988[zip.saturate] ### step  3161 ###
7.989[zip.saturate]
    given (3161 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat).
       [ord_less_eq_nat X1 X1 = X0* ∨ X0 = ord_less_nat X2 X2*]/2436`
8.031[zip.saturate] ### step  3220 ###
8.031[zip.saturate]
    given (3220 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:bool).
       [ord_less_eq_nat X1 X1 = X0* ∨ pp X2* ∨ X0 = X2*]/3094`
8.101[zip.saturate] ### step  3291 ###
8.101[zip.saturate]
    given (3291 steps, penalty 1):
      `forall (X0:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        pp (ord_less_nat zero_zero_nat X0)*]/3854`
8.113[zip.saturate] ### step  3292 ###
8.113[zip.saturate]
    given (3292 steps, penalty 1):
      `forall (X0:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        pp (ord_less_nat zero_zero_nat X0)*]/3865`
8.129[zip.saturate] ### step  3312 ###
8.129[zip.saturate]
    given (3312 steps, penalty 1):
      `forall (X0:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        ord_less_nat zero_zero_nat X0 = fTrue*]/4533`
8.134[zip.saturate] ### step  3313 ###
8.134[zip.saturate]
    given (3313 steps, penalty 1):
      `forall (X0:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        ord_less_nat zero_zero_nat X0 = fTrue*]/4613`
8.148[zip.saturate] ### step  3358 ###
8.148[zip.saturate]
    given (3358 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [fequal_nat X0 (sk_N2 (fequal_nat X0)) = fFalse* ∨ X0 = X1*]/7977`
8.216[zip.saturate] ### step  3363 ###
8.216[zip.saturate]
    given (3363 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [fequal_nat X0 (sk_N21 (fequal_nat X0)) = fFalse* ∨ X0 = X1*]/8067`
8.244[zip.saturate] ### step  3366 ###
8.244[zip.saturate]
    given (3366 steps, penalty 1):
      `forall (X0:poly_a).
       [is_zero_a (monom_a (sk_A216 is_zero_a) zero_zero_nat) = fFalse* ∨ 
        X0 = zero_zero_poly_a*]/8217`
8.285[zip.saturate] ### step  3369 ###
8.285[zip.saturate]
    given (3369 steps, penalty 1):
      `forall (X0:poly_nat).
       [is_zero_nat (monom_nat (sk_A217 is_zero_nat) zero_zero_nat) = fFalse* ∨ 
        X0 = zero_zero_poly_nat*]/8287`
8.315[zip.saturate] ### step  3373 ###
8.315[zip.saturate]
    given (3373 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [is_zero_poly_a (monom_poly_a (sk_A218 is_zero_poly_a) zero_zero_nat)
         = fFalse* ∨ 
        X0 = zero_z2096148049poly_a*]/8638`
8.340[zip.saturate] ### step  3391 ###
8.340[zip.saturate]
    given (3391 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [zip_tseitin0 (sk_N21 F0) X2 F0* ∨ F0 X1 = fTrue*]/11494`
8.361[zip.saturate] ### step  3392 ###
8.361[zip.saturate]
    given (3392 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [zip_tseitin0 (sk_N2 F0) X2 F0* ∨ F0 X1 = fTrue*]/11495`
8.393[zip.saturate] ### step  3397 ###
8.393[zip.saturate]
    given (3397 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [zip_tseitin0 (sk_N21 F0) X2 F0* ∨ pp (F0 X1)*]/11499`
8.418[zip.saturate] ### step  3398 ###
8.419[zip.saturate]
    given (3398 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [zip_tseitin0 (sk_N2 F0) X2 F0* ∨ pp (F0 X1)*]/11500`
8.449[zip.saturate] ### step  3399 ###
8.449[zip.saturate]
    given (3399 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [sk_P310 pos_poly_nat = zero_zero_poly_nat* ∨ 
        pos_poly_nat X0 = ord_less_eq_nat X1 X1*]/12184`
8.455[zip.saturate] ### step  3400 ###
8.455[zip.saturate]
    given (3400 steps, penalty 1):
      `forall (X0:poly_nat) (X1:bool).
       [sk_P310 pos_poly_nat = zero_zero_poly_nat* ∨ 
        pos_poly_nat X0 = X1* ∨ X1 = fFalse*]/12185`
8.534[zip.saturate] ### step  3531 ###
8.534[zip.saturate]
    given (3531 steps, penalty 1):
      `forall (X397:poly_a) (X398:poly_a).
       [X397 = zero_zero_poly_a ∨ 
        pcompose_a X397 X398 ≠ zero_zero_poly_a+* ∨ 
        ¬pp (ord_less_nat zero_zero_nat (degree_a X398))*]/343`
8.547[zip.saturate] ### step  3542 ###
8.548[zip.saturate]
    given (3542 steps, penalty 1):
      `forall (X399:poly_nat) (X400:poly_nat).
       [X399 = zero_zero_poly_nat ∨ 
        pcompose_nat X399 X400 ≠ zero_zero_poly_nat+* ∨ 
        ¬pp (ord_less_nat zero_zero_nat (degree_nat X400))*]/344`
8.552[zip.saturate] ### step  3553 ###
8.552[zip.saturate]
    given (3553 steps, penalty 1):
      `forall (X401:poly_poly_a) (X402:poly_poly_a).
       [X401 = zero_z2096148049poly_a ∨ 
        pcompose_poly_a X401 X402 ≠ zero_z2096148049poly_a+* ∨ 
        ¬pp (ord_less_nat zero_zero_nat (degree_poly_a X402))*]/345`
8.559[zip.saturate] ### step  3569 ###
8.559[zip.saturate]
    given (3569 steps, penalty 1):
      `forall (X403:poly_a) (X404:nat).
       [pp (ord_less_nat X404 (sk_I X403 X404))* ∨ 
        ¬pp (ord_less_nat X404 (degree_a X403))]/347`
8.579[zip.saturate] ### step  3590 ###
8.579[zip.saturate]
    given (3590 steps, penalty 1):
      `forall (X405:poly_poly_a) (X406:nat).
       [pp (ord_less_nat X406 (sk_I1 X405 X406))* ∨ 
        ¬pp (ord_less_nat X406 (degree_poly_a X405))]/349`
8.601[zip.saturate] ### step  3611 ###
8.601[zip.saturate]
    given (3611 steps, penalty 1):
      `forall (X407:poly_nat) (X408:nat).
       [pp (ord_less_nat X408 (sk_I2 X407 X408))* ∨ 
        ¬pp (ord_less_nat X408 (degree_nat X407))]/351`
8.634[zip.saturate] ### step  3630 ###
8.634[zip.saturate]
    given (3630 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [¬pp (F0 (sk_N2 F0))* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/3852`
8.702[zip.saturate] ### step  3631 ###
8.702[zip.saturate]
    given (3631 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [¬pp (F0 (sk_N21 F0))* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/3862`
8.751[zip.saturate] ### step  3632 ###
8.751[zip.saturate]
    given (3632 steps, penalty 1):
      `forall (X409:poly_poly_nat) (X410:nat).
       [pp (ord_less_nat X410 (sk_I3 X409 X410))* ∨ 
        ¬pp (ord_less_nat X410 (degree_poly_nat X409))]/353`
8.768[zip.saturate] ### step  3633 ###
8.768[zip.saturate]
    given (3633 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [¬pp (F0 (sk_N21 F0))* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/4218`
8.831[zip.saturate] ### step  3636 ###
8.831[zip.saturate]
    given (3636 steps, penalty 1):
      `forall (X0:poly_nat).
       [pos_poly_nat (sk_P310 pos_poly_nat) = fFalse* ∨ 
        pos_poly_nat X0 = fTrue*]/18965`
8.842[zip.saturate] ### step  3644 ###
8.843[zip.saturate]
    given (3644 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [¬pp (F0 (sk_N2 F0))* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/4219`
8.882[zip.saturate] ### step  3652 ###
8.882[zip.saturate]
    given (3652 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [¬zip_tseitin1 (sk_N2 F0) F0* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/4543`
8.907[zip.saturate] ### step  3653 ###
8.908[zip.saturate]
    given (3653 steps, penalty 1):
      `forall (X411:poly_poly_poly_a) (X412:nat).
       [pp (ord_less_nat X412 (sk_I4 X411 X412))* ∨ 
        ¬pp (ord_less_nat X412 (degree_poly_poly_a X411))]/355`
8.931[zip.saturate] ### step  3654 ###
8.931[zip.saturate]
    given (3654 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [¬zip_tseitin1 (sk_N2 F0) F0* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/4544`
8.998[zip.saturate] ### step  3662 ###
8.998[zip.saturate]
    given (3662 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [¬zip_tseitin1 (sk_N21 F0) F0* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/4625`
9.029[zip.saturate] ### step  3663 ###
9.029[zip.saturate]
    given (3663 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [¬zip_tseitin1 (sk_N21 F0) F0* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/4626`
9.110[zip.saturate] ### step  3678 ###
9.110[zip.saturate]
    given (3678 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_a).
       [X1 = X0 ∨ X2 = zero_zero_poly_a ∨ 
        is_zero_a X2 = fequal_nat X1 X0*]/5331`
9.114[zip.saturate] ### step  3680 ###
9.114[zip.saturate]
    given (3680 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [X0 = zero_zero_nat ∨ X1 = zero_zero_poly_a ∨ 
        is_zero_a X1 = ord_less_eq_nat X0 zero_zero_nat*]/5377`
9.122[zip.saturate] ### step  3681 ###
9.122[zip.saturate]
    given (3681 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [X0 = zero_zero_nat ∨ X1 = zero_zero_poly_a ∨ 
        is_zero_a X1 = ord_less_nat X0 one_one_nat*]/5383`
9.128[zip.saturate] ### step  3683 ###
9.128[zip.saturate]
    given (3683 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_poly_a).
       [X1 = X0 ∨ X2 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X2 = fequal_nat X1 X0*]/5566`
9.133[zip.saturate] ### step  3685 ###
9.133[zip.saturate]
    given (3685 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [X0 = zero_zero_nat ∨ X1 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X1 = ord_less_eq_nat X0 zero_zero_nat*]/5612`
9.172[zip.saturate] ### step  3686 ###
9.172[zip.saturate]
    given (3686 steps, penalty 1):
      `[sk_P310 pos_poly_nat = zero_zero_poly_nat*]/19317`
9.347[zip.saturate] ### step  3693 ###
9.347[zip.saturate]
    given (3693 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [one_one_poly_a ≠ monom_a X1 X0+* ∨ zero_zero_nat = X0]/20221`
9.348[zip.saturate] ### step  3694 ###
9.349[zip.saturate]
    given (3694 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [one_one_poly_poly_a ≠ monom_poly_a X1 X0+* ∨ zero_zero_nat = X0]/20224`
9.353[zip.saturate] ### step  3696 ###
9.353[zip.saturate]
    given (3696 steps, penalty 1):
      `forall (X1:nat) (X2:nat).
       [X2 = X1 ∨ ¬zip_tseitin1 X1 (fequal_nat X2)+*]/20575`
9.356[zip.saturate] ### step  3697 ###
9.356[zip.saturate]
    given (3697 steps, penalty 1):
      `forall (X0:nat) (X1:bool). [X1 = ord_less_eq_nat X0 X0* ∨ true]/20284`
9.372[zip.saturate] ### step  3701 ###
9.372[zip.saturate]
    given (3701 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [fTrue ≠ fFalse+* ∨ X1 = ord_less_nat X0 X0*]/19362`
9.375[zip.saturate] ### step  3702 ###
9.375[zip.saturate]
    given (3702 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [fFalse ≠ fTrue+* ∨ X1 = ord_less_eq_nat X0 X0*]/19454`
9.392[zip.saturate] ### step  3704 ###
9.392[zip.saturate]
    given (3704 steps, penalty 1):
      `forall (X1:nat).
       [X1 = zero_zero_nat ∨ 
        ¬zip_tseitin1 zero_zero_nat (ord_less_eq_nat X1)+*]/20643`
9.396[zip.saturate] ### step  3705 ###
9.397[zip.saturate]
    given (3705 steps, penalty 1):
      `forall (X1:nat).
       [X1 = zero_zero_nat ∨ ¬zip_tseitin1 one_one_nat (ord_less_nat X1)+*]/20663`
9.434[zip.saturate] ### step  3793 ###
9.434[zip.saturate]
    given (3793 steps, penalty 1):
      `forall (X1:nat) (X2:poly_a).
       [coeff_a X2 X1 = zero_zero_a ∨ 
        ¬zip_tseitin1 X1 (ord_less_nat (degree_a X2))+*]/20652`
9.451[zip.saturate] ### step  3796 ###
9.451[zip.saturate]
    given (3796 steps, penalty 1):
      `forall (X1:nat) (X2:poly_poly_a).
       [coeff_poly_a X2 X1 = zero_zero_poly_a ∨ 
        ¬zip_tseitin1 X1 (ord_less_nat (degree_poly_a X2))+*]/20654`
9.460[zip.saturate] ### step  3797 ###
9.461[zip.saturate]
    given (3797 steps, penalty 1):
      `forall (X1:nat) (X2:poly_poly_poly_a).
       [coeff_poly_poly_a X2 X1 = zero_z2096148049poly_a ∨ 
        ¬zip_tseitin1 X1 (ord_less_nat (degree_poly_poly_a X2))+*]/20656`
9.473[zip.saturate] ### step  3799 ###
9.473[zip.saturate]
    given (3799 steps, penalty 1):
      `forall (X1:nat) (X2:poly_poly_nat).
       [coeff_poly_nat X2 X1 = zero_zero_poly_nat ∨ 
        ¬zip_tseitin1 X1 (ord_less_nat (degree_poly_nat X2))+*]/20658`
9.479[zip.saturate] ### step  3800 ###
9.479[zip.saturate]
    given (3800 steps, penalty 1):
      `forall (X1:nat) (X2:poly_nat).
       [coeff_nat X2 X1 = zero_zero_nat ∨ 
        ¬zip_tseitin1 X1 (ord_less_nat (degree_nat X2))+*]/20660`
9.486[zip.saturate] ### step  3810 ###
9.486[zip.saturate]
    given (3810 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [fTrue ≠ ord_less_nat X0 X0+* ∨ X2 = ord_less_nat X1 X1*]/19359`
9.525[zip.saturate] ### step  3818 ###
9.525[zip.saturate]
    given (3818 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [fFalse ≠ ord_less_eq_nat X0 X0+* ∨ X2 = ord_less_eq_nat X1 X1*]/19453`
9.531[zip.saturate] ### step  3824 ###
9.531[zip.saturate]
    given (3824 steps, penalty 1):
      `forall (X432:poly_a) (X433:poly_a) (X434:a).
       [poly_a2 (pcompose_a X432 X433) X434
         = poly_a2 X432 (poly_a2 X433 X434)*]/372`
9.550[zip.saturate] ### step  3825 ###
9.550[zip.saturate]
    given (3825 steps, penalty 1):
      `forall (X0:bool) (F1:nat → bool) (X2:nat).
       [¬pp X0+* ∨ ¬zip_tseitin1 X2 F1* ∨ X0 = F1 X2*]/20975`
9.556[zip.saturate] ### step  3826 ###
9.556[zip.saturate]
    given (3826 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [ord_less_eq_nat X0 X0 = fFalse* ∨ 
        ¬zip_tseitin1 zero_zero_nat (ord_less_nat X1)+*]/20612`
9.589[zip.saturate] ### step  3835 ###
9.589[zip.saturate]
    given (3835 steps, penalty 1):
      `forall (X435:poly_nat) (X436:poly_nat) (X437:nat).
       [poly_nat2 (pcompose_nat X435 X436) X437
         = poly_nat2 X435 (poly_nat2 X436 X437)*]/373`
9.601[zip.saturate] ### step  3846 ###
9.602[zip.saturate]
    given (3846 steps, penalty 1):
      `forall (X438:poly_poly_a) (X439:poly_poly_a) (X440:poly_a).
       [poly_poly_a2 (pcompose_poly_a X438 X439) X440
         = poly_poly_a2 X438 (poly_poly_a2 X439 X440)*]/374`
9.657[zip.saturate] ### step  3872 ###
9.657[zip.saturate]
    given (3872 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [X0 = zero_zero_nat ∨ X1 = zero_z2096148049poly_a ∨ 
        is_zero_poly_a X1 = ord_less_nat X0 one_one_nat*]/5618`
9.663[zip.saturate] ### step  3874 ###
9.663[zip.saturate]
    given (3874 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:poly_nat).
       [X1 = X0 ∨ X2 = zero_zero_poly_nat ∨ 
        is_zero_nat X2 = fequal_nat X1 X0*]/5820`
9.671[zip.saturate] ### step  3876 ###
9.671[zip.saturate]
    given (3876 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [X0 = zero_zero_nat ∨ X1 = zero_zero_poly_nat ∨ 
        is_zero_nat X1 = ord_less_eq_nat X0 zero_zero_nat*]/5867`
9.680[zip.saturate] ### step  3877 ###
9.680[zip.saturate]
    given (3877 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [X0 = zero_zero_nat ∨ X1 = zero_zero_poly_nat ∨ 
        is_zero_nat X1 = ord_less_nat X0 one_one_nat*]/5873`
9.697[zip.saturate] ### step  3896 ###
9.697[zip.saturate]
    given (3896 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [ord_less_nat (degree_a X1) X0 = fFalse* ∨ 
        coeff_a X1 X0 = zero_zero_a]/9396`
9.706[zip.saturate] ### step  3901 ###
9.706[zip.saturate]
    given (3901 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [ord_less_nat (degree_poly_a X1) X0 = fFalse* ∨ 
        coeff_poly_a X1 X0 = zero_zero_poly_a]/9456`
9.719[zip.saturate] ### step  3904 ###
9.720[zip.saturate]
    given (3904 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [ord_less_nat (degree_nat X1) X0 = fFalse* ∨ 
        coeff_nat X1 X0 = zero_zero_nat]/9516`
9.727[zip.saturate] ### step  3907 ###
9.727[zip.saturate]
    given (3907 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_nat).
       [ord_less_nat (degree_poly_nat X1) X0 = fFalse* ∨ 
        coeff_poly_nat X1 X0 = zero_zero_poly_nat]/9573`
9.735[zip.saturate] ### step  3910 ###
9.735[zip.saturate]
    given (3910 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_poly_a).
       [ord_less_nat (degree_poly_poly_a X1) X0 = fFalse* ∨ 
        coeff_poly_poly_a X1 X0 = zero_z2096148049poly_a]/9630`
9.768[zip.saturate] ### step  3911 ###
9.768[zip.saturate]
    given (3911 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [¬zip_tseitin1 zero_zero_nat (ord_less_nat X1)+* ∨ X0 = fFalse*]/21355`
9.798[zip.saturate] ### step  3956 ###
9.798[zip.saturate]
    given (3956 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [monom_a X1 X0 = zero_zero_poly_a ∨ X0 = degree_a (monom_a X1 X0)*]/15047`
9.824[zip.saturate] ### step  3959 ###
9.825[zip.saturate]
    given (3959 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [monom_poly_a X1 X0 = zero_z2096148049poly_a ∨ 
        X0 = degree_poly_a (monom_poly_a X1 X0)*]/15139`
9.874[zip.saturate] ### step  3970 ###
9.874[zip.saturate]
    given (3970 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [monom_nat X1 X0 = zero_zero_poly_nat ∨ 
        X0 = degree_nat (monom_nat X1 X0)*]/15181`
9.878[zip.saturate] ### step  3971 ###
9.878[zip.saturate]
    given (3971 steps, penalty 1):
      `forall (X0:nat) (X1:poly_nat).
       [monom_poly_nat X1 X0 = zero_z1059985641ly_nat ∨ 
        X0 = degree_poly_nat (monom_poly_nat X1 X0)*]/15200`
9.883[zip.saturate] ### step  3972 ###
9.883[zip.saturate]
    given (3972 steps, penalty 1):
      `forall (X0:nat) (X1:poly_poly_a).
       [monom_poly_poly_a X1 X0 = zero_z2064990175poly_a ∨ 
        X0 = degree_poly_poly_a (monom_poly_poly_a X1 X0)*]/15256`
9.902[zip.saturate] ### step  3974 ###
9.902[zip.saturate]
    given (3974 steps, penalty 1):
      `forall (X0:poly_a).
       [is_zero_a (monom_a (sk_A29 is_zero_a) zero_zero_nat) = fFalse* ∨ 
        X0 = zero_zero_poly_a*]/21737`
9.944[zip.saturate] ### step  3977 ###
9.944[zip.saturate]
    given (3977 steps, penalty 1):
      `forall (X0:poly_a).
       [order_a zero_zero_a X0 = zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat ∨ sk_A219 X0 = zero_zero_a]/15305`
9.948[zip.saturate] ### step  3978 ###
9.948[zip.saturate]
    given (3978 steps, penalty 1):
      `forall (X0:poly_a).
       [order_a zero_zero_a X0 = zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat ∨ sk_A212 X0 = zero_zero_a]/15306`
9.968[zip.saturate] ### step  3980 ###
9.968[zip.saturate]
    given (3980 steps, penalty 1):
      `forall (X0:poly_nat).
       [is_zero_nat (monom_nat (sk_A210 is_zero_nat) zero_zero_nat) = fFalse* ∨ 
        X0 = zero_zero_poly_nat*]/21811`
10.010[zip.saturate] ### step  3985 ###
10.010[zip.saturate]
    given (3985 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [order_poly_a zero_zero_poly_a X0 = zero_zero_nat* ∨ 
        degree_poly_a X0 ≠ zero_zero_nat ∨ sk_A221 X0 = zero_zero_poly_a]/15360`
10.014[zip.saturate] ### step  3986 ###
10.014[zip.saturate]
    given (3986 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_nat).
       [F0 (sk_P39 F0) ≠ fFalse* ∨ sk_P39 F0 = zero_zero_poly_a* ∨ 
        X1 = zero_zero_poly_nat*]/15987`
10.065[zip.saturate] ### step  3988 ###
10.065[zip.saturate]
    given (3988 steps, penalty 1):
      `forall (X0:poly_poly_a).
       [is_zero_poly_a (monom_poly_a (sk_A211 is_zero_poly_a) zero_zero_nat)
         = fFalse* ∨ 
        X0 = zero_z2096148049poly_a*]/21888`
10.097[zip.saturate] ### step  3991 ###
10.097[zip.saturate]
    given (3991 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P39 F0) ≠ fFalse* ∨ sk_P39 F0 = zero_zero_poly_a* ∨ 
        X1 = zero_z2096148049poly_a*]/15988`
10.122[zip.saturate] ### step  3992 ###
10.122[zip.saturate]
    given (3992 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [F0 (sk_P39 F0) ≠ fFalse* ∨ sk_P39 F0 = zero_zero_poly_a*]/21916`
10.144[zip.saturate] ### step  3997 ###
10.144[zip.saturate]
    given (3997 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:nat → bool) (X3:nat).
       [X0 = X1* ∨ fFalse ≠ F2 X3* ∨ ¬pp (F2 (sk_N2 F2))*]/21984`
10.245[zip.saturate] ### step  4002 ###
10.245[zip.saturate]
    given (4002 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [F0 (sk_P310 F0) ≠ fFalse* ∨ sk_P310 F0 = zero_zero_poly_nat*]/21998`
10.280[zip.saturate] ### step  4003 ###
10.280[zip.saturate]
    given (4003 steps, penalty 1):
      `forall (F1:nat → bool) (X2:nat).
       [fFalse ≠ F1 X2* ∨ ¬pp (F1 (sk_N2 F1))*]/22149`
10.299[zip.saturate] ### step  4035 ###
10.299[zip.saturate]
    given (4035 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_nat).
       [F0 (sk_P311 F0) ≠ fFalse* ∨ 
        sk_P311 F0 = zero_z2096148049poly_a* ∨ X1 = zero_zero_poly_nat*]/16366`
10.334[zip.saturate] ### step  4036 ###
10.334[zip.saturate]
    given (4036 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [F0 (sk_P311 F0) ≠ fFalse* ∨ sk_P311 F0 = zero_z2096148049poly_a*]/22181`
10.388[zip.saturate] ### step  4055 ###
10.388[zip.saturate]
    given (4055 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_nat).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        F0 zero_z1059985641ly_nat = fFalse* ∨ X1 = zero_zero_poly_nat*]/16893`
10.441[zip.saturate] ### step  4056 ###
10.441[zip.saturate]
    given (4056 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_poly_a).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        F0 zero_z1059985641ly_nat = fFalse* ∨ X1 = zero_z2096148049poly_a*]/16894`
10.493[zip.saturate] ### step  4057 ###
10.493[zip.saturate]
    given (4057 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_a).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ 
        F0 zero_z1059985641ly_nat = fFalse* ∨ X1 = zero_zero_poly_a*]/16895`
10.570[zip.saturate] ### step  4068 ###
10.570[zip.saturate]
    given (4068 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P313 F0)* ∨ 
        F0 zero_z1059985641ly_nat = fFalse* ∨ X1 = fTrue*]/16922`
10.598[zip.saturate] ### step  4069 ###
10.598[zip.saturate]
    given (4069 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool).
       [F0 (sk_P313 F0) ≠ fFalse* ∨ F0 zero_z1059985641ly_nat = fFalse*]/22513`
10.659[zip.saturate] ### step  4086 ###
10.659[zip.saturate]
    given (4086 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_nat).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        F0 zero_z2064990175poly_a = fFalse* ∨ X1 = zero_zero_poly_nat*]/17388`
10.696[zip.saturate] ### step  4087 ###
10.696[zip.saturate]
    given (4087 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        F0 zero_z2064990175poly_a = fFalse* ∨ X1 = zero_z2096148049poly_a*]/17389`
10.726[zip.saturate] ### step  4088 ###
10.726[zip.saturate]
    given (4088 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_a).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ 
        F0 zero_z2064990175poly_a = fFalse* ∨ X1 = zero_zero_poly_a*]/17390`
10.790[zip.saturate] ### step  4100 ###
10.790[zip.saturate]
    given (4100 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P314 F0)* ∨ 
        F0 zero_z2064990175poly_a = fFalse* ∨ X1 = fTrue*]/17418`
10.842[zip.saturate] ### step  4101 ###
10.842[zip.saturate]
    given (4101 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool).
       [F0 (sk_P314 F0) ≠ fFalse* ∨ F0 zero_z2064990175poly_a = fFalse*]/22814`
10.874[zip.saturate] ### step  4102 ###
10.874[zip.saturate]
    given (4102 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_nat).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ F0 zero_zero_poly_a = fFalse* ∨ 
        X1 = zero_zero_poly_nat*]/17595`
10.947[zip.saturate] ### step  4107 ###
10.948[zip.saturate]
    given (4107 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:nat → bool) (X3:nat).
       [X0 = X1* ∨ fFalse ≠ F2 X3* ∨ ¬pp (F2 (sk_N21 F2))*]/22883`
10.979[zip.saturate] ### step  4110 ###
10.979[zip.saturate]
    given (4110 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ F0 zero_zero_poly_a = fFalse* ∨ 
        X1 = zero_z2096148049poly_a*]/17596`
11.047[zip.saturate] ### step  4111 ###
11.047[zip.saturate]
    given (4111 steps, penalty 1):
      `forall (F1:nat → bool) (X2:nat).
       [fFalse ≠ F1 X2* ∨ ¬pp (F1 (sk_N21 F1))*]/23045`
11.071[zip.saturate] ### step  4139 ###
11.071[zip.saturate]
    given (4139 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_a).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ F0 zero_zero_poly_a = fFalse* ∨ 
        X1 = zero_zero_poly_a*]/17597`
11.099[zip.saturate] ### step  4140 ###
11.099[zip.saturate]
    given (4140 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P315 F0)* ∨ F0 zero_zero_poly_a = fFalse* ∨ 
        X1 = fTrue*]/17626`
11.170[zip.saturate] ### step  4156 ###
11.170[zip.saturate]
    given (4156 steps, penalty 1):
      `forall (F0:poly_a → bool).
       [F0 (sk_P315 F0) ≠ fFalse* ∨ F0 zero_zero_poly_a = fFalse*]/23227`
11.194[zip.saturate] ### step  4157 ###
11.194[zip.saturate]
    given (4157 steps, penalty 1):
      `forall (X475:nat) (X476:nat).
       [pp (ord_less_nat X475 X476)* ∨ pp (ord_less_nat X476 X475)* ∨ 
        X475 = X476]/405`
11.221[zip.saturate] ### step  4158 ###
11.221[zip.saturate]
    given (4158 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_nat).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ F0 zero_zero_poly_nat = fFalse* ∨ 
        X1 = zero_zero_poly_nat*]/18040`
11.298[zip.saturate] ### step  4169 ###
11.298[zip.saturate]
    given (4169 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_poly_a).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ F0 zero_zero_poly_nat = fFalse* ∨ 
        X1 = zero_z2096148049poly_a*]/18041`
11.326[zip.saturate] ### step  4170 ###
11.326[zip.saturate]
    given (4170 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_a).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ F0 zero_zero_poly_nat = fFalse* ∨ 
        X1 = zero_zero_poly_a*]/18042`
11.401[zip.saturate] ### step  4187 ###
11.401[zip.saturate]
    given (4187 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P316 F0)* ∨ F0 zero_zero_poly_nat = fFalse* ∨ 
        X1 = fTrue*]/18072`
11.431[zip.saturate] ### step  4188 ###
11.431[zip.saturate]
    given (4188 steps, penalty 1):
      `forall (F0:poly_nat → bool).
       [F0 (sk_P316 F0) ≠ fFalse* ∨ F0 zero_zero_poly_nat = fFalse*]/23539`
11.478[zip.saturate] ### step  4189 ###
11.478[zip.saturate]
    given (4189 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_nat).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        F0 zero_z2096148049poly_a = fFalse* ∨ X1 = zero_zero_poly_nat*]/18525`
11.543[zip.saturate] ### step  4201 ###
11.543[zip.saturate]
    given (4201 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_poly_a).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        F0 zero_z2096148049poly_a = fFalse* ∨ X1 = zero_z2096148049poly_a*]/18526`
11.597[zip.saturate] ### step  4202 ###
11.597[zip.saturate]
    given (4202 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_a).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ 
        F0 zero_z2096148049poly_a = fFalse* ∨ X1 = zero_zero_poly_a*]/18527`
11.644[zip.saturate] ### step  4203 ###
11.644[zip.saturate]
    given (4203 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [fFalse ≠ F0 (sk_P317 F0)* ∨ 
        F0 zero_z2096148049poly_a = fFalse* ∨ X1 = fTrue*]/18558`
11.683[zip.saturate] ### step  4204 ###
11.683[zip.saturate]
    given (4204 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:nat → bool) (X3:nat).
       [X0 = X1* ∨ fFalse ≠ F2 X3* ∨ ¬zip_tseitin1 (sk_N2 F2) F2*]/23731`
11.715[zip.saturate] ### step  4207 ###
11.715[zip.saturate]
    given (4207 steps, penalty 1):
      `forall (F0:poly_poly_a → bool).
       [F0 (sk_P317 F0) ≠ fFalse* ∨ F0 zero_z2096148049poly_a = fFalse*]/23753`
11.746[zip.saturate] ### step  4238 ###
11.746[zip.saturate]
    given (4238 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬pp (ord_less_nat X1 (sk_N2 F0))* ∨ pp (F0 X1)*]/23802`
11.799[zip.saturate] ### step  4239 ###
11.800[zip.saturate]
    given (4239 steps, penalty 1):
      `forall (F1:nat → bool) (X2:nat).
       [fFalse ≠ F1 X2* ∨ ¬zip_tseitin1 (sk_N2 F1) F1*]/23955`
11.809[zip.saturate] ### step  4249 ###
11.809[zip.saturate]
    given (4249 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬pp (ord_less_nat X1 (sk_N21 F0))* ∨ pp (F0 X1)*]/23965`
11.872[zip.saturate] ### step  4335 ###
11.872[zip.saturate]
    given (4335 steps, penalty 1):
      `forall (X0:a).
       [poly_a2 cs X0 = zero_zero_a* ∨ 
        ¬fundam396953934nt_a_a (poly_a2 cs)+*]/24067`
11.907[zip.saturate] ### step  4348 ###
11.907[zip.saturate]
    given (4348 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:poly_poly_a).
       [if_poly_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 X1 F0*]/1056`
11.919[zip.saturate] ### step  4351 ###
11.919[zip.saturate]
    given (4351 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:poly_nat).
       [if_poly_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 X1 F0*]/1058`
11.924[zip.saturate] ### step  4352 ###
11.924[zip.saturate]
    given (4352 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:poly_a).
       [if_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 X1 F0*]/1059`
11.933[zip.saturate] ### step  4354 ###
11.933[zip.saturate]
    given (4354 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 X1 F0*]/1060`
11.943[zip.saturate] ### step  4355 ###
11.943[zip.saturate]
    given (4355 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:a) (X3:a).
       [if_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 X1 F0*]/1061`
11.954[zip.saturate] ### step  4360 ###
11.954[zip.saturate]
    given (4360 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [true ∨ ord_less_nat zero_zero_nat X0 = ord_less_nat X1 X1* ∨ 
        X0 = zero_zero_nat]/2427`
11.992[zip.saturate] ### step  4374 ###
11.992[zip.saturate]
    given (4374 steps, penalty 1):
      `forall (X0:nat) (X1:bool).
       [true ∨ pp X1* ∨ ord_less_nat zero_zero_nat X0 = X1* ∨ 
        X0 = zero_zero_nat]/3077`
12.027[zip.saturate] ### step  4375 ###
12.027[zip.saturate]
    given (4375 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat).
       [¬pp (F0 zero_z1059985641ly_nat)* ∨ 
        F0 (sk_P313 F0) = ord_less_eq_nat X1 X1*]/4701`
12.084[zip.saturate] ### step  4376 ###
12.084[zip.saturate]
    given (4376 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [¬pp (F0 zero_z1059985641ly_nat)* ∨ F0 (sk_P313 F0) = X1* ∨ 
        X1 = fFalse*]/4702`
12.185[zip.saturate] ### step  4388 ###
12.185[zip.saturate]
    given (4388 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat).
       [¬pp (F0 zero_z2064990175poly_a)* ∨ 
        F0 (sk_P314 F0) = ord_less_eq_nat X1 X1*]/4990`
12.235[zip.saturate] ### step  4391 ###
12.235[zip.saturate]
    given (4391 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [¬pp (F0 zero_z2064990175poly_a)* ∨ F0 (sk_P314 F0) = X1* ∨ 
        X1 = fFalse*]/4991`
12.327[zip.saturate] ### step  4394 ###
12.327[zip.saturate]
    given (4394 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat).
       [¬pp (F0 zero_zero_poly_a)* ∨ 
        F0 (sk_P315 F0) = ord_less_eq_nat X1 X1*]/5093`
12.370[zip.saturate] ### step  4395 ###
12.370[zip.saturate]
    given (4395 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:nat → bool) (X3:nat).
       [X0 = X1* ∨ fFalse ≠ F2 X3* ∨ ¬zip_tseitin1 (sk_N21 F2) F2*]/24609`
12.420[zip.saturate] ### step  4398 ###
12.420[zip.saturate]
    given (4398 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [¬pp (F0 zero_zero_poly_a)* ∨ F0 (sk_P315 F0) = X1* ∨ 
        X1 = fFalse*]/5094`
12.533[zip.saturate] ### step  4406 ###
12.533[zip.saturate]
    given (4406 steps, penalty 1):
      `forall (F499:nat → bool) (X500:nat).
       [¬pp (F499 (sk_N22 F499))* ∨ ¬pp (F499 zero_zero_nat)* ∨ 
        pp (F499 X500)*]/430`
12.604[zip.saturate] ### step  4407 ###
12.605[zip.saturate]
    given (4407 steps, penalty 1):
      `forall (F1:nat → bool) (X2:nat).
       [fFalse ≠ F1 X2* ∨ ¬zip_tseitin1 (sk_N21 F1) F1*]/24785`
12.618[zip.saturate] ### step  4417 ###
12.618[zip.saturate]
    given (4417 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [¬pp (ord_less_nat X1 (sk_N22 F0))* ∨ pp (F0 X1)* ∨ 
        ¬pp (F0 zero_zero_nat)*]/24795`
12.675[zip.saturate] ### step  4428 ###
12.675[zip.saturate]
    given (4428 steps, penalty 1):
      `forall (F499:nat → bool) (X500:nat).
       [pp (ord_less_nat zero_zero_nat (sk_N22 F499))* ∨ 
        ¬pp (F499 zero_zero_nat)* ∨ pp (F499 X500)*]/432`
12.744[zip.saturate] ### step  4449 ###
12.744[zip.saturate]
    given (4449 steps, penalty 1):
      `forall (X503:a) (X504:poly_a).
       [order_a X503 X504 = zero_zero_nat ∨ 
        order_a X503 X504 = one_one_nat* ∨ ¬pp (rsquarefree_a X504)+*]/434`
12.766[zip.saturate] ### step  4455 ###
12.766[zip.saturate]
    given (4455 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat).
       [¬pp (F0 zero_zero_poly_nat)* ∨ 
        F0 (sk_P316 F0) = ord_less_eq_nat X1 X1*]/5783`
12.830[zip.saturate] ### step  4456 ###
12.830[zip.saturate]
    given (4456 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [¬pp (F0 zero_zero_poly_nat)* ∨ F0 (sk_P316 F0) = X1* ∨ 
        X1 = fFalse*]/5784`
12.958[zip.saturate] ### step  4458 ###
12.958[zip.saturate]
    given (4458 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat).
       [¬pp (F0 zero_z2096148049poly_a)* ∨ 
        F0 (sk_P317 F0) = ord_less_eq_nat X1 X1*]/7018`
13.010[zip.saturate] ### step  4459 ###
13.010[zip.saturate]
    given (4459 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [¬pp (F0 zero_z2096148049poly_a)* ∨ F0 (sk_P317 F0) = X1* ∨ 
        X1 = fFalse*]/7019`
13.099[zip.saturate] ### step  4486 ###
13.099[zip.saturate]
    given (4486 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N2 F0) = fFalse* ∨ 
        X2 = zero_zero_poly_nat*]/16488`
13.164[zip.saturate] ### step  4490 ###
13.164[zip.saturate]
    given (4490 steps, penalty 1):
      `forall (X506:poly_a) (X507:poly_poly_a).
       [order_poly_a X506 X507 = zero_zero_nat ∨ 
        order_poly_a X506 X507 = one_one_nat* ∨ 
        ¬pp (rsquarefree_poly_a X507)+*]/438`
13.177[zip.saturate] ### step  4501 ###
13.177[zip.saturate]
    given (4501 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N2 F0) = fFalse* ∨ 
        X2 = zero_z2096148049poly_a*]/16489`
13.222[zip.saturate] ### step  4502 ###
13.222[zip.saturate]
    given (4502 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N2 F0) = fFalse* ∨ 
        X2 = zero_zero_poly_a*]/16490`
13.295[zip.saturate] ### step  4510 ###
13.296[zip.saturate]
    given (4510 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ F0 (sk_N2 F0) = fFalse* ∨ X2 = fTrue*]/16515`
13.345[zip.saturate] ### step  4513 ###
13.345[zip.saturate]
    given (4513 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N2 F0) = fFalse*]/25386`
13.385[zip.saturate] ### step  4514 ###
13.385[zip.saturate]
    given (4514 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N21 F0) = fFalse* ∨ 
        X2 = zero_zero_poly_nat*]/16670`
13.453[zip.saturate] ### step  4519 ###
13.453[zip.saturate]
    given (4519 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:poly_poly_nat → bool).
       [X0 = X1* ∨ fFalse ≠ F2 (sk_P313 F2)* ∨ 
        ¬pp (F2 zero_z1059985641ly_nat)*]/25458`
13.502[zip.saturate] ### step  4522 ###
13.503[zip.saturate]
    given (4522 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N21 F0) = fFalse* ∨ 
        X2 = zero_z2096148049poly_a*]/16671`
13.572[zip.saturate] ### step  4523 ###
13.572[zip.saturate]
    given (4523 steps, penalty 1):
      `forall (F1:poly_poly_nat → bool).
       [fFalse ≠ F1 (sk_P313 F1)* ∨ ¬pp (F1 zero_z1059985641ly_nat)*]/25620`
13.585[zip.saturate] ### step  4531 ###
13.585[zip.saturate]
    given (4531 steps, penalty 1):
      `forall (X509:poly_a) (X510:poly_a).
       [X509 = zero_zero_poly_a ∨ 
        pp (ord_less_nat (degree_a (pseudo_mod_a X510 X509)) (degree_a X509))* ∨ 
        pseudo_mod_a X510 X509 = zero_zero_poly_a]/442`
13.607[zip.saturate] ### step  4542 ###
13.607[zip.saturate]
    given (4542 steps, penalty 1):
      `forall (X511:poly_poly_a) (X512:poly_poly_a).
       [X511 = zero_z2096148049poly_a ∨ 
        pp
         (ord_less_nat (degree_poly_a (pseudo_mod_poly_a X512 X511)) 
           (degree_poly_a X511))* ∨ 
        pseudo_mod_poly_a X512 X511 = zero_z2096148049poly_a]/443`
13.685[zip.saturate] ### step  4565 ###
13.685[zip.saturate]
    given (4565 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N21 F0) = fFalse* ∨ 
        X2 = zero_zero_poly_a*]/16672`
13.733[zip.saturate] ### step  4566 ###
13.733[zip.saturate]
    given (4566 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [fFalse ≠ F0 X1* ∨ F0 (sk_N21 F0) = fFalse* ∨ X2 = fTrue*]/16698`
13.787[zip.saturate] ### step  4567 ###
13.788[zip.saturate]
    given (4567 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat).
       [F0 X1 ≠ fFalse* ∨ F0 (sk_N21 F0) = fFalse*]/25876`
13.848[zip.saturate] ### step  4578 ###
13.849[zip.saturate]
    given (4578 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:nat).
       [F0 X1 ≠ fFalse* ∨ zip_tseitin0 X1 X3 F0* ∨ 
        X2 = zero_zero_poly_nat*]/19090`
13.877[zip.saturate] ### step  4579 ###
13.877[zip.saturate]
    given (4579 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:nat).
       [F0 X1 ≠ fFalse* ∨ zip_tseitin0 X1 X3 F0* ∨ 
        X2 = zero_z2096148049poly_a*]/19091`
13.939[zip.saturate] ### step  4596 ###
13.939[zip.saturate]
    given (4596 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:nat).
       [F0 X1 ≠ fFalse* ∨ zip_tseitin0 X1 X3 F0* ∨ 
        X2 = zero_zero_poly_a*]/19092`
13.968[zip.saturate] ### step  4597 ###
13.968[zip.saturate]
    given (4597 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool) (X3:nat).
       [fFalse ≠ F0 X1* ∨ zip_tseitin0 X1 X3 F0* ∨ X2 = fTrue*]/19123`
13.991[zip.saturate] ### step  4598 ###
13.991[zip.saturate]
    given (4598 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool) (X3:nat).
       [F0 X1 ≠ fFalse* ∨ zip_tseitin0 X1 X3 F0* ∨ X2 = fFalse*]/19124`
14.068[zip.saturate] ### step  4603 ###
14.068[zip.saturate]
    given (4603 steps, penalty 1):
      `forall (X523:poly_nat).
       [pp (ord_less_nat zero_zero_nat (coeff_nat X523 (degree_nat X523)))* ∨ 
        ¬pp (pos_poly_nat X523)]/449`
14.105[zip.saturate] ### step  4643 ###
14.105[zip.saturate]
    given (4643 steps, penalty 1):
      `forall (X541:nat) (X542:nat).
       [minus_minus_nat X542 (minus_minus_nat X542 X541) = X541* ∨ 
        ¬pp (ord_less_eq_nat X541 X542)]/472`
14.108[zip.saturate] ### step  4644 ###
14.108[zip.saturate]
    given (4644 steps, penalty 1):
      `forall (X544:nat) (X545:nat).
       [pp (ord_less_nat zero_zero_nat (minus_minus_nat X544 X545))* ∨ 
        ¬pp (ord_less_nat X545 X544)]/474`
14.162[zip.saturate] ### step  4649 ###
14.162[zip.saturate]
    given (4649 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:poly_poly_poly_a → bool).
       [X0 = X1* ∨ fFalse ≠ F2 (sk_P314 F2)* ∨ 
        ¬pp (F2 zero_z2064990175poly_a)*]/26474`
14.208[zip.saturate] ### step  4652 ###
14.208[zip.saturate]
    given (4652 steps, penalty 1):
      `forall (X617:nat) (X618:nat) (X619:nat).
       [¬pp (ord_less_nat X617 X618) ∨ 
        pp (ord_less_nat (minus_minus_nat X617 X619) X618)*]/517`
14.252[zip.saturate] ### step  4653 ###
14.252[zip.saturate]
    given (4653 steps, penalty 1):
      `forall (F1:poly_poly_poly_a → bool).
       [fFalse ≠ F1 (sk_P314 F1)* ∨ ¬pp (F1 zero_z2064990175poly_a)*]/26636`
14.279[zip.saturate] ### step  4681 ###
14.279[zip.saturate]
    given (4681 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [¬pp (ord_less_nat X1 X0) ∨ ord_less_eq_nat X1 X0 = X2* ∨ 
        X2 = fFalse*]/4048`
14.338[zip.saturate] ### step  4688 ###
14.338[zip.saturate]
    given (4688 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat).
       [¬pp (ord_less_nat X1 X0) ∨ 
        ord_less_eq_nat X1 X0 = ord_less_eq_nat X2 X2*]/4204`
14.382[zip.saturate] ### step  4701 ###
14.382[zip.saturate]
    given (4701 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_a).
       [¬pp (F0 (pCons_a (sk_A29 F0) (sk_P39 F0)))* ∨ F0 X1 = fTrue*]/4352`
14.443[zip.saturate] ### step  4704 ###
14.443[zip.saturate]
    given (4704 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:poly_nat).
       [¬pp (F0 (pCons_nat (sk_A210 F0) (sk_P310 F0)))* ∨ F0 X1 = fTrue*]/4397`
14.481[zip.saturate] ### step  4705 ###
14.481[zip.saturate]
    given (4705 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:poly_poly_a).
       [¬pp (F0 (pCons_poly_a (sk_A211 F0) (sk_P311 F0)))* ∨ 
        F0 X1 = fTrue*]/4443`
14.591[zip.saturate] ### step  4740 ###
14.591[zip.saturate]
    given (4740 steps, penalty 1):
      `forall (X535:poly_nat) (X536:nat).
       [pp (pos_poly_nat X535) ∨ pp (ord_less_nat zero_zero_nat X536) ∨ 
        ¬pp (pos_poly_nat (pCons_nat X536 X535))+*]/463`
14.603[zip.saturate] ### step  4747 ###
14.603[zip.saturate]
    given (4747 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_a (monom_a X1 zero_zero_nat) X0 = zero_zero_a*]/9339`
14.631[zip.saturate] ### step  4751 ###
14.631[zip.saturate]
    given (4751 steps, penalty 1):
      `forall (X536:nat).
       [¬pp (ord_less_nat zero_zero_nat X536) ∨ 
        pp (pos_poly_nat (monom_nat X536 zero_zero_nat))*]/27211`
14.660[zip.saturate] ### step  4765 ###
14.660[zip.saturate]
    given (4765 steps, penalty 1):
      `forall (X0:nat) (X1:poly_a).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_poly_a (monom_poly_a X1 zero_zero_nat) X0 = zero_zero_poly_a*]/9399`
14.664[zip.saturate] ### step  4766 ###
14.664[zip.saturate]
    given (4766 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat zero_zero_nat X0) ∨ 
        coeff_nat (monom_nat X1 zero_zero_nat) X0 = zero_zero_nat*]/9459`
14.715[zip.saturate] ### step  4807 ###
14.715[zip.saturate]
    given (4807 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [poly_a2 (reflect_poly_a X0) X1 ≠ zero_zero_a+* ∨ 
        ¬fundam396953934nt_a_a (poly_a2 (reflect_poly_a X0))* ∨ 
        X0 = zero_zero_poly_a]/1069`
14.733[zip.saturate] ### step  4811 ###
14.733[zip.saturate]
    given (4811 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [degree_a (synthetic_div_a (pCons_a X2 X1) X0) ≠ zero_zero_nat+* ∨ 
        synthetic_div_a X1 X0 = zero_zero_poly_a]/9877`
14.740[zip.saturate] ### step  4812 ###
14.740[zip.saturate]
    given (4812 steps, penalty 1):
      `forall (X0:a) (X1:poly_a).
       [pCons_a X0 X1 = monom_a X0 zero_zero_nat ∨ 
        degree_a (pCons_a X0 X1) ≠ zero_zero_nat+*]/11463`
14.774[zip.saturate] ### step  4817 ###
14.774[zip.saturate]
    given (4817 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:poly_a → bool).
       [X0 = X1* ∨ fFalse ≠ F2 (sk_P315 F2)* ∨ 
        ¬pp (F2 zero_zero_poly_a)*]/27571`
14.831[zip.saturate] ### step  4820 ###
14.831[zip.saturate]
    given (4820 steps, penalty 1):
      `forall (X0:poly_nat) (F1:poly_a → bool).
       [pp (pos_poly_nat X0)* ∨ fFalse ≠ F1 (sk_P315 F1)* ∨ 
        ¬pp (F1 zero_zero_poly_a)*]/27577`
14.892[zip.saturate] ### step  4821 ###
14.892[zip.saturate]
    given (4821 steps, penalty 1):
      `forall (F1:poly_a → bool).
       [fFalse ≠ F1 (sk_P315 F1)* ∨ ¬pp (F1 zero_zero_poly_a)*]/27733`
14.912[zip.saturate] ### step  4849 ###
14.912[zip.saturate]
    given (4849 steps, penalty 1):
      `forall (X0:nat) (X1:a).
       [monom_a X1 X0 = zero_zero_poly_a ∨ X0 = zero_zero_nat ∨ 
        degree_a (monom_a X1 X0) ≠ zero_zero_nat+*]/15172`
14.924[zip.saturate] ### step  4895 ###
14.924[zip.saturate]
    given (4895 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:poly_a).
       [ord_less_eq_nat X1 X1 = X0* ∨ is_zero_a X2 = X0* ∨ 
        X2 = zero_zero_poly_a]/5403`
15.033[zip.saturate] ### step  4910 ###
15.033[zip.saturate]
    given (4910 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_a).
       [X1 = X0* ∨ is_zero_a X2 = X0* ∨ X2 = zero_zero_poly_a ∨ 
        X1 = fFalse*]/5409`
15.114[zip.saturate] ### step  4929 ###
15.114[zip.saturate]
    given (4929 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:poly_poly_a).
       [ord_less_eq_nat X1 X1 = X0* ∨ is_zero_poly_a X2 = X0* ∨ 
        X2 = zero_z2096148049poly_a]/5640`
15.190[zip.saturate] ### step  4941 ###
15.190[zip.saturate]
    given (4941 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_poly_a).
       [X1 = X0* ∨ is_zero_poly_a X2 = X0* ∨ 
        X2 = zero_z2096148049poly_a ∨ X1 = fFalse*]/5646`
15.249[zip.saturate] ### step  4959 ###
15.249[zip.saturate]
    given (4959 steps, penalty 1):
      `forall (F559:nat → bool) (X560:nat) (X561:nat).
       [¬pp (F559 X560)* ∨ pp (ord_less_eq_nat X560 X561)* ∨ 
        ¬zip_tseitin1 X561 F559*]/485`
15.300[zip.saturate] ### step  4977 ###
15.300[zip.saturate]
    given (4977 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:poly_nat).
       [ord_less_eq_nat X1 X1 = X0* ∨ is_zero_nat X2 = X0* ∨ 
        X2 = zero_zero_poly_nat]/5896`
15.331[zip.saturate] ### step  4978 ###
15.331[zip.saturate]
    given (4978 steps, penalty 1):
      `forall (X0:bool) (X1:bool) (X2:poly_nat).
       [X1 = X0* ∨ is_zero_nat X2 = X0* ∨ X2 = zero_zero_poly_nat ∨ 
        X1 = fFalse*]/5902`
15.394[zip.saturate] ### step  4980 ###
15.394[zip.saturate]
    given (4980 steps, penalty 1):
      `forall (F562:nat → bool) (X563:nat) (X564:nat).
       [zip_tseitin1 (sk_X4 F562) F562 ∨ ¬pp (F562 X563)* ∨ 
        ¬zip_tseitin0 (sk_Y3 X564 F562) X564 F562*]/487`
15.524[zip.saturate] ### step  5001 ###
15.524[zip.saturate]
    given (5001 steps, penalty 1):
      `forall (X567:nat) (X568:nat) (X569:nat).
       [¬pp (ord_less_eq_nat X567 X568) ∨ 
        pp
         (ord_less_eq_nat (minus_minus_nat X569 X568) 
           (minus_minus_nat X569 X567))*]/489`
15.541[zip.saturate] ### step  5012 ###
15.541[zip.saturate]
    given (5012 steps, penalty 1):
      `forall (X570:nat) (X571:nat) (X572:nat).
       [¬pp (ord_less_eq_nat X570 X571) ∨ 
        ¬pp
           (ord_less_eq_nat (minus_minus_nat X571 X570) 
             (minus_minus_nat X571 X572))+* ∨ 
        pp (ord_less_eq_nat X572 X570) ∨ ¬pp (ord_less_eq_nat X572 X571)]/490`
15.565[zip.saturate] ### step  5017 ###
15.565[zip.saturate]
    given (5017 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:poly_nat → bool).
       [X0 = X1* ∨ fFalse ≠ F2 (sk_P316 F2)* ∨ 
        ¬pp (F2 zero_zero_poly_nat)*]/29201`
15.611[zip.saturate] ### step  5025 ###
15.611[zip.saturate]
    given (5025 steps, penalty 1):
      `forall (X0:poly_nat) (F1:poly_nat → bool).
       [pp (pos_poly_nat X0)* ∨ fFalse ≠ F1 (sk_P316 F1)* ∨ 
        ¬pp (F1 zero_zero_poly_nat)*]/29207`
15.655[zip.saturate] ### step  5026 ###
15.655[zip.saturate]
    given (5026 steps, penalty 1):
      `forall (F1:poly_nat → bool).
       [fFalse ≠ F1 (sk_P316 F1)* ∨ ¬pp (F1 zero_zero_poly_nat)*]/29376`
15.668[zip.saturate] ### step  5044 ###
15.668[zip.saturate]
    given (5044 steps, penalty 1):
      `forall (X575:nat) (X576:nat) (X577:nat).
       [¬pp (ord_less_eq_nat X575 X576) ∨ 
        pp
         (ord_less_eq_nat (minus_minus_nat X575 X577) 
           (minus_minus_nat X576 X577))*]/493`
15.692[zip.saturate] ### step  5055 ###
15.692[zip.saturate]
    given (5055 steps, penalty 1):
      `forall (X578:nat) (X579:nat) (X580:nat).
       [¬pp (ord_less_eq_nat X578 X579) ∨ 
        minus_minus_nat (minus_minus_nat X579 X578) 
         (minus_minus_nat X580 X578) = minus_minus_nat X579 X580* ∨ 
        ¬pp (ord_less_eq_nat X578 X580)]/494`
15.749[zip.saturate] ### step  5066 ###
15.749[zip.saturate]
    given (5066 steps, penalty 1):
      `forall (X581:nat) (X582:nat) (X583:nat).
       [minus_minus_nat (minus_minus_nat X581 X583) X582
         = minus_minus_nat (minus_minus_nat X581 X582) X583*]/495`
15.766[zip.saturate] ### step  5077 ###
15.766[zip.saturate]
    given (5077 steps, penalty 1):
      `forall (X584:nat) (X585:nat) (X586:nat).
       [¬pp (ord_less_eq_nat X584 X585) ∨ 
        ¬pp
           (ord_less_eq_nat (minus_minus_nat X585 X584) 
             (minus_minus_nat X586 X584))+* ∨ 
        pp (ord_less_eq_nat X585 X586) ∨ ¬pp (ord_less_eq_nat X584 X586)]/496`
15.806[zip.saturate] ### step  5099 ###
15.806[zip.saturate]
    given (5099 steps, penalty 1):
      `forall (X587:nat) (X588:nat) (X589:nat).
       [¬pp (ord_less_eq_nat X587 X588) ∨ 
        minus_minus_nat X588 X587 ≠ minus_minus_nat X589 X587+* ∨ 
        X588 = X589* ∨ ¬pp (ord_less_eq_nat X587 X589)]/498`
15.819[zip.saturate] ### step  5141 ###
15.819[zip.saturate]
    given (5141 steps, penalty 1):
      `forall (X594:nat) (X595:nat) (X596:nat).
       [¬pp (ord_less_eq_nat X594 X595)+* ∨ 
        pp (ord_less_eq_nat X594 X596)* ∨ ¬pp (ord_less_eq_nat X595 X596)*]/502`
15.867[zip.saturate] ### step  5192 ###
15.867[zip.saturate]
    given (5192 steps, penalty 1):
      `forall (X601:nat) (X602:nat) (X603:nat).
       [¬pp (ord_less_eq_nat X601 X602) ∨ 
        ¬pp
           (ord_less_nat (minus_minus_nat X602 X601) 
             (minus_minus_nat X603 X601))+* ∨ 
        pp (ord_less_nat X602 X603) ∨ ¬pp (ord_less_eq_nat X601 X603)]/507`
15.886[zip.saturate] ### step  5203 ###
15.887[zip.saturate]
    given (5203 steps, penalty 1):
      `forall (X601:nat) (X602:nat) (X603:nat).
       [¬pp (ord_less_eq_nat X601 X602) ∨ 
        ¬pp (ord_less_nat X602 X603) ∨ 
        pp
         (ord_less_nat (minus_minus_nat X602 X601) 
           (minus_minus_nat X603 X601))* ∨ 
        ¬pp (ord_less_eq_nat X601 X603)]/508`
15.910[zip.saturate] ### step  5214 ###
15.910[zip.saturate]
    given (5214 steps, penalty 1):
      `forall (X604:nat) (X605:nat) (X606:nat).
       [¬pp (ord_less_nat X604 X605) ∨ 
        pp
         (ord_less_nat (minus_minus_nat X604 X606) 
           (minus_minus_nat X605 X606))* ∨ 
        ¬pp (ord_less_eq_nat X606 X604)]/509`
16.052[zip.saturate] ### step  5225 ###
16.052[zip.saturate]
    given (5225 steps, penalty 1):
      `forall (X607:nat) (X608:nat) (X609:nat).
       [¬pp (ord_less_nat X607 X608) ∨ 
        pp
         (ord_less_nat (minus_minus_nat X609 X608) 
           (minus_minus_nat X609 X607))* ∨ 
        ¬pp (ord_less_nat X607 X609)]/510`
16.101[zip.saturate] ### step  5316 ###
16.101[zip.saturate]
    given (5316 steps, penalty 1):
      `forall (F622:nat → nat) (X623:nat) (X624:nat).
       [¬pp (ord_less_nat (F622 (sk_I5 F622)) (F622 (sk_J2 F622)))* ∨ 
        pp (ord_less_eq_nat (F622 X623) (F622 X624))* ∨ 
        ¬pp (ord_less_eq_nat X623 X624)+*]/519`
16.126[zip.saturate] ### step  5321 ###
16.127[zip.saturate]
    given (5321 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (F2:poly_poly_a → bool).
       [X0 = X1* ∨ fFalse ≠ F2 (sk_P317 F2)* ∨ 
        ¬pp (F2 zero_z2096148049poly_a)*]/31039`
16.165[zip.saturate] ### step  5324 ###
16.165[zip.saturate]
    given (5324 steps, penalty 1):
      `forall (X0:poly_nat) (F1:poly_poly_a → bool).
       [pp (pos_poly_nat X0)* ∨ fFalse ≠ F1 (sk_P317 F1)* ∨ 
        ¬pp (F1 zero_z2096148049poly_a)*]/31045`
16.206[zip.saturate] ### step  5325 ###
16.206[zip.saturate]
    given (5325 steps, penalty 1):
      `forall (F1:poly_poly_a → bool).
       [fFalse ≠ F1 (sk_P317 F1)* ∨ ¬pp (F1 zero_z2096148049poly_a)*]/31216`
16.217[zip.saturate] ### step  5327 ###
16.217[zip.saturate]
    given (5327 steps, penalty 1):
      `forall (F622:nat → nat) (X623:nat) (X624:nat).
       [pp (ord_less_nat (sk_I5 F622) (sk_J2 F622))* ∨ 
        pp (ord_less_eq_nat (F622 X623) (F622 X624))* ∨ 
        ¬pp (ord_less_eq_nat X623 X624)+*]/520`
16.232[zip.saturate] ### step  5338 ###
16.232[zip.saturate]
    given (5338 steps, penalty 1):
      `forall (X625:nat) (X626:nat).
       [¬pp (ord_less_nat zero_zero_nat X625) ∨ 
        pp (ord_less_nat (minus_minus_nat X626 X625) X626)* ∨ 
        ¬pp (ord_less_nat zero_zero_nat X626)]/521`
16.297[zip.saturate] ### step  5349 ###
16.297[zip.saturate]
    given (5349 steps, penalty 1):
      `forall (F627:nat → bool) (X628:nat).
       [pp (F627 zero_zero_nat)* ∨ 
        pp (ord_less_eq_nat (sk_K2 X628 F627) X628)* ∨ ¬pp (F627 X628)*]/522`
16.337[zip.saturate] ### step  5360 ###
16.337[zip.saturate]
    given (5360 steps, penalty 1):
      `forall (F627:nat → bool) (X628:nat).
       [pp (F627 zero_zero_nat)* ∨ pp (F627 (sk_K2 X628 F627))* ∨ 
        ¬pp (F627 X628)*]/523`
16.415[zip.saturate] ### step  5371 ###
16.415[zip.saturate]
    given (5371 steps, penalty 1):
      `forall (F627:nat → bool) (X628:nat) (X629:nat).
       [pp (F627 zero_zero_nat)* ∨ 
        ¬pp (ord_less_nat X629 (sk_K2 X628 F627))* ∨ 
        ¬pp (F627 X629)* ∨ ¬pp (F627 X628)*]/524`
16.447[zip.saturate] ### step  5382 ###
16.447[zip.saturate]
    given (5382 steps, penalty 1):
      `forall (X630:nat) (X631:nat) (X632:poly_poly_poly_a).
       [aTP_Lamm_ad X631 X632 X630
         = if_poly_poly_a (ord_less_nat X630 X631) 
            (coeff_poly_poly_a X632 X630) zero_z2096148049poly_a*]/525`
16.488[zip.saturate] ### step  5393 ###
16.488[zip.saturate]
    given (5393 steps, penalty 1):
      `forall (X633:nat) (X634:nat) (X635:poly_poly_nat).
       [aTP_Lamm_ac X634 X635 X633
         = if_poly_nat (ord_less_nat X633 X634) (coeff_poly_nat X635 X633) 
            zero_zero_poly_nat*]/526`
16.499[zip.saturate] ### step  5404 ###
16.499[zip.saturate]
    given (5404 steps, penalty 1):
      `forall (X636:nat) (X637:nat) (X638:poly_poly_a).
       [aTP_Lamm_aa X637 X638 X636
         = if_poly_a (ord_less_nat X636 X637) (coeff_poly_a X638 X636) 
            zero_zero_poly_a*]/527`
16.509[zip.saturate] ### step  5415 ###
16.509[zip.saturate]
    given (5415 steps, penalty 1):
      `forall (X639:nat) (X640:nat) (X641:poly_nat).
       [aTP_Lamm_ab X640 X641 X639
         = if_nat (ord_less_nat X639 X640) (coeff_nat X641 X639) 
            zero_zero_nat*]/528`
16.568[zip.saturate] ### step  5426 ###
16.568[zip.saturate]
    given (5426 steps, penalty 1):
      `forall (X642:nat) (X643:nat) (X644:poly_a).
       [aTP_Lamm_a X643 X644 X642
         = if_a (ord_less_nat X642 X643) (coeff_a X644 X642) zero_zero_a*]/529`
16.584[zip.saturate] ### step  5437 ###
16.584[zip.saturate]
    given (5437 steps, penalty 1):
      `forall (X645:nat) (X646:nat) (X647:poly_poly_a).
       [aTP_Lamm_an X647 X645 X646
         = if_poly_poly_a (fequal_nat X645 X646) X647 zero_z2096148049poly_a*]/530`
16.591[zip.saturate] ### step  5448 ###
16.591[zip.saturate]
    given (5448 steps, penalty 1):
      `forall (X648:nat) (X649:nat) (X650:poly_nat).
       [aTP_Lamm_am X650 X648 X649
         = if_poly_nat (fequal_nat X648 X649) X650 zero_zero_poly_nat*]/531`
16.608[zip.saturate] ### step  5459 ###
16.608[zip.saturate]
    given (5459 steps, penalty 1):
      `forall (X651:nat) (X652:nat) (X653:poly_a).
       [aTP_Lamm_ak X653 X651 X652
         = if_poly_a (fequal_nat X651 X652) X653 zero_zero_poly_a*]/532`
16.615[zip.saturate] ### step  5470 ###
16.615[zip.saturate]
    given (5470 steps, penalty 1):
      `forall (X654:nat) (X655:nat) (X656:nat).
       [aTP_Lamm_al X656 X654 X655
         = if_nat (fequal_nat X654 X655) X656 zero_zero_nat*]/533`
16.625[zip.saturate] ### step  5481 ###
16.625[zip.saturate]
    given (5481 steps, penalty 1):
      `forall (X657:nat) (X658:nat) (X659:a).
       [aTP_Lamm_aj X659 X657 X658
         = if_a (fequal_nat X657 X658) X659 zero_zero_a*]/534`
16.668[zip.saturate] ### step  5590 ###
16.668[zip.saturate]
    given (5590 steps, penalty 1):
      `forall (F0:a → a) (X1:a) (X2:a).
       [F0 (sk_X F0) ≠ F0 (sk_Y F0)* ∨ F0 X1 = F0 X2*]/570`
16.743[zip.saturate] ### step  5613 ###
16.744[zip.saturate]
    given (5613 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (F2:nat → bool) (X3:nat).
       [F2 X3 = F0 X1* ∨ ¬zip_tseitin1 X1 F0* ∨ ¬zip_tseitin1 X3 F2*]/1052`
16.779[zip.saturate] ### step  5626 ###
16.779[zip.saturate]
    given (5626 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat X0 (sk_N21 (ord_less_eq_nat X0)))+* ∨ 
        pp (ord_less_eq_nat X0 X1)*]/4050`
16.787[zip.saturate] ### step  5627 ###
16.787[zip.saturate]
    given (5627 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat X0 (sk_N2 (ord_less_eq_nat X0)))+* ∨ 
        pp (ord_less_eq_nat X0 X1)*]/4051`
16.836[zip.saturate] ### step  5659 ###
16.836[zip.saturate]
    given (5659 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat X0 (sk_N2 (ord_less_eq_nat X0)))+* ∨ 
        ord_less_eq_nat X0 X1 = fTrue*]/4532`
16.852[zip.saturate] ### step  5660 ###
16.852[zip.saturate]
    given (5660 steps, penalty 1):
      `forall (X0:nat) (X1:nat).
       [¬pp (ord_less_nat X0 (sk_N21 (ord_less_eq_nat X0)))+* ∨ 
        ord_less_eq_nat X0 X1 = fTrue*]/4612`
16.884[zip.saturate] ### step  5700 ###
16.884[zip.saturate]
    given (5700 steps, penalty 5):
      `forall A0 A1 (F2:A0 → A1) (F3:A0 → A1) (X4:A0).
       [F2 X4 = F3 X4* ∨ F2 (zf_ext_diff F2 F3) ≠ F3 (zf_ext_diff F2 F3)*]/556`
17.320[zip.saturate] ### step  5800 ###
17.320[zip.saturate]
    given (5800 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [ord_less_eq_nat X0 X0 ≠ ord_less_nat X1 X1+* ∨ 
        X2 = ord_less_nat X1 X1*]/19424`
17.352[zip.saturate] ### step  5825 ###
17.352[zip.saturate]
    given (5825 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:bool).
       [ord_less_nat X0 X0 ≠ ord_less_eq_nat X1 X1+* ∨ 
        X2 = ord_less_eq_nat X1 X1*]/19507`
17.365[zip.saturate] ### step  5863 ###
17.365[zip.saturate]
    given (5863 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat) (X2:nat).
       [¬pp (pos_poly_nat X0) ∨ 
        pos_poly_nat (pCons_nat X1 X0) = ord_less_eq_nat X2 X2*]/9180`
17.372[zip.saturate] ### step  5864 ###
17.372[zip.saturate]
    given (5864 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat) (X2:bool).
       [¬pp (pos_poly_nat X0) ∨ pos_poly_nat (pCons_nat X1 X0) = X2* ∨ 
        X2 = fFalse*]/9181`
17.443[zip.saturate] ### step  5900 ###
17.443[zip.saturate]
    given (5900 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [fundam2103719732poly_a X0 X1 = monom_a (sk_A219 X0) zero_zero_nat* ∨ 
        degree_a X0 ≠ zero_zero_nat]/10023`
17.449[zip.saturate] ### step  5901 ###
17.449[zip.saturate]
    given (5901 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [fundam1481276954ly_nat X0 X1 = monom_nat (sk_A220 X0) zero_zero_nat* ∨ 
        degree_nat X0 ≠ zero_zero_nat]/10027`
17.458[zip.saturate] ### step  5907 ###
17.458[zip.saturate]
    given (5907 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:poly_a).
       [fundam932970690poly_a X0 X1 = monom_poly_a (sk_A221 X0) zero_zero_nat* ∨ 
        degree_poly_a X0 ≠ zero_zero_nat]/10033`
17.463[zip.saturate] ### step  5908 ###
17.463[zip.saturate]
    given (5908 steps, penalty 1):
      `forall (X0:poly_a) (X1:a).
       [fundam2103719732poly_a X0 X1 = pcompose_a X0 zero_zero_poly_a* ∨ 
        degree_a X0 ≠ zero_zero_nat]/33349`
17.551[zip.saturate] ### step  5998 ###
17.551[zip.saturate]
    given (5998 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 ≠ F0 (sk_P313 F0)* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X2 = fTrue*]/4933`
17.587[zip.saturate] ### step  5999 ###
17.588[zip.saturate]
    given (5999 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 ≠ F0 (sk_P314 F0)* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X2 = fTrue*]/5155`
17.617[zip.saturate] ### step  6000 ###
17.617[zip.saturate]
    given (6000 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 ≠ F0 (sk_P315 F0)* ∨ 
        ¬pp (F0 zero_zero_poly_a)* ∨ X2 = fTrue*]/5231`
17.679[zip.saturate] ### step  6032 ###
17.679[zip.saturate]
    given (6032 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 ≠ F0 (sk_P316 F0)* ∨ 
        ¬pp (F0 zero_zero_poly_nat)* ∨ X2 = fTrue*]/7398`
17.706[zip.saturate] ### step  6033 ###
17.706[zip.saturate]
    given (6033 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat) (X2:bool).
       [ord_less_nat X1 X1 ≠ F0 (sk_P317 F0)* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X2 = fTrue*]/8450`
17.744[zip.saturate] ### step  6039 ###
17.744[zip.saturate]
    given (6039 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat) (X2:bool).
       [F0 (sk_P317 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X2 = fFalse*]/8725`
17.784[zip.saturate] ### step  6040 ###
17.784[zip.saturate]
    given (6040 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat) (X2:bool).
       [F0 (sk_P316 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_nat)* ∨ X2 = fFalse*]/8726`
17.842[zip.saturate] ### step  6053 ###
17.842[zip.saturate]
    given (6053 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:bool).
       [F0 (sk_P315 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)* ∨ X2 = fFalse*]/8727`
17.883[zip.saturate] ### step  6064 ###
17.884[zip.saturate]
    given (6064 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:bool).
       [F0 (sk_P314 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X2 = fFalse*]/8728`
17.914[zip.saturate] ### step  6065 ###
17.914[zip.saturate]
    given (6065 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:bool).
       [F0 (sk_P313 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X2 = fFalse*]/8729`
17.957[zip.saturate] ### step  6081 ###
17.957[zip.saturate]
    given (6081 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat) (X2:poly_a).
       [F0 (sk_P317 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X2 = zero_zero_poly_a*]/14077`
18.015[zip.saturate] ### step  6113 ###
18.015[zip.saturate]
    given (6113 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat) (X2:poly_a).
       [F0 (sk_P316 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_nat)* ∨ X2 = zero_zero_poly_a*]/14078`
18.036[zip.saturate] ### step  6114 ###
18.036[zip.saturate]
    given (6114 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:poly_a).
       [F0 (sk_P315 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)* ∨ X2 = zero_zero_poly_a*]/14079`
18.061[zip.saturate] ### step  6120 ###
18.061[zip.saturate]
    given (6120 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:poly_a).
       [F0 (sk_P314 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X2 = zero_zero_poly_a*]/14080`
18.084[zip.saturate] ### step  6121 ###
18.084[zip.saturate]
    given (6121 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:poly_a).
       [F0 (sk_P313 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X2 = zero_zero_poly_a*]/14081`
18.130[zip.saturate] ### step  6134 ###
18.130[zip.saturate]
    given (6134 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat) (X2:poly_poly_a).
       [F0 (sk_P317 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X2 = zero_z2096148049poly_a*]/14542`
18.185[zip.saturate] ### step  6141 ###
18.185[zip.saturate]
    given (6141 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 (sk_P316 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_nat)* ∨ X2 = zero_z2096148049poly_a*]/14543`
18.213[zip.saturate] ### step  6142 ###
18.214[zip.saturate]
    given (6142 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:poly_poly_a).
       [F0 (sk_P315 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)* ∨ X2 = zero_z2096148049poly_a*]/14544`
18.244[zip.saturate] ### step  6143 ###
18.244[zip.saturate]
    given (6143 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:poly_poly_a).
       [F0 (sk_P314 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X2 = zero_z2096148049poly_a*]/14545`
18.313[zip.saturate] ### step  6172 ###
18.313[zip.saturate]
    given (6172 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:poly_poly_a).
       [F0 (sk_P313 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X2 = zero_z2096148049poly_a*]/14546`
18.342[zip.saturate] ### step  6173 ###
18.342[zip.saturate]
    given (6173 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat) (X2:poly_nat).
       [F0 (sk_P317 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2096148049poly_a)* ∨ X2 = zero_zero_poly_nat*]/14950`
18.384[zip.saturate] ### step  6178 ###
18.385[zip.saturate]
    given (6178 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat) (X2:poly_nat).
       [F0 (sk_P316 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_nat)* ∨ X2 = zero_zero_poly_nat*]/14951`
18.428[zip.saturate] ### step  6179 ###
18.428[zip.saturate]
    given (6179 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:poly_nat).
       [F0 (sk_P315 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)* ∨ X2 = zero_zero_poly_nat*]/14952`
18.482[zip.saturate] ### step  6191 ###
18.482[zip.saturate]
    given (6191 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:poly_nat).
       [F0 (sk_P314 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)* ∨ X2 = zero_zero_poly_nat*]/14953`
18.512[zip.saturate] ### step  6192 ###
18.512[zip.saturate]
    given (6192 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:poly_nat).
       [F0 (sk_P313 F0) ≠ ord_less_nat X1 X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)* ∨ X2 = zero_zero_poly_nat*]/14954`
18.698[zip.saturate] ### step  6534 ###
18.698[zip.saturate]
    given (6534 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_nat X2 X2 ≠ F0 X1* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X3 = fTrue*]/4485`
18.726[zip.saturate] ### step  6535 ###
18.726[zip.saturate]
    given (6535 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_nat X2 X2 ≠ F0 X1* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X3 = fTrue*]/4564`
18.758[zip.saturate] ### step  6536 ###
18.758[zip.saturate]
    given (6536 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_nat X2 X2 ≠ F0 X1* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X3 = fTrue*]/4646`
18.832[zip.saturate] ### step  6565 ###
18.832[zip.saturate]
    given (6565 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_nat X2 X2 ≠ F0 X1* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X3 = fTrue*]/4835`
18.860[zip.saturate] ### step  6569 ###
18.860[zip.saturate]
    given (6569 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X3 = fFalse*]/8730`
18.897[zip.saturate] ### step  6574 ###
18.897[zip.saturate]
    given (6574 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X3 = fFalse*]/8731`
18.945[zip.saturate] ### step  6575 ###
18.945[zip.saturate]
    given (6575 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X3 = fFalse*]/8733`
19.016[zip.saturate] ### step  6587 ###
19.016[zip.saturate]
    given (6587 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:bool).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X3 = fFalse*]/8734`
19.134[zip.saturate] ### step  6601 ###
19.134[zip.saturate]
    given (6601 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X3 = zero_zero_poly_a*]/14082`
19.184[zip.saturate] ### step  6612 ###
19.184[zip.saturate]
    given (6612 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X3 = zero_zero_poly_a*]/14083`
19.220[zip.saturate] ### step  6613 ###
19.220[zip.saturate]
    given (6613 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X3 = zero_zero_poly_a*]/14085`
19.263[zip.saturate] ### step  6614 ###
19.263[zip.saturate]
    given (6614 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X3 = zero_zero_poly_a*]/14086`
19.347[zip.saturate] ### step  6646 ###
19.347[zip.saturate]
    given (6646 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X3 = zero_z2096148049poly_a*]/14547`
19.383[zip.saturate] ### step  6647 ###
19.383[zip.saturate]
    given (6647 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X3 = zero_z2096148049poly_a*]/14548`
19.422[zip.saturate] ### step  6653 ###
19.422[zip.saturate]
    given (6653 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X3 = zero_z2096148049poly_a*]/14550`
19.466[zip.saturate] ### step  6654 ###
19.466[zip.saturate]
    given (6654 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_poly_a).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X3 = zero_z2096148049poly_a*]/14551`
19.539[zip.saturate] ### step  6673 ###
19.539[zip.saturate]
    given (6673 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_nat).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0* ∨ 
        X3 = zero_zero_poly_nat*]/14955`
19.580[zip.saturate] ### step  6684 ###
19.580[zip.saturate]
    given (6684 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_nat).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0* ∨ 
        X3 = zero_zero_poly_nat*]/14956`
19.615[zip.saturate] ### step  6685 ###
19.616[zip.saturate]
    given (6685 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_nat).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N21 F0))* ∨ 
        X3 = zero_zero_poly_nat*]/14958`
19.657[zip.saturate] ### step  6686 ###
19.657[zip.saturate]
    given (6686 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:poly_nat).
       [F0 X1 ≠ ord_less_nat X2 X2* ∨ ¬pp (F0 (sk_N2 F0))* ∨ 
        X3 = zero_zero_poly_nat*]/14959`
19.763[zip.saturate] ### step  6824 ###
19.763[zip.saturate]
    given (6824 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a) (X3:bool).
       [if_poly_poly_a X0 X2 X1 = X1* ∨ X3 = fFalse* ∨ X0 = X3*]/1503`
19.830[zip.saturate] ### step  6825 ###
19.830[zip.saturate]
    given (6825 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat) (X3:bool).
       [if_poly_nat X0 X2 X1 = X1* ∨ X3 = fFalse* ∨ X0 = X3*]/1505`
19.918[zip.saturate] ### step  6831 ###
19.918[zip.saturate]
    given (6831 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a) (X3:bool).
       [if_poly_a X0 X2 X1 = X1* ∨ X3 = fFalse* ∨ X0 = X3*]/1506`
19.993[zip.saturate] ### step  6832 ###
19.993[zip.saturate]
    given (6832 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat) (X3:bool).
       [if_nat X0 X2 X1 = X1* ∨ X3 = fFalse* ∨ X0 = X3*]/1507`
20.110[zip.saturate] ### step  6851 ###
20.110[zip.saturate]
    given (6851 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:bool).
       [if_a X0 X2 X1 = X1* ∨ X3 = fFalse* ∨ X0 = X3*]/1508`
20.183[zip.saturate] ### step  6865 ###
20.183[zip.saturate]
    given (6865 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a) (X3:bool).
       [if_poly_poly_a X0 X1 X2 = X1* ∨ X3 = fTrue* ∨ X0 = X3*]/1935`
20.275[zip.saturate] ### step  6866 ###
20.275[zip.saturate]
    given (6866 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat) (X3:bool).
       [if_poly_nat X0 X1 X2 = X1* ∨ X3 = fTrue* ∨ X0 = X3*]/1937`
20.339[zip.saturate] ### step  6867 ###
20.339[zip.saturate]
    given (6867 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a) (X3:bool).
       [if_poly_a X0 X1 X2 = X1* ∨ X3 = fTrue* ∨ X0 = X3*]/1938`
20.438[zip.saturate] ### step  6888 ###
20.438[zip.saturate]
    given (6888 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat) (X3:bool).
       [if_nat X0 X1 X2 = X1* ∨ X3 = fTrue* ∨ X0 = X3*]/1939`
20.502[zip.saturate] ### step  6889 ###
20.502[zip.saturate]
    given (6889 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:bool).
       [if_a X0 X1 X2 = X1* ∨ X3 = fTrue* ∨ X0 = X3*]/1940`
20.592[zip.saturate] ### step  6905 ###
20.592[zip.saturate]
    given (6905 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a) (X3:nat).
       [if_poly_poly_a X0 X1 X2 = X1* ∨ X0 = ord_less_nat X3 X3*]/2441`
20.623[zip.saturate] ### step  6906 ###
20.623[zip.saturate]
    given (6906 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat) (X3:nat).
       [if_poly_nat X0 X1 X2 = X1* ∨ X0 = ord_less_nat X3 X3*]/2443`
20.662[zip.saturate] ### step  6917 ###
20.662[zip.saturate]
    given (6917 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a) (X3:nat).
       [if_poly_a X0 X1 X2 = X1* ∨ X0 = ord_less_nat X3 X3*]/2444`
20.713[zip.saturate] ### step  6930 ###
20.713[zip.saturate]
    given (6930 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat X0 X1 X2 = X1* ∨ X0 = ord_less_nat X3 X3*]/2445`
20.743[zip.saturate] ### step  6931 ###
20.743[zip.saturate]
    given (6931 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:nat).
       [if_a X0 X1 X2 = X1* ∨ X0 = ord_less_nat X3 X3*]/2446`
20.776[zip.saturate] ### step  6937 ###
20.776[zip.saturate]
    given (6937 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a) (X3:bool).
       [if_poly_poly_a X0 X1 X2 = X1* ∨ pp X3* ∨ X0 = X3*]/3099`
20.895[zip.saturate] ### step  6958 ###
20.895[zip.saturate]
    given (6958 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat) (X3:bool).
       [if_poly_nat X0 X1 X2 = X1* ∨ pp X3* ∨ X0 = X3*]/3101`
20.951[zip.saturate] ### step  6959 ###
20.951[zip.saturate]
    given (6959 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a) (X3:bool).
       [if_poly_a X0 X1 X2 = X1* ∨ pp X3* ∨ X0 = X3*]/3102`
21.035[zip.saturate] ### step  6965 ###
21.035[zip.saturate]
    given (6965 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat) (X3:bool).
       [if_nat X0 X1 X2 = X1* ∨ pp X3* ∨ X0 = X3*]/3103`
21.092[zip.saturate] ### step  6966 ###
21.093[zip.saturate]
    given (6966 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:bool).
       [if_a X0 X1 X2 = X1* ∨ pp X3* ∨ X0 = X3*]/3104`
21.173[zip.saturate] ### step  6987 ###
21.173[zip.saturate]
    given (6987 steps, penalty 1):
      `forall (X0:bool) (X1:poly_poly_a) (X2:poly_poly_a) (X3:nat).
       [if_poly_poly_a X0 X2 X1 = X1* ∨ X0 = ord_less_eq_nat X3 X3*]/3509`
21.217[zip.saturate] ### step  7000 ###
21.217[zip.saturate]
    given (7000 steps, penalty 1):
      `forall (X0:bool) (X1:poly_nat) (X2:poly_nat) (X3:nat).
       [if_poly_nat X0 X2 X1 = X1* ∨ X0 = ord_less_eq_nat X3 X3*]/3511`
21.250[zip.saturate] ### step  7001 ###
21.250[zip.saturate]
    given (7001 steps, penalty 1):
      `forall (X0:bool) (X1:poly_a) (X2:poly_a) (X3:nat).
       [if_poly_a X0 X2 X1 = X1* ∨ X0 = ord_less_eq_nat X3 X3*]/3512`
21.284[zip.saturate] ### step  7002 ###
21.284[zip.saturate]
    given (7002 steps, penalty 1):
      `forall (X0:bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat X0 X2 X1 = X1* ∨ X0 = ord_less_eq_nat X3 X3*]/3513`
21.330[zip.saturate] ### step  7023 ###
21.330[zip.saturate]
    given (7023 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:nat).
       [if_a X0 X2 X1 = X1* ∨ X0 = ord_less_eq_nat X3 X3*]/3514`
21.360[zip.saturate] ### step  7024 ###
21.360[zip.saturate]
    given (7024 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [pp X2* ∨ F0 (sk_N2 F0) = X2* ∨ pp (F0 X1)*]/3855`
21.448[zip.saturate] ### step  7030 ###
21.448[zip.saturate]
    given (7030 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [X2 = fTrue* ∨ X2 = F0 (sk_N2 F0)* ∨ pp (F0 X1)*]/3856`
21.554[zip.saturate] ### step  7031 ###
21.554[zip.saturate]
    given (7031 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [ord_less_nat X2 X2 = F0 (sk_N2 F0)* ∨ pp (F0 X1)*]/3857`
21.631[zip.saturate] ### step  7043 ###
21.631[zip.saturate]
    given (7043 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [pp X2* ∨ F0 (sk_N21 F0) = X2* ∨ pp (F0 X1)*]/3866`
21.748[zip.saturate] ### step  7056 ###
21.748[zip.saturate]
    given (7056 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [X2 = fTrue* ∨ X2 = F0 (sk_N21 F0)* ∨ pp (F0 X1)*]/3867`
21.851[zip.saturate] ### step  7057 ###
21.852[zip.saturate]
    given (7057 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [ord_less_nat X2 X2 = F0 (sk_N21 F0)* ∨ pp (F0 X1)*]/3868`
21.907[zip.saturate] ### step  7059 ###
21.907[zip.saturate]
    given (7059 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat).
       [sk_P39 F0 = zero_zero_poly_a* ∨ 
        F0 (sk_P39 F0) = ord_less_eq_nat X1 X1*]/4381`
21.981[zip.saturate] ### step  7080 ###
21.981[zip.saturate]
    given (7080 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [sk_P39 F0 = zero_zero_poly_a* ∨ F0 (sk_P39 F0) = X1* ∨ 
        X1 = fFalse*]/4382`
22.077[zip.saturate] ### step  7081 ###
22.077[zip.saturate]
    given (7081 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat).
       [sk_P310 F0 = zero_zero_poly_nat* ∨ 
        F0 (sk_P310 F0) = ord_less_eq_nat X1 X1*]/4425`
22.132[zip.saturate] ### step  7087 ###
22.133[zip.saturate]
    given (7087 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [sk_P310 F0 = zero_zero_poly_nat* ∨ F0 (sk_P310 F0) = X1* ∨ 
        X1 = fFalse*]/4426`
22.220[zip.saturate] ### step  7088 ###
22.221[zip.saturate]
    given (7088 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat).
       [sk_P311 F0 = zero_z2096148049poly_a* ∨ 
        F0 (sk_P311 F0) = ord_less_eq_nat X1 X1*]/4463`
22.278[zip.saturate] ### step  7099 ###
22.278[zip.saturate]
    given (7099 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [sk_P311 F0 = zero_z2096148049poly_a* ∨ F0 (sk_P311 F0) = X1* ∨ 
        X1 = fFalse*]/4464`
22.364[zip.saturate] ### step  7112 ###
22.364[zip.saturate]
    given (7112 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [pp X2* ∨ F0 (sk_N2 F0) = X2* ∨ F0 X1 = fTrue*]/4534`
22.432[zip.saturate] ### step  7113 ###
22.432[zip.saturate]
    given (7113 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [X2 = fTrue* ∨ X2 = F0 (sk_N2 F0)* ∨ F0 X1 = fTrue*]/4535`
22.506[zip.saturate] ### step  7114 ###
22.506[zip.saturate]
    given (7114 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [ord_less_nat X2 X2 = F0 (sk_N2 F0)* ∨ F0 X1 = fTrue*]/4536`
22.555[zip.saturate] ### step  7116 ###
22.555[zip.saturate]
    given (7116 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [pp X2* ∨ F0 (sk_N21 F0) = X2* ∨ F0 X1 = fTrue*]/4615`
22.645[zip.saturate] ### step  7137 ###
22.645[zip.saturate]
    given (7137 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [X2 = fTrue* ∨ X2 = F0 (sk_N21 F0)* ∨ F0 X1 = fTrue*]/4616`
22.718[zip.saturate] ### step  7138 ###
22.718[zip.saturate]
    given (7138 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [ord_less_nat X2 X2 = F0 (sk_N21 F0)* ∨ F0 X1 = fTrue*]/4617`
22.789[zip.saturate] ### step  7145 ###
22.790[zip.saturate]
    given (7145 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z1059985641ly_nat = X1* ∨ pp (F0 (sk_P313 F0))*]/4704`
22.880[zip.saturate] ### step  7146 ###
22.880[zip.saturate]
    given (7146 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z1059985641ly_nat* ∨ 
        pp (F0 (sk_P313 F0))*]/4705`
22.976[zip.saturate] ### step  7157 ###
22.976[zip.saturate]
    given (7157 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z1059985641ly_nat* ∨ 
        pp (F0 (sk_P313 F0))*]/4706`
23.083[zip.saturate] ### step  7171 ###
23.083[zip.saturate]
    given (7171 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_nat X2 X2 ≠ ord_less_eq_nat X1 X0+* ∨ 
        ¬pp (ord_less_nat X1 X0) ∨ X3 = fTrue*]/4726`
23.088[zip.saturate] ### step  7172 ###
23.088[zip.saturate]
    given (7172 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z1059985641ly_nat = X1* ∨ 
        F0 (sk_P313 F0) = fTrue*]/4985`
23.175[zip.saturate] ### step  7173 ###
23.175[zip.saturate]
    given (7173 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z1059985641ly_nat* ∨ 
        F0 (sk_P313 F0) = fTrue*]/4986`
23.262[zip.saturate] ### step  7174 ###
23.262[zip.saturate]
    given (7174 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z1059985641ly_nat* ∨ 
        F0 (sk_P313 F0) = fTrue*]/4987`
23.340[zip.saturate] ### step  7194 ###
23.341[zip.saturate]
    given (7194 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z2064990175poly_a = X1* ∨ pp (F0 (sk_P314 F0))*]/4993`
23.434[zip.saturate] ### step  7195 ###
23.434[zip.saturate]
    given (7195 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z2064990175poly_a* ∨ 
        pp (F0 (sk_P314 F0))*]/4994`
23.530[zip.saturate] ### step  7200 ###
23.530[zip.saturate]
    given (7200 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z2064990175poly_a* ∨ 
        pp (F0 (sk_P314 F0))*]/4995`
23.582[zip.saturate] ### step  7202 ###
23.583[zip.saturate]
    given (7202 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_zero_poly_a = X1* ∨ pp (F0 (sk_P315 F0))*]/5096`
23.675[zip.saturate] ### step  7212 ###
23.675[zip.saturate]
    given (7212 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_zero_poly_a* ∨ pp (F0 (sk_P315 F0))*]/5097`
23.762[zip.saturate] ### step  7213 ###
23.762[zip.saturate]
    given (7213 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_zero_poly_a* ∨ pp (F0 (sk_P315 F0))*]/5098`
23.832[zip.saturate] ### step  7218 ###
23.832[zip.saturate]
    given (7218 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z2064990175poly_a = X1* ∨ 
        F0 (sk_P314 F0) = fTrue*]/5208`
23.927[zip.saturate] ### step  7219 ###
23.927[zip.saturate]
    given (7219 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z2064990175poly_a* ∨ 
        F0 (sk_P314 F0) = fTrue*]/5209`
24.024[zip.saturate] ### step  7220 ###
24.024[zip.saturate]
    given (7220 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z2064990175poly_a* ∨ 
        F0 (sk_P314 F0) = fTrue*]/5210`
24.087[zip.saturate] ### step  7222 ###
24.087[zip.saturate]
    given (7222 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_zero_poly_a = X1* ∨ F0 (sk_P315 F0) = fTrue*]/5285`
24.194[zip.saturate] ### step  7241 ###
24.194[zip.saturate]
    given (7241 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_zero_poly_a* ∨ 
        F0 (sk_P315 F0) = fTrue*]/5286`
24.268[zip.saturate] ### step  7242 ###
24.268[zip.saturate]
    given (7242 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_zero_poly_a* ∨ 
        F0 (sk_P315 F0) = fTrue*]/5287`
24.357[zip.saturate] ### step  7248 ###
24.357[zip.saturate]
    given (7248 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [pp X1* ∨ F0 zero_zero_poly_nat = X1* ∨ pp (F0 (sk_P316 F0))*]/5786`
24.444[zip.saturate] ### step  7249 ###
24.444[zip.saturate]
    given (7249 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_zero_poly_nat* ∨ pp (F0 (sk_P316 F0))*]/5787`
24.545[zip.saturate] ### step  7259 ###
24.545[zip.saturate]
    given (7259 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_zero_poly_nat* ∨ pp (F0 (sk_P316 F0))*]/5788`
24.593[zip.saturate] ### step  7261 ###
24.593[zip.saturate]
    given (7261 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z2096148049poly_a = X1* ∨ pp (F0 (sk_P317 F0))*]/7024`
24.684[zip.saturate] ### step  7265 ###
24.684[zip.saturate]
    given (7265 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z2096148049poly_a* ∨ 
        pp (F0 (sk_P317 F0))*]/7025`
24.782[zip.saturate] ### step  7266 ###
24.782[zip.saturate]
    given (7266 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z2096148049poly_a* ∨ 
        pp (F0 (sk_P317 F0))*]/7026`
24.830[zip.saturate] ### step  7268 ###
24.830[zip.saturate]
    given (7268 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [pp X1* ∨ F0 zero_zero_poly_nat = X1* ∨ F0 (sk_P316 F0) = fTrue*]/7462`
24.911[zip.saturate] ### step  7269 ###
24.911[zip.saturate]
    given (7269 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_zero_poly_nat* ∨ 
        F0 (sk_P316 F0) = fTrue*]/7463`
25.024[zip.saturate] ### step  7290 ###
25.024[zip.saturate]
    given (7290 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_zero_poly_nat* ∨ 
        F0 (sk_P316 F0) = fTrue*]/7464`
25.073[zip.saturate] ### step  7292 ###
25.073[zip.saturate]
    given (7292 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [pp X1* ∨ F0 zero_z2096148049poly_a = X1* ∨ 
        F0 (sk_P317 F0) = fTrue*]/8517`
25.181[zip.saturate] ### step  7298 ###
25.181[zip.saturate]
    given (7298 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [X1 = fTrue* ∨ X1 = F0 zero_z2096148049poly_a* ∨ 
        F0 (sk_P317 F0) = fTrue*]/8518`
25.276[zip.saturate] ### step  7299 ###
25.276[zip.saturate]
    given (7299 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat).
       [ord_less_nat X1 X1 = F0 zero_z2096148049poly_a* ∨ 
        F0 (sk_P317 F0) = fTrue*]/8519`
25.354[zip.saturate] ### step  7317 ###
25.354[zip.saturate]
    given (7317 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [synthetic_div_a X1 X0 = sk_P312 (synthetic_div_a (pCons_a X2 X1) X0)*]/8547`
25.385[zip.saturate] ### step  7321 ###
25.385[zip.saturate]
    given (7321 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a).
       [sk_A212 (synthetic_div_a (pCons_a X2 X1) X0) = poly_a2 X1 X0*]/8552`
25.393[zip.saturate] ### step  7322 ###
25.393[zip.saturate]
    given (7322 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat) (X3:bool).
       [ord_less_eq_nat X1 X0 ≠ ord_less_nat X2 X2+* ∨ 
        ¬pp (ord_less_nat X1 X0) ∨ X3 = fFalse*]/8732`
25.403[zip.saturate] ### step  7331 ###
25.403[zip.saturate]
    given (7331 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [zip_tseitin0 X1 X3 F0* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/11496`
25.435[zip.saturate] ### step  7332 ###
25.435[zip.saturate]
    given (7332 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool) (X3:nat).
       [zip_tseitin0 X1 X3 F0* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/11497`
25.533[zip.saturate] ### step  7377 ###
25.533[zip.saturate]
    given (7377 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat) (X3:poly_a).
       [ord_less_eq_nat X1 X0 ≠ ord_less_nat X2 X2+* ∨ 
        ¬pp (ord_less_nat X1 X0) ∨ X3 = zero_zero_poly_a*]/14084`
25.539[zip.saturate] ### step  7378 ###
25.539[zip.saturate]
    given (7378 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat) (X3:poly_poly_a).
       [ord_less_eq_nat X1 X0 ≠ ord_less_nat X2 X2+* ∨ 
        ¬pp (ord_less_nat X1 X0) ∨ X3 = zero_z2096148049poly_a*]/14549`
25.550[zip.saturate] ### step  7384 ###
25.550[zip.saturate]
    given (7384 steps, penalty 1):
      `forall (X0:nat) (X1:nat) (X2:nat) (X3:poly_nat).
       [ord_less_eq_nat X1 X0 ≠ ord_less_nat X2 X2+* ∨ 
        ¬pp (ord_less_nat X1 X0) ∨ X3 = zero_zero_poly_nat*]/14957`
25.558[zip.saturate] ### step  7394 ###
25.558[zip.saturate]
    given (7394 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [F0 (sk_N2 F0) = fFalse* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/15708`
25.668[zip.saturate] ### step  7411 ###
25.668[zip.saturate]
    given (7411 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 (sk_N2 F0) = fFalse* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/15709`
25.813[zip.saturate] ### step  7421 ###
25.813[zip.saturate]
    given (7421 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat).
       [F0 (sk_N21 F0) = fFalse* ∨ F0 X1 = ord_less_eq_nat X2 X2*]/15782`
25.902[zip.saturate] ### step  7422 ###
25.902[zip.saturate]
    given (7422 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:bool).
       [F0 (sk_N21 F0) = fFalse* ∨ F0 X1 = X2* ∨ X2 = fFalse*]/15783`
26.115[zip.saturate] ### step  7477 ###
26.115[zip.saturate]
    given (7477 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat).
       [F0 zero_z1059985641ly_nat = fFalse* ∨ 
        F0 (sk_P313 F0) = ord_less_eq_nat X1 X1*]/16822`
26.236[zip.saturate] ### step  7499 ###
26.236[zip.saturate]
    given (7499 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:bool).
       [F0 zero_z1059985641ly_nat = fFalse* ∨ F0 (sk_P313 F0) = X1* ∨ 
        X1 = fFalse*]/16823`
26.432[zip.saturate] ### step  7527 ###
26.432[zip.saturate]
    given (7527 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat).
       [F0 zero_z2064990175poly_a = fFalse* ∨ 
        F0 (sk_P314 F0) = ord_less_eq_nat X1 X1*]/17098`
26.528[zip.saturate] ### step  7528 ###
26.528[zip.saturate]
    given (7528 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:bool).
       [F0 zero_z2064990175poly_a = fFalse* ∨ F0 (sk_P314 F0) = X1* ∨ 
        X1 = fFalse*]/17099`
26.689[zip.saturate] ### step  7548 ###
26.689[zip.saturate]
    given (7548 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat).
       [F0 zero_zero_poly_a = fFalse* ∨ 
        F0 (sk_P315 F0) = ord_less_eq_nat X1 X1*]/17201`
26.818[zip.saturate] ### step  7561 ###
26.818[zip.saturate]
    given (7561 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:bool).
       [F0 zero_zero_poly_a = fFalse* ∨ F0 (sk_P315 F0) = X1* ∨ 
        X1 = fFalse*]/17202`
26.964[zip.saturate] ### step  7598 ###
26.964[zip.saturate]
    given (7598 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:nat).
       [F0 zero_zero_poly_nat = fFalse* ∨ 
        F0 (sk_P316 F0) = ord_less_eq_nat X1 X1*]/17804`
27.061[zip.saturate] ### step  7599 ###
27.062[zip.saturate]
    given (7599 steps, penalty 1):
      `forall (F0:poly_nat → bool) (X1:bool).
       [F0 zero_zero_poly_nat = fFalse* ∨ F0 (sk_P316 F0) = X1* ∨ 
        X1 = fFalse*]/17805`
27.214[zip.saturate] ### step  7631 ###
27.214[zip.saturate]
    given (7631 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:nat).
       [F0 zero_z2096148049poly_a = fFalse* ∨ 
        F0 (sk_P317 F0) = ord_less_eq_nat X1 X1*]/17914`
27.313[zip.saturate] ### step  7636 ###
27.313[zip.saturate]
    given (7636 steps, penalty 1):
      `forall (F0:poly_poly_a → bool) (X1:bool).
       [F0 zero_z2096148049poly_a = fFalse* ∨ F0 (sk_P317 F0) = X1* ∨ 
        X1 = fFalse*]/17915`
27.461[zip.saturate] ### step  7739 ###
27.461[zip.saturate]
    given (7739 steps, penalty 1):
      `forall (F0:poly_a → poly_a → bool).
       [¬pp (F0 zero_zero_poly_a zero_zero_poly_a)* ∨ 
        F0 (sk_P3 F0) (sk_Q2 F0) = fTrue*]/3980`
27.522[zip.saturate] ### step  7749 ###
27.522[zip.saturate]
    given (7749 steps, penalty 1):
      `forall (F0:poly_a → poly_nat → bool).
       [¬pp (F0 zero_zero_poly_a zero_zero_poly_nat)* ∨ 
        F0 (sk_P31 F0) (sk_Q21 F0) = fTrue*]/3999`
27.613[zip.saturate] ### step  7762 ###
27.613[zip.saturate]
    given (7762 steps, penalty 1):
      `forall (F0:poly_a → poly_poly_a → bool).
       [¬pp (F0 zero_zero_poly_a zero_z2096148049poly_a)* ∨ 
        F0 (sk_P32 F0) (sk_Q22 F0) = fTrue*]/4022`
27.661[zip.saturate] ### step  7763 ###
27.661[zip.saturate]
    given (7763 steps, penalty 1):
      `forall (F0:poly_nat → poly_a → bool).
       [¬pp (F0 zero_zero_poly_nat zero_zero_poly_a)* ∨ 
        F0 (sk_P33 F0) (sk_Q23 F0) = fTrue*]/4041`
27.715[zip.saturate] ### step  7764 ###
27.715[zip.saturate]
    given (7764 steps, penalty 1):
      `forall (F0:poly_nat → poly_nat → bool).
       [¬pp (F0 zero_zero_poly_nat zero_zero_poly_nat)* ∨ 
        F0 (sk_P34 F0) (sk_Q24 F0) = fTrue*]/4098`
27.788[zip.saturate] ### step  7786 ###
27.788[zip.saturate]
    given (7786 steps, penalty 1):
      `forall (F0:poly_nat → poly_poly_a → bool).
       [¬pp (F0 zero_zero_poly_nat zero_z2096148049poly_a)* ∨ 
        F0 (sk_P35 F0) (sk_Q25 F0) = fTrue*]/4228`
27.852[zip.saturate] ### step  7791 ###
27.852[zip.saturate]
    given (7791 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_a → bool).
       [¬pp (F0 zero_z2096148049poly_a zero_zero_poly_a)* ∨ 
        F0 (sk_P36 F0) (sk_Q26 F0) = fTrue*]/4249`
27.916[zip.saturate] ### step  7792 ###
27.916[zip.saturate]
    given (7792 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_nat → bool).
       [¬pp (F0 zero_z2096148049poly_a zero_zero_poly_nat)* ∨ 
        F0 (sk_P37 F0) (sk_Q27 F0) = fTrue*]/4270`
28.020[zip.saturate] ### step  7802 ###
28.020[zip.saturate]
    given (7802 steps, penalty 1):
      `forall (F0:poly_poly_a → poly_poly_a → bool).
       [¬pp (F0 zero_z2096148049poly_a zero_z2096148049poly_a)* ∨ 
        F0 (sk_P38 F0) (sk_Q28 F0) = fTrue*]/4330`
28.107[zip.saturate] ### step  7830 ###
28.107[zip.saturate]
    given (7830 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:a) (X4:bool).
       [¬fundam396953934nt_a_a (if_a X0 X1)+* ∨ X4 = fFalse* ∨ 
        X0 = X4* ∨ X2 = X3*]/1496`
28.133[zip.saturate] ### step  7869 ###
28.133[zip.saturate]
    given (7869 steps, penalty 1):
      `forall (X0:bool) (X1:a) (X2:a) (X3:a) (X4:nat).
       [¬fundam396953934nt_a_a (if_a X0 X1)+* ∨ 
        X0 = ord_less_eq_nat X4 X4* ∨ X2 = X3*]/3501`
28.141[zip.saturate] ### step  7876 ###
28.141[zip.saturate]
    given (7876 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:poly_poly_a).
       [if_poly_poly_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N2 F0))*]/4495`
28.179[zip.saturate] ### step  7898 ###
28.179[zip.saturate]
    given (7898 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:poly_nat).
       [if_poly_nat (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N2 F0))*]/4497`
28.205[zip.saturate] ### step  7903 ###
28.205[zip.saturate]
    given (7903 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:poly_a).
       [if_poly_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N2 F0))*]/4498`
28.223[zip.saturate] ### step  7904 ###
28.223[zip.saturate]
    given (7904 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N2 F0))*]/4499`
28.258[zip.saturate] ### step  7914 ###
28.258[zip.saturate]
    given (7914 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:a) (X3:a).
       [if_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N2 F0))*]/4500`
28.299[zip.saturate] ### step  7928 ###
28.299[zip.saturate]
    given (7928 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:poly_poly_a).
       [if_poly_poly_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N21 F0))*]/4574`
28.313[zip.saturate] ### step  7929 ###
28.313[zip.saturate]
    given (7929 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:poly_nat).
       [if_poly_nat (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N21 F0))*]/4576`
28.328[zip.saturate] ### step  7930 ###
28.328[zip.saturate]
    given (7930 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:poly_a).
       [if_poly_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N21 F0))*]/4577`
28.376[zip.saturate] ### step  7954 ###
28.376[zip.saturate]
    given (7954 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N21 F0))*]/4578`
28.405[zip.saturate] ### step  7959 ###
28.405[zip.saturate]
    given (7959 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:a) (X3:a).
       [if_a (F0 X1) X2 X3 = X2* ∨ ¬pp (F0 (sk_N21 F0))*]/4579`
28.417[zip.saturate] ### step  7960 ###
28.417[zip.saturate]
    given (7960 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:poly_poly_a).
       [if_poly_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0*]/4656`
28.450[zip.saturate] ### step  7971 ###
28.450[zip.saturate]
    given (7971 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:poly_nat).
       [if_poly_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0*]/4658`
28.488[zip.saturate] ### step  7984 ###
28.488[zip.saturate]
    given (7984 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:poly_a).
       [if_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0*]/4659`
28.498[zip.saturate] ### step  7985 ###
28.498[zip.saturate]
    given (7985 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0*]/4660`
28.510[zip.saturate] ### step  7986 ###
28.510[zip.saturate]
    given (7986 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:a) (X3:a).
       [if_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N2 F0) F0*]/4661`
28.521[zip.saturate] ### step  7987 ###
28.521[zip.saturate]
    given (7987 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_poly_a) (X3:poly_poly_a).
       [if_poly_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0*]/4845`
28.557[zip.saturate] ### step  8007 ###
28.557[zip.saturate]
    given (8007 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_nat) (X3:poly_nat).
       [if_poly_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0*]/4847`
28.572[zip.saturate] ### step  8012 ###
28.572[zip.saturate]
    given (8012 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:poly_a) (X3:poly_a).
       [if_poly_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0*]/4848`
28.586[zip.saturate] ### step  8013 ###
28.586[zip.saturate]
    given (8013 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:nat) (X3:nat).
       [if_nat (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0*]/4849`
28.620[zip.saturate] ### step  8022 ###
28.620[zip.saturate]
    given (8022 steps, penalty 1):
      `forall (F0:nat → bool) (X1:nat) (X2:a) (X3:a).
       [if_a (F0 X1) X2 X3 = X2* ∨ ¬zip_tseitin1 (sk_N21 F0) F0*]/4850`
28.699[zip.saturate] ### step  8268 ###
28.699[zip.saturate]
    given (8268 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = fTrue* ∨ fFalse ≠ ord_less_nat zero_zero_nat X1+*]/22291`
28.718[zip.saturate] ### step  8272 ###
28.718[zip.saturate]
    given (8272 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = fFalse* ∨ ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/22720`
28.724[zip.saturate] ### step  8273 ###
28.724[zip.saturate]
    given (8273 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = fTrue* ∨ fFalse ≠ ord_less_nat zero_zero_nat X1+*]/23186`
28.730[zip.saturate] ### step  8274 ###
28.730[zip.saturate]
    given (8274 steps, penalty 1):
      `forall (X0:bool) (X1:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = fFalse* ∨ ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/23626`
28.740[zip.saturate] ### step  8284 ###
28.740[zip.saturate]
    given (8284 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_zero_poly_a* ∨ ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/35822`
28.773[zip.saturate] ### step  8304 ###
28.773[zip.saturate]
    given (8304 steps, penalty 1):
      `forall (X0:poly_a) (X1:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_zero_poly_a* ∨ ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/36328`
28.787[zip.saturate] ### step  8309 ###
28.787[zip.saturate]
    given (8309 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_z2096148049poly_a* ∨ 
        ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/38495`
28.794[zip.saturate] ### step  8310 ###
28.794[zip.saturate]
    given (8310 steps, penalty 1):
      `forall (X0:poly_poly_a) (X1:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_z2096148049poly_a* ∨ 
        ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/38811`
28.822[zip.saturate] ### step  8328 ###
28.822[zip.saturate]
    given (8328 steps, penalty 1):
      `forall (F0:nat → bool) (F1:nat → bool) (X2:nat) (X3:nat).
       [F0 (sk_N2 F0) ≠ F1 X2* ∨ pp (F0 X3)* ∨ ¬zip_tseitin1 X2 F1*]/15731`
28.851[zip.saturate] ### step  8329 ###
28.851[zip.saturate]
    given (8329 steps, penalty 1):
      `forall (F0:nat → bool) (F1:nat → bool) (X2:nat) (X3:nat).
       [F0 (sk_N21 F0) ≠ F1 X2* ∨ pp (F0 X3)* ∨ ¬zip_tseitin1 X2 F1*]/15816`
28.900[zip.saturate] ### step  8333 ###
28.900[zip.saturate]
    given (8333 steps, penalty 1):
      `forall (F0:nat → bool) (F1:nat → bool) (X2:nat) (X3:nat).
       [F0 (sk_N2 F0) ≠ F1 X2* ∨ F0 X3 = fTrue* ∨ ¬zip_tseitin1 X2 F1*]/16542`
28.940[zip.saturate] ### step  8334 ###
28.940[zip.saturate]
    given (8334 steps, penalty 1):
      `forall (F0:nat → bool) (F1:nat → bool) (X2:nat) (X3:nat).
       [F0 (sk_N21 F0) ≠ F1 X2* ∨ F0 X3 = fTrue* ∨ 
        ¬zip_tseitin1 X2 F1*]/16725`
28.985[zip.saturate] ### step  8359 ###
28.985[zip.saturate]
    given (8359 steps, penalty 1):
      `forall (X0:a) (X1:poly_a) (X2:a) (X3:a).
       [synthetic_div_a (pCons_a X2 X1) X0 ≠ monom_a X3 zero_zero_nat+* ∨ 
        synthetic_div_a X1 X0 = zero_zero_poly_a]/8549`
29.069[zip.saturate] ### step  8456 ###
29.069[zip.saturate]
    given (8456 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (F0 (sk_P313 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)*]/4943`
29.104[zip.saturate] ### step  8480 ###
29.104[zip.saturate]
    given (8480 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (F0 (sk_P313 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)*]/4945`
29.130[zip.saturate] ### step  8485 ###
29.130[zip.saturate]
    given (8485 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a (F0 (sk_P313 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)*]/4946`
29.164[zip.saturate] ### step  8486 ###
29.164[zip.saturate]
    given (8486 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:nat) (X2:nat).
       [if_nat (F0 (sk_P313 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)*]/4947`
29.223[zip.saturate] ### step  8502 ###
29.223[zip.saturate]
    given (8502 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [sk_N21 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_zero_poly_nat* ∨ 
        ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/41591`
29.252[zip.saturate] ### step  8506 ###
29.252[zip.saturate]
    given (8506 steps, penalty 1):
      `forall (F0:poly_poly_nat → bool) (X1:a) (X2:a).
       [if_a (F0 (sk_P313 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z1059985641ly_nat)*]/4948`
29.271[zip.saturate] ### step  8507 ###
29.271[zip.saturate]
    given (8507 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_poly_a) 
              (X2:poly_poly_a).
       [if_poly_poly_a (F0 (sk_P314 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)*]/5165`
29.292[zip.saturate] ### step  8508 ###
29.292[zip.saturate]
    given (8508 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (F0 (sk_P314 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)*]/5167`
29.318[zip.saturate] ### step  8509 ###
29.318[zip.saturate]
    given (8509 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a (F0 (sk_P314 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)*]/5168`
29.364[zip.saturate] ### step  8533 ###
29.364[zip.saturate]
    given (8533 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:nat) (X2:nat).
       [if_nat (F0 (sk_P314 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)*]/5169`
29.396[zip.saturate] ### step  8538 ###
29.397[zip.saturate]
    given (8538 steps, penalty 1):
      `forall (F0:poly_poly_poly_a → bool) (X1:a) (X2:a).
       [if_a (F0 (sk_P314 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_z2064990175poly_a)*]/5170`
29.417[zip.saturate] ### step  8539 ###
29.417[zip.saturate]
    given (8539 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_poly_a) (X2:poly_poly_a).
       [if_poly_poly_a (F0 (sk_P315 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)*]/5241`
29.463[zip.saturate] ### step  8555 ###
29.464[zip.saturate]
    given (8555 steps, penalty 1):
      `forall (X0:poly_nat) (X1:nat).
       [sk_N2 (ord_less_nat zero_zero_nat) = zero_zero_nat* ∨ 
        X0 = zero_zero_poly_nat* ∨ 
        ord_less_nat zero_zero_nat X1 ≠ fFalse+*]/41865`
29.748[zip.saturate] ### step  8830 ###
29.748[zip.saturate]
    given (8830 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_nat) (X2:poly_nat).
       [if_poly_nat (F0 (sk_P315 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)*]/5243`
29.767[zip.saturate] ### step  8831 ###
29.767[zip.saturate]
    given (8831 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:poly_a) (X2:poly_a).
       [if_poly_a (F0 (sk_P315 F0)) X1 X2 = X1* ∨ 
        ¬pp (F0 zero_zero_poly_a)*]/5244`
29.798[zip.saturate] ### step  8836 ###
29.798[zip.saturate]
    given (8836 steps, penalty 1):
      `forall (F0:poly_a → bool) (X1:nat) (X2:nat).
       [if_nat (F0 (sk_P315 F0)) X1 X2 = X1* ∨ ¬pp (F0 zero_zero_poly_a)*]/5245`
# done 8837 iterations in 29.825s
# SZS status ResourceOut for '/home/petar/Documents/JD-lf/judgment_day_lifting_256/fta/fta0250.pfho.p'
