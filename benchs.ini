; define provers

[benchmark]

db_file = benchs.db
timeout = 120
logLevel = info
memory = 512000

; default profile
profile = test

; profile for tests
[test]

timeout = 30
provers = spass,zip,zip-kbo,zip-why3,zip-why3-kbo,read_status

; profile for benchmarking
[bench]

timeout = 120
provers = spass,eprover,zip-gc-lemma,zip-lemma,zip,read_status

; profile for arith
[arith]
timeout = 30
provers = zip-arith,beagle,princess,read_status

; here be provers

[spass]

cmd = SPASS -TPTP -TimeLimit={time} -PGiven=0 -Memory=512000000 {file}
unsat = proof found
sat = completion found

[eprover]

cmd = eprover -xAuto -tAuto --cpu-limit={time} --memory-limit=512 --tstp-in -l0 {file}
unsat = # Proof found
sat = # No proof found

[zip-gc-lemma]

setup = ./zipperposition.native -kb kb_gc_lemma -kb-clear;
    ./zipperposition.native -kb kb_gc_lemma -kb-load ./builtin.theory
cmd = ./zipperposition.native {file} -timeout {time} -kb kb_gc_lemma
unsat = SZS Status Theorem
sat = SZS Status CounterSatisfiable
stats = % json_stats: (.*)$

[zip-lemma]

setup = ./zipperposition.native -kb kb_lemma -kb-clear;
    ./zipperposition.native -kb kb_lemma -kb-load ./builtin_lemma.theory
cmd = ./zipperposition.native {file} -timeout {time} -kb kb_lemma
unsat = SZS Status Theorem
sat = SZS Status CounterSatisfiable

[zip]

cmd = ./zipperposition.native {file} -timeout {time}
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS Status (CounterSatisfiable|Satisfiable)

[zip-kbo]

cmd = ./zipperposition.native {file} -timeout {time} -ord kbo
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS Status (CounterSatisfiable|Satisfiable)

[zip-why3]

cmd = ./zipperposition.native {file} -timeout {time} -clause-queue why3
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS Status (CounterSatisfiable|Satisfiable)

[zip-why3-kbo]

cmd = ./zipperposition.native {file} -timeout {time} -clause-queue why3 -ord kbo
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS Status (CounterSatisfiable|Satisfiable)


[zip-arith]

cmd = ./zipperposition.native {file} -timeout {time} -arith
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS Status (CounterSatisfiable|Satisfiable)

[iprover]

cmd = iproveropt --eprover_path ~/bin --instantiation_flag true --time_out_real {time} {file}
unsat = SZS Status (Theorem|Unsatisfiable)
sat = SZS status CounterSatisfiable

[beagle]

cmd = ./utils/cpulimit {time} beagle -tptp "/home/simon/workspace/these/TPTP-v5.4.0/" {file}
unsat = SZS status (Theorem|Unsatisfiable)
sat = SZS status CounterSatisfiable

[princess]
cmd = ./utils/cpulimit {time} princess {file}
unsat = ^VALID
sat = ^INVALID

[read_status]
; "prover" that just reads the status from a file
cmd = awk '/^% Status/ {{ print $4 }}' {file}
unsat = (Theorem|Unsatisfiable)
sat = (CounterSatisfiable|Satisfiable)
