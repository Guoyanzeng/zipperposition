# vi: set ft=ruby :
#
Vagrant.configure("2") do |config|
  config.vm.box = "debian/buster64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    #vb.gui = true
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "1500"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update -y
    apt-get install git unzip xfce4 opam mccs -y
    apt-get install fish kitty-terminfo libgmp-dev -y
    apt-get remove gringo -y
    apt-get install emacs vim
    chsh -s /usr/bin/fish vagrant
  SHELL

  # NOTE: faster to just `git clone`, somehow. Also doesn't copy _build/ or symlinks.
  #config.vm.provision("file", source: "../", destination: "$HOME/zipperposition")

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    mkdir -p ~/.config/fish/
    echo 'source $HOME/.opam/opam-init/init.fish > /dev/null 2> /dev/null; or true' > ~/.config/fish/config.fish
    git clone https://github.com/sneeuwballen/zipperposition.git zipperposition
    opam init -y
    opam update -y
    opam switch create 4.08.1 -y
    eval `opam env`
    opam pin zipperposition#HEAD -y -n
    opam install zipperposition -y
    opam install ocp-indent merlin -y
  SHELL

  # vscode
  config.vm.provision "shell", inline: <<-SHELL
    apt-get install software-properties-common -y
    wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | sudo apt-key add -
    apt-add-repository 'deb https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/repos/debs/ vscodium main'
    apt update -y
    apt install codium -y
  SHELL
end
