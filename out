0.003[zip] terminate phase parse_cli
0.003[zip] start phase load_extensions
0.003[zip] register extension `superposition`...
0.003[zip] register extension `ac`...
0.003[zip] register extension `heuristics`...
0.003[zip] register extension `avatar`...
0.003[zip] register extension `induction_simple`...
0.003[zip] register extension `rewriting`...
0.004[zip] register extension `arith_int`...
0.004[zip] register extension `arith_rat`...
0.004[zip] register extension `ind_types`...
0.004[zip] terminate phase load_extensions
0.004[zip] start phase parse_prelude
0.004[zip] terminate phase parse_prelude
0.004[zip] start phase start_file
0.004[zip]
    ### process file
    `/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p` ###
0.004[zip] terminate phase start_file
0.004[zip] start phase parse_file
0.005[zip] terminate phase parse_file
0.005[zip] start phase typing
0.005[zip]
    typed statements
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cQ_4"] cQ_4 :
        ι → ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "f"] f :
        ι → ι., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cP_3"] cP_3 :
        ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cQ_3"] cQ_3 :
        ι → ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "d"] d :
        ι., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "c"] c :
        ι., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "b"] b :
        ι., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "a"] a :
        ι., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cP_2"] cP_2 :
        ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cQ_2"] cQ_2 :
        ι → ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cP_1"] cP_1 :
        ι → ι → prop., 
      val
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cQ_1"] cQ_1 :
        ι → ι → ι → prop., 
      goal
        [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
         "cTHM409_3"]
        ¬ ((∀ Xx/44 Xy/45 Xz/46. (¬ (cQ_4 Xx/44 Xy/45 Xz/46)))
            ∧ (∀ Xx/38 Xy/39 Xz/40 Xu/41 Xv/42 Xw/43.
                   ((cQ_4 Xu/41 Xv/42 Xw/43)
                    ∨ (¬ (cP_3 (f Xz/40) Xw/43))
                    ∨ (¬ (cP_3 (f Xy/39) Xv/42))
                    ∨ (¬ (cP_3 (f Xx/38) Xu/41))
                    ∨ (¬ (cQ_3 Xx/38 Xy/39 Xz/40))))
            ∧ (∀ Xx/36 Xy/37.
                   ((cP_3 (f Xx/36) Xy/37) ∨ (¬ (cP_3 Xx/36 Xy/37))))
            ∧ (∀ Xx/35. (cP_3 d Xx/35))
            ∧ (cP_3 c c)
            ∧ (cP_3 b b)
            ∧ (cP_3 a a)
            ∧ (∀ Xx/29 Xy/30 Xz/31 Xu/32 Xv/33 Xw/34.
                   ((cQ_3 Xu/32 Xv/33 Xw/34)
                    ∨ (¬ (cP_2 (f Xz/31) Xw/34))
                    ∨ (¬ (cP_2 (f Xy/30) Xv/33))
                    ∨ (¬ (cP_2 (f Xx/29) Xu/32))
                    ∨ (¬ (cQ_2 Xx/29 Xy/30 Xz/31))))
            ∧ (∀ Xx/27 Xy/28.
                   ((cP_2 (f Xx/27) Xy/28) ∨ (¬ (cP_2 Xx/27 Xy/28))))
            ∧ (∀ Xx/26. (cP_2 d Xx/26))
            ∧ (cP_2 c c)
            ∧ (cP_2 b b)
            ∧ (cP_2 a a)
            ∧ (∀ Xx/20 Xy/21 Xz/22 Xu/23 Xv/24 Xw/25.
                   ((cQ_2 Xu/23 Xv/24 Xw/25)
                    ∨ (¬ (cP_1 (f Xz/22) Xw/25))
                    ∨ (¬ (cP_1 (f Xy/21) Xv/24))
                    ∨ (¬ (cP_1 (f Xx/20) Xu/23))
                    ∨ (¬ (cQ_1 Xx/20 Xy/21 Xz/22))))
            ∧ (∀ Xx/18 Xy/19.
                   ((cP_1 (f Xx/18) Xy/19) ∨ (¬ (cP_1 Xx/18 Xy/19))))
            ∧ (∀ Xx/17. (cP_1 d Xx/17))
            ∧ (cP_1 c c)
            ∧ (cP_1 b b)
            ∧ (cP_1 a a)
            ∧ (cQ_1 a b c)).
0.007[zip.int-arith] decision to register arith: false
0.007[zip.rat-arith] decision to register rat-arith: false
0.007[zip] terminate phase typing
0.007[zip] parsed 13 declarations (some goal(s))
0.007[zip] start phase cnf
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cQ_4"] cQ_4 :
         ι → ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cQ_4"] cQ_4 :
            ι → ι → ι → prop.`
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "f"] f :
         ι → ι.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" "f"] f :
            ι → ι.`
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cP_3"] cP_3 :
         ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cP_3"] cP_3 :
            ι → ι → prop.`
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cQ_3"] cQ_3 :
         ι → ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cQ_3"] cQ_3 :
            ι → ι → ι → prop.`
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "d"] d :
         ι.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" "d"] d :
            ι.`
0.009[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "c"] c :
         ι.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" "c"] c :
            ι.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "b"] b :
         ι.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" "b"] b :
            ι.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "a"] a :
         ι.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" "a"] a :
            ι.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cP_2"] cP_2 :
         ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cP_2"] cP_2 :
            ι → ι → prop.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cQ_2"] cQ_2 :
         ι → ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cQ_2"] cQ_2 :
            ι → ι → ι → prop.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cP_1"] cP_1 :
         ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cP_1"] cP_1 :
            ι → ι → prop.`
0.010[cnf]
    convert
      `val
         [file "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
          "cQ_1"] cQ_1 :
         ι → ι → ι → prop.`
    into `val
            [file
             "/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p" 
             "cQ_1"] cQ_1 :
            ι → ι → ι → prop.`
0.010[cnf]
    convert
      `negated_goal
         cQ_1 a b c, 
         cP_1 a a, 
         cP_1 b b, 
         cP_1 c c, 
         cP_1 d Xx/76, 
         cP_1 (f Xx/74) Xy/75 ∨ ¬ cP_1 Xx/74 Xy/75, 
         ¬ cP_1 (f Xy/69) Xv/72 ∨ 
         ¬ cP_1 (f Xx/68) Xu/71 ∨ 
         ¬ cQ_1 Xx/68 Xy/69 Xz/70 ∨ 
         ¬ cP_1 (f Xz/70) Xw/73 ∨ 
         cQ_2 Xu/71 Xv/72 Xw/73, 
         cP_2 a a, 
         cP_2 b b, 
         cP_2 c c, 
         cP_2 d Xx/67, 
         cP_2 (f Xx/65) Xy/66 ∨ ¬ cP_2 Xx/65 Xy/66, 
         ¬ cP_2 (f Xy/60) Xv/63 ∨ 
         ¬ cP_2 (f Xx/59) Xu/62 ∨ 
         ¬ cQ_2 Xx/59 Xy/60 Xz/61 ∨ 
         ¬ cP_2 (f Xz/61) Xw/64 ∨ 
         cQ_3 Xu/62 Xv/63 Xw/64, 
         cP_3 a a, 
         cP_3 b b, 
         cP_3 c c, 
         cP_3 d Xx/58, 
         cP_3 (f Xx/56) Xy/57 ∨ ¬ cP_3 Xx/56 Xy/57, 
         ¬ cP_3 (f Xy/51) Xv/54 ∨ 
         ¬ cP_3 (f Xx/50) Xu/53 ∨ 
         ¬ cQ_3 Xx/50 Xy/51 Xz/52 ∨ 
         ¬ cP_3 (f Xz/52) Xw/55 ∨ 
         cQ_4 Xu/53 Xv/54 Xw/55, 
         ¬ cQ_4 Xx/47 Xy/48 Xz/49
         # skolems: [].`
    into `negated_goal
            cQ_1 a b c, 
            cP_1 a a, 
            cP_1 b b, 
            cP_1 c c, 
            cP_1 d X0, 
            cP_1 (f X1) X2 ∨ ¬ cP_1 X1 X2, 
            ¬ cP_1 (f X3) X4 ∨ ¬ cP_1 (f X5) X6 ∨ ¬ cQ_1 X5 X3 X7 ∨ 
            ¬ cP_1 (f X7) X8 ∨ cQ_2 X6 X4 X8, 
            cP_2 a a, 
            cP_2 b b, 
            cP_2 c c, 
            cP_2 d X9, 
            cP_2 (f X10) X11 ∨ ¬ cP_2 X10 X11, 
            ¬ cP_2 (f X12) X13 ∨ ¬ cP_2 (f X14) X15 ∨ 
            ¬ cQ_2 X14 X12 X16 ∨ ¬ cP_2 (f X16) X17 ∨ cQ_3 X15 X13 X17, 
            cP_3 a a, 
            cP_3 b b, 
            cP_3 c c, 
            cP_3 d X18, 
            cP_3 (f X19) X20 ∨ ¬ cP_3 X19 X20, 
            ¬ cP_3 (f X21) X22 ∨ ¬ cP_3 (f X23) X24 ∨ 
            ¬ cQ_3 X23 X21 X25 ∨ ¬ cP_3 (f X25) X26 ∨ cQ_4 X24 X22 X26, 
            ¬ cQ_4 X27 X28 X29
            # skolems: [].`
0.011[zip] terminate phase cnf
0.011[zip] start phase compute_prec
0.011[compute_prec] 2 precedence constraint(s)
0.011[zip] terminate phase compute_prec
0.011[zip]
    precedence:
      [f < cP_1 < cP_2 < cP_3 < a < b < c < d < cQ_1 < cQ_2 < cQ_3 < cQ_4]
0.011[zip] start phase compute_ord_select
0.011[zip] ordering kbo
0.011[zip] selection function: MaxGoalNS
0.011[zip] terminate phase compute_ord_select
0.011[zip] start phase make_ctx
0.011[zip] terminate phase make_ctx
0.011[zip] start phase make_env
0.011[] create new SAT solver
0.012[] enable Avatar
0.012[zip] register extension Avatar (split: false)
0.012[zip.heuristics] register heuristics...
0.012[ind_ty] setup inductive types calculus
0.012[rewrite] register Rewriting to Env...
0.012[zip.env] [ Adding rule rewrite_defs to env ]
0.012[zip.env] trigger on_input_statement
0.012[zip.env]
    clauses:
      [cQ_1 a b c*]/id:0/depth:0 
      [cP_1 a a*]/id:1/depth:0 
      [cP_1 b b*]/id:2/depth:0 
      [cP_1 c c*]/id:3/depth:0 
      forall X0. [cP_1 d X0*]/id:4/depth:0 
      forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0 
      forall X3 X4 X5 X6 X7 X8.
      [¬cP_1 (f X3) X4+* ∨ ¬cP_1 (f X5) X6* ∨ ¬cQ_1 X5 X3 X7* ∨ 
       ¬cP_1 (f X7) X8* ∨ cQ_2 X6 X4 X8+*]/id:6/depth:0 
      [cP_2 a a*]/id:7/depth:0 
      [cP_2 b b*]/id:8/depth:0 
      [cP_2 c c*]/id:9/depth:0 
      forall X9. [cP_2 d X9*]/id:10/depth:0 
      forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0 
      forall X12 X13 X14 X15 X16 X17.
      [¬cP_2 (f X12) X13+* ∨ ¬cP_2 (f X14) X15* ∨ 
       ¬cQ_2 X14 X12 X16* ∨ ¬cP_2 (f X16) X17* ∨ cQ_3 X15 X13 X17+*]/id:12/depth:0 
      [cP_3 a a*]/id:13/depth:0 
      [cP_3 b b*]/id:14/depth:0 
      [cP_3 c c*]/id:15/depth:0 
      forall X18. [cP_3 d X18*]/id:16/depth:0 
      forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0 
      forall X21 X22 X23 X24 X25 X26.
      [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
       ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26* ∨ cQ_4 X24 X22 X26+*]/id:18/depth:0 
      forall X27 X28 X29. [¬cQ_4 X27 X28 X29*]/id:19/depth:0
    sos: 
0.013[zip] terminate phase make_env
0.013[zip] start phase pre_saturate
0.013[zip] terminate phase pre_saturate
0.013[zip] start phase saturate
0.013[zip] run for 1.000 s
0.013[zip.sup] @[neg_reflect did not simplify the clause @]
0.014[zip.sup] @[neg_reflect did not simplify the clause @]
0.014[zip.saturate] ### step     0 ###
0.014[zip.saturate] given (0 steps, penalty 1): `[cP_1 a a*]/id:1/depth:0`
0.014[zip.env] apply binary rule superposition_active
0.014[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[0] s=cP_1 a a t=true)
      ([cP_1 a a*]/id:1/depth:0[1] passive_lit=cP_1 a a p=0.←.ε)
      with subst={}.

0.014[zip.sup] will yield a tautology
0.014[zip.sup] ... cancel, will yield a tautology
0.014[zip.env] apply binary rule superposition_passive
0.014[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      ([cP_1 a a*]/id:1/depth:0[0] passive_lit=cP_1 a a p=0.←.ε)
      with subst={}.

0.014[zip.sup] will yield a tautology
0.014[zip.sup] ... cancel, will yield a tautology
0.014[zip.env] apply binary rule ctx_narrow
0.014[zip.env] apply binary rule narrow_term_defs
0.014[zip.env] do unary inferences
0.014[zip.env] apply unary rule equality_resolution
0.014[zip.env] apply unary rule equality_factoring
0.014[zip.env] apply unary rule narrow_lit_defs
0.014[zip.env] apply unary rule ind_types.exhaustiveness
0.014[zip.env] apply unary rule ind_types.acyclicity
0.014[zip.env] apply unary rule avatar_check_empty
0.014[zip.env] apply generating rule avatar.lemmas (full: false)
0.014[zip.env] apply generating rule avatar_check_sat (full: false)
0.014[zip.avatar] SAT-solver reports "SAT"
0.014[zip.saturate] inferred new clauses: []
0.014[zip.sup] @[neg_reflect did not simplify the clause @]
0.014[zip.sup] @[neg_reflect did not simplify the clause @]
0.014[zip.saturate] ### step     1 ###
0.014[zip.saturate] given (1 steps, penalty 1): `[cP_1 b b*]/id:2/depth:0`
0.014[zip.env] apply binary rule superposition_active
0.014[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[0] s=cP_1 b b t=true)
      ([cP_1 b b*]/id:2/depth:0[1] passive_lit=cP_1 b b p=0.←.ε)
      with subst={}.

0.014[zip.sup] will yield a tautology
0.014[zip.sup] ... cancel, will yield a tautology
0.014[zip.env] apply binary rule superposition_passive
0.014[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      ([cP_1 b b*]/id:2/depth:0[0] passive_lit=cP_1 b b p=0.←.ε)
      with subst={}.

0.014[zip.sup] will yield a tautology
0.014[zip.sup] ... cancel, will yield a tautology
0.014[zip.env] apply binary rule ctx_narrow
0.014[zip.env] apply binary rule narrow_term_defs
0.014[zip.env] do unary inferences
0.014[zip.env] apply unary rule equality_resolution
0.014[zip.env] apply unary rule equality_factoring
0.014[zip.env] apply unary rule narrow_lit_defs
0.014[zip.env] apply unary rule ind_types.exhaustiveness
0.014[zip.env] apply unary rule ind_types.acyclicity
0.014[zip.env] apply unary rule avatar_check_empty
0.014[zip.env] apply generating rule avatar.lemmas (full: false)
0.014[zip.env] apply generating rule avatar_check_sat (full: false)
0.014[zip.avatar] SAT-solver reports "SAT"
0.015[zip.saturate] inferred new clauses: []
0.015[zip.sup] @[neg_reflect did not simplify the clause @]
0.015[zip.sup] @[neg_reflect did not simplify the clause @]
0.015[zip.saturate] ### step     2 ###
0.015[zip.saturate] given (2 steps, penalty 1): `[cP_1 c c*]/id:3/depth:0`
0.015[zip.env] apply binary rule superposition_active
0.015[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[0] s=cP_1 c c t=true)
      ([cP_1 c c*]/id:3/depth:0[1] passive_lit=cP_1 c c p=0.←.ε)
      with subst={}.

0.015[zip.sup] will yield a tautology
0.015[zip.sup] ... cancel, will yield a tautology
0.015[zip.env] apply binary rule superposition_passive
0.015[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      ([cP_1 c c*]/id:3/depth:0[0] passive_lit=cP_1 c c p=0.←.ε)
      with subst={}.

0.015[zip.sup] will yield a tautology
0.015[zip.sup] ... cancel, will yield a tautology
0.015[zip.env] apply binary rule ctx_narrow
0.015[zip.env] apply binary rule narrow_term_defs
0.015[zip.env] do unary inferences
0.015[zip.env] apply unary rule equality_resolution
0.015[zip.env] apply unary rule equality_factoring
0.015[zip.env] apply unary rule narrow_lit_defs
0.015[zip.env] apply unary rule ind_types.exhaustiveness
0.015[zip.env] apply unary rule ind_types.acyclicity
0.015[zip.env] apply unary rule avatar_check_empty
0.015[zip.env] apply generating rule avatar.lemmas (full: false)
0.015[zip.env] apply generating rule avatar_check_sat (full: false)
0.015[zip.avatar] SAT-solver reports "SAT"
0.015[zip.saturate] inferred new clauses: []
0.015[zip.sup] @[neg_reflect did not simplify the clause @]
0.015[zip.sup] @[neg_reflect did not simplify the clause @]
0.015[zip.saturate] ### step     3 ###
0.015[zip.saturate]
    given (3 steps, penalty 1): `forall X0. [cP_1 d X0*]/id:4/depth:0`
0.016[zip.env] apply binary rule superposition_active
0.016[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[0] s=cP_1 d X0 t=true)
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] passive_lit=cP_1 d X0
         p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.016[zip.sup] will yield a tautology
0.016[zip.sup] ... cancel, will yield a tautology
0.016[zip.env] apply binary rule superposition_passive
0.016[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0. [cP_1 d X0*]/id:4/depth:0[0] passive_lit=cP_1 d X0
         p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.016[zip.sup] will yield a tautology
0.016[zip.sup] ... cancel, will yield a tautology
0.016[zip.env] apply binary rule ctx_narrow
0.016[zip.env] apply binary rule narrow_term_defs
0.016[zip.env] do unary inferences
0.016[zip.env] apply unary rule equality_resolution
0.016[zip.env] apply unary rule equality_factoring
0.016[zip.env] apply unary rule narrow_lit_defs
0.016[zip.env] apply unary rule ind_types.exhaustiveness
0.016[zip.env] apply unary rule ind_types.acyclicity
0.016[zip.env] apply unary rule avatar_check_empty
0.016[zip.env] apply generating rule avatar.lemmas (full: false)
0.016[zip.env] apply generating rule avatar_check_sat (full: false)
0.016[zip.avatar] SAT-solver reports "SAT"
0.016[zip.saturate] inferred new clauses: []
0.016[zip.sup] @[neg_reflect did not simplify the clause @]
0.016[zip.sup] @[neg_reflect did not simplify the clause @]
0.016[zip.saturate] ### step     4 ###
0.016[zip.saturate] given (4 steps, penalty 1): `[cP_2 a a*]/id:7/depth:0`
0.016[zip.env] apply binary rule superposition_active
0.017[zip.sup]
    sup, kind sup ([cP_2 a a*]/id:7/depth:0[0] s=cP_2 a a t=true)
      ([cP_2 a a*]/id:7/depth:0[1] passive_lit=cP_2 a a p=0.←.ε)
      with subst={}.

0.017[zip.sup] will yield a tautology
0.017[zip.sup] ... cancel, will yield a tautology
0.017[zip.env] apply binary rule superposition_passive
0.017[zip.sup]
    sup, kind sup ([cP_2 a a*]/id:7/depth:0[1] s=cP_2 a a t=true)
      ([cP_2 a a*]/id:7/depth:0[0] passive_lit=cP_2 a a p=0.←.ε)
      with subst={}.

0.017[zip.sup] will yield a tautology
0.017[zip.sup] ... cancel, will yield a tautology
0.017[zip.env] apply binary rule ctx_narrow
0.017[zip.env] apply binary rule narrow_term_defs
0.017[zip.env] do unary inferences
0.017[zip.env] apply unary rule equality_resolution
0.017[zip.env] apply unary rule equality_factoring
0.017[zip.env] apply unary rule narrow_lit_defs
0.017[zip.env] apply unary rule ind_types.exhaustiveness
0.017[zip.env] apply unary rule ind_types.acyclicity
0.017[zip.env] apply unary rule avatar_check_empty
0.017[zip.env] apply generating rule avatar.lemmas (full: false)
0.017[zip.env] apply generating rule avatar_check_sat (full: false)
0.017[zip.avatar] SAT-solver reports "SAT"
0.017[zip.saturate] inferred new clauses: []
0.017[zip.sup] @[neg_reflect did not simplify the clause @]
0.017[zip.sup] @[neg_reflect did not simplify the clause @]
0.017[zip.saturate] ### step     5 ###
0.017[zip.saturate] given (5 steps, penalty 1): `[cP_2 b b*]/id:8/depth:0`
0.017[zip.env] apply binary rule superposition_active
0.017[zip.sup]
    sup, kind sup ([cP_2 b b*]/id:8/depth:0[0] s=cP_2 b b t=true)
      ([cP_2 b b*]/id:8/depth:0[1] passive_lit=cP_2 b b p=0.←.ε)
      with subst={}.

0.017[zip.sup] will yield a tautology
0.017[zip.sup] ... cancel, will yield a tautology
0.017[zip.env] apply binary rule superposition_passive
0.017[zip.sup]
    sup, kind sup ([cP_2 b b*]/id:8/depth:0[1] s=cP_2 b b t=true)
      ([cP_2 b b*]/id:8/depth:0[0] passive_lit=cP_2 b b p=0.←.ε)
      with subst={}.

0.018[zip.sup] will yield a tautology
0.018[zip.sup] ... cancel, will yield a tautology
0.018[zip.env] apply binary rule ctx_narrow
0.018[zip.env] apply binary rule narrow_term_defs
0.018[zip.env] do unary inferences
0.018[zip.env] apply unary rule equality_resolution
0.018[zip.env] apply unary rule equality_factoring
0.018[zip.env] apply unary rule narrow_lit_defs
0.018[zip.env] apply unary rule ind_types.exhaustiveness
0.018[zip.env] apply unary rule ind_types.acyclicity
0.018[zip.env] apply unary rule avatar_check_empty
0.018[zip.env] apply generating rule avatar.lemmas (full: false)
0.018[zip.env] apply generating rule avatar_check_sat (full: false)
0.018[zip.avatar] SAT-solver reports "SAT"
0.018[zip.saturate] inferred new clauses: []
0.018[zip.sup] @[neg_reflect did not simplify the clause @]
0.018[zip.sup] @[neg_reflect did not simplify the clause @]
0.018[zip.saturate] ### step     6 ###
0.018[zip.saturate] given (6 steps, penalty 1): `[cQ_1 a b c*]/id:0/depth:0`
0.018[zip.env] apply binary rule superposition_active
0.018[zip.sup]
    sup, kind sup ([cQ_1 a b c*]/id:0/depth:0[0] s=cQ_1 a b c t=true)
      ([cQ_1 a b c*]/id:0/depth:0[1] passive_lit=cQ_1 a b c p=0.←.ε)
      with subst={}.

0.018[zip.sup] will yield a tautology
0.018[zip.sup] ... cancel, will yield a tautology
0.018[zip.env] apply binary rule superposition_passive
0.018[zip.sup]
    sup, kind sup ([cQ_1 a b c*]/id:0/depth:0[1] s=cQ_1 a b c t=true)
      ([cQ_1 a b c*]/id:0/depth:0[0] passive_lit=cQ_1 a b c p=0.←.ε)
      with subst={}.

0.018[zip.sup] will yield a tautology
0.018[zip.sup] ... cancel, will yield a tautology
0.018[zip.env] apply binary rule ctx_narrow
0.018[zip.env] apply binary rule narrow_term_defs
0.018[zip.env] do unary inferences
0.018[zip.env] apply unary rule equality_resolution
0.018[zip.env] apply unary rule equality_factoring
0.018[zip.env] apply unary rule narrow_lit_defs
0.018[zip.env] apply unary rule ind_types.exhaustiveness
0.018[zip.env] apply unary rule ind_types.acyclicity
0.018[zip.env] apply unary rule avatar_check_empty
0.018[zip.env] apply generating rule avatar.lemmas (full: false)
0.018[zip.env] apply generating rule avatar_check_sat (full: false)
0.018[zip.avatar] SAT-solver reports "SAT"
0.018[zip.saturate] inferred new clauses: []
0.018[zip.sup] @[neg_reflect did not simplify the clause @]
0.018[zip.sup] @[neg_reflect did not simplify the clause @]
0.018[zip.saturate] ### step     7 ###
0.018[zip.saturate] given (7 steps, penalty 1): `[cP_2 c c*]/id:9/depth:0`
0.019[zip.env] apply binary rule superposition_active
0.019[zip.sup]
    sup, kind sup ([cP_2 c c*]/id:9/depth:0[0] s=cP_2 c c t=true)
      ([cP_2 c c*]/id:9/depth:0[1] passive_lit=cP_2 c c p=0.←.ε)
      with subst={}.

0.019[zip.sup] will yield a tautology
0.019[zip.sup] ... cancel, will yield a tautology
0.019[zip.env] apply binary rule superposition_passive
0.019[zip.sup]
    sup, kind sup ([cP_2 c c*]/id:9/depth:0[1] s=cP_2 c c t=true)
      ([cP_2 c c*]/id:9/depth:0[0] passive_lit=cP_2 c c p=0.←.ε)
      with subst={}.

0.019[zip.sup] will yield a tautology
0.019[zip.sup] ... cancel, will yield a tautology
0.019[zip.env] apply binary rule ctx_narrow
0.019[zip.env] apply binary rule narrow_term_defs
0.019[zip.env] do unary inferences
0.019[zip.env] apply unary rule equality_resolution
0.019[zip.env] apply unary rule equality_factoring
0.019[zip.env] apply unary rule narrow_lit_defs
0.019[zip.env] apply unary rule ind_types.exhaustiveness
0.019[zip.env] apply unary rule ind_types.acyclicity
0.019[zip.env] apply unary rule avatar_check_empty
0.019[zip.env] apply generating rule avatar.lemmas (full: false)
0.019[zip.env] apply generating rule avatar_check_sat (full: false)
0.019[zip.avatar] SAT-solver reports "SAT"
0.019[zip.saturate] inferred new clauses: []
0.019[zip.sup] @[neg_reflect did not simplify the clause @]
0.019[zip.sup] @[neg_reflect did not simplify the clause @]
0.019[zip.saturate] ### step     8 ###
0.019[zip.saturate]
    given (8 steps, penalty 1): `forall X9. [cP_2 d X9*]/id:10/depth:0`
0.019[zip.env] apply binary rule superposition_active
0.019[zip.sup]
    sup, kind sup
      (forall X9. [cP_2 d X9*]/id:10/depth:0[0] s=cP_2 d X9 t=true)
      (forall X9. [cP_2 d X9*]/id:10/depth:0[1] passive_lit=cP_2 d X9
         p=0.←.ε)
      with subst={X9[1] → X9[0]}.

0.019[zip.sup] will yield a tautology
0.019[zip.sup] ... cancel, will yield a tautology
0.019[zip.env] apply binary rule superposition_passive
0.019[zip.sup]
    sup, kind sup
      (forall X9. [cP_2 d X9*]/id:10/depth:0[1] s=cP_2 d X9 t=true)
      (forall X9. [cP_2 d X9*]/id:10/depth:0[0] passive_lit=cP_2 d X9
         p=0.←.ε)
      with subst={X9[1] → X9[0]}.

0.019[zip.sup] will yield a tautology
0.019[zip.sup] ... cancel, will yield a tautology
0.019[zip.env] apply binary rule ctx_narrow
0.019[zip.env] apply binary rule narrow_term_defs
0.019[zip.env] do unary inferences
0.019[zip.env] apply unary rule equality_resolution
0.019[zip.env] apply unary rule equality_factoring
0.019[zip.env] apply unary rule narrow_lit_defs
0.019[zip.env] apply unary rule ind_types.exhaustiveness
0.019[zip.env] apply unary rule ind_types.acyclicity
0.019[zip.env] apply unary rule avatar_check_empty
0.019[zip.env] apply generating rule avatar.lemmas (full: false)
0.019[zip.env] apply generating rule avatar_check_sat (full: false)
0.019[zip.avatar] SAT-solver reports "SAT"
0.019[zip.saturate] inferred new clauses: []
0.019[zip.sup] @[neg_reflect did not simplify the clause @]
0.019[zip.sup] @[neg_reflect did not simplify the clause @]
0.019[zip.saturate] ### step     9 ###
0.019[zip.saturate] given (9 steps, penalty 1): `[cP_3 a a*]/id:13/depth:0`
0.019[zip.env] apply binary rule superposition_active
0.019[zip.sup]
    sup, kind sup ([cP_3 a a*]/id:13/depth:0[0] s=cP_3 a a t=true)
      ([cP_3 a a*]/id:13/depth:0[1] passive_lit=cP_3 a a p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule superposition_passive
0.020[zip.sup]
    sup, kind sup ([cP_3 a a*]/id:13/depth:0[1] s=cP_3 a a t=true)
      ([cP_3 a a*]/id:13/depth:0[0] passive_lit=cP_3 a a p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule ctx_narrow
0.020[zip.env] apply binary rule narrow_term_defs
0.020[zip.env] do unary inferences
0.020[zip.env] apply unary rule equality_resolution
0.020[zip.env] apply unary rule equality_factoring
0.020[zip.env] apply unary rule narrow_lit_defs
0.020[zip.env] apply unary rule ind_types.exhaustiveness
0.020[zip.env] apply unary rule ind_types.acyclicity
0.020[zip.env] apply unary rule avatar_check_empty
0.020[zip.env] apply generating rule avatar.lemmas (full: false)
0.020[zip.env] apply generating rule avatar_check_sat (full: false)
0.020[zip.avatar] SAT-solver reports "SAT"
0.020[zip.saturate] inferred new clauses: []
0.020[zip.sup] @[neg_reflect did not simplify the clause @]
0.020[zip.sup] @[neg_reflect did not simplify the clause @]
0.020[zip.saturate] ### step    10 ###
0.020[zip.saturate] given (10 steps, penalty 1): `[cP_3 b b*]/id:14/depth:0`
0.020[zip.env] apply binary rule superposition_active
0.020[zip.sup]
    sup, kind sup ([cP_3 b b*]/id:14/depth:0[0] s=cP_3 b b t=true)
      ([cP_3 b b*]/id:14/depth:0[1] passive_lit=cP_3 b b p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule superposition_passive
0.020[zip.sup]
    sup, kind sup ([cP_3 b b*]/id:14/depth:0[1] s=cP_3 b b t=true)
      ([cP_3 b b*]/id:14/depth:0[0] passive_lit=cP_3 b b p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule ctx_narrow
0.020[zip.env] apply binary rule narrow_term_defs
0.020[zip.env] do unary inferences
0.020[zip.env] apply unary rule equality_resolution
0.020[zip.env] apply unary rule equality_factoring
0.020[zip.env] apply unary rule narrow_lit_defs
0.020[zip.env] apply unary rule ind_types.exhaustiveness
0.020[zip.env] apply unary rule ind_types.acyclicity
0.020[zip.env] apply unary rule avatar_check_empty
0.020[zip.env] apply generating rule avatar.lemmas (full: false)
0.020[zip.env] apply generating rule avatar_check_sat (full: false)
0.020[zip.avatar] SAT-solver reports "SAT"
0.020[zip.saturate] inferred new clauses: []
0.020[zip.sup] @[neg_reflect did not simplify the clause @]
0.020[zip.sup] @[neg_reflect did not simplify the clause @]
0.020[zip.saturate] ### step    11 ###
0.020[zip.saturate] given (11 steps, penalty 1): `[cP_3 c c*]/id:15/depth:0`
0.020[zip.env] apply binary rule superposition_active
0.020[zip.sup]
    sup, kind sup ([cP_3 c c*]/id:15/depth:0[0] s=cP_3 c c t=true)
      ([cP_3 c c*]/id:15/depth:0[1] passive_lit=cP_3 c c p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule superposition_passive
0.020[zip.sup]
    sup, kind sup ([cP_3 c c*]/id:15/depth:0[1] s=cP_3 c c t=true)
      ([cP_3 c c*]/id:15/depth:0[0] passive_lit=cP_3 c c p=0.←.ε)
      with subst={}.

0.020[zip.sup] will yield a tautology
0.020[zip.sup] ... cancel, will yield a tautology
0.020[zip.env] apply binary rule ctx_narrow
0.020[zip.env] apply binary rule narrow_term_defs
0.020[zip.env] do unary inferences
0.020[zip.env] apply unary rule equality_resolution
0.020[zip.env] apply unary rule equality_factoring
0.020[zip.env] apply unary rule narrow_lit_defs
0.021[zip.env] apply unary rule ind_types.exhaustiveness
0.021[zip.env] apply unary rule ind_types.acyclicity
0.021[zip.env] apply unary rule avatar_check_empty
0.021[zip.env] apply generating rule avatar.lemmas (full: false)
0.021[zip.env] apply generating rule avatar_check_sat (full: false)
0.021[zip.avatar] SAT-solver reports "SAT"
0.021[zip.saturate] inferred new clauses: []
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.saturate] ### step    12 ###
0.021[zip.saturate]
    given (12 steps, penalty 1): `forall X18. [cP_3 d X18*]/id:16/depth:0`
0.021[zip.env] apply binary rule superposition_active
0.021[zip.sup]
    sup, kind sup
      (forall X18. [cP_3 d X18*]/id:16/depth:0[0] s=cP_3 d X18 t=true)
      (forall X18. [cP_3 d X18*]/id:16/depth:0[1] passive_lit=cP_3 d X18
         p=0.←.ε)
      with subst={X18[1] → X18[0]}.

0.021[zip.sup] will yield a tautology
0.021[zip.sup] ... cancel, will yield a tautology
0.021[zip.env] apply binary rule superposition_passive
0.021[zip.sup]
    sup, kind sup
      (forall X18. [cP_3 d X18*]/id:16/depth:0[1] s=cP_3 d X18 t=true)
      (forall X18. [cP_3 d X18*]/id:16/depth:0[0] passive_lit=cP_3 d X18
         p=0.←.ε)
      with subst={X18[1] → X18[0]}.

0.021[zip.sup] will yield a tautology
0.021[zip.sup] ... cancel, will yield a tautology
0.021[zip.env] apply binary rule ctx_narrow
0.021[zip.env] apply binary rule narrow_term_defs
0.021[zip.env] do unary inferences
0.021[zip.env] apply unary rule equality_resolution
0.021[zip.env] apply unary rule equality_factoring
0.021[zip.env] apply unary rule narrow_lit_defs
0.021[zip.env] apply unary rule ind_types.exhaustiveness
0.021[zip.env] apply unary rule ind_types.acyclicity
0.021[zip.env] apply unary rule avatar_check_empty
0.021[zip.env] apply generating rule avatar.lemmas (full: false)
0.021[zip.env] apply generating rule avatar_check_sat (full: false)
0.021[zip.avatar] SAT-solver reports "SAT"
0.021[zip.saturate] inferred new clauses: []
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.saturate] ### step    13 ###
0.021[zip.saturate]
    given (13 steps, penalty 1):
      `forall X27 X28 X29. [¬cQ_4 X27 X28 X29*]/id:19/depth:0`
0.021[zip.env] apply binary rule superposition_active
0.021[zip.env] apply binary rule superposition_passive
0.021[zip.env] apply binary rule ctx_narrow
0.021[zip.env] apply binary rule narrow_term_defs
0.021[zip.env] do unary inferences
0.021[zip.env] apply unary rule equality_resolution
0.021[zip.env] apply unary rule equality_factoring
0.021[zip.env] apply unary rule narrow_lit_defs
0.021[zip.env] apply unary rule ind_types.exhaustiveness
0.021[zip.env] apply unary rule ind_types.acyclicity
0.021[zip.env] apply unary rule avatar_check_empty
0.021[zip.env] apply generating rule avatar.lemmas (full: false)
0.021[zip.env] apply generating rule avatar_check_sat (full: false)
0.021[zip.avatar] SAT-solver reports "SAT"
0.021[zip.saturate] inferred new clauses: []
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.sup] @[neg_reflect did not simplify the clause @]
0.021[zip.saturate] ### step    14 ###
0.021[zip.saturate]
    given (14 steps, penalty 1):
      `forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0`
0.022[zip.env] apply binary rule superposition_active
0.022[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[0]
         s=cP_1 (f X1) X2 t=true)
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         passive_lit=cP_1 (f X1) X2 p=0.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X2[0]}.

0.022[zip.sup] will yield a tautology
0.022[zip.sup] ... cancel, will yield a tautology
0.022[zip.env] apply binary rule superposition_passive
0.022[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[0]
         passive_lit=cP_1 (f X1) X2 p=0.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X2[0]}.

0.022[zip.sup] will yield a tautology
0.022[zip.sup] ... cancel, will yield a tautology
0.022[zip.env] apply binary rule ctx_narrow
0.022[zip.env] apply binary rule narrow_term_defs
0.022[zip.env] do unary inferences
0.022[zip.env] apply unary rule equality_resolution
0.022[zip.env] apply unary rule equality_factoring
0.022[zip.env] apply unary rule narrow_lit_defs
0.022[zip.env] apply unary rule ind_types.exhaustiveness
0.022[zip.env] apply unary rule ind_types.acyclicity
0.022[zip.env] apply unary rule avatar_check_empty
0.022[zip.env] apply generating rule avatar.lemmas (full: false)
0.022[zip.env] apply generating rule avatar_check_sat (full: false)
0.022[zip.avatar] SAT-solver reports "SAT"
0.022[zip.saturate] inferred new clauses: []
0.022[zip.sup] @[neg_reflect did not simplify the clause @]
0.022[zip.sup] @[neg_reflect did not simplify the clause @]
0.022[zip.saturate] ### step    15 ###
0.022[zip.saturate]
    given (15 steps, penalty 1):
      `forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0`
0.022[zip.env] apply binary rule superposition_active
0.022[zip.sup]
    sup, kind sup
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[0]
         s=cP_2 (f X10) X11 t=true)
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[1]
         passive_lit=cP_2 (f X10) X11 p=0.←.ε)
      with subst={X10[1] → X10[0], X11[1] → X11[0]}.

0.022[zip.sup] will yield a tautology
0.022[zip.sup] ... cancel, will yield a tautology
0.022[zip.env] apply binary rule superposition_passive
0.023[zip.sup]
    sup, kind sup
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[1]
         s=cP_2 (f X10) X11 t=true)
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[0]
         passive_lit=cP_2 (f X10) X11 p=0.←.ε)
      with subst={X10[1] → X10[0], X11[1] → X11[0]}.

0.023[zip.sup] will yield a tautology
0.023[zip.sup] ... cancel, will yield a tautology
0.023[zip.env] apply binary rule ctx_narrow
0.023[zip.env] apply binary rule narrow_term_defs
0.023[zip.env] do unary inferences
0.023[zip.env] apply unary rule equality_resolution
0.023[zip.env] apply unary rule equality_factoring
0.023[zip.env] apply unary rule narrow_lit_defs
0.023[zip.env] apply unary rule ind_types.exhaustiveness
0.023[zip.env] apply unary rule ind_types.acyclicity
0.023[zip.env] apply unary rule avatar_check_empty
0.023[zip.env] apply generating rule avatar.lemmas (full: false)
0.023[zip.env] apply generating rule avatar_check_sat (full: false)
0.023[zip.avatar] SAT-solver reports "SAT"
0.023[zip.saturate] inferred new clauses: []
0.023[zip.sup] @[neg_reflect did not simplify the clause @]
0.023[zip.sup] @[neg_reflect did not simplify the clause @]
0.023[zip.saturate] ### step    16 ###
0.023[zip.saturate]
    given (16 steps, penalty 1):
      `forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0`
0.023[zip.env] apply binary rule superposition_active
0.023[zip.sup]
    sup, kind sup
      (forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0[0]
         s=cP_3 (f X19) X20 t=true)
      (forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0[1]
         passive_lit=cP_3 (f X19) X20 p=0.←.ε)
      with subst={X19[1] → X19[0], X20[1] → X20[0]}.

0.023[zip.sup] will yield a tautology
0.023[zip.sup] ... cancel, will yield a tautology
0.023[zip.env] apply binary rule superposition_passive
0.023[zip.sup]
    sup, kind sup
      (forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0[1]
         s=cP_3 (f X19) X20 t=true)
      (forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0[0]
         passive_lit=cP_3 (f X19) X20 p=0.←.ε)
      with subst={X19[1] → X19[0], X20[1] → X20[0]}.

0.023[zip.sup] will yield a tautology
0.023[zip.sup] ... cancel, will yield a tautology
0.024[zip.env] apply binary rule ctx_narrow
0.024[zip.env] apply binary rule narrow_term_defs
0.024[zip.env] do unary inferences
0.024[zip.env] apply unary rule equality_resolution
0.024[zip.env] apply unary rule equality_factoring
0.024[zip.env] apply unary rule narrow_lit_defs
0.024[zip.env] apply unary rule ind_types.exhaustiveness
0.024[zip.env] apply unary rule ind_types.acyclicity
0.024[zip.env] apply unary rule avatar_check_empty
0.024[zip.env] apply generating rule avatar.lemmas (full: false)
0.024[zip.env] apply generating rule avatar_check_sat (full: false)
0.024[zip.avatar] SAT-solver reports "SAT"
0.024[zip.saturate] inferred new clauses: []
0.024[zip.sup] @[neg_reflect did not simplify the clause @]
0.024[zip.sup] @[neg_reflect did not simplify the clause @]
0.024[zip.saturate] ### step    17 ###
0.024[zip.saturate]
    given (17 steps, penalty 1):
      `forall X3 X4 X5 X6 X7 X8.
       [¬cP_1 (f X3) X4+* ∨ ¬cP_1 (f X5) X6* ∨ ¬cQ_1 X5 X3 X7* ∨ 
        ¬cP_1 (f X7) X8* ∨ cQ_2 X6 X4 X8+*]/id:6/depth:0`
0.024[zip.env] apply binary rule superposition_active
0.024[zip.env] apply binary rule superposition_passive
0.024[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X3 X4 X5 X6 X7 X8.
       [¬cP_1 (f X3) X4+* ∨ ¬cP_1 (f X5) X6* ∨ ¬cQ_1 X5 X3 X7* ∨ 
        ¬cP_1 (f X7) X8* ∨ cQ_2 X6 X4 X8+*]/id:6/depth:0[0]
         passive_lit=¬cP_1 (f X3) X4 p=0.←.ε)
      with subst={X1[1] → X3[0], X2[1] → X4[0]}.

0.025[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
     ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1
0.025[zip.env] apply binary rule ctx_narrow
0.025[zip.env] apply binary rule narrow_term_defs
0.025[zip.env] do unary inferences
0.025[zip.env] apply unary rule equality_resolution
0.025[zip.env] apply unary rule equality_factoring
0.025[zip.env] apply unary rule narrow_lit_defs
0.025[zip.env] apply unary rule ind_types.exhaustiveness
0.025[zip.env] apply unary rule ind_types.acyclicity
0.025[zip.env] apply unary rule avatar_check_empty
0.025[zip.env] apply generating rule avatar.lemmas (full: false)
0.025[zip.env] apply generating rule avatar_check_sat (full: false)
0.025[zip.avatar] SAT-solver reports "SAT"
0.025[zip.sup] @[neg_reflect did not simplify the clause @]
0.025[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1]
0.025[zip.sup] @[neg_reflect did not simplify the clause @]
0.025[zip.sup] @[neg_reflect did not simplify the clause @]
0.025[zip.saturate] ### step    18 ###
0.025[zip.saturate]
    given (18 steps, penalty 1):
      `forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1`
0.026[zip.env] apply binary rule superposition_active
0.026[zip.env] apply binary rule superposition_passive
0.026[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.026[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
     ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2
0.026[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.026[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_1 (f X2) X1+* ∨ ¬cQ_1 X2 d X3* ∨ ¬cP_1 (f X3) X4* ∨ 
     cQ_2 X1 X0 X4+*]/id:22/depth:2
0.027[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.027[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 c X3+*]/id:23/depth:2
0.027[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.027[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 b X3+*]/id:24/depth:2
0.027[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.028[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 a X3+*]/id:25/depth:2
0.028[zip.env] apply binary rule ctx_narrow
0.028[zip.env] apply binary rule narrow_term_defs
0.028[zip.env] do unary inferences
0.028[zip.env] apply unary rule equality_resolution
0.028[zip.env] apply unary rule equality_factoring
0.028[zip.env] apply unary rule narrow_lit_defs
0.028[zip.env] apply unary rule ind_types.exhaustiveness
0.028[zip.env] apply unary rule ind_types.acyclicity
0.028[zip.env] apply unary rule avatar_check_empty
0.028[zip.env] apply generating rule avatar.lemmas (full: false)
0.028[zip.env] apply generating rule avatar_check_sat (full: false)
0.028[zip.avatar] SAT-solver reports "SAT"
0.028[zip.sup] @[neg_reflect did not simplify the clause @]
0.028[zip.sup] @[neg_reflect did not simplify the clause @]
0.028[zip.sup] @[neg_reflect did not simplify the clause @]
0.028[zip.sup] @[neg_reflect did not simplify the clause @]
0.028[zip.sup] @[neg_reflect did not simplify the clause @]
0.028[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2, 
       forall X0 X1 X2 X3 X4.
       [¬cP_1 (f X2) X1+* ∨ ¬cQ_1 X2 d X3* ∨ ¬cP_1 (f X3) X4* ∨ 
        cQ_2 X1 X0 X4+*]/id:22/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:23/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:24/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:25/depth:2]
0.029[zip.sup] @[neg_reflect did not simplify the clause @]
0.029[zip.sup] @[neg_reflect did not simplify the clause @]
0.029[zip.saturate] ### step    19 ###
0.029[zip.saturate]
    given (19 steps, penalty 1):
      `forall X0 X1 X2 X3 X4.
       [¬cP_1 (f X2) X1+* ∨ ¬cQ_1 X2 d X3* ∨ ¬cP_1 (f X3) X4* ∨ 
        cQ_2 X1 X0 X4+*]/id:22/depth:2`
0.029[zip.env] apply binary rule superposition_active
0.029[zip.env] apply binary rule superposition_passive
0.029[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 (f X2) X1+* ∨ ¬cQ_1 X2 d X3* ∨ ¬cP_1 (f X3) X4* ∨ 
        cQ_2 X1 X0 X4+*]/id:22/depth:2[0] passive_lit=¬cP_1 (f X2) X1
         p=0.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X1[0]}.

0.029[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
     ¬cQ_1 X1 d X4*]/id:26/depth:3
0.029[zip.env] apply binary rule ctx_narrow
0.029[zip.env] apply binary rule narrow_term_defs
0.029[zip.env] do unary inferences
0.029[zip.env] apply unary rule equality_resolution
0.029[zip.env] apply unary rule equality_factoring
0.029[zip.env] apply unary rule narrow_lit_defs
0.029[zip.env] apply unary rule ind_types.exhaustiveness
0.029[zip.env] apply unary rule ind_types.acyclicity
0.029[zip.env] apply unary rule avatar_check_empty
0.029[zip.env] apply generating rule avatar.lemmas (full: false)
0.029[zip.env] apply generating rule avatar_check_sat (full: false)
0.029[zip.avatar] SAT-solver reports "SAT"
0.029[zip.sup] @[neg_reflect did not simplify the clause @]
0.029[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3]
0.030[zip.sup] @[neg_reflect did not simplify the clause @]
0.030[zip.sup] @[neg_reflect did not simplify the clause @]
0.030[zip.saturate] ### step    20 ###
0.030[zip.saturate]
    given (20 steps, penalty 1):
      `forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3`
0.030[zip.env] apply binary rule superposition_active
0.030[zip.env] apply binary rule superposition_passive
0.030[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.030[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 X4 X3+*]/id:27/depth:4
0.030[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.030[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cQ_1 d d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:28/depth:4
0.031[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.031[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 c d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:29/depth:4
0.031[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.031[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 b d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:30/depth:4
0.031[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.031[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 a d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:31/depth:4
0.031[zip.env] apply binary rule ctx_narrow
0.031[zip.env] apply binary rule narrow_term_defs
0.031[zip.env] do unary inferences
0.031[zip.env] apply unary rule equality_resolution
0.031[zip.env] apply unary rule equality_factoring
0.031[zip.env] apply unary rule narrow_lit_defs
0.031[zip.env] apply unary rule ind_types.exhaustiveness
0.031[zip.env] apply unary rule ind_types.acyclicity
0.031[zip.env] apply unary rule avatar_check_empty
0.031[zip.env] apply generating rule avatar.lemmas (full: false)
0.031[zip.env] apply generating rule avatar_check_sat (full: false)
0.031[zip.avatar] SAT-solver reports "SAT"
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4, 
       forall X0 X1 X2 X3.
       [¬cQ_1 d d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:28/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 c d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:29/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 b d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:30/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 a d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:31/depth:4]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.sup] @[neg_reflect did not simplify the clause @]
0.032[zip.saturate] ### step    21 ###
0.032[zip.saturate]
    given (21 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 c d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:29/depth:4`
0.032[zip.env] apply binary rule superposition_active
0.032[zip.env] apply binary rule superposition_passive
0.032[zip.env] apply binary rule ctx_narrow
0.032[zip.env] apply binary rule narrow_term_defs
0.032[zip.env] do unary inferences
0.032[zip.env] apply unary rule equality_resolution
0.032[zip.env] apply unary rule equality_factoring
0.032[zip.env] apply unary rule narrow_lit_defs
0.032[zip.env] apply unary rule ind_types.exhaustiveness
0.032[zip.env] apply unary rule ind_types.acyclicity
0.032[zip.env] apply unary rule avatar_check_empty
0.032[zip.env] apply generating rule avatar.lemmas (full: false)
0.032[zip.env] apply generating rule avatar_check_sat (full: false)
0.032[zip.avatar] SAT-solver reports "SAT"
0.033[zip.saturate] inferred new clauses: []
0.033[zip.sup] @[neg_reflect did not simplify the clause @]
0.033[zip.sup] @[neg_reflect did not simplify the clause @]
0.033[zip.saturate] ### step    22 ###
0.033[zip.saturate]
    given (22 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 b d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:30/depth:4`
0.033[zip.env] apply binary rule superposition_active
0.033[zip.env] apply binary rule superposition_passive
0.033[zip.env] apply binary rule ctx_narrow
0.033[zip.env] apply binary rule narrow_term_defs
0.033[zip.env] do unary inferences
0.033[zip.env] apply unary rule equality_resolution
0.033[zip.env] apply unary rule equality_factoring
0.033[zip.env] apply unary rule narrow_lit_defs
0.033[zip.env] apply unary rule ind_types.exhaustiveness
0.033[zip.env] apply unary rule ind_types.acyclicity
0.033[zip.env] apply unary rule avatar_check_empty
0.033[zip.env] apply generating rule avatar.lemmas (full: false)
0.033[zip.env] apply generating rule avatar_check_sat (full: false)
0.033[zip.avatar] SAT-solver reports "SAT"
0.033[zip.saturate] inferred new clauses: []
0.033[zip.sup] @[neg_reflect did not simplify the clause @]
0.033[zip.sup] @[neg_reflect did not simplify the clause @]
0.033[zip.saturate] ### step    23 ###
0.033[zip.saturate]
    given (23 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 a d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:31/depth:4`
0.033[zip.env] apply binary rule superposition_active
0.033[zip.env] apply binary rule superposition_passive
0.033[zip.env] apply binary rule ctx_narrow
0.033[zip.env] apply binary rule narrow_term_defs
0.033[zip.env] do unary inferences
0.033[zip.env] apply unary rule equality_resolution
0.033[zip.env] apply unary rule equality_factoring
0.033[zip.env] apply unary rule narrow_lit_defs
0.033[zip.env] apply unary rule ind_types.exhaustiveness
0.033[zip.env] apply unary rule ind_types.acyclicity
0.033[zip.env] apply unary rule avatar_check_empty
0.033[zip.env] apply generating rule avatar.lemmas (full: false)
0.033[zip.env] apply generating rule avatar_check_sat (full: false)
0.033[zip.avatar] SAT-solver reports "SAT"
0.033[zip.saturate] inferred new clauses: []
0.033[zip.sup] @[neg_reflect did not simplify the clause @]
0.034[zip.sup] @[neg_reflect did not simplify the clause @]
0.034[zip.saturate] ### step    24 ###
0.034[zip.saturate]
    given (24 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cQ_1 d d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:28/depth:4`
0.034[zip.env] apply binary rule superposition_active
0.034[zip.env] apply binary rule superposition_passive
0.034[zip.env] apply binary rule ctx_narrow
0.034[zip.env] apply binary rule narrow_term_defs
0.034[zip.env] do unary inferences
0.034[zip.env] apply unary rule equality_resolution
0.034[zip.env] apply unary rule equality_factoring
0.034[zip.env] apply unary rule narrow_lit_defs
0.034[zip.env] apply unary rule ind_types.exhaustiveness
0.034[zip.env] apply unary rule ind_types.acyclicity
0.034[zip.env] apply unary rule avatar_check_empty
0.034[zip.env] apply generating rule avatar.lemmas (full: false)
0.034[zip.env] apply generating rule avatar_check_sat (full: false)
0.034[zip.avatar] SAT-solver reports "SAT"
0.034[zip.saturate] inferred new clauses: []
0.034[zip.sup] @[neg_reflect did not simplify the clause @]
0.034[zip.sup] @[neg_reflect did not simplify the clause @]
0.034[zip.saturate] ### step    25 ###
0.034[zip.saturate]
    given (25 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:23/depth:2`
0.034[zip.env] apply binary rule superposition_active
0.034[zip.env] apply binary rule superposition_passive
0.034[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:23/depth:2[0] passive_lit=¬cP_1 (f X1) X0
         p=0.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.034[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 X1 c X3*]/id:32/depth:3
0.035[zip.env] apply binary rule ctx_narrow
0.035[zip.env] apply binary rule narrow_term_defs
0.035[zip.env] do unary inferences
0.035[zip.env] apply unary rule equality_resolution
0.035[zip.env] apply unary rule equality_factoring
0.035[zip.env] apply unary rule narrow_lit_defs
0.035[zip.env] apply unary rule ind_types.exhaustiveness
0.035[zip.env] apply unary rule ind_types.acyclicity
0.035[zip.env] apply unary rule avatar_check_empty
0.035[zip.env] apply generating rule avatar.lemmas (full: false)
0.035[zip.env] apply generating rule avatar_check_sat (full: false)
0.035[zip.avatar] SAT-solver reports "SAT"
0.035[zip.sup] @[neg_reflect did not simplify the clause @]
0.035[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3]
0.035[zip.sup] @[neg_reflect did not simplify the clause @]
0.035[zip.sup] @[neg_reflect did not simplify the clause @]
0.035[zip.saturate] ### step    26 ###
0.035[zip.saturate]
    given (26 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3`
0.036[zip.env] apply binary rule superposition_active
0.036[zip.env] apply binary rule superposition_passive
0.036[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.036[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 c X3+*]/id:33/depth:4
0.036[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.036[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 d c X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 c X2+*]/id:34/depth:4
0.036[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.036[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 c c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c c X1+*]/id:35/depth:4
0.037[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.037[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 b c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b c X1+*]/id:36/depth:4
0.037[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 c X3*]/id:32/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.037[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 a c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a c X1+*]/id:37/depth:4
0.037[zip.env] apply binary rule ctx_narrow
0.037[zip.env] apply binary rule narrow_term_defs
0.037[zip.env] do unary inferences
0.037[zip.env] apply unary rule equality_resolution
0.037[zip.env] apply unary rule equality_factoring
0.037[zip.env] apply unary rule narrow_lit_defs
0.037[zip.env] apply unary rule ind_types.exhaustiveness
0.037[zip.env] apply unary rule ind_types.acyclicity
0.037[zip.env] apply unary rule avatar_check_empty
0.037[zip.env] apply generating rule avatar.lemmas (full: false)
0.037[zip.env] apply generating rule avatar_check_sat (full: false)
0.037[zip.avatar] SAT-solver reports "SAT"
0.037[zip.sup] @[neg_reflect did not simplify the clause @]
0.037[zip.sup] @[neg_reflect did not simplify the clause @]
0.037[zip.sup] @[neg_reflect did not simplify the clause @]
0.037[zip.sup] @[neg_reflect did not simplify the clause @]
0.038[zip.sup] @[neg_reflect did not simplify the clause @]
0.038[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 d c X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 c X2+*]/id:34/depth:4, 
       forall X0 X1.
       [¬cQ_1 c c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c c X1+*]/id:35/depth:4, 
       forall X0 X1.
       [¬cQ_1 b c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b c X1+*]/id:36/depth:4, 
       forall X0 X1.
       [¬cQ_1 a c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a c X1+*]/id:37/depth:4]
0.038[zip.sup] @[neg_reflect did not simplify the clause @]
0.038[zip.sup] @[neg_reflect did not simplify the clause @]
0.038[zip.saturate] ### step    27 ###
0.038[zip.saturate]
    given (27 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 d c X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 c X2+*]/id:34/depth:4`
0.038[zip.env] apply binary rule superposition_active
0.038[zip.env] apply binary rule superposition_passive
0.038[zip.env] apply binary rule ctx_narrow
0.038[zip.env] apply binary rule narrow_term_defs
0.038[zip.env] do unary inferences
0.038[zip.env] apply unary rule equality_resolution
0.038[zip.env] apply unary rule equality_factoring
0.038[zip.env] apply unary rule narrow_lit_defs
0.038[zip.env] apply unary rule ind_types.exhaustiveness
0.038[zip.env] apply unary rule ind_types.acyclicity
0.038[zip.env] apply unary rule avatar_check_empty
0.038[zip.env] apply generating rule avatar.lemmas (full: false)
0.038[zip.env] apply generating rule avatar_check_sat (full: false)
0.038[zip.avatar] SAT-solver reports "SAT"
0.038[zip.saturate] inferred new clauses: []
0.038[zip.sup] @[neg_reflect did not simplify the clause @]
0.038[zip.sup] @[neg_reflect did not simplify the clause @]
0.039[zip.saturate] ### step    28 ###
0.039[zip.saturate]
    given (28 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 c c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c c X1+*]/id:35/depth:4`
0.039[zip.env] apply binary rule superposition_active
0.039[zip.env] apply binary rule superposition_passive
0.039[zip.env] apply binary rule ctx_narrow
0.039[zip.env] apply binary rule narrow_term_defs
0.039[zip.env] do unary inferences
0.039[zip.env] apply unary rule equality_resolution
0.039[zip.env] apply unary rule equality_factoring
0.039[zip.env] apply unary rule narrow_lit_defs
0.039[zip.env] apply unary rule ind_types.exhaustiveness
0.039[zip.env] apply unary rule ind_types.acyclicity
0.039[zip.env] apply unary rule avatar_check_empty
0.039[zip.env] apply generating rule avatar.lemmas (full: false)
0.039[zip.env] apply generating rule avatar_check_sat (full: false)
0.039[zip.avatar] SAT-solver reports "SAT"
0.039[zip.saturate] inferred new clauses: []
0.039[zip.sup] @[neg_reflect did not simplify the clause @]
0.039[zip.sup] @[neg_reflect did not simplify the clause @]
0.039[zip.saturate] ### step    29 ###
0.039[zip.saturate]
    given (29 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 b c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b c X1+*]/id:36/depth:4`
0.039[zip.env] apply binary rule superposition_active
0.039[zip.env] apply binary rule superposition_passive
0.039[zip.env] apply binary rule ctx_narrow
0.039[zip.env] apply binary rule narrow_term_defs
0.039[zip.env] do unary inferences
0.039[zip.env] apply unary rule equality_resolution
0.039[zip.env] apply unary rule equality_factoring
0.039[zip.env] apply unary rule narrow_lit_defs
0.039[zip.env] apply unary rule ind_types.exhaustiveness
0.039[zip.env] apply unary rule ind_types.acyclicity
0.039[zip.env] apply unary rule avatar_check_empty
0.039[zip.env] apply generating rule avatar.lemmas (full: false)
0.039[zip.env] apply generating rule avatar_check_sat (full: false)
0.040[zip.avatar] SAT-solver reports "SAT"
0.040[zip.saturate] inferred new clauses: []
0.040[zip.sup] @[neg_reflect did not simplify the clause @]
0.040[zip.sup] @[neg_reflect did not simplify the clause @]
0.040[zip.saturate] ### step    30 ###
0.040[zip.saturate]
    given (30 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 a c X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a c X1+*]/id:37/depth:4`
0.040[zip.env] apply binary rule superposition_active
0.040[zip.env] apply binary rule superposition_passive
0.040[zip.env] apply binary rule ctx_narrow
0.040[zip.env] apply binary rule narrow_term_defs
0.040[zip.env] do unary inferences
0.040[zip.env] apply unary rule equality_resolution
0.040[zip.env] apply unary rule equality_factoring
0.040[zip.env] apply unary rule narrow_lit_defs
0.040[zip.env] apply unary rule ind_types.exhaustiveness
0.040[zip.env] apply unary rule ind_types.acyclicity
0.040[zip.env] apply unary rule avatar_check_empty
0.040[zip.env] apply generating rule avatar.lemmas (full: false)
0.040[zip.env] apply generating rule avatar_check_sat (full: false)
0.040[zip.avatar] SAT-solver reports "SAT"
0.040[zip.saturate] inferred new clauses: []
0.040[zip.sup] @[neg_reflect did not simplify the clause @]
0.040[zip.sup] @[neg_reflect did not simplify the clause @]
0.040[zip.saturate] ### step    31 ###
0.040[zip.saturate]
    given (31 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:24/depth:2`
0.041[zip.env] apply binary rule superposition_active
0.041[zip.env] apply binary rule superposition_passive
0.041[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:24/depth:2[0] passive_lit=¬cP_1 (f X1) X0
         p=0.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.041[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 X1 b X3*]/id:38/depth:3
0.041[zip.env] apply binary rule ctx_narrow
0.041[zip.env] apply binary rule narrow_term_defs
0.041[zip.env] do unary inferences
0.041[zip.env] apply unary rule equality_resolution
0.041[zip.env] apply unary rule equality_factoring
0.041[zip.env] apply unary rule narrow_lit_defs
0.041[zip.env] apply unary rule ind_types.exhaustiveness
0.041[zip.env] apply unary rule ind_types.acyclicity
0.041[zip.env] apply unary rule avatar_check_empty
0.041[zip.env] apply generating rule avatar.lemmas (full: false)
0.041[zip.env] apply generating rule avatar_check_sat (full: false)
0.041[zip.avatar] SAT-solver reports "SAT"
0.041[zip.sup] @[neg_reflect did not simplify the clause @]
0.041[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3]
0.041[zip.sup] @[neg_reflect did not simplify the clause @]
0.041[zip.sup] @[neg_reflect did not simplify the clause @]
0.042[zip.saturate] ### step    32 ###
0.042[zip.saturate]
    given (32 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3`
0.042[zip.env] apply binary rule superposition_active
0.042[zip.env] apply binary rule superposition_passive
0.042[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.042[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 b X3+*]/id:39/depth:4
0.042[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.042[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 d b X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 b X2+*]/id:40/depth:4
0.042[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.043[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 c b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c b X1+*]/id:41/depth:4
0.043[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.043[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 b b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b b X1+*]/id:42/depth:4
0.043[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.043[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 a b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a b X1+*]/id:43/depth:4
0.043[zip.env] apply binary rule ctx_narrow
0.043[zip.env] apply binary rule narrow_term_defs
0.043[zip.env] do unary inferences
0.043[zip.env] apply unary rule equality_resolution
0.043[zip.env] apply unary rule equality_factoring
0.043[zip.env] apply unary rule narrow_lit_defs
0.043[zip.env] apply unary rule ind_types.exhaustiveness
0.043[zip.env] apply unary rule ind_types.acyclicity
0.043[zip.env] apply unary rule avatar_check_empty
0.043[zip.env] apply generating rule avatar.lemmas (full: false)
0.043[zip.env] apply generating rule avatar_check_sat (full: false)
0.043[zip.avatar] SAT-solver reports "SAT"
0.043[zip.sup] @[neg_reflect did not simplify the clause @]
0.043[zip.sup] @[neg_reflect did not simplify the clause @]
0.043[zip.sup] @[neg_reflect did not simplify the clause @]
0.043[zip.sup] @[neg_reflect did not simplify the clause @]
0.044[zip.sup] @[neg_reflect did not simplify the clause @]
0.044[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 d b X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 b X2+*]/id:40/depth:4, 
       forall X0 X1.
       [¬cQ_1 c b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c b X1+*]/id:41/depth:4, 
       forall X0 X1.
       [¬cQ_1 b b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b b X1+*]/id:42/depth:4, 
       forall X0 X1.
       [¬cQ_1 a b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a b X1+*]/id:43/depth:4]
0.044[zip.sup] @[neg_reflect did not simplify the clause @]
0.044[zip.sup] @[neg_reflect did not simplify the clause @]
0.044[zip.saturate] ### step    33 ###
0.044[zip.saturate]
    given (33 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 d b X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 b X2+*]/id:40/depth:4`
0.044[zip.env] apply binary rule superposition_active
0.044[zip.env] apply binary rule superposition_passive
0.044[zip.env] apply binary rule ctx_narrow
0.044[zip.env] apply binary rule narrow_term_defs
0.044[zip.env] do unary inferences
0.044[zip.env] apply unary rule equality_resolution
0.044[zip.env] apply unary rule equality_factoring
0.044[zip.env] apply unary rule narrow_lit_defs
0.044[zip.env] apply unary rule ind_types.exhaustiveness
0.044[zip.env] apply unary rule ind_types.acyclicity
0.044[zip.env] apply unary rule avatar_check_empty
0.044[zip.env] apply generating rule avatar.lemmas (full: false)
0.044[zip.env] apply generating rule avatar_check_sat (full: false)
0.044[zip.avatar] SAT-solver reports "SAT"
0.044[zip.saturate] inferred new clauses: []
0.044[zip.sup] @[neg_reflect did not simplify the clause @]
0.044[zip.sup] @[neg_reflect did not simplify the clause @]
0.045[zip.saturate] ### step    34 ###
0.045[zip.saturate]
    given (34 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 c b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c b X1+*]/id:41/depth:4`
0.045[zip.env] apply binary rule superposition_active
0.045[zip.env] apply binary rule superposition_passive
0.045[zip.env] apply binary rule ctx_narrow
0.045[zip.env] apply binary rule narrow_term_defs
0.045[zip.env] do unary inferences
0.045[zip.env] apply unary rule equality_resolution
0.045[zip.env] apply unary rule equality_factoring
0.045[zip.env] apply unary rule narrow_lit_defs
0.045[zip.env] apply unary rule ind_types.exhaustiveness
0.045[zip.env] apply unary rule ind_types.acyclicity
0.045[zip.env] apply unary rule avatar_check_empty
0.045[zip.env] apply generating rule avatar.lemmas (full: false)
0.045[zip.env] apply generating rule avatar_check_sat (full: false)
0.045[zip.avatar] SAT-solver reports "SAT"
0.045[zip.saturate] inferred new clauses: []
0.045[zip.sup] @[neg_reflect did not simplify the clause @]
0.045[zip.sup] @[neg_reflect did not simplify the clause @]
0.045[zip.saturate] ### step    35 ###
0.045[zip.saturate]
    given (35 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 b b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b b X1+*]/id:42/depth:4`
0.045[zip.env] apply binary rule superposition_active
0.045[zip.env] apply binary rule superposition_passive
0.045[zip.env] apply binary rule ctx_narrow
0.045[zip.env] apply binary rule narrow_term_defs
0.045[zip.env] do unary inferences
0.045[zip.env] apply unary rule equality_resolution
0.045[zip.env] apply unary rule equality_factoring
0.045[zip.env] apply unary rule narrow_lit_defs
0.045[zip.env] apply unary rule ind_types.exhaustiveness
0.045[zip.env] apply unary rule ind_types.acyclicity
0.045[zip.env] apply unary rule avatar_check_empty
0.045[zip.env] apply generating rule avatar.lemmas (full: false)
0.045[zip.env] apply generating rule avatar_check_sat (full: false)
0.045[zip.avatar] SAT-solver reports "SAT"
0.045[zip.saturate] inferred new clauses: []
0.045[zip.sup] @[neg_reflect did not simplify the clause @]
0.045[zip.sup] @[neg_reflect did not simplify the clause @]
0.045[zip.saturate] ### step    36 ###
0.045[zip.saturate]
    given (36 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 a b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a b X1+*]/id:43/depth:4`
0.046[zip.env] apply binary rule superposition_active
0.046[zip.env] apply binary rule superposition_passive
0.046[zip.sup]
    sup, kind sup ([cQ_1 a b c*]/id:0/depth:0[1] s=cQ_1 a b c t=true)
      (forall X0 X1.
       [¬cQ_1 a b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a b X1+*]/id:43/depth:4[0]
         passive_lit=¬cQ_1 a b X0 p=0.←.ε)
      with subst={X0[0] → c[1]}.

0.046[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5
0.046[zip.env] apply binary rule ctx_narrow
0.046[zip.env] apply binary rule narrow_term_defs
0.046[zip.env] do unary inferences
0.046[zip.env] apply unary rule equality_resolution
0.046[zip.env] apply unary rule equality_factoring
0.046[zip.env] apply unary rule narrow_lit_defs
0.046[zip.env] apply unary rule ind_types.exhaustiveness
0.046[zip.env] apply unary rule ind_types.acyclicity
0.046[zip.env] apply unary rule avatar_check_empty
0.046[zip.env] apply generating rule avatar.lemmas (full: false)
0.046[zip.env] apply generating rule avatar_check_sat (full: false)
0.046[zip.avatar] SAT-solver reports "SAT"
0.046[zip.sup] @[neg_reflect did not simplify the clause @]
0.046[zip.saturate]
    inferred new clauses:
      [forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5]
0.046[zip.sup] @[neg_reflect did not simplify the clause @]
0.046[zip.sup] @[neg_reflect did not simplify the clause @]
0.046[zip.saturate] ### step    37 ###
0.046[zip.saturate]
    given (37 steps, penalty 1):
      `forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5`
0.046[zip.env] apply binary rule superposition_active
0.046[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X3 X4 X5 X6 X7 X8.
       [¬cP_1 (f X3) X4+* ∨ ¬cP_1 (f X5) X6* ∨ ¬cQ_1 X5 X3 X7* ∨ 
        ¬cP_1 (f X7) X8* ∨ cQ_2 X6 X4 X8+*]/id:6/depth:0[1]
         passive_lit=cQ_2 X6 X4 X8 p=4.←.ε)
      with subst={X4[1] → b[0], X6[1] → a[0], X8[1] → X0[0]}.

0.046[zip.sup] will yield a tautology
0.046[zip.sup] ... cancel, will yield a tautology
0.046[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 X1 X4* ∨ ¬cP_1 (f X5) X3*]/id:20/depth:1[1]
         passive_lit=cQ_2 X3 X0 X2 p=1.←.ε)
      with subst={X0[1] → b[0], X2[1] → X0[0], X3[1] → a[0]}.

0.047[zip.sup] will yield a tautology
0.047[zip.sup] ... cancel, will yield a tautology
0.047[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 (f X2) X1+* ∨ ¬cQ_1 X2 d X3* ∨ ¬cP_1 (f X3) X4* ∨ 
        cQ_2 X1 X0 X4+*]/id:22/depth:2[1] passive_lit=cQ_2 X1 X0 X4
         p=3.←.ε)
      with subst={X0[1] → b[0], X1[1] → a[0], X4[1] → X0[0]}.

0.047[zip.sup] will yield a tautology
0.047[zip.sup] ... cancel, will yield a tautology
0.047[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X1 d X4*]/id:26/depth:3[1] passive_lit=cQ_2 X0 X3 X2
         p=1.←.ε)
      with subst={X0[1] → a[0], X2[1] → X0[0], X3[1] → b[0]}.

0.047[zip.sup] will yield a tautology
0.047[zip.sup] ... cancel, will yield a tautology
0.047[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cQ_1 d d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:28/depth:4[1]
         passive_lit=cQ_2 X0 X3 X2 p=2.←.ε)
      with subst={X0[1] → a[0], X2[1] → X0[0], X3[1] → b[0]}.

0.047[zip.sup] will yield a tautology
0.047[zip.sup] ... cancel, will yield a tautology
0.047[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:24/depth:2[1] passive_lit=cQ_2 X0 b X3 p=3.←.ε)
      with subst={X0[1] → a[0], X3[1] → X0[0]}.

0.047[zip.sup] will yield a tautology
0.047[zip.sup] ... cancel, will yield a tautology
0.047[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 b X3*]/id:38/depth:3[1] passive_lit=cQ_2 X0 b X2 p=1.←.ε)
      with subst={X0[1] → a[0], X2[1] → X0[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cQ_1 d b X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 b X2+*]/id:40/depth:4[1]
         passive_lit=cQ_2 X0 b X2 p=2.←.ε)
      with subst={X0[1] → a[0], X2[1] → X0[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cQ_1 a d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:31/depth:4[1]
         passive_lit=cQ_2 a X2 X1 p=2.←.ε)
      with subst={X1[1] → X0[0], X2[1] → b[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cQ_1 a b X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a b X1+*]/id:43/depth:4[1]
         passive_lit=cQ_2 a b X1 p=2.←.ε)
      with subst={X1[1] → X0[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.env] apply binary rule superposition_passive
0.048[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[0]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.048[zip.sup] will yield a tautology
0.048[zip.sup] ... cancel, will yield a tautology
0.048[zip.env] apply binary rule ctx_narrow
0.048[zip.env] apply binary rule narrow_term_defs
0.048[zip.env] do unary inferences
0.048[zip.env] apply unary rule equality_resolution
0.048[zip.env] apply unary rule equality_factoring
0.048[zip.env] apply unary rule narrow_lit_defs
0.048[zip.env] apply unary rule ind_types.exhaustiveness
0.048[zip.env] apply unary rule ind_types.acyclicity
0.048[zip.env] apply unary rule avatar_check_empty
0.048[zip.env] apply generating rule avatar.lemmas (full: false)
0.048[zip.env] apply generating rule avatar_check_sat (full: false)
0.048[zip.avatar] SAT-solver reports "SAT"
0.048[zip.saturate] inferred new clauses: []
0.048[zip.sup] @[neg_reflect did not simplify the clause @]
0.048[zip.sup] @[neg_reflect did not simplify the clause @]
0.048[zip.saturate] ### step    38 ###
0.049[zip.saturate]
    given (38 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:25/depth:2`
0.049[zip.env] apply binary rule superposition_active
0.049[zip.env] apply binary rule superposition_passive
0.049[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 (f X1) X0+* ∨ ¬cQ_1 X1 a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:25/depth:2[0] passive_lit=¬cP_1 (f X1) X0
         p=0.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.049[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 X1 a X3*]/id:45/depth:3
0.049[zip.env] apply binary rule ctx_narrow
0.049[zip.env] apply binary rule narrow_term_defs
0.049[zip.env] do unary inferences
0.049[zip.env] apply unary rule equality_resolution
0.049[zip.env] apply unary rule equality_factoring
0.049[zip.env] apply unary rule narrow_lit_defs
0.049[zip.env] apply unary rule ind_types.exhaustiveness
0.049[zip.env] apply unary rule ind_types.acyclicity
0.049[zip.env] apply unary rule avatar_check_empty
0.049[zip.env] apply generating rule avatar.lemmas (full: false)
0.049[zip.env] apply generating rule avatar_check_sat (full: false)
0.049[zip.avatar] SAT-solver reports "SAT"
0.049[zip.sup] @[neg_reflect did not simplify the clause @]
0.049[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3]
0.049[zip.sup] @[neg_reflect did not simplify the clause @]
0.049[zip.sup] @[neg_reflect did not simplify the clause @]
0.049[zip.saturate] ### step    39 ###
0.049[zip.saturate]
    given (39 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3`
0.050[zip.env] apply binary rule superposition_active
0.050[zip.env] apply binary rule superposition_passive
0.050[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.050[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
     cQ_2 X0 a X3+*]/id:46/depth:4
0.050[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.050[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 d a X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 a X2+*]/id:47/depth:4
0.050[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.050[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 c a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c a X1+*]/id:48/depth:4
0.050[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.051[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 b a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b a X1+*]/id:49/depth:4
0.051[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 X1 a X3*]/id:45/depth:3[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.051[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 a a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a a X1+*]/id:50/depth:4
0.051[zip.env] apply binary rule ctx_narrow
0.051[zip.env] apply binary rule narrow_term_defs
0.051[zip.env] do unary inferences
0.051[zip.env] apply unary rule equality_resolution
0.051[zip.env] apply unary rule equality_factoring
0.051[zip.env] apply unary rule narrow_lit_defs
0.051[zip.env] apply unary rule ind_types.exhaustiveness
0.051[zip.env] apply unary rule ind_types.acyclicity
0.051[zip.env] apply unary rule avatar_check_empty
0.051[zip.env] apply generating rule avatar.lemmas (full: false)
0.051[zip.env] apply generating rule avatar_check_sat (full: false)
0.051[zip.avatar] SAT-solver reports "SAT"
0.051[zip.sup] @[neg_reflect did not simplify the clause @]
0.051[zip.sup] @[neg_reflect did not simplify the clause @]
0.051[zip.sup] @[neg_reflect did not simplify the clause @]
0.051[zip.sup] @[neg_reflect did not simplify the clause @]
0.051[zip.sup] @[neg_reflect did not simplify the clause @]
0.051[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4, 
       forall X0 X1 X2.
       [¬cQ_1 d a X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 a X2+*]/id:47/depth:4, 
       forall X0 X1.
       [¬cQ_1 c a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c a X1+*]/id:48/depth:4, 
       forall X0 X1.
       [¬cQ_1 b a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b a X1+*]/id:49/depth:4, 
       forall X0 X1.
       [¬cQ_1 a a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a a X1+*]/id:50/depth:4]
0.052[zip.sup] @[neg_reflect did not simplify the clause @]
0.052[zip.sup] @[neg_reflect did not simplify the clause @]
0.052[zip.saturate] ### step    40 ###
0.052[zip.saturate]
    given (40 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 d a X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 a X2+*]/id:47/depth:4`
0.052[zip.env] apply binary rule superposition_active
0.052[zip.env] apply binary rule superposition_passive
0.052[zip.env] apply binary rule ctx_narrow
0.052[zip.env] apply binary rule narrow_term_defs
0.052[zip.env] do unary inferences
0.052[zip.env] apply unary rule equality_resolution
0.052[zip.env] apply unary rule equality_factoring
0.052[zip.env] apply unary rule narrow_lit_defs
0.052[zip.env] apply unary rule ind_types.exhaustiveness
0.052[zip.env] apply unary rule ind_types.acyclicity
0.052[zip.env] apply unary rule avatar_check_empty
0.052[zip.env] apply generating rule avatar.lemmas (full: false)
0.052[zip.env] apply generating rule avatar_check_sat (full: false)
0.052[zip.avatar] SAT-solver reports "SAT"
0.052[zip.saturate] inferred new clauses: []
0.052[zip.sup] @[neg_reflect did not simplify the clause @]
0.052[zip.sup] @[neg_reflect did not simplify the clause @]
0.052[zip.saturate] ### step    41 ###
0.052[zip.saturate]
    given (41 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 c a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c a X1+*]/id:48/depth:4`
0.052[zip.env] apply binary rule superposition_active
0.052[zip.env] apply binary rule superposition_passive
0.052[zip.env] apply binary rule ctx_narrow
0.052[zip.env] apply binary rule narrow_term_defs
0.052[zip.env] do unary inferences
0.052[zip.env] apply unary rule equality_resolution
0.053[zip.env] apply unary rule equality_factoring
0.053[zip.env] apply unary rule narrow_lit_defs
0.053[zip.env] apply unary rule ind_types.exhaustiveness
0.053[zip.env] apply unary rule ind_types.acyclicity
0.053[zip.env] apply unary rule avatar_check_empty
0.053[zip.env] apply generating rule avatar.lemmas (full: false)
0.053[zip.env] apply generating rule avatar_check_sat (full: false)
0.053[zip.avatar] SAT-solver reports "SAT"
0.053[zip.saturate] inferred new clauses: []
0.053[zip.sup] @[neg_reflect did not simplify the clause @]
0.053[zip.sup] @[neg_reflect did not simplify the clause @]
0.053[zip.saturate] ### step    42 ###
0.053[zip.saturate]
    given (42 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 b a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b a X1+*]/id:49/depth:4`
0.053[zip.env] apply binary rule superposition_active
0.053[zip.env] apply binary rule superposition_passive
0.053[zip.env] apply binary rule ctx_narrow
0.053[zip.env] apply binary rule narrow_term_defs
0.053[zip.env] do unary inferences
0.053[zip.env] apply unary rule equality_resolution
0.053[zip.env] apply unary rule equality_factoring
0.053[zip.env] apply unary rule narrow_lit_defs
0.053[zip.env] apply unary rule ind_types.exhaustiveness
0.053[zip.env] apply unary rule ind_types.acyclicity
0.053[zip.env] apply unary rule avatar_check_empty
0.053[zip.env] apply generating rule avatar.lemmas (full: false)
0.053[zip.env] apply generating rule avatar_check_sat (full: false)
0.053[zip.avatar] SAT-solver reports "SAT"
0.053[zip.saturate] inferred new clauses: []
0.053[zip.sup] @[neg_reflect did not simplify the clause @]
0.053[zip.sup] @[neg_reflect did not simplify the clause @]
0.053[zip.saturate] ### step    43 ###
0.053[zip.saturate]
    given (43 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 a a X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a a X1+*]/id:50/depth:4`
0.054[zip.env] apply binary rule superposition_active
0.054[zip.env] apply binary rule superposition_passive
0.054[zip.env] apply binary rule ctx_narrow
0.054[zip.env] apply binary rule narrow_term_defs
0.054[zip.env] do unary inferences
0.054[zip.env] apply unary rule equality_resolution
0.054[zip.env] apply unary rule equality_factoring
0.054[zip.env] apply unary rule narrow_lit_defs
0.054[zip.env] apply unary rule ind_types.exhaustiveness
0.054[zip.env] apply unary rule ind_types.acyclicity
0.054[zip.env] apply unary rule avatar_check_empty
0.054[zip.env] apply generating rule avatar.lemmas (full: false)
0.054[zip.env] apply generating rule avatar_check_sat (full: false)
0.054[zip.avatar] SAT-solver reports "SAT"
0.054[zip.saturate] inferred new clauses: []
0.054[zip.sup] @[neg_reflect did not simplify the clause @]
0.054[zip.sup] @[neg_reflect did not simplify the clause @]
0.054[zip.saturate] ### step    44 ###
0.054[zip.saturate]
    given (44 steps, penalty 1):
      `forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4`
0.054[zip.env] apply binary rule superposition_active
0.054[zip.env] apply binary rule superposition_passive
0.054[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.054[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
     ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5
0.054[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.055[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [cQ_2 X0 X2 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 (f d) d X3*]/id:52/depth:5
0.055[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.055[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 c X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f c) d X2*]/id:53/depth:5
0.055[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.055[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 b X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f b) d X2*]/id:54/depth:5
0.055[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.055[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 a X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f a) d X2*]/id:55/depth:5
0.056[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) d X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 X4 X3+*]/id:27/depth:4[0] passive_lit=cQ_2 X0 X4 X3
         p=3.←.ε)
      with subst={X0[0] → a[1], X4[0] → b[1], X0[1] → X3[0]}.

0.056[zip.sup] will yield a tautology
0.056[zip.sup] ... cancel, will yield a tautology
0.056[zip.env] apply binary rule ctx_narrow
0.056[zip.env] apply binary rule narrow_term_defs
0.056[zip.env] do unary inferences
0.056[zip.env] apply unary rule equality_resolution
0.056[zip.env] apply unary rule equality_factoring
0.056[zip.env] apply unary rule narrow_lit_defs
0.056[zip.env] apply unary rule ind_types.exhaustiveness
0.056[zip.env] apply unary rule ind_types.acyclicity
0.056[zip.env] apply unary rule avatar_check_empty
0.056[zip.env] apply generating rule avatar.lemmas (full: false)
0.056[zip.env] apply generating rule avatar_check_sat (full: false)
0.056[zip.avatar] SAT-solver reports "SAT"
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5, 
       forall X0 X1 X2 X3.
       [cQ_2 X0 X2 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 (f d) d X3*]/id:52/depth:5, 
       forall X0 X1 X2.
       [cQ_2 c X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f c) d X2*]/id:53/depth:5, 
       forall X0 X1 X2.
       [cQ_2 b X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f b) d X2*]/id:54/depth:5, 
       forall X0 X1 X2.
       [cQ_2 a X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f a) d X2*]/id:55/depth:5]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.056[zip.sup] @[neg_reflect did not simplify the clause @]
0.057[zip.saturate] ### step    45 ###
0.057[zip.saturate]
    given (45 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 c X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f c) d X2*]/id:53/depth:5`
0.057[zip.env] apply binary rule superposition_active
0.057[zip.env] apply binary rule superposition_passive
0.057[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 c X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f c) d X2*]/id:53/depth:5[0]
         passive_lit=¬cP_1 (f X2) X0 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X0[0]}.

0.057[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6
0.057[zip.env] apply binary rule ctx_narrow
0.057[zip.env] apply binary rule narrow_term_defs
0.057[zip.env] do unary inferences
0.057[zip.env] apply unary rule equality_resolution
0.057[zip.env] apply unary rule equality_factoring
0.057[zip.env] apply unary rule narrow_lit_defs
0.057[zip.env] apply unary rule ind_types.exhaustiveness
0.057[zip.env] apply unary rule ind_types.acyclicity
0.057[zip.env] apply unary rule avatar_check_empty
0.057[zip.env] apply generating rule avatar.lemmas (full: false)
0.057[zip.env] apply generating rule avatar_check_sat (full: false)
0.057[zip.avatar] SAT-solver reports "SAT"
0.057[zip.sup] @[neg_reflect did not simplify the clause @]
0.057[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6]
0.057[zip.sup] @[neg_reflect did not simplify the clause @]
0.057[zip.sup] @[neg_reflect did not simplify the clause @]
0.057[zip.saturate] ### step    46 ###
0.057[zip.saturate]
    given (46 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6`
0.058[zip.env] apply binary rule superposition_active
0.058[zip.env] apply binary rule superposition_passive
0.058[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.058[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7
0.058[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.058[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d d+*]/id:58/depth:7
0.058[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.058[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d c+*]/id:59/depth:7
0.058[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.058[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d b+*]/id:60/depth:7
0.058[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d X1* ∨ cQ_2 c X2 X0+*]/id:56/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.058[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d a+*]/id:61/depth:7
0.059[zip.env] apply binary rule ctx_narrow
0.059[zip.env] apply binary rule narrow_term_defs
0.059[zip.env] do unary inferences
0.059[zip.env] apply unary rule equality_resolution
0.059[zip.env] apply unary rule equality_factoring
0.059[zip.env] apply unary rule narrow_lit_defs
0.059[zip.env] apply unary rule ind_types.exhaustiveness
0.059[zip.env] apply unary rule ind_types.acyclicity
0.059[zip.env] apply unary rule avatar_check_empty
0.059[zip.env] apply generating rule avatar.lemmas (full: false)
0.059[zip.env] apply generating rule avatar_check_sat (full: false)
0.059[zip.avatar] SAT-solver reports "SAT"
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7, 
       forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d d+*]/id:58/depth:7, 
       forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d c+*]/id:59/depth:7, 
       forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d b+*]/id:60/depth:7, 
       forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d a+*]/id:61/depth:7]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.saturate] ### step    47 ###
0.059[zip.saturate]
    given (47 steps, penalty 1):
      `forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d d+*]/id:58/depth:7`
0.059[zip.env] apply binary rule superposition_active
0.059[zip.env] apply binary rule superposition_passive
0.059[zip.env] apply binary rule ctx_narrow
0.059[zip.env] apply binary rule narrow_term_defs
0.059[zip.env] do unary inferences
0.059[zip.env] apply unary rule equality_resolution
0.059[zip.env] apply unary rule equality_factoring
0.059[zip.env] apply unary rule narrow_lit_defs
0.059[zip.env] apply unary rule ind_types.exhaustiveness
0.059[zip.env] apply unary rule ind_types.acyclicity
0.059[zip.env] apply unary rule avatar_check_empty
0.059[zip.env] apply generating rule avatar.lemmas (full: false)
0.059[zip.env] apply generating rule avatar_check_sat (full: false)
0.059[zip.avatar] SAT-solver reports "SAT"
0.059[zip.saturate] inferred new clauses: []
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.059[zip.sup] @[neg_reflect did not simplify the clause @]
0.060[zip.saturate] ### step    48 ###
0.060[zip.saturate]
    given (48 steps, penalty 1):
      `forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d c+*]/id:59/depth:7`
0.060[zip.env] apply binary rule superposition_active
0.060[zip.env] apply binary rule superposition_passive
0.060[zip.env] apply binary rule ctx_narrow
0.060[zip.env] apply binary rule narrow_term_defs
0.060[zip.env] do unary inferences
0.060[zip.env] apply unary rule equality_resolution
0.060[zip.env] apply unary rule equality_factoring
0.060[zip.env] apply unary rule narrow_lit_defs
0.060[zip.env] apply unary rule ind_types.exhaustiveness
0.060[zip.env] apply unary rule ind_types.acyclicity
0.060[zip.env] apply unary rule avatar_check_empty
0.060[zip.env] apply generating rule avatar.lemmas (full: false)
0.060[zip.env] apply generating rule avatar_check_sat (full: false)
0.060[zip.avatar] SAT-solver reports "SAT"
0.060[zip.saturate] inferred new clauses: []
0.060[zip.sup] @[neg_reflect did not simplify the clause @]
0.060[zip.sup] @[neg_reflect did not simplify the clause @]
0.060[zip.saturate] ### step    49 ###
0.060[zip.saturate]
    given (49 steps, penalty 1):
      `forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d b+*]/id:60/depth:7`
0.060[zip.env] apply binary rule superposition_active
0.060[zip.env] apply binary rule superposition_passive
0.060[zip.env] apply binary rule ctx_narrow
0.060[zip.env] apply binary rule narrow_term_defs
0.060[zip.env] do unary inferences
0.060[zip.env] apply unary rule equality_resolution
0.060[zip.env] apply unary rule equality_factoring
0.060[zip.env] apply unary rule narrow_lit_defs
0.060[zip.env] apply unary rule ind_types.exhaustiveness
0.060[zip.env] apply unary rule ind_types.acyclicity
0.060[zip.env] apply unary rule avatar_check_empty
0.060[zip.env] apply generating rule avatar.lemmas (full: false)
0.060[zip.env] apply generating rule avatar_check_sat (full: false)
0.060[zip.avatar] SAT-solver reports "SAT"
0.060[zip.saturate] inferred new clauses: []
0.060[zip.sup] @[neg_reflect did not simplify the clause @]
0.060[zip.sup] @[neg_reflect did not simplify the clause @]
0.060[zip.saturate] ### step    50 ###
0.060[zip.saturate]
    given (50 steps, penalty 1):
      `forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d a+*]/id:61/depth:7`
0.060[zip.env] apply binary rule superposition_active
0.060[zip.env] apply binary rule superposition_passive
0.060[zip.env] apply binary rule ctx_narrow
0.060[zip.env] apply binary rule narrow_term_defs
0.060[zip.env] do unary inferences
0.060[zip.env] apply unary rule equality_resolution
0.060[zip.env] apply unary rule equality_factoring
0.060[zip.env] apply unary rule narrow_lit_defs
0.060[zip.env] apply unary rule ind_types.exhaustiveness
0.060[zip.env] apply unary rule ind_types.acyclicity
0.060[zip.env] apply unary rule avatar_check_empty
0.060[zip.env] apply generating rule avatar.lemmas (full: false)
0.060[zip.env] apply generating rule avatar_check_sat (full: false)
0.060[zip.avatar] SAT-solver reports "SAT"
0.060[zip.saturate] inferred new clauses: []
0.061[zip.sup] @[neg_reflect did not simplify the clause @]
0.061[zip.sup] @[neg_reflect did not simplify the clause @]
0.061[zip.saturate] ### step    51 ###
0.061[zip.saturate]
    given (51 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 b X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f b) d X2*]/id:54/depth:5`
0.061[zip.env] apply binary rule superposition_active
0.061[zip.env] apply binary rule superposition_passive
0.061[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 b X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f b) d X2*]/id:54/depth:5[0]
         passive_lit=¬cP_1 (f X2) X0 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X0[0]}.

0.061[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6
0.061[zip.env] apply binary rule ctx_narrow
0.061[zip.env] apply binary rule narrow_term_defs
0.061[zip.env] do unary inferences
0.061[zip.env] apply unary rule equality_resolution
0.061[zip.env] apply unary rule equality_factoring
0.061[zip.env] apply unary rule narrow_lit_defs
0.061[zip.env] apply unary rule ind_types.exhaustiveness
0.061[zip.env] apply unary rule ind_types.acyclicity
0.061[zip.env] apply unary rule avatar_check_empty
0.061[zip.env] apply generating rule avatar.lemmas (full: false)
0.061[zip.env] apply generating rule avatar_check_sat (full: false)
0.061[zip.avatar] SAT-solver reports "SAT"
0.061[zip.sup] @[neg_reflect did not simplify the clause @]
0.061[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6]
0.061[zip.sup] @[neg_reflect did not simplify the clause @]
0.061[zip.sup] @[neg_reflect did not simplify the clause @]
0.062[zip.saturate] ### step    52 ###
0.062[zip.saturate]
    given (52 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6`
0.062[zip.env] apply binary rule superposition_active
0.062[zip.env] apply binary rule superposition_passive
0.062[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.062[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7
0.062[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.062[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d d+*]/id:64/depth:7
0.062[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.062[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d c+*]/id:65/depth:7
0.062[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.062[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d b+*]/id:66/depth:7
0.062[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d X1* ∨ cQ_2 b X2 X0+*]/id:62/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.063[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d a+*]/id:67/depth:7
0.063[zip.env] apply binary rule ctx_narrow
0.063[zip.env] apply binary rule narrow_term_defs
0.063[zip.env] do unary inferences
0.063[zip.env] apply unary rule equality_resolution
0.063[zip.env] apply unary rule equality_factoring
0.063[zip.env] apply unary rule narrow_lit_defs
0.063[zip.env] apply unary rule ind_types.exhaustiveness
0.063[zip.env] apply unary rule ind_types.acyclicity
0.063[zip.env] apply unary rule avatar_check_empty
0.063[zip.env] apply generating rule avatar.lemmas (full: false)
0.063[zip.env] apply generating rule avatar_check_sat (full: false)
0.063[zip.avatar] SAT-solver reports "SAT"
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7, 
       forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d d+*]/id:64/depth:7, 
       forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d c+*]/id:65/depth:7, 
       forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d b+*]/id:66/depth:7, 
       forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d a+*]/id:67/depth:7]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.sup] @[neg_reflect did not simplify the clause @]
0.063[zip.saturate] ### step    53 ###
0.063[zip.saturate]
    given (53 steps, penalty 1):
      `forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d d+*]/id:64/depth:7`
0.063[zip.env] apply binary rule superposition_active
0.063[zip.env] apply binary rule superposition_passive
0.063[zip.env] apply binary rule ctx_narrow
0.063[zip.env] apply binary rule narrow_term_defs
0.063[zip.env] do unary inferences
0.063[zip.env] apply unary rule equality_resolution
0.063[zip.env] apply unary rule equality_factoring
0.063[zip.env] apply unary rule narrow_lit_defs
0.063[zip.env] apply unary rule ind_types.exhaustiveness
0.063[zip.env] apply unary rule ind_types.acyclicity
0.063[zip.env] apply unary rule avatar_check_empty
0.063[zip.env] apply generating rule avatar.lemmas (full: false)
0.063[zip.env] apply generating rule avatar_check_sat (full: false)
0.063[zip.avatar] SAT-solver reports "SAT"
0.063[zip.saturate] inferred new clauses: []
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.saturate] ### step    54 ###
0.064[zip.saturate]
    given (54 steps, penalty 1):
      `forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d c+*]/id:65/depth:7`
0.064[zip.env] apply binary rule superposition_active
0.064[zip.env] apply binary rule superposition_passive
0.064[zip.env] apply binary rule ctx_narrow
0.064[zip.env] apply binary rule narrow_term_defs
0.064[zip.env] do unary inferences
0.064[zip.env] apply unary rule equality_resolution
0.064[zip.env] apply unary rule equality_factoring
0.064[zip.env] apply unary rule narrow_lit_defs
0.064[zip.env] apply unary rule ind_types.exhaustiveness
0.064[zip.env] apply unary rule ind_types.acyclicity
0.064[zip.env] apply unary rule avatar_check_empty
0.064[zip.env] apply generating rule avatar.lemmas (full: false)
0.064[zip.env] apply generating rule avatar_check_sat (full: false)
0.064[zip.avatar] SAT-solver reports "SAT"
0.064[zip.saturate] inferred new clauses: []
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.saturate] ### step    55 ###
0.064[zip.saturate]
    given (55 steps, penalty 1):
      `forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d b+*]/id:66/depth:7`
0.064[zip.env] apply binary rule superposition_active
0.064[zip.env] apply binary rule superposition_passive
0.064[zip.env] apply binary rule ctx_narrow
0.064[zip.env] apply binary rule narrow_term_defs
0.064[zip.env] do unary inferences
0.064[zip.env] apply unary rule equality_resolution
0.064[zip.env] apply unary rule equality_factoring
0.064[zip.env] apply unary rule narrow_lit_defs
0.064[zip.env] apply unary rule ind_types.exhaustiveness
0.064[zip.env] apply unary rule ind_types.acyclicity
0.064[zip.env] apply unary rule avatar_check_empty
0.064[zip.env] apply generating rule avatar.lemmas (full: false)
0.064[zip.env] apply generating rule avatar_check_sat (full: false)
0.064[zip.avatar] SAT-solver reports "SAT"
0.064[zip.saturate] inferred new clauses: []
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.sup] @[neg_reflect did not simplify the clause @]
0.064[zip.saturate] ### step    56 ###
0.064[zip.saturate]
    given (56 steps, penalty 1):
      `forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d a+*]/id:67/depth:7`
0.065[zip.env] apply binary rule superposition_active
0.065[zip.env] apply binary rule superposition_passive
0.065[zip.env] apply binary rule ctx_narrow
0.065[zip.env] apply binary rule narrow_term_defs
0.065[zip.env] do unary inferences
0.065[zip.env] apply unary rule equality_resolution
0.065[zip.env] apply unary rule equality_factoring
0.065[zip.env] apply unary rule narrow_lit_defs
0.065[zip.env] apply unary rule ind_types.exhaustiveness
0.065[zip.env] apply unary rule ind_types.acyclicity
0.065[zip.env] apply unary rule avatar_check_empty
0.065[zip.env] apply generating rule avatar.lemmas (full: false)
0.065[zip.env] apply generating rule avatar_check_sat (full: false)
0.065[zip.avatar] SAT-solver reports "SAT"
0.065[zip.saturate] inferred new clauses: []
0.065[zip.sup] @[neg_reflect did not simplify the clause @]
0.065[zip.sup] @[neg_reflect did not simplify the clause @]
0.065[zip.saturate] ### step    57 ###
0.065[zip.saturate]
    given (57 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 a X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f a) d X2*]/id:55/depth:5`
0.065[zip.env] apply binary rule superposition_active
0.065[zip.env] apply binary rule superposition_passive
0.065[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [cQ_2 a X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f a) d X2*]/id:55/depth:5[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.065[zip.sup] will yield a tautology
0.065[zip.sup] ... cancel, will yield a tautology
0.065[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 a X1 X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 (f a) d X2*]/id:55/depth:5[0]
         passive_lit=¬cP_1 (f X2) X0 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X0[0]}.

0.065[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6
0.065[zip.env] apply binary rule ctx_narrow
0.066[zip.env] apply binary rule narrow_term_defs
0.066[zip.env] do unary inferences
0.066[zip.env] apply unary rule equality_resolution
0.066[zip.env] apply unary rule equality_factoring
0.066[zip.env] apply unary rule narrow_lit_defs
0.066[zip.env] apply unary rule ind_types.exhaustiveness
0.066[zip.env] apply unary rule ind_types.acyclicity
0.066[zip.env] apply unary rule avatar_check_empty
0.066[zip.env] apply generating rule avatar.lemmas (full: false)
0.066[zip.env] apply generating rule avatar_check_sat (full: false)
0.066[zip.avatar] SAT-solver reports "SAT"
0.066[zip.sup] @[neg_reflect did not simplify the clause @]
0.066[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6]
0.066[zip.sup] @[neg_reflect did not simplify the clause @]
0.066[zip.sup] @[neg_reflect did not simplify the clause @]
0.066[zip.saturate] ### step    58 ###
0.066[zip.saturate]
    given (58 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6`
0.067[zip.env] apply binary rule superposition_active
0.067[zip.env] apply binary rule superposition_passive
0.067[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.067[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7
0.067[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.067[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d d+*]/id:70/depth:7
0.067[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.068[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d c+*]/id:71/depth:7
0.068[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.068[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d b+*]/id:72/depth:7
0.068[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.069[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d a+*]/id:73/depth:7
0.069[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d X1* ∨ cQ_2 a X2 X0+*]/id:68/depth:6[0]
         passive_lit=cQ_2 a X2 X0 p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.069[zip.sup] will yield a tautology
0.069[zip.sup] ... cancel, will yield a tautology
0.069[zip.env] apply binary rule ctx_narrow
0.069[zip.env] apply binary rule narrow_term_defs
0.069[zip.env] do unary inferences
0.069[zip.env] apply unary rule equality_resolution
0.069[zip.env] apply unary rule equality_factoring
0.069[zip.env] apply unary rule narrow_lit_defs
0.069[zip.env] apply unary rule ind_types.exhaustiveness
0.069[zip.env] apply unary rule ind_types.acyclicity
0.069[zip.env] apply unary rule avatar_check_empty
0.069[zip.env] apply generating rule avatar.lemmas (full: false)
0.069[zip.env] apply generating rule avatar_check_sat (full: false)
0.069[zip.avatar] SAT-solver reports "SAT"
0.069[zip.sup] @[neg_reflect did not simplify the clause @]
0.069[zip.sup] @[neg_reflect did not simplify the clause @]
0.069[zip.sup] @[neg_reflect did not simplify the clause @]
0.069[zip.sup] @[neg_reflect did not simplify the clause @]
0.069[zip.sup] @[neg_reflect did not simplify the clause @]
0.069[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7, 
       forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d d+*]/id:70/depth:7, 
       forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d c+*]/id:71/depth:7, 
       forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d b+*]/id:72/depth:7, 
       forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d a+*]/id:73/depth:7]
0.070[zip.sup] @[neg_reflect did not simplify the clause @]
0.070[zip.sup] @[neg_reflect did not simplify the clause @]
0.070[zip.saturate] ### step    59 ###
0.070[zip.saturate]
    given (59 steps, penalty 1):
      `forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d d+*]/id:70/depth:7`
0.070[zip.env] apply binary rule superposition_active
0.070[zip.env] apply binary rule superposition_passive
0.070[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d d+*]/id:70/depth:7[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.070[zip.sup] will yield a tautology
0.070[zip.sup] ... cancel, will yield a tautology
0.070[zip.env] apply binary rule ctx_narrow
0.070[zip.env] apply binary rule narrow_term_defs
0.070[zip.env] do unary inferences
0.070[zip.env] apply unary rule equality_resolution
0.070[zip.env] apply unary rule equality_factoring
0.070[zip.env] apply unary rule narrow_lit_defs
0.070[zip.env] apply unary rule ind_types.exhaustiveness
0.070[zip.env] apply unary rule ind_types.acyclicity
0.070[zip.env] apply unary rule avatar_check_empty
0.070[zip.env] apply generating rule avatar.lemmas (full: false)
0.070[zip.env] apply generating rule avatar_check_sat (full: false)
0.070[zip.avatar] SAT-solver reports "SAT"
0.070[zip.saturate] inferred new clauses: []
0.070[zip.sup] @[neg_reflect did not simplify the clause @]
0.070[zip.sup] @[neg_reflect did not simplify the clause @]
0.071[zip.saturate] ### step    60 ###
0.071[zip.saturate]
    given (60 steps, penalty 1):
      `forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d c+*]/id:71/depth:7`
0.071[zip.env] apply binary rule superposition_active
0.071[zip.env] apply binary rule superposition_passive
0.071[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d c+*]/id:71/depth:7[0]
         passive_lit=cQ_2 a X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.071[zip.sup] will yield a tautology
0.071[zip.sup] ... cancel, will yield a tautology
0.071[zip.env] apply binary rule ctx_narrow
0.071[zip.env] apply binary rule narrow_term_defs
0.071[zip.env] do unary inferences
0.071[zip.env] apply unary rule equality_resolution
0.071[zip.env] apply unary rule equality_factoring
0.071[zip.env] apply unary rule narrow_lit_defs
0.071[zip.env] apply unary rule ind_types.exhaustiveness
0.071[zip.env] apply unary rule ind_types.acyclicity
0.071[zip.env] apply unary rule avatar_check_empty
0.071[zip.env] apply generating rule avatar.lemmas (full: false)
0.071[zip.env] apply generating rule avatar_check_sat (full: false)
0.071[zip.avatar] SAT-solver reports "SAT"
0.071[zip.saturate] inferred new clauses: []
0.071[zip.sup] @[neg_reflect did not simplify the clause @]
0.071[zip.sup] @[neg_reflect did not simplify the clause @]
0.071[zip.saturate] ### step    61 ###
0.071[zip.saturate]
    given (61 steps, penalty 1):
      `forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d b+*]/id:72/depth:7`
0.071[zip.env] apply binary rule superposition_active
0.071[zip.env] apply binary rule superposition_passive
0.071[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d b+*]/id:72/depth:7[0]
         passive_lit=cQ_2 a X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.072[zip.sup] will yield a tautology
0.072[zip.sup] ... cancel, will yield a tautology
0.072[zip.env] apply binary rule ctx_narrow
0.072[zip.env] apply binary rule narrow_term_defs
0.072[zip.env] do unary inferences
0.072[zip.env] apply unary rule equality_resolution
0.072[zip.env] apply unary rule equality_factoring
0.072[zip.env] apply unary rule narrow_lit_defs
0.072[zip.env] apply unary rule ind_types.exhaustiveness
0.072[zip.env] apply unary rule ind_types.acyclicity
0.072[zip.env] apply unary rule avatar_check_empty
0.072[zip.env] apply generating rule avatar.lemmas (full: false)
0.072[zip.env] apply generating rule avatar_check_sat (full: false)
0.072[zip.avatar] SAT-solver reports "SAT"
0.072[zip.saturate] inferred new clauses: []
0.072[zip.sup] @[neg_reflect did not simplify the clause @]
0.072[zip.sup] @[neg_reflect did not simplify the clause @]
0.072[zip.saturate] ### step    62 ###
0.072[zip.saturate]
    given (62 steps, penalty 1):
      `forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d a+*]/id:73/depth:7`
0.073[zip.env] apply binary rule superposition_active
0.073[zip.env] apply binary rule superposition_passive
0.073[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d a+*]/id:73/depth:7[0]
         passive_lit=cQ_2 a X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.073[zip.sup] will yield a tautology
0.073[zip.sup] ... cancel, will yield a tautology
0.073[zip.env] apply binary rule ctx_narrow
0.073[zip.env] apply binary rule narrow_term_defs
0.073[zip.env] do unary inferences
0.073[zip.env] apply unary rule equality_resolution
0.073[zip.env] apply unary rule equality_factoring
0.073[zip.env] apply unary rule narrow_lit_defs
0.073[zip.env] apply unary rule ind_types.exhaustiveness
0.073[zip.env] apply unary rule ind_types.acyclicity
0.073[zip.env] apply unary rule avatar_check_empty
0.073[zip.env] apply generating rule avatar.lemmas (full: false)
0.073[zip.env] apply generating rule avatar_check_sat (full: false)
0.073[zip.avatar] SAT-solver reports "SAT"
0.073[zip.saturate] inferred new clauses: []
0.073[zip.sup] @[neg_reflect did not simplify the clause @]
0.073[zip.sup] @[neg_reflect did not simplify the clause @]
0.074[zip.saturate] ### step    63 ###
0.074[zip.saturate]
    given (63 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7`
0.074[zip.env] apply binary rule superposition_active
0.074[zip.env] apply binary rule superposition_passive
0.074[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.074[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8
0.075[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.075[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f c) d (f d)+* ∨ cQ_2 c X1 X0+*]/id:75/depth:8
0.075[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.075[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f c)+* ∨ cQ_2 c X0 c+*]/id:76/depth:8
0.075[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.076[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f b)+* ∨ cQ_2 c X0 b+*]/id:77/depth:8
0.076[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f X1)*]/id:57/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.076[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f a)+* ∨ cQ_2 c X0 a+*]/id:78/depth:8
0.076[zip.env] apply binary rule ctx_narrow
0.076[zip.env] apply binary rule narrow_term_defs
0.076[zip.env] do unary inferences
0.076[zip.env] apply unary rule equality_resolution
0.076[zip.env] apply unary rule equality_factoring
0.076[zip.env] apply unary rule narrow_lit_defs
0.076[zip.env] apply unary rule ind_types.exhaustiveness
0.076[zip.env] apply unary rule ind_types.acyclicity
0.076[zip.env] apply unary rule avatar_check_empty
0.076[zip.env] apply generating rule avatar.lemmas (full: false)
0.076[zip.env] apply generating rule avatar_check_sat (full: false)
0.076[zip.avatar] SAT-solver reports "SAT"
0.076[zip.sup] @[neg_reflect did not simplify the clause @]
0.076[zip.sup] @[neg_reflect did not simplify the clause @]
0.076[zip.sup] @[neg_reflect did not simplify the clause @]
0.076[zip.sup] @[neg_reflect did not simplify the clause @]
0.077[zip.sup] @[neg_reflect did not simplify the clause @]
0.077[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8, 
       forall X0 X1. [¬cQ_1 (f c) d (f d)+* ∨ cQ_2 c X1 X0+*]/id:75/depth:8, 
       forall X0. [¬cQ_1 (f c) d (f c)+* ∨ cQ_2 c X0 c+*]/id:76/depth:8, 
       forall X0. [¬cQ_1 (f c) d (f b)+* ∨ cQ_2 c X0 b+*]/id:77/depth:8, 
       forall X0. [¬cQ_1 (f c) d (f a)+* ∨ cQ_2 c X0 a+*]/id:78/depth:8]
0.077[zip.sup] @[neg_reflect did not simplify the clause @]
0.077[zip.sup] @[neg_reflect did not simplify the clause @]
0.077[zip.saturate] ### step    64 ###
0.077[zip.saturate]
    given (64 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f c) d (f d)+* ∨ cQ_2 c X1 X0+*]/id:75/depth:8`
0.078[zip.env] apply binary rule superposition_active
0.078[zip.env] apply binary rule superposition_passive
0.078[zip.env] apply binary rule ctx_narrow
0.078[zip.env] apply binary rule narrow_term_defs
0.078[zip.env] do unary inferences
0.078[zip.env] apply unary rule equality_resolution
0.078[zip.env] apply unary rule equality_factoring
0.078[zip.env] apply unary rule narrow_lit_defs
0.078[zip.env] apply unary rule ind_types.exhaustiveness
0.078[zip.env] apply unary rule ind_types.acyclicity
0.078[zip.env] apply unary rule avatar_check_empty
0.078[zip.env] apply generating rule avatar.lemmas (full: false)
0.078[zip.env] apply generating rule avatar_check_sat (full: false)
0.078[zip.avatar] SAT-solver reports "SAT"
0.078[zip.saturate] inferred new clauses: []
0.078[zip.sup] @[neg_reflect did not simplify the clause @]
0.078[zip.sup] @[neg_reflect did not simplify the clause @]
0.078[zip.saturate] ### step    65 ###
0.078[zip.saturate]
    given (65 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f c)+* ∨ cQ_2 c X0 c+*]/id:76/depth:8`
0.078[zip.env] apply binary rule superposition_active
0.078[zip.env] apply binary rule superposition_passive
0.078[zip.env] apply binary rule ctx_narrow
0.078[zip.env] apply binary rule narrow_term_defs
0.078[zip.env] do unary inferences
0.078[zip.env] apply unary rule equality_resolution
0.078[zip.env] apply unary rule equality_factoring
0.078[zip.env] apply unary rule narrow_lit_defs
0.078[zip.env] apply unary rule ind_types.exhaustiveness
0.078[zip.env] apply unary rule ind_types.acyclicity
0.078[zip.env] apply unary rule avatar_check_empty
0.079[zip.env] apply generating rule avatar.lemmas (full: false)
0.079[zip.env] apply generating rule avatar_check_sat (full: false)
0.079[zip.avatar] SAT-solver reports "SAT"
0.079[zip.saturate] inferred new clauses: []
0.079[zip.sup] @[neg_reflect did not simplify the clause @]
0.079[zip.sup] @[neg_reflect did not simplify the clause @]
0.079[zip.saturate] ### step    66 ###
0.079[zip.saturate]
    given (66 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f b)+* ∨ cQ_2 c X0 b+*]/id:77/depth:8`
0.079[zip.env] apply binary rule superposition_active
0.079[zip.env] apply binary rule superposition_passive
0.079[zip.env] apply binary rule ctx_narrow
0.079[zip.env] apply binary rule narrow_term_defs
0.079[zip.env] do unary inferences
0.079[zip.env] apply unary rule equality_resolution
0.079[zip.env] apply unary rule equality_factoring
0.079[zip.env] apply unary rule narrow_lit_defs
0.079[zip.env] apply unary rule ind_types.exhaustiveness
0.079[zip.env] apply unary rule ind_types.acyclicity
0.079[zip.env] apply unary rule avatar_check_empty
0.079[zip.env] apply generating rule avatar.lemmas (full: false)
0.079[zip.env] apply generating rule avatar_check_sat (full: false)
0.079[zip.avatar] SAT-solver reports "SAT"
0.079[zip.saturate] inferred new clauses: []
0.079[zip.sup] @[neg_reflect did not simplify the clause @]
0.079[zip.sup] @[neg_reflect did not simplify the clause @]
0.079[zip.saturate] ### step    67 ###
0.079[zip.saturate]
    given (67 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f a)+* ∨ cQ_2 c X0 a+*]/id:78/depth:8`
0.079[zip.env] apply binary rule superposition_active
0.079[zip.env] apply binary rule superposition_passive
0.079[zip.env] apply binary rule ctx_narrow
0.079[zip.env] apply binary rule narrow_term_defs
0.079[zip.env] do unary inferences
0.079[zip.env] apply unary rule equality_resolution
0.079[zip.env] apply unary rule equality_factoring
0.080[zip.env] apply unary rule narrow_lit_defs
0.080[zip.env] apply unary rule ind_types.exhaustiveness
0.080[zip.env] apply unary rule ind_types.acyclicity
0.080[zip.env] apply unary rule avatar_check_empty
0.080[zip.env] apply generating rule avatar.lemmas (full: false)
0.080[zip.env] apply generating rule avatar_check_sat (full: false)
0.080[zip.avatar] SAT-solver reports "SAT"
0.080[zip.saturate] inferred new clauses: []
0.080[zip.sup] @[neg_reflect did not simplify the clause @]
0.080[zip.sup] @[neg_reflect did not simplify the clause @]
0.080[zip.saturate] ### step    68 ###
0.080[zip.saturate]
    given (68 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7`
0.080[zip.env] apply binary rule superposition_active
0.080[zip.env] apply binary rule superposition_passive
0.080[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.080[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8
0.080[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.081[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f b) d (f d)+* ∨ cQ_2 b X1 X0+*]/id:80/depth:8
0.081[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.081[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f c)+* ∨ cQ_2 b X0 c+*]/id:81/depth:8
0.081[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.081[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f b)+* ∨ cQ_2 b X0 b+*]/id:82/depth:8
0.081[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f X1)*]/id:63/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.081[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f a)+* ∨ cQ_2 b X0 a+*]/id:83/depth:8
0.081[zip.env] apply binary rule ctx_narrow
0.081[zip.env] apply binary rule narrow_term_defs
0.081[zip.env] do unary inferences
0.081[zip.env] apply unary rule equality_resolution
0.081[zip.env] apply unary rule equality_factoring
0.081[zip.env] apply unary rule narrow_lit_defs
0.081[zip.env] apply unary rule ind_types.exhaustiveness
0.081[zip.env] apply unary rule ind_types.acyclicity
0.081[zip.env] apply unary rule avatar_check_empty
0.081[zip.env] apply generating rule avatar.lemmas (full: false)
0.081[zip.env] apply generating rule avatar_check_sat (full: false)
0.081[zip.avatar] SAT-solver reports "SAT"
0.081[zip.sup] @[neg_reflect did not simplify the clause @]
0.081[zip.sup] @[neg_reflect did not simplify the clause @]
0.081[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8, 
       forall X0 X1. [¬cQ_1 (f b) d (f d)+* ∨ cQ_2 b X1 X0+*]/id:80/depth:8, 
       forall X0. [¬cQ_1 (f b) d (f c)+* ∨ cQ_2 b X0 c+*]/id:81/depth:8, 
       forall X0. [¬cQ_1 (f b) d (f b)+* ∨ cQ_2 b X0 b+*]/id:82/depth:8, 
       forall X0. [¬cQ_1 (f b) d (f a)+* ∨ cQ_2 b X0 a+*]/id:83/depth:8]
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.saturate] ### step    69 ###
0.082[zip.saturate]
    given (69 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f b) d (f d)+* ∨ cQ_2 b X1 X0+*]/id:80/depth:8`
0.082[zip.env] apply binary rule superposition_active
0.082[zip.env] apply binary rule superposition_passive
0.082[zip.env] apply binary rule ctx_narrow
0.082[zip.env] apply binary rule narrow_term_defs
0.082[zip.env] do unary inferences
0.082[zip.env] apply unary rule equality_resolution
0.082[zip.env] apply unary rule equality_factoring
0.082[zip.env] apply unary rule narrow_lit_defs
0.082[zip.env] apply unary rule ind_types.exhaustiveness
0.082[zip.env] apply unary rule ind_types.acyclicity
0.082[zip.env] apply unary rule avatar_check_empty
0.082[zip.env] apply generating rule avatar.lemmas (full: false)
0.082[zip.env] apply generating rule avatar_check_sat (full: false)
0.082[zip.avatar] SAT-solver reports "SAT"
0.082[zip.saturate] inferred new clauses: []
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.082[zip.sup] @[neg_reflect did not simplify the clause @]
0.083[zip.saturate] ### step    70 ###
0.083[zip.saturate]
    given (70 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f c)+* ∨ cQ_2 b X0 c+*]/id:81/depth:8`
0.083[zip.env] apply binary rule superposition_active
0.083[zip.env] apply binary rule superposition_passive
0.083[zip.env] apply binary rule ctx_narrow
0.083[zip.env] apply binary rule narrow_term_defs
0.083[zip.env] do unary inferences
0.083[zip.env] apply unary rule equality_resolution
0.083[zip.env] apply unary rule equality_factoring
0.083[zip.env] apply unary rule narrow_lit_defs
0.083[zip.env] apply unary rule ind_types.exhaustiveness
0.083[zip.env] apply unary rule ind_types.acyclicity
0.083[zip.env] apply unary rule avatar_check_empty
0.083[zip.env] apply generating rule avatar.lemmas (full: false)
0.083[zip.env] apply generating rule avatar_check_sat (full: false)
0.083[zip.avatar] SAT-solver reports "SAT"
0.083[zip.saturate] inferred new clauses: []
0.083[zip.sup] @[neg_reflect did not simplify the clause @]
0.083[zip.sup] @[neg_reflect did not simplify the clause @]
0.083[zip.saturate] ### step    71 ###
0.083[zip.saturate]
    given (71 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f b)+* ∨ cQ_2 b X0 b+*]/id:82/depth:8`
0.083[zip.env] apply binary rule superposition_active
0.083[zip.env] apply binary rule superposition_passive
0.083[zip.env] apply binary rule ctx_narrow
0.083[zip.env] apply binary rule narrow_term_defs
0.083[zip.env] do unary inferences
0.083[zip.env] apply unary rule equality_resolution
0.083[zip.env] apply unary rule equality_factoring
0.083[zip.env] apply unary rule narrow_lit_defs
0.083[zip.env] apply unary rule ind_types.exhaustiveness
0.083[zip.env] apply unary rule ind_types.acyclicity
0.084[zip.env] apply unary rule avatar_check_empty
0.084[zip.env] apply generating rule avatar.lemmas (full: false)
0.084[zip.env] apply generating rule avatar_check_sat (full: false)
0.084[zip.avatar] SAT-solver reports "SAT"
0.084[zip.saturate] inferred new clauses: []
0.084[zip.sup] @[neg_reflect did not simplify the clause @]
0.084[zip.sup] @[neg_reflect did not simplify the clause @]
0.084[zip.saturate] ### step    72 ###
0.084[zip.saturate]
    given (72 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f a)+* ∨ cQ_2 b X0 a+*]/id:83/depth:8`
0.084[zip.env] apply binary rule superposition_active
0.084[zip.env] apply binary rule superposition_passive
0.084[zip.env] apply binary rule ctx_narrow
0.084[zip.env] apply binary rule narrow_term_defs
0.084[zip.env] do unary inferences
0.084[zip.env] apply unary rule equality_resolution
0.084[zip.env] apply unary rule equality_factoring
0.084[zip.env] apply unary rule narrow_lit_defs
0.084[zip.env] apply unary rule ind_types.exhaustiveness
0.084[zip.env] apply unary rule ind_types.acyclicity
0.084[zip.env] apply unary rule avatar_check_empty
0.084[zip.env] apply generating rule avatar.lemmas (full: false)
0.084[zip.env] apply generating rule avatar_check_sat (full: false)
0.084[zip.avatar] SAT-solver reports "SAT"
0.084[zip.saturate] inferred new clauses: []
0.084[zip.sup] @[neg_reflect did not simplify the clause @]
0.084[zip.sup] @[neg_reflect did not simplify the clause @]
0.084[zip.saturate] ### step    73 ###
0.084[zip.saturate]
    given (73 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7`
0.085[zip.env] apply binary rule superposition_active
0.085[zip.env] apply binary rule superposition_passive
0.085[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.085[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8
0.085[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.085[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f a) d (f d)+* ∨ cQ_2 a X1 X0+*]/id:85/depth:8
0.085[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.086[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f c)+* ∨ cQ_2 a X0 c+*]/id:86/depth:8
0.086[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.086[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f b)+* ∨ cQ_2 a X0 b+*]/id:87/depth:8
0.086[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.086[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f a)+* ∨ cQ_2 a X0 a+*]/id:88/depth:8
0.086[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f X1)*]/id:69/depth:7[0]
         passive_lit=cQ_2 a X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.086[zip.sup] will yield a tautology
0.086[zip.sup] ... cancel, will yield a tautology
0.086[zip.env] apply binary rule ctx_narrow
0.086[zip.env] apply binary rule narrow_term_defs
0.086[zip.env] do unary inferences
0.086[zip.env] apply unary rule equality_resolution
0.086[zip.env] apply unary rule equality_factoring
0.086[zip.env] apply unary rule narrow_lit_defs
0.086[zip.env] apply unary rule ind_types.exhaustiveness
0.086[zip.env] apply unary rule ind_types.acyclicity
0.086[zip.env] apply unary rule avatar_check_empty
0.086[zip.env] apply generating rule avatar.lemmas (full: false)
0.086[zip.env] apply generating rule avatar_check_sat (full: false)
0.086[zip.avatar] SAT-solver reports "SAT"
0.086[zip.sup] @[neg_reflect did not simplify the clause @]
0.086[zip.sup] @[neg_reflect did not simplify the clause @]
0.086[zip.sup] @[neg_reflect did not simplify the clause @]
0.087[zip.sup] @[neg_reflect did not simplify the clause @]
0.087[zip.sup] @[neg_reflect did not simplify the clause @]
0.087[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8, 
       forall X0 X1. [¬cQ_1 (f a) d (f d)+* ∨ cQ_2 a X1 X0+*]/id:85/depth:8, 
       forall X0. [¬cQ_1 (f a) d (f c)+* ∨ cQ_2 a X0 c+*]/id:86/depth:8, 
       forall X0. [¬cQ_1 (f a) d (f b)+* ∨ cQ_2 a X0 b+*]/id:87/depth:8, 
       forall X0. [¬cQ_1 (f a) d (f a)+* ∨ cQ_2 a X0 a+*]/id:88/depth:8]
0.087[zip.sup] @[neg_reflect did not simplify the clause @]
0.087[zip.sup] @[neg_reflect did not simplify the clause @]
0.087[zip.saturate] ### step    74 ###
0.087[zip.saturate]
    given (74 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f a) d (f d)+* ∨ cQ_2 a X1 X0+*]/id:85/depth:8`
0.087[zip.env] apply binary rule superposition_active
0.087[zip.env] apply binary rule superposition_passive
0.087[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f a) d (f d)+* ∨ cQ_2 a X1 X0+*]/id:85/depth:8[0]
         passive_lit=cQ_2 a X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.087[zip.sup] will yield a tautology
0.087[zip.sup] ... cancel, will yield a tautology
0.087[zip.env] apply binary rule ctx_narrow
0.087[zip.env] apply binary rule narrow_term_defs
0.087[zip.env] do unary inferences
0.087[zip.env] apply unary rule equality_resolution
0.087[zip.env] apply unary rule equality_factoring
0.087[zip.env] apply unary rule narrow_lit_defs
0.087[zip.env] apply unary rule ind_types.exhaustiveness
0.087[zip.env] apply unary rule ind_types.acyclicity
0.087[zip.env] apply unary rule avatar_check_empty
0.087[zip.env] apply generating rule avatar.lemmas (full: false)
0.087[zip.env] apply generating rule avatar_check_sat (full: false)
0.087[zip.avatar] SAT-solver reports "SAT"
0.087[zip.saturate] inferred new clauses: []
0.087[zip.sup] @[neg_reflect did not simplify the clause @]
0.088[zip.sup] @[neg_reflect did not simplify the clause @]
0.088[zip.saturate] ### step    75 ###
0.088[zip.saturate]
    given (75 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f c)+* ∨ cQ_2 a X0 c+*]/id:86/depth:8`
0.088[zip.env] apply binary rule superposition_active
0.088[zip.env] apply binary rule superposition_passive
0.088[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f c)+* ∨ cQ_2 a X0 c+*]/id:86/depth:8[0]
         passive_lit=cQ_2 a X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.088[zip.sup] will yield a tautology
0.088[zip.sup] ... cancel, will yield a tautology
0.088[zip.env] apply binary rule ctx_narrow
0.088[zip.env] apply binary rule narrow_term_defs
0.088[zip.env] do unary inferences
0.088[zip.env] apply unary rule equality_resolution
0.088[zip.env] apply unary rule equality_factoring
0.088[zip.env] apply unary rule narrow_lit_defs
0.088[zip.env] apply unary rule ind_types.exhaustiveness
0.088[zip.env] apply unary rule ind_types.acyclicity
0.088[zip.env] apply unary rule avatar_check_empty
0.088[zip.env] apply generating rule avatar.lemmas (full: false)
0.088[zip.env] apply generating rule avatar_check_sat (full: false)
0.088[zip.avatar] SAT-solver reports "SAT"
0.088[zip.saturate] inferred new clauses: []
0.088[zip.sup] @[neg_reflect did not simplify the clause @]
0.088[zip.sup] @[neg_reflect did not simplify the clause @]
0.088[zip.saturate] ### step    76 ###
0.088[zip.saturate]
    given (76 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f b)+* ∨ cQ_2 a X0 b+*]/id:87/depth:8`
0.088[zip.env] apply binary rule superposition_active
0.088[zip.env] apply binary rule superposition_passive
0.089[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f b)+* ∨ cQ_2 a X0 b+*]/id:87/depth:8[0]
         passive_lit=cQ_2 a X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.089[zip.sup] will yield a tautology
0.089[zip.sup] ... cancel, will yield a tautology
0.089[zip.env] apply binary rule ctx_narrow
0.089[zip.env] apply binary rule narrow_term_defs
0.089[zip.env] do unary inferences
0.089[zip.env] apply unary rule equality_resolution
0.089[zip.env] apply unary rule equality_factoring
0.089[zip.env] apply unary rule narrow_lit_defs
0.089[zip.env] apply unary rule ind_types.exhaustiveness
0.089[zip.env] apply unary rule ind_types.acyclicity
0.089[zip.env] apply unary rule avatar_check_empty
0.089[zip.env] apply generating rule avatar.lemmas (full: false)
0.089[zip.env] apply generating rule avatar_check_sat (full: false)
0.089[zip.avatar] SAT-solver reports "SAT"
0.089[zip.saturate] inferred new clauses: []
0.089[zip.sup] @[neg_reflect did not simplify the clause @]
0.089[zip.sup] @[neg_reflect did not simplify the clause @]
0.089[zip.saturate] ### step    77 ###
0.089[zip.saturate]
    given (77 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f a)+* ∨ cQ_2 a X0 a+*]/id:88/depth:8`
0.089[zip.env] apply binary rule superposition_active
0.089[zip.env] apply binary rule superposition_passive
0.089[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f a)+* ∨ cQ_2 a X0 a+*]/id:88/depth:8[0]
         passive_lit=cQ_2 a X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.089[zip.sup] will yield a tautology
0.089[zip.sup] ... cancel, will yield a tautology
0.089[zip.env] apply binary rule ctx_narrow
0.089[zip.env] apply binary rule narrow_term_defs
0.089[zip.env] do unary inferences
0.089[zip.env] apply unary rule equality_resolution
0.089[zip.env] apply unary rule equality_factoring
0.089[zip.env] apply unary rule narrow_lit_defs
0.089[zip.env] apply unary rule ind_types.exhaustiveness
0.089[zip.env] apply unary rule ind_types.acyclicity
0.089[zip.env] apply unary rule avatar_check_empty
0.089[zip.env] apply generating rule avatar.lemmas (full: false)
0.089[zip.env] apply generating rule avatar_check_sat (full: false)
0.089[zip.avatar] SAT-solver reports "SAT"
0.089[zip.saturate] inferred new clauses: []
0.089[zip.sup] @[neg_reflect did not simplify the clause @]
0.089[zip.sup] @[neg_reflect did not simplify the clause @]
0.090[zip.saturate] ### step    78 ###
0.090[zip.saturate]
    given (78 steps, penalty 1):
      `forall X12 X13 X14 X15 X16 X17.
       [¬cP_2 (f X12) X13+* ∨ ¬cP_2 (f X14) X15* ∨ 
        ¬cQ_2 X14 X12 X16* ∨ ¬cP_2 (f X16) X17* ∨ cQ_3 X15 X13 X17+*]/id:12/depth:0`
0.090[zip.env] apply binary rule superposition_active
0.090[zip.env] apply binary rule superposition_passive
0.090[zip.sup]
    sup, kind sup
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[1]
         s=cP_2 (f X10) X11 t=true)
      (forall X12 X13 X14 X15 X16 X17.
       [¬cP_2 (f X12) X13+* ∨ ¬cP_2 (f X14) X15* ∨ 
        ¬cQ_2 X14 X12 X16* ∨ ¬cP_2 (f X16) X17* ∨ cQ_3 X15 X13 X17+*]/id:12/depth:0[0]
         passive_lit=¬cP_2 (f X12) X13 p=0.←.ε)
      with subst={X10[1] → X12[0], X11[1] → X13[0]}.

0.090[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
     ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1
0.091[zip.env] apply binary rule ctx_narrow
0.091[zip.env] apply binary rule narrow_term_defs
0.091[zip.env] do unary inferences
0.091[zip.env] apply unary rule equality_resolution
0.091[zip.env] apply unary rule equality_factoring
0.091[zip.env] apply unary rule narrow_lit_defs
0.091[zip.env] apply unary rule ind_types.exhaustiveness
0.091[zip.env] apply unary rule ind_types.acyclicity
0.091[zip.env] apply unary rule avatar_check_empty
0.091[zip.env] apply generating rule avatar.lemmas (full: false)
0.091[zip.env] apply generating rule avatar_check_sat (full: false)
0.091[zip.avatar] SAT-solver reports "SAT"
0.091[zip.sup] @[neg_reflect did not simplify the clause @]
0.091[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1]
0.091[zip.sup] @[neg_reflect did not simplify the clause @]
0.091[zip.sup] @[neg_reflect did not simplify the clause @]
0.091[zip.saturate] ### step    79 ###
0.091[zip.saturate]
    given (79 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8`
0.092[zip.env] apply binary rule superposition_active
0.092[zip.env] apply binary rule superposition_passive
0.092[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.092[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9
0.092[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.092[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f d))+*]/id:91/depth:9
0.092[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.092[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f c))+*]/id:92/depth:9
0.093[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.093[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f b))+*]/id:93/depth:9
0.093[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f X1))* ∨ cQ_2 c X2 X0+*]/id:74/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.093[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f a))+*]/id:94/depth:9
0.093[zip.env] apply binary rule ctx_narrow
0.093[zip.env] apply binary rule narrow_term_defs
0.093[zip.env] do unary inferences
0.093[zip.env] apply unary rule equality_resolution
0.093[zip.env] apply unary rule equality_factoring
0.093[zip.env] apply unary rule narrow_lit_defs
0.093[zip.env] apply unary rule ind_types.exhaustiveness
0.093[zip.env] apply unary rule ind_types.acyclicity
0.093[zip.env] apply unary rule avatar_check_empty
0.093[zip.env] apply generating rule avatar.lemmas (full: false)
0.093[zip.env] apply generating rule avatar_check_sat (full: false)
0.093[zip.avatar] SAT-solver reports "SAT"
0.093[zip.sup] @[neg_reflect did not simplify the clause @]
0.093[zip.sup] @[neg_reflect did not simplify the clause @]
0.093[zip.sup] @[neg_reflect did not simplify the clause @]
0.093[zip.sup] @[neg_reflect did not simplify the clause @]
0.093[zip.sup] @[neg_reflect did not simplify the clause @]
0.093[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9, 
       forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f d))+*]/id:91/depth:9, 
       forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f c))+*]/id:92/depth:9, 
       forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f b))+*]/id:93/depth:9, 
       forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f a))+*]/id:94/depth:9]
0.094[zip.sup] @[neg_reflect did not simplify the clause @]
0.094[zip.sup] @[neg_reflect did not simplify the clause @]
0.094[zip.saturate] ### step    80 ###
0.094[zip.saturate]
    given (80 steps, penalty 1):
      `forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f d))+*]/id:91/depth:9`
0.094[zip.env] apply binary rule superposition_active
0.094[zip.env] apply binary rule superposition_passive
0.094[zip.env] apply binary rule ctx_narrow
0.094[zip.env] apply binary rule narrow_term_defs
0.094[zip.env] do unary inferences
0.094[zip.env] apply unary rule equality_resolution
0.094[zip.env] apply unary rule equality_factoring
0.094[zip.env] apply unary rule narrow_lit_defs
0.094[zip.env] apply unary rule ind_types.exhaustiveness
0.094[zip.env] apply unary rule ind_types.acyclicity
0.094[zip.env] apply unary rule avatar_check_empty
0.094[zip.env] apply generating rule avatar.lemmas (full: false)
0.094[zip.env] apply generating rule avatar_check_sat (full: false)
0.094[zip.avatar] SAT-solver reports "SAT"
0.094[zip.saturate] inferred new clauses: []
0.094[zip.sup] @[neg_reflect did not simplify the clause @]
0.094[zip.sup] @[neg_reflect did not simplify the clause @]
0.094[zip.saturate] ### step    81 ###
0.094[zip.saturate]
    given (81 steps, penalty 1):
      `forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f c))+*]/id:92/depth:9`
0.094[zip.env] apply binary rule superposition_active
0.094[zip.env] apply binary rule superposition_passive
0.094[zip.env] apply binary rule ctx_narrow
0.094[zip.env] apply binary rule narrow_term_defs
0.094[zip.env] do unary inferences
0.094[zip.env] apply unary rule equality_resolution
0.094[zip.env] apply unary rule equality_factoring
0.094[zip.env] apply unary rule narrow_lit_defs
0.094[zip.env] apply unary rule ind_types.exhaustiveness
0.094[zip.env] apply unary rule ind_types.acyclicity
0.094[zip.env] apply unary rule avatar_check_empty
0.094[zip.env] apply generating rule avatar.lemmas (full: false)
0.094[zip.env] apply generating rule avatar_check_sat (full: false)
0.094[zip.avatar] SAT-solver reports "SAT"
0.094[zip.saturate] inferred new clauses: []
0.094[zip.sup] @[neg_reflect did not simplify the clause @]
0.095[zip.sup] @[neg_reflect did not simplify the clause @]
0.095[zip.saturate] ### step    82 ###
0.095[zip.saturate]
    given (82 steps, penalty 1):
      `forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f b))+*]/id:93/depth:9`
0.095[zip.env] apply binary rule superposition_active
0.095[zip.env] apply binary rule superposition_passive
0.095[zip.env] apply binary rule ctx_narrow
0.095[zip.env] apply binary rule narrow_term_defs
0.095[zip.env] do unary inferences
0.095[zip.env] apply unary rule equality_resolution
0.095[zip.env] apply unary rule equality_factoring
0.095[zip.env] apply unary rule narrow_lit_defs
0.095[zip.env] apply unary rule ind_types.exhaustiveness
0.095[zip.env] apply unary rule ind_types.acyclicity
0.095[zip.env] apply unary rule avatar_check_empty
0.095[zip.env] apply generating rule avatar.lemmas (full: false)
0.095[zip.env] apply generating rule avatar_check_sat (full: false)
0.095[zip.avatar] SAT-solver reports "SAT"
0.095[zip.saturate] inferred new clauses: []
0.095[zip.sup] @[neg_reflect did not simplify the clause @]
0.095[zip.sup] @[neg_reflect did not simplify the clause @]
0.095[zip.saturate] ### step    83 ###
0.095[zip.saturate]
    given (83 steps, penalty 1):
      `forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f a))+*]/id:94/depth:9`
0.096[zip.env] apply binary rule superposition_active
0.096[zip.env] apply binary rule superposition_passive
0.096[zip.env] apply binary rule ctx_narrow
0.096[zip.env] apply binary rule narrow_term_defs
0.096[zip.env] do unary inferences
0.096[zip.env] apply unary rule equality_resolution
0.096[zip.env] apply unary rule equality_factoring
0.096[zip.env] apply unary rule narrow_lit_defs
0.096[zip.env] apply unary rule ind_types.exhaustiveness
0.096[zip.env] apply unary rule ind_types.acyclicity
0.096[zip.env] apply unary rule avatar_check_empty
0.096[zip.env] apply generating rule avatar.lemmas (full: false)
0.096[zip.env] apply generating rule avatar_check_sat (full: false)
0.096[zip.avatar] SAT-solver reports "SAT"
0.096[zip.saturate] inferred new clauses: []
0.096[zip.sup] @[neg_reflect did not simplify the clause @]
0.096[zip.sup] @[neg_reflect did not simplify the clause @]
0.096[zip.saturate] ### step    84 ###
0.096[zip.saturate]
    given (84 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8`
0.096[zip.env] apply binary rule superposition_active
0.096[zip.env] apply binary rule superposition_passive
0.096[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.097[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9
0.097[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.097[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f d))+*]/id:96/depth:9
0.097[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.097[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f c))+*]/id:97/depth:9
0.097[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.097[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f b))+*]/id:98/depth:9
0.097[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f X1))* ∨ cQ_2 b X2 X0+*]/id:79/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.097[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f a))+*]/id:99/depth:9
0.097[zip.env] apply binary rule ctx_narrow
0.097[zip.env] apply binary rule narrow_term_defs
0.097[zip.env] do unary inferences
0.097[zip.env] apply unary rule equality_resolution
0.097[zip.env] apply unary rule equality_factoring
0.097[zip.env] apply unary rule narrow_lit_defs
0.097[zip.env] apply unary rule ind_types.exhaustiveness
0.098[zip.env] apply unary rule ind_types.acyclicity
0.098[zip.env] apply unary rule avatar_check_empty
0.098[zip.env] apply generating rule avatar.lemmas (full: false)
0.098[zip.env] apply generating rule avatar_check_sat (full: false)
0.098[zip.avatar] SAT-solver reports "SAT"
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9, 
       forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f d))+*]/id:96/depth:9, 
       forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f c))+*]/id:97/depth:9, 
       forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f b))+*]/id:98/depth:9, 
       forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f a))+*]/id:99/depth:9]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.sup] @[neg_reflect did not simplify the clause @]
0.098[zip.saturate] ### step    85 ###
0.098[zip.saturate]
    given (85 steps, penalty 1):
      `forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f d))+*]/id:96/depth:9`
0.098[zip.env] apply binary rule superposition_active
0.098[zip.env] apply binary rule superposition_passive
0.098[zip.env] apply binary rule ctx_narrow
0.098[zip.env] apply binary rule narrow_term_defs
0.098[zip.env] do unary inferences
0.098[zip.env] apply unary rule equality_resolution
0.098[zip.env] apply unary rule equality_factoring
0.098[zip.env] apply unary rule narrow_lit_defs
0.098[zip.env] apply unary rule ind_types.exhaustiveness
0.098[zip.env] apply unary rule ind_types.acyclicity
0.098[zip.env] apply unary rule avatar_check_empty
0.098[zip.env] apply generating rule avatar.lemmas (full: false)
0.098[zip.env] apply generating rule avatar_check_sat (full: false)
0.098[zip.avatar] SAT-solver reports "SAT"
0.098[zip.saturate] inferred new clauses: []
0.099[zip.sup] @[neg_reflect did not simplify the clause @]
0.099[zip.sup] @[neg_reflect did not simplify the clause @]
0.099[zip.saturate] ### step    86 ###
0.099[zip.saturate]
    given (86 steps, penalty 1):
      `forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f c))+*]/id:97/depth:9`
0.099[zip.env] apply binary rule superposition_active
0.099[zip.env] apply binary rule superposition_passive
0.099[zip.env] apply binary rule ctx_narrow
0.099[zip.env] apply binary rule narrow_term_defs
0.099[zip.env] do unary inferences
0.099[zip.env] apply unary rule equality_resolution
0.099[zip.env] apply unary rule equality_factoring
0.099[zip.env] apply unary rule narrow_lit_defs
0.099[zip.env] apply unary rule ind_types.exhaustiveness
0.099[zip.env] apply unary rule ind_types.acyclicity
0.099[zip.env] apply unary rule avatar_check_empty
0.099[zip.env] apply generating rule avatar.lemmas (full: false)
0.099[zip.env] apply generating rule avatar_check_sat (full: false)
0.099[zip.avatar] SAT-solver reports "SAT"
0.099[zip.saturate] inferred new clauses: []
0.099[zip.sup] @[neg_reflect did not simplify the clause @]
0.099[zip.sup] @[neg_reflect did not simplify the clause @]
0.100[zip.saturate] ### step    87 ###
0.100[zip.saturate]
    given (87 steps, penalty 1):
      `forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f b))+*]/id:98/depth:9`
0.100[zip.env] apply binary rule superposition_active
0.100[zip.env] apply binary rule superposition_passive
0.100[zip.env] apply binary rule ctx_narrow
0.100[zip.env] apply binary rule narrow_term_defs
0.100[zip.env] do unary inferences
0.100[zip.env] apply unary rule equality_resolution
0.100[zip.env] apply unary rule equality_factoring
0.100[zip.env] apply unary rule narrow_lit_defs
0.100[zip.env] apply unary rule ind_types.exhaustiveness
0.100[zip.env] apply unary rule ind_types.acyclicity
0.100[zip.env] apply unary rule avatar_check_empty
0.100[zip.env] apply generating rule avatar.lemmas (full: false)
0.100[zip.env] apply generating rule avatar_check_sat (full: false)
0.100[zip.avatar] SAT-solver reports "SAT"
0.100[zip.saturate] inferred new clauses: []
0.100[zip.sup] @[neg_reflect did not simplify the clause @]
0.100[zip.sup] @[neg_reflect did not simplify the clause @]
0.100[zip.saturate] ### step    88 ###
0.100[zip.saturate]
    given (88 steps, penalty 1):
      `forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f a))+*]/id:99/depth:9`
0.101[zip.env] apply binary rule superposition_active
0.101[zip.env] apply binary rule superposition_passive
0.101[zip.env] apply binary rule ctx_narrow
0.101[zip.env] apply binary rule narrow_term_defs
0.101[zip.env] do unary inferences
0.101[zip.env] apply unary rule equality_resolution
0.101[zip.env] apply unary rule equality_factoring
0.101[zip.env] apply unary rule narrow_lit_defs
0.101[zip.env] apply unary rule ind_types.exhaustiveness
0.101[zip.env] apply unary rule ind_types.acyclicity
0.101[zip.env] apply unary rule avatar_check_empty
0.101[zip.env] apply generating rule avatar.lemmas (full: false)
0.101[zip.env] apply generating rule avatar_check_sat (full: false)
0.101[zip.avatar] SAT-solver reports "SAT"
0.101[zip.saturate] inferred new clauses: []
0.101[zip.sup] @[neg_reflect did not simplify the clause @]
0.101[zip.sup] @[neg_reflect did not simplify the clause @]
0.101[zip.saturate] ### step    89 ###
0.101[zip.saturate]
    given (89 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8`
0.102[zip.env] apply binary rule superposition_active
0.102[zip.env] apply binary rule superposition_passive
0.102[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.102[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9
0.102[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.102[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f d))+*]/id:101/depth:9
0.102[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.103[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f c))+*]/id:102/depth:9
0.103[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.103[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f b))+*]/id:103/depth:9
0.103[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.103[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f a))+*]/id:104/depth:9
0.103[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f X1))* ∨ cQ_2 a X2 X0+*]/id:84/depth:8[0]
         passive_lit=cQ_2 a X2 X0 p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.103[zip.sup] will yield a tautology
0.103[zip.sup] ... cancel, will yield a tautology
0.103[zip.env] apply binary rule ctx_narrow
0.103[zip.env] apply binary rule narrow_term_defs
0.103[zip.env] do unary inferences
0.103[zip.env] apply unary rule equality_resolution
0.103[zip.env] apply unary rule equality_factoring
0.103[zip.env] apply unary rule narrow_lit_defs
0.103[zip.env] apply unary rule ind_types.exhaustiveness
0.103[zip.env] apply unary rule ind_types.acyclicity
0.103[zip.env] apply unary rule avatar_check_empty
0.103[zip.env] apply generating rule avatar.lemmas (full: false)
0.103[zip.env] apply generating rule avatar_check_sat (full: false)
0.103[zip.avatar] SAT-solver reports "SAT"
0.103[zip.sup] @[neg_reflect did not simplify the clause @]
0.103[zip.sup] @[neg_reflect did not simplify the clause @]
0.103[zip.sup] @[neg_reflect did not simplify the clause @]
0.103[zip.sup] @[neg_reflect did not simplify the clause @]
0.103[zip.sup] @[neg_reflect did not simplify the clause @]
0.104[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9, 
       forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f d))+*]/id:101/depth:9, 
       forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f c))+*]/id:102/depth:9, 
       forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f b))+*]/id:103/depth:9, 
       forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f a))+*]/id:104/depth:9]
0.104[zip.sup] @[neg_reflect did not simplify the clause @]
0.104[zip.sup] @[neg_reflect did not simplify the clause @]
0.104[zip.saturate] ### step    90 ###
0.104[zip.saturate]
    given (90 steps, penalty 1):
      `forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f d))+*]/id:101/depth:9`
0.104[zip.env] apply binary rule superposition_active
0.104[zip.env] apply binary rule superposition_passive
0.104[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f d))+*]/id:101/depth:9[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.104[zip.sup] will yield a tautology
0.104[zip.sup] ... cancel, will yield a tautology
0.104[zip.env] apply binary rule ctx_narrow
0.104[zip.env] apply binary rule narrow_term_defs
0.104[zip.env] do unary inferences
0.104[zip.env] apply unary rule equality_resolution
0.104[zip.env] apply unary rule equality_factoring
0.104[zip.env] apply unary rule narrow_lit_defs
0.104[zip.env] apply unary rule ind_types.exhaustiveness
0.104[zip.env] apply unary rule ind_types.acyclicity
0.104[zip.env] apply unary rule avatar_check_empty
0.104[zip.env] apply generating rule avatar.lemmas (full: false)
0.104[zip.env] apply generating rule avatar_check_sat (full: false)
0.104[zip.avatar] SAT-solver reports "SAT"
0.104[zip.saturate] inferred new clauses: []
0.104[zip.sup] @[neg_reflect did not simplify the clause @]
0.104[zip.sup] @[neg_reflect did not simplify the clause @]
0.105[zip.saturate] ### step    91 ###
0.105[zip.saturate]
    given (91 steps, penalty 1):
      `forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f c))+*]/id:102/depth:9`
0.105[zip.env] apply binary rule superposition_active
0.105[zip.env] apply binary rule superposition_passive
0.105[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f c))+*]/id:102/depth:9[0]
         passive_lit=cQ_2 a X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.105[zip.sup] will yield a tautology
0.105[zip.sup] ... cancel, will yield a tautology
0.105[zip.env] apply binary rule ctx_narrow
0.105[zip.env] apply binary rule narrow_term_defs
0.105[zip.env] do unary inferences
0.105[zip.env] apply unary rule equality_resolution
0.105[zip.env] apply unary rule equality_factoring
0.105[zip.env] apply unary rule narrow_lit_defs
0.105[zip.env] apply unary rule ind_types.exhaustiveness
0.105[zip.env] apply unary rule ind_types.acyclicity
0.105[zip.env] apply unary rule avatar_check_empty
0.105[zip.env] apply generating rule avatar.lemmas (full: false)
0.105[zip.env] apply generating rule avatar_check_sat (full: false)
0.105[zip.avatar] SAT-solver reports "SAT"
0.105[zip.saturate] inferred new clauses: []
0.105[zip.sup] @[neg_reflect did not simplify the clause @]
0.105[zip.sup] @[neg_reflect did not simplify the clause @]
0.105[zip.saturate] ### step    92 ###
0.105[zip.saturate]
    given (92 steps, penalty 1):
      `forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f b))+*]/id:103/depth:9`
0.106[zip.env] apply binary rule superposition_active
0.106[zip.env] apply binary rule superposition_passive
0.106[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f b))+*]/id:103/depth:9[0]
         passive_lit=cQ_2 a X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.106[zip.sup] will yield a tautology
0.106[zip.sup] ... cancel, will yield a tautology
0.106[zip.env] apply binary rule ctx_narrow
0.106[zip.env] apply binary rule narrow_term_defs
0.106[zip.env] do unary inferences
0.106[zip.env] apply unary rule equality_resolution
0.106[zip.env] apply unary rule equality_factoring
0.106[zip.env] apply unary rule narrow_lit_defs
0.106[zip.env] apply unary rule ind_types.exhaustiveness
0.106[zip.env] apply unary rule ind_types.acyclicity
0.106[zip.env] apply unary rule avatar_check_empty
0.106[zip.env] apply generating rule avatar.lemmas (full: false)
0.106[zip.env] apply generating rule avatar_check_sat (full: false)
0.106[zip.avatar] SAT-solver reports "SAT"
0.106[zip.saturate] inferred new clauses: []
0.106[zip.sup] @[neg_reflect did not simplify the clause @]
0.106[zip.sup] @[neg_reflect did not simplify the clause @]
0.106[zip.saturate] ### step    93 ###
0.106[zip.saturate]
    given (93 steps, penalty 1):
      `forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f a))+*]/id:104/depth:9`
0.106[zip.env] apply binary rule superposition_active
0.107[zip.env] apply binary rule superposition_passive
0.107[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f a))+*]/id:104/depth:9[0]
         passive_lit=cQ_2 a X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.107[zip.sup] will yield a tautology
0.107[zip.sup] ... cancel, will yield a tautology
0.107[zip.env] apply binary rule ctx_narrow
0.107[zip.env] apply binary rule narrow_term_defs
0.107[zip.env] do unary inferences
0.107[zip.env] apply unary rule equality_resolution
0.107[zip.env] apply unary rule equality_factoring
0.107[zip.env] apply unary rule narrow_lit_defs
0.107[zip.env] apply unary rule ind_types.exhaustiveness
0.107[zip.env] apply unary rule ind_types.acyclicity
0.107[zip.env] apply unary rule avatar_check_empty
0.107[zip.env] apply generating rule avatar.lemmas (full: false)
0.107[zip.env] apply generating rule avatar_check_sat (full: false)
0.107[zip.avatar] SAT-solver reports "SAT"
0.107[zip.saturate] inferred new clauses: []
0.107[zip.sup] @[neg_reflect did not simplify the clause @]
0.107[zip.sup] @[neg_reflect did not simplify the clause @]
0.107[zip.saturate] ### step    94 ###
0.107[zip.saturate]
    given (94 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9`
0.108[zip.env] apply binary rule superposition_active
0.108[zip.env] apply binary rule superposition_passive
0.108[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.108[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ cQ_2 c X2 X0+*]/id:105/depth:10
0.108[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.108[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f c) d (f (f (f d)))+* ∨ cQ_2 c X1 X0+*]/id:106/depth:10
0.108[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.108[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f c)))+* ∨ cQ_2 c X0 c+*]/id:107/depth:10
0.108[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.108[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f b)))+* ∨ cQ_2 c X0 b+*]/id:108/depth:10
0.108[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ ¬cQ_1 (f c) d (f (f (f X1)))*]/id:90/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.109[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f a)))+* ∨ cQ_2 c X0 a+*]/id:109/depth:10
0.109[zip.env] apply binary rule ctx_narrow
0.109[zip.env] apply binary rule narrow_term_defs
0.109[zip.env] do unary inferences
0.109[zip.env] apply unary rule equality_resolution
0.109[zip.env] apply unary rule equality_factoring
0.109[zip.env] apply unary rule narrow_lit_defs
0.109[zip.env] apply unary rule ind_types.exhaustiveness
0.109[zip.env] apply unary rule ind_types.acyclicity
0.109[zip.env] apply unary rule avatar_check_empty
0.109[zip.env] apply generating rule avatar.lemmas (full: false)
0.109[zip.env] apply generating rule avatar_check_sat (full: false)
0.109[zip.avatar] SAT-solver reports "SAT"
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10, 
       forall X0 X1. [¬cQ_1 (f c) d (f (f (f d)))+* ∨ cQ_2 c X1 X0+*]/id:106/depth:10, 
       forall X0. [¬cQ_1 (f c) d (f (f (f c)))+* ∨ cQ_2 c X0 c+*]/id:107/depth:10, 
       forall X0. [¬cQ_1 (f c) d (f (f (f b)))+* ∨ cQ_2 c X0 b+*]/id:108/depth:10, 
       forall X0. [¬cQ_1 (f c) d (f (f (f a)))+* ∨ cQ_2 c X0 a+*]/id:109/depth:10]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.sup] @[neg_reflect did not simplify the clause @]
0.109[zip.saturate] ### step    95 ###
0.109[zip.saturate]
    given (95 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f c) d (f (f (f d)))+* ∨ cQ_2 c X1 X0+*]/id:106/depth:10`
0.110[zip.env] apply binary rule superposition_active
0.110[zip.env] apply binary rule superposition_passive
0.110[zip.env] apply binary rule ctx_narrow
0.110[zip.env] apply binary rule narrow_term_defs
0.110[zip.env] do unary inferences
0.110[zip.env] apply unary rule equality_resolution
0.110[zip.env] apply unary rule equality_factoring
0.110[zip.env] apply unary rule narrow_lit_defs
0.110[zip.env] apply unary rule ind_types.exhaustiveness
0.110[zip.env] apply unary rule ind_types.acyclicity
0.110[zip.env] apply unary rule avatar_check_empty
0.110[zip.env] apply generating rule avatar.lemmas (full: false)
0.110[zip.env] apply generating rule avatar_check_sat (full: false)
0.110[zip.avatar] SAT-solver reports "SAT"
0.110[zip.saturate] inferred new clauses: []
0.110[zip.sup] @[neg_reflect did not simplify the clause @]
0.110[zip.sup] @[neg_reflect did not simplify the clause @]
0.110[zip.saturate] ### step    96 ###
0.110[zip.saturate]
    given (96 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f c)))+* ∨ cQ_2 c X0 c+*]/id:107/depth:10`
0.110[zip.env] apply binary rule superposition_active
0.110[zip.env] apply binary rule superposition_passive
0.110[zip.env] apply binary rule ctx_narrow
0.110[zip.env] apply binary rule narrow_term_defs
0.110[zip.env] do unary inferences
0.110[zip.env] apply unary rule equality_resolution
0.110[zip.env] apply unary rule equality_factoring
0.110[zip.env] apply unary rule narrow_lit_defs
0.110[zip.env] apply unary rule ind_types.exhaustiveness
0.110[zip.env] apply unary rule ind_types.acyclicity
0.110[zip.env] apply unary rule avatar_check_empty
0.110[zip.env] apply generating rule avatar.lemmas (full: false)
0.110[zip.env] apply generating rule avatar_check_sat (full: false)
0.110[zip.avatar] SAT-solver reports "SAT"
0.110[zip.saturate] inferred new clauses: []
0.110[zip.sup] @[neg_reflect did not simplify the clause @]
0.110[zip.sup] @[neg_reflect did not simplify the clause @]
0.111[zip.saturate] ### step    97 ###
0.111[zip.saturate]
    given (97 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f b)))+* ∨ cQ_2 c X0 b+*]/id:108/depth:10`
0.111[zip.env] apply binary rule superposition_active
0.111[zip.env] apply binary rule superposition_passive
0.111[zip.env] apply binary rule ctx_narrow
0.111[zip.env] apply binary rule narrow_term_defs
0.111[zip.env] do unary inferences
0.111[zip.env] apply unary rule equality_resolution
0.111[zip.env] apply unary rule equality_factoring
0.111[zip.env] apply unary rule narrow_lit_defs
0.111[zip.env] apply unary rule ind_types.exhaustiveness
0.111[zip.env] apply unary rule ind_types.acyclicity
0.111[zip.env] apply unary rule avatar_check_empty
0.111[zip.env] apply generating rule avatar.lemmas (full: false)
0.111[zip.env] apply generating rule avatar_check_sat (full: false)
0.111[zip.avatar] SAT-solver reports "SAT"
0.111[zip.saturate] inferred new clauses: []
0.111[zip.sup] @[neg_reflect did not simplify the clause @]
0.111[zip.sup] @[neg_reflect did not simplify the clause @]
0.111[zip.saturate] ### step    98 ###
0.111[zip.saturate]
    given (98 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f a)))+* ∨ cQ_2 c X0 a+*]/id:109/depth:10`
0.111[zip.env] apply binary rule superposition_active
0.111[zip.env] apply binary rule superposition_passive
0.111[zip.env] apply binary rule ctx_narrow
0.111[zip.env] apply binary rule narrow_term_defs
0.111[zip.env] do unary inferences
0.111[zip.env] apply unary rule equality_resolution
0.111[zip.env] apply unary rule equality_factoring
0.111[zip.env] apply unary rule narrow_lit_defs
0.111[zip.env] apply unary rule ind_types.exhaustiveness
0.111[zip.env] apply unary rule ind_types.acyclicity
0.111[zip.env] apply unary rule avatar_check_empty
0.111[zip.env] apply generating rule avatar.lemmas (full: false)
0.111[zip.env] apply generating rule avatar_check_sat (full: false)
0.111[zip.avatar] SAT-solver reports "SAT"
0.111[zip.saturate] inferred new clauses: []
0.111[zip.sup] @[neg_reflect did not simplify the clause @]
0.112[zip.sup] @[neg_reflect did not simplify the clause @]
0.112[zip.saturate] ### step    99 ###
0.112[zip.saturate]
    given (99 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9`
0.112[zip.env] apply binary rule superposition_active
0.112[zip.env] apply binary rule superposition_passive
0.112[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.112[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ cQ_2 b X2 X0+*]/id:110/depth:10
0.112[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.113[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f b) d (f (f (f d)))+* ∨ cQ_2 b X1 X0+*]/id:111/depth:10
0.113[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.113[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f c)))+* ∨ cQ_2 b X0 c+*]/id:112/depth:10
0.113[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.113[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f b)))+* ∨ cQ_2 b X0 b+*]/id:113/depth:10
0.113[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ ¬cQ_1 (f b) d (f (f (f X1)))*]/id:95/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.113[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f a)))+* ∨ cQ_2 b X0 a+*]/id:114/depth:10
0.113[zip.env] apply binary rule ctx_narrow
0.113[zip.env] apply binary rule narrow_term_defs
0.113[zip.env] do unary inferences
0.113[zip.env] apply unary rule equality_resolution
0.113[zip.env] apply unary rule equality_factoring
0.113[zip.env] apply unary rule narrow_lit_defs
0.113[zip.env] apply unary rule ind_types.exhaustiveness
0.113[zip.env] apply unary rule ind_types.acyclicity
0.113[zip.env] apply unary rule avatar_check_empty
0.113[zip.env] apply generating rule avatar.lemmas (full: false)
0.113[zip.env] apply generating rule avatar_check_sat (full: false)
0.113[zip.avatar] SAT-solver reports "SAT"
0.113[zip.sup] @[neg_reflect did not simplify the clause @]
0.113[zip.sup] @[neg_reflect did not simplify the clause @]
0.113[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10, 
       forall X0 X1. [¬cQ_1 (f b) d (f (f (f d)))+* ∨ cQ_2 b X1 X0+*]/id:111/depth:10, 
       forall X0. [¬cQ_1 (f b) d (f (f (f c)))+* ∨ cQ_2 b X0 c+*]/id:112/depth:10, 
       forall X0. [¬cQ_1 (f b) d (f (f (f b)))+* ∨ cQ_2 b X0 b+*]/id:113/depth:10, 
       forall X0. [¬cQ_1 (f b) d (f (f (f a)))+* ∨ cQ_2 b X0 a+*]/id:114/depth:10]
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.saturate] ### step   100 ###
0.114[zip.saturate]
    given (100 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f b) d (f (f (f d)))+* ∨ cQ_2 b X1 X0+*]/id:111/depth:10`
0.114[zip.env] apply binary rule superposition_active
0.114[zip.env] apply binary rule superposition_passive
0.114[zip.env] apply binary rule ctx_narrow
0.114[zip.env] apply binary rule narrow_term_defs
0.114[zip.env] do unary inferences
0.114[zip.env] apply unary rule equality_resolution
0.114[zip.env] apply unary rule equality_factoring
0.114[zip.env] apply unary rule narrow_lit_defs
0.114[zip.env] apply unary rule ind_types.exhaustiveness
0.114[zip.env] apply unary rule ind_types.acyclicity
0.114[zip.env] apply unary rule avatar_check_empty
0.114[zip.env] apply generating rule avatar.lemmas (full: false)
0.114[zip.env] apply generating rule avatar_check_sat (full: false)
0.114[zip.avatar] SAT-solver reports "SAT"
0.114[zip.saturate] inferred new clauses: []
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.114[zip.sup] @[neg_reflect did not simplify the clause @]
0.115[zip.saturate] ### step   101 ###
0.115[zip.saturate]
    given (101 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f c)))+* ∨ cQ_2 b X0 c+*]/id:112/depth:10`
0.115[zip.env] apply binary rule superposition_active
0.115[zip.env] apply binary rule superposition_passive
0.115[zip.env] apply binary rule ctx_narrow
0.115[zip.env] apply binary rule narrow_term_defs
0.115[zip.env] do unary inferences
0.115[zip.env] apply unary rule equality_resolution
0.115[zip.env] apply unary rule equality_factoring
0.115[zip.env] apply unary rule narrow_lit_defs
0.115[zip.env] apply unary rule ind_types.exhaustiveness
0.115[zip.env] apply unary rule ind_types.acyclicity
0.115[zip.env] apply unary rule avatar_check_empty
0.115[zip.env] apply generating rule avatar.lemmas (full: false)
0.115[zip.env] apply generating rule avatar_check_sat (full: false)
0.115[zip.avatar] SAT-solver reports "SAT"
0.115[zip.saturate] inferred new clauses: []
0.115[zip.sup] @[neg_reflect did not simplify the clause @]
0.115[zip.sup] @[neg_reflect did not simplify the clause @]
0.115[zip.saturate] ### step   102 ###
0.115[zip.saturate]
    given (102 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f b)))+* ∨ cQ_2 b X0 b+*]/id:113/depth:10`
0.115[zip.env] apply binary rule superposition_active
0.115[zip.env] apply binary rule superposition_passive
0.115[zip.env] apply binary rule ctx_narrow
0.115[zip.env] apply binary rule narrow_term_defs
0.115[zip.env] do unary inferences
0.115[zip.env] apply unary rule equality_resolution
0.115[zip.env] apply unary rule equality_factoring
0.115[zip.env] apply unary rule narrow_lit_defs
0.115[zip.env] apply unary rule ind_types.exhaustiveness
0.115[zip.env] apply unary rule ind_types.acyclicity
0.115[zip.env] apply unary rule avatar_check_empty
0.115[zip.env] apply generating rule avatar.lemmas (full: false)
0.115[zip.env] apply generating rule avatar_check_sat (full: false)
0.115[zip.avatar] SAT-solver reports "SAT"
0.115[zip.saturate] inferred new clauses: []
0.116[zip.sup] @[neg_reflect did not simplify the clause @]
0.116[zip.sup] @[neg_reflect did not simplify the clause @]
0.116[zip.saturate] ### step   103 ###
0.116[zip.saturate]
    given (103 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f a)))+* ∨ cQ_2 b X0 a+*]/id:114/depth:10`
0.116[zip.env] apply binary rule superposition_active
0.116[zip.env] apply binary rule superposition_passive
0.116[zip.env] apply binary rule ctx_narrow
0.116[zip.env] apply binary rule narrow_term_defs
0.116[zip.env] do unary inferences
0.116[zip.env] apply unary rule equality_resolution
0.116[zip.env] apply unary rule equality_factoring
0.116[zip.env] apply unary rule narrow_lit_defs
0.116[zip.env] apply unary rule ind_types.exhaustiveness
0.116[zip.env] apply unary rule ind_types.acyclicity
0.116[zip.env] apply unary rule avatar_check_empty
0.116[zip.env] apply generating rule avatar.lemmas (full: false)
0.116[zip.env] apply generating rule avatar_check_sat (full: false)
0.116[zip.avatar] SAT-solver reports "SAT"
0.116[zip.saturate] inferred new clauses: []
0.116[zip.sup] @[neg_reflect did not simplify the clause @]
0.116[zip.sup] @[neg_reflect did not simplify the clause @]
0.116[zip.saturate] ### step   104 ###
0.116[zip.saturate]
    given (104 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9`
0.117[zip.env] apply binary rule superposition_active
0.117[zip.env] apply binary rule superposition_passive
0.117[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.117[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ cQ_2 a X2 X0+*]/id:115/depth:10
0.117[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.117[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f a) d (f (f (f d)))+* ∨ cQ_2 a X1 X0+*]/id:116/depth:10
0.118[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.118[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f c)))+* ∨ cQ_2 a X0 c+*]/id:117/depth:10
0.118[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.118[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f b)))+* ∨ cQ_2 a X0 b+*]/id:118/depth:10
0.118[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.118[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f a)))+* ∨ cQ_2 a X0 a+*]/id:119/depth:10
0.119[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ ¬cQ_1 (f a) d (f (f (f X1)))*]/id:100/depth:9[0]
         passive_lit=cQ_2 a X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.119[zip.sup] will yield a tautology
0.119[zip.sup] ... cancel, will yield a tautology
0.119[zip.env] apply binary rule ctx_narrow
0.119[zip.env] apply binary rule narrow_term_defs
0.119[zip.env] do unary inferences
0.119[zip.env] apply unary rule equality_resolution
0.119[zip.env] apply unary rule equality_factoring
0.119[zip.env] apply unary rule narrow_lit_defs
0.119[zip.env] apply unary rule ind_types.exhaustiveness
0.119[zip.env] apply unary rule ind_types.acyclicity
0.119[zip.env] apply unary rule avatar_check_empty
0.119[zip.env] apply generating rule avatar.lemmas (full: false)
0.119[zip.env] apply generating rule avatar_check_sat (full: false)
0.119[zip.avatar] SAT-solver reports "SAT"
0.119[zip.sup] @[neg_reflect did not simplify the clause @]
0.119[zip.sup] @[neg_reflect did not simplify the clause @]
0.119[zip.sup] @[neg_reflect did not simplify the clause @]
0.119[zip.sup] @[neg_reflect did not simplify the clause @]
0.119[zip.sup] @[neg_reflect did not simplify the clause @]
0.119[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10, 
       forall X0 X1. [¬cQ_1 (f a) d (f (f (f d)))+* ∨ cQ_2 a X1 X0+*]/id:116/depth:10, 
       forall X0. [¬cQ_1 (f a) d (f (f (f c)))+* ∨ cQ_2 a X0 c+*]/id:117/depth:10, 
       forall X0. [¬cQ_1 (f a) d (f (f (f b)))+* ∨ cQ_2 a X0 b+*]/id:118/depth:10, 
       forall X0. [¬cQ_1 (f a) d (f (f (f a)))+* ∨ cQ_2 a X0 a+*]/id:119/depth:10]
0.120[zip.sup] @[neg_reflect did not simplify the clause @]
0.120[zip.sup] @[neg_reflect did not simplify the clause @]
0.120[zip.saturate] ### step   105 ###
0.120[zip.saturate]
    given (105 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f a) d (f (f (f d)))+* ∨ cQ_2 a X1 X0+*]/id:116/depth:10`
0.120[zip.env] apply binary rule superposition_active
0.120[zip.env] apply binary rule superposition_passive
0.121[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f a) d (f (f (f d)))+* ∨ cQ_2 a X1 X0+*]/id:116/depth:10[0]
         passive_lit=cQ_2 a X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.121[zip.sup] will yield a tautology
0.121[zip.sup] ... cancel, will yield a tautology
0.121[zip.env] apply binary rule ctx_narrow
0.121[zip.env] apply binary rule narrow_term_defs
0.121[zip.env] do unary inferences
0.121[zip.env] apply unary rule equality_resolution
0.121[zip.env] apply unary rule equality_factoring
0.121[zip.env] apply unary rule narrow_lit_defs
0.121[zip.env] apply unary rule ind_types.exhaustiveness
0.121[zip.env] apply unary rule ind_types.acyclicity
0.121[zip.env] apply unary rule avatar_check_empty
0.121[zip.env] apply generating rule avatar.lemmas (full: false)
0.121[zip.env] apply generating rule avatar_check_sat (full: false)
0.121[zip.avatar] SAT-solver reports "SAT"
0.121[zip.saturate] inferred new clauses: []
0.121[zip.sup] @[neg_reflect did not simplify the clause @]
0.121[zip.sup] @[neg_reflect did not simplify the clause @]
0.121[zip.saturate] ### step   106 ###
0.121[zip.saturate]
    given (106 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f c)))+* ∨ cQ_2 a X0 c+*]/id:117/depth:10`
0.121[zip.env] apply binary rule superposition_active
0.121[zip.env] apply binary rule superposition_passive
0.122[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f c)))+* ∨ cQ_2 a X0 c+*]/id:117/depth:10[0]
         passive_lit=cQ_2 a X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.122[zip.sup] will yield a tautology
0.122[zip.sup] ... cancel, will yield a tautology
0.122[zip.env] apply binary rule ctx_narrow
0.122[zip.env] apply binary rule narrow_term_defs
0.122[zip.env] do unary inferences
0.122[zip.env] apply unary rule equality_resolution
0.122[zip.env] apply unary rule equality_factoring
0.122[zip.env] apply unary rule narrow_lit_defs
0.122[zip.env] apply unary rule ind_types.exhaustiveness
0.122[zip.env] apply unary rule ind_types.acyclicity
0.122[zip.env] apply unary rule avatar_check_empty
0.122[zip.env] apply generating rule avatar.lemmas (full: false)
0.122[zip.env] apply generating rule avatar_check_sat (full: false)
0.122[zip.avatar] SAT-solver reports "SAT"
0.122[zip.saturate] inferred new clauses: []
0.122[zip.sup] @[neg_reflect did not simplify the clause @]
0.122[zip.sup] @[neg_reflect did not simplify the clause @]
0.122[zip.saturate] ### step   107 ###
0.122[zip.saturate]
    given (107 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f b)))+* ∨ cQ_2 a X0 b+*]/id:118/depth:10`
0.123[zip.env] apply binary rule superposition_active
0.123[zip.env] apply binary rule superposition_passive
0.123[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f b)))+* ∨ cQ_2 a X0 b+*]/id:118/depth:10[0]
         passive_lit=cQ_2 a X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.123[zip.sup] will yield a tautology
0.123[zip.sup] ... cancel, will yield a tautology
0.123[zip.env] apply binary rule ctx_narrow
0.123[zip.env] apply binary rule narrow_term_defs
0.123[zip.env] do unary inferences
0.123[zip.env] apply unary rule equality_resolution
0.123[zip.env] apply unary rule equality_factoring
0.123[zip.env] apply unary rule narrow_lit_defs
0.123[zip.env] apply unary rule ind_types.exhaustiveness
0.123[zip.env] apply unary rule ind_types.acyclicity
0.123[zip.env] apply unary rule avatar_check_empty
0.123[zip.env] apply generating rule avatar.lemmas (full: false)
0.123[zip.env] apply generating rule avatar_check_sat (full: false)
0.123[zip.avatar] SAT-solver reports "SAT"
0.123[zip.saturate] inferred new clauses: []
0.123[zip.sup] @[neg_reflect did not simplify the clause @]
0.123[zip.sup] @[neg_reflect did not simplify the clause @]
0.123[zip.saturate] ### step   108 ###
0.123[zip.saturate]
    given (108 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f a)))+* ∨ cQ_2 a X0 a+*]/id:119/depth:10`
0.123[zip.env] apply binary rule superposition_active
0.123[zip.env] apply binary rule superposition_passive
0.123[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f a)))+* ∨ cQ_2 a X0 a+*]/id:119/depth:10[0]
         passive_lit=cQ_2 a X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.124[zip.sup] will yield a tautology
0.124[zip.sup] ... cancel, will yield a tautology
0.124[zip.env] apply binary rule ctx_narrow
0.124[zip.env] apply binary rule narrow_term_defs
0.124[zip.env] do unary inferences
0.124[zip.env] apply unary rule equality_resolution
0.124[zip.env] apply unary rule equality_factoring
0.124[zip.env] apply unary rule narrow_lit_defs
0.124[zip.env] apply unary rule ind_types.exhaustiveness
0.124[zip.env] apply unary rule ind_types.acyclicity
0.124[zip.env] apply unary rule avatar_check_empty
0.124[zip.env] apply generating rule avatar.lemmas (full: false)
0.124[zip.env] apply generating rule avatar_check_sat (full: false)
0.124[zip.avatar] SAT-solver reports "SAT"
0.124[zip.saturate] inferred new clauses: []
0.124[zip.sup] @[neg_reflect did not simplify the clause @]
0.124[zip.sup] @[neg_reflect did not simplify the clause @]
0.124[zip.saturate] ### step   109 ###
0.124[zip.saturate]
    given (109 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10`
0.124[zip.env] apply binary rule superposition_active
0.124[zip.env] apply binary rule superposition_passive
0.125[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.125[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
     ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11
0.125[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.125[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f d))))+*]/id:121/depth:11
0.125[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.125[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f c))))+*]/id:122/depth:11
0.125[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.126[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f b))))+*]/id:123/depth:11
0.126[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f X1))))* ∨ 
        cQ_2 c X2 X0+*]/id:105/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.126[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f a))))+*]/id:124/depth:11
0.126[zip.env] apply binary rule ctx_narrow
0.126[zip.env] apply binary rule narrow_term_defs
0.126[zip.env] do unary inferences
0.126[zip.env] apply unary rule equality_resolution
0.126[zip.env] apply unary rule equality_factoring
0.126[zip.env] apply unary rule narrow_lit_defs
0.126[zip.env] apply unary rule ind_types.exhaustiveness
0.126[zip.env] apply unary rule ind_types.acyclicity
0.126[zip.env] apply unary rule avatar_check_empty
0.126[zip.env] apply generating rule avatar.lemmas (full: false)
0.126[zip.env] apply generating rule avatar_check_sat (full: false)
0.126[zip.avatar] SAT-solver reports "SAT"
0.126[zip.sup] @[neg_reflect did not simplify the clause @]
0.126[zip.sup] @[neg_reflect did not simplify the clause @]
0.126[zip.sup] @[neg_reflect did not simplify the clause @]
0.126[zip.sup] @[neg_reflect did not simplify the clause @]
0.126[zip.sup] @[neg_reflect did not simplify the clause @]
0.126[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11, 
       forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f d))))+*]/id:121/depth:11, 
       forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f c))))+*]/id:122/depth:11, 
       forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f b))))+*]/id:123/depth:11, 
       forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f a))))+*]/id:124/depth:11]
0.127[zip.sup] @[neg_reflect did not simplify the clause @]
0.127[zip.sup] @[neg_reflect did not simplify the clause @]
0.127[zip.saturate] ### step   110 ###
0.127[zip.saturate]
    given (110 steps, penalty 1):
      `forall X0 X1. [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f d))))+*]/id:121/depth:11`
0.127[zip.env] apply binary rule superposition_active
0.127[zip.env] apply binary rule superposition_passive
0.127[zip.env] apply binary rule ctx_narrow
0.127[zip.env] apply binary rule narrow_term_defs
0.127[zip.env] do unary inferences
0.127[zip.env] apply unary rule equality_resolution
0.127[zip.env] apply unary rule equality_factoring
0.127[zip.env] apply unary rule narrow_lit_defs
0.127[zip.env] apply unary rule ind_types.exhaustiveness
0.127[zip.env] apply unary rule ind_types.acyclicity
0.127[zip.env] apply unary rule avatar_check_empty
0.127[zip.env] apply generating rule avatar.lemmas (full: false)
0.127[zip.env] apply generating rule avatar_check_sat (full: false)
0.127[zip.avatar] SAT-solver reports "SAT"
0.127[zip.saturate] inferred new clauses: []
0.127[zip.sup] @[neg_reflect did not simplify the clause @]
0.127[zip.sup] @[neg_reflect did not simplify the clause @]
0.128[zip.saturate] ### step   111 ###
0.128[zip.saturate]
    given (111 steps, penalty 1):
      `forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f c))))+*]/id:122/depth:11`
0.128[zip.env] apply binary rule superposition_active
0.128[zip.env] apply binary rule superposition_passive
0.128[zip.env] apply binary rule ctx_narrow
0.128[zip.env] apply binary rule narrow_term_defs
0.128[zip.env] do unary inferences
0.128[zip.env] apply unary rule equality_resolution
0.128[zip.env] apply unary rule equality_factoring
0.128[zip.env] apply unary rule narrow_lit_defs
0.128[zip.env] apply unary rule ind_types.exhaustiveness
0.128[zip.env] apply unary rule ind_types.acyclicity
0.128[zip.env] apply unary rule avatar_check_empty
0.128[zip.env] apply generating rule avatar.lemmas (full: false)
0.128[zip.env] apply generating rule avatar_check_sat (full: false)
0.128[zip.avatar] SAT-solver reports "SAT"
0.128[zip.saturate] inferred new clauses: []
0.128[zip.sup] @[neg_reflect did not simplify the clause @]
0.128[zip.sup] @[neg_reflect did not simplify the clause @]
0.128[zip.saturate] ### step   112 ###
0.128[zip.saturate]
    given (112 steps, penalty 1):
      `forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f b))))+*]/id:123/depth:11`
0.128[zip.env] apply binary rule superposition_active
0.128[zip.env] apply binary rule superposition_passive
0.128[zip.env] apply binary rule ctx_narrow
0.128[zip.env] apply binary rule narrow_term_defs
0.128[zip.env] do unary inferences
0.128[zip.env] apply unary rule equality_resolution
0.129[zip.env] apply unary rule equality_factoring
0.129[zip.env] apply unary rule narrow_lit_defs
0.129[zip.env] apply unary rule ind_types.exhaustiveness
0.129[zip.env] apply unary rule ind_types.acyclicity
0.129[zip.env] apply unary rule avatar_check_empty
0.129[zip.env] apply generating rule avatar.lemmas (full: false)
0.129[zip.env] apply generating rule avatar_check_sat (full: false)
0.129[zip.avatar] SAT-solver reports "SAT"
0.129[zip.saturate] inferred new clauses: []
0.129[zip.sup] @[neg_reflect did not simplify the clause @]
0.129[zip.sup] @[neg_reflect did not simplify the clause @]
0.129[zip.saturate] ### step   113 ###
0.129[zip.saturate]
    given (113 steps, penalty 1):
      `forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f a))))+*]/id:124/depth:11`
0.129[zip.env] apply binary rule superposition_active
0.129[zip.env] apply binary rule superposition_passive
0.129[zip.env] apply binary rule ctx_narrow
0.129[zip.env] apply binary rule narrow_term_defs
0.129[zip.env] do unary inferences
0.129[zip.env] apply unary rule equality_resolution
0.129[zip.env] apply unary rule equality_factoring
0.129[zip.env] apply unary rule narrow_lit_defs
0.129[zip.env] apply unary rule ind_types.exhaustiveness
0.129[zip.env] apply unary rule ind_types.acyclicity
0.129[zip.env] apply unary rule avatar_check_empty
0.129[zip.env] apply generating rule avatar.lemmas (full: false)
0.129[zip.env] apply generating rule avatar_check_sat (full: false)
0.129[zip.avatar] SAT-solver reports "SAT"
0.129[zip.saturate] inferred new clauses: []
0.129[zip.sup] @[neg_reflect did not simplify the clause @]
0.129[zip.sup] @[neg_reflect did not simplify the clause @]
0.130[zip.saturate] ### step   114 ###
0.130[zip.saturate]
    given (114 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10`
0.130[zip.env] apply binary rule superposition_active
0.130[zip.env] apply binary rule superposition_passive
0.130[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.130[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
     ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11
0.130[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.130[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f d))))+*]/id:126/depth:11
0.131[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.131[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f c))))+*]/id:127/depth:11
0.131[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.131[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f b))))+*]/id:128/depth:11
0.131[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f X1))))* ∨ 
        cQ_2 b X2 X0+*]/id:110/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.131[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f a))))+*]/id:129/depth:11
0.131[zip.env] apply binary rule ctx_narrow
0.131[zip.env] apply binary rule narrow_term_defs
0.131[zip.env] do unary inferences
0.132[zip.env] apply unary rule equality_resolution
0.132[zip.env] apply unary rule equality_factoring
0.132[zip.env] apply unary rule narrow_lit_defs
0.132[zip.env] apply unary rule ind_types.exhaustiveness
0.132[zip.env] apply unary rule ind_types.acyclicity
0.132[zip.env] apply unary rule avatar_check_empty
0.132[zip.env] apply generating rule avatar.lemmas (full: false)
0.132[zip.env] apply generating rule avatar_check_sat (full: false)
0.132[zip.avatar] SAT-solver reports "SAT"
0.132[zip.sup] @[neg_reflect did not simplify the clause @]
0.132[zip.sup] @[neg_reflect did not simplify the clause @]
0.132[zip.sup] @[neg_reflect did not simplify the clause @]
0.132[zip.sup] @[neg_reflect did not simplify the clause @]
0.132[zip.sup] @[neg_reflect did not simplify the clause @]
0.132[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11, 
       forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f d))))+*]/id:126/depth:11, 
       forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f c))))+*]/id:127/depth:11, 
       forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f b))))+*]/id:128/depth:11, 
       forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f a))))+*]/id:129/depth:11]
0.132[zip.sup]
    demod:
      t=cQ_4 X24 X22 X26[0], l=cQ_4 X27 X28 X29[1], r=false[1],
      subst={X27[1] → X24[0], X28[1] → X22[0], X29[1] → X26[0]}
0.133[zip.sup]
    demod: rewrite `cQ_4 X24 X22 X26` into `false`
      using {X27[1] → X24[0], X28[1] → X22[0], X29[1] → X26[0]}[1]
0.133[zip.sup]
    demodulate
      forall X21 X22 X23 X24 X25 X26.
      [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
       ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26* ∨ cQ_4 X24 X22 X26+*]/id:18/depth:0
      into forall X21 X22 X23 X24 X25 X26.
           [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
            ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26*]/id:130/depth:0
      using {(forall X27 X28 X29. [¬cQ_4 X27 X28 X29*]/id:19/depth:0
              :subst {X27[1] → X24[0], X28[1] → X22[0], X29[1] → X26[0]}[1])}
0.133[zip.sup] @[neg_reflect did not simplify the clause @]
0.133[zip.sup] @[neg_reflect did not simplify the clause @]
0.133[zip.env]
    clause `forall X21 X22 X23 X24 X25 X26.
            [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
             ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26* ∨ 
             cQ_4 X24 X22 X26+*]/id:18/depth:0`
    simplified into `forall X21 X22 X23 X24 X25 X26.
                     [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
                      ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26*]/id:130/depth:0`
0.134[zip.sup] @[neg_reflect did not simplify the clause @]
0.134[zip.sup] @[neg_reflect did not simplify the clause @]
0.134[zip.saturate] ### step   115 ###
0.134[zip.saturate]
    given (115 steps, penalty 1):
      `forall X21 X22 X23 X24 X25 X26.
       [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
        ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26*]/id:130/depth:0`
0.134[zip.env] apply binary rule superposition_active
0.134[zip.env] apply binary rule superposition_passive
0.134[zip.sup]
    sup, kind sup
      (forall X19 X20. [cP_3 (f X19) X20* ∨ ¬cP_3 X19 X20]/id:17/depth:0[1]
         s=cP_3 (f X19) X20 t=true)
      (forall X21 X22 X23 X24 X25 X26.
       [¬cP_3 (f X21) X22+* ∨ ¬cP_3 (f X23) X24* ∨ 
        ¬cQ_3 X23 X21 X25* ∨ ¬cP_3 (f X25) X26*]/id:130/depth:0[0]
         passive_lit=¬cP_3 (f X21) X22 p=0.←.ε)
      with subst={X19[1] → X21[0], X20[1] → X22[0]}.

0.134[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_3 X1 X0+* ∨ ¬cP_3 (f X3) X2* ∨ ¬cQ_3 X4 X1 X3* ∨ 
     ¬cP_3 (f X4) X5*]/id:131/depth:1
0.135[zip.env] apply binary rule ctx_narrow
0.135[zip.env] apply binary rule narrow_term_defs
0.135[zip.env] do unary inferences
0.135[zip.env] apply unary rule equality_resolution
0.135[zip.env] apply unary rule equality_factoring
0.135[zip.env] apply unary rule narrow_lit_defs
0.135[zip.env] apply unary rule ind_types.exhaustiveness
0.135[zip.env] apply unary rule ind_types.acyclicity
0.135[zip.env] apply unary rule avatar_check_empty
0.135[zip.env] apply generating rule avatar.lemmas (full: false)
0.135[zip.env] apply generating rule avatar_check_sat (full: false)
0.135[zip.avatar] SAT-solver reports "SAT"
0.135[zip.sup] @[neg_reflect did not simplify the clause @]
0.135[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_3 X1 X0+* ∨ ¬cP_3 (f X3) X2* ∨ ¬cQ_3 X4 X1 X3* ∨ 
        ¬cP_3 (f X4) X5*]/id:131/depth:1]
0.135[zip.sup] @[neg_reflect did not simplify the clause @]
0.135[zip.sup] @[neg_reflect did not simplify the clause @]
0.135[zip.saturate] ### step   116 ###
0.135[zip.saturate]
    given (116 steps, penalty 1):
      `forall X0 X1. [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f d))))+*]/id:126/depth:11`
0.136[zip.env] apply binary rule superposition_active
0.136[zip.env] apply binary rule superposition_passive
0.136[zip.env] apply binary rule ctx_narrow
0.136[zip.env] apply binary rule narrow_term_defs
0.136[zip.env] do unary inferences
0.136[zip.env] apply unary rule equality_resolution
0.136[zip.env] apply unary rule equality_factoring
0.136[zip.env] apply unary rule narrow_lit_defs
0.136[zip.env] apply unary rule ind_types.exhaustiveness
0.136[zip.env] apply unary rule ind_types.acyclicity
0.136[zip.env] apply unary rule avatar_check_empty
0.136[zip.env] apply generating rule avatar.lemmas (full: false)
0.136[zip.env] apply generating rule avatar_check_sat (full: false)
0.136[zip.avatar] SAT-solver reports "SAT"
0.136[zip.saturate] inferred new clauses: []
0.136[zip.sup] @[neg_reflect did not simplify the clause @]
0.136[zip.sup] @[neg_reflect did not simplify the clause @]
0.136[zip.saturate] ### step   117 ###
0.136[zip.saturate]
    given (117 steps, penalty 1):
      `forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f c))))+*]/id:127/depth:11`
0.136[zip.env] apply binary rule superposition_active
0.136[zip.env] apply binary rule superposition_passive
0.137[zip.env] apply binary rule ctx_narrow
0.137[zip.env] apply binary rule narrow_term_defs
0.137[zip.env] do unary inferences
0.137[zip.env] apply unary rule equality_resolution
0.137[zip.env] apply unary rule equality_factoring
0.137[zip.env] apply unary rule narrow_lit_defs
0.137[zip.env] apply unary rule ind_types.exhaustiveness
0.137[zip.env] apply unary rule ind_types.acyclicity
0.137[zip.env] apply unary rule avatar_check_empty
0.137[zip.env] apply generating rule avatar.lemmas (full: false)
0.137[zip.env] apply generating rule avatar_check_sat (full: false)
0.137[zip.avatar] SAT-solver reports "SAT"
0.137[zip.saturate] inferred new clauses: []
0.137[zip.sup] @[neg_reflect did not simplify the clause @]
0.137[zip.sup] @[neg_reflect did not simplify the clause @]
0.137[zip.saturate] ### step   118 ###
0.137[zip.saturate]
    given (118 steps, penalty 1):
      `forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f b))))+*]/id:128/depth:11`
0.137[zip.env] apply binary rule superposition_active
0.137[zip.env] apply binary rule superposition_passive
0.137[zip.env] apply binary rule ctx_narrow
0.137[zip.env] apply binary rule narrow_term_defs
0.137[zip.env] do unary inferences
0.137[zip.env] apply unary rule equality_resolution
0.137[zip.env] apply unary rule equality_factoring
0.137[zip.env] apply unary rule narrow_lit_defs
0.137[zip.env] apply unary rule ind_types.exhaustiveness
0.137[zip.env] apply unary rule ind_types.acyclicity
0.137[zip.env] apply unary rule avatar_check_empty
0.137[zip.env] apply generating rule avatar.lemmas (full: false)
0.137[zip.env] apply generating rule avatar_check_sat (full: false)
0.137[zip.avatar] SAT-solver reports "SAT"
0.137[zip.saturate] inferred new clauses: []
0.137[zip.sup] @[neg_reflect did not simplify the clause @]
0.137[zip.sup] @[neg_reflect did not simplify the clause @]
0.138[zip.saturate] ### step   119 ###
0.138[zip.saturate]
    given (119 steps, penalty 1):
      `forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f a))))+*]/id:129/depth:11`
0.138[zip.env] apply binary rule superposition_active
0.138[zip.env] apply binary rule superposition_passive
0.138[zip.env] apply binary rule ctx_narrow
0.138[zip.env] apply binary rule narrow_term_defs
0.138[zip.env] do unary inferences
0.138[zip.env] apply unary rule equality_resolution
0.138[zip.env] apply unary rule equality_factoring
0.138[zip.env] apply unary rule narrow_lit_defs
0.138[zip.env] apply unary rule ind_types.exhaustiveness
0.138[zip.env] apply unary rule ind_types.acyclicity
0.138[zip.env] apply unary rule avatar_check_empty
0.138[zip.env] apply generating rule avatar.lemmas (full: false)
0.138[zip.env] apply generating rule avatar_check_sat (full: false)
0.138[zip.avatar] SAT-solver reports "SAT"
0.138[zip.saturate] inferred new clauses: []
0.138[zip.sup] @[neg_reflect did not simplify the clause @]
0.138[zip.sup] @[neg_reflect did not simplify the clause @]
0.138[zip.saturate] ### step   120 ###
0.138[zip.saturate]
    given (120 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10`
0.139[zip.env] apply binary rule superposition_active
0.139[zip.env] apply binary rule superposition_passive
0.139[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.139[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
     ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11
0.139[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.139[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f d))))+*]/id:133/depth:11
0.139[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.140[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f c))))+*]/id:134/depth:11
0.140[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.140[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f b))))+*]/id:135/depth:11
0.140[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.140[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f a))))+*]/id:136/depth:11
0.140[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f X1))))* ∨ 
        cQ_2 a X2 X0+*]/id:115/depth:10[0] passive_lit=cQ_2 a X2 X0
         p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.140[zip.sup] will yield a tautology
0.140[zip.sup] ... cancel, will yield a tautology
0.140[zip.env] apply binary rule ctx_narrow
0.140[zip.env] apply binary rule narrow_term_defs
0.140[zip.env] do unary inferences
0.140[zip.env] apply unary rule equality_resolution
0.140[zip.env] apply unary rule equality_factoring
0.140[zip.env] apply unary rule narrow_lit_defs
0.140[zip.env] apply unary rule ind_types.exhaustiveness
0.140[zip.env] apply unary rule ind_types.acyclicity
0.140[zip.env] apply unary rule avatar_check_empty
0.140[zip.env] apply generating rule avatar.lemmas (full: false)
0.140[zip.env] apply generating rule avatar_check_sat (full: false)
0.141[zip.avatar] SAT-solver reports "SAT"
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11, 
       forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f d))))+*]/id:133/depth:11, 
       forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f c))))+*]/id:134/depth:11, 
       forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f b))))+*]/id:135/depth:11, 
       forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f a))))+*]/id:136/depth:11]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.sup] @[neg_reflect did not simplify the clause @]
0.141[zip.saturate] ### step   121 ###
0.141[zip.saturate]
    given (121 steps, penalty 1):
      `forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f d))))+*]/id:133/depth:11`
0.142[zip.env] apply binary rule superposition_active
0.142[zip.env] apply binary rule superposition_passive
0.142[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f d))))+*]/id:133/depth:11[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.142[zip.sup] will yield a tautology
0.142[zip.sup] ... cancel, will yield a tautology
0.142[zip.env] apply binary rule ctx_narrow
0.142[zip.env] apply binary rule narrow_term_defs
0.142[zip.env] do unary inferences
0.142[zip.env] apply unary rule equality_resolution
0.142[zip.env] apply unary rule equality_factoring
0.142[zip.env] apply unary rule narrow_lit_defs
0.142[zip.env] apply unary rule ind_types.exhaustiveness
0.142[zip.env] apply unary rule ind_types.acyclicity
0.142[zip.env] apply unary rule avatar_check_empty
0.142[zip.env] apply generating rule avatar.lemmas (full: false)
0.142[zip.env] apply generating rule avatar_check_sat (full: false)
0.142[zip.avatar] SAT-solver reports "SAT"
0.142[zip.saturate] inferred new clauses: []
0.142[zip.sup] @[neg_reflect did not simplify the clause @]
0.142[zip.sup] @[neg_reflect did not simplify the clause @]
0.142[zip.saturate] ### step   122 ###
0.142[zip.saturate]
    given (122 steps, penalty 1):
      `forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f c))))+*]/id:134/depth:11`
0.143[zip.env] apply binary rule superposition_active
0.143[zip.env] apply binary rule superposition_passive
0.143[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f c))))+*]/id:134/depth:11[0]
         passive_lit=cQ_2 a X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.143[zip.sup] will yield a tautology
0.143[zip.sup] ... cancel, will yield a tautology
0.143[zip.env] apply binary rule ctx_narrow
0.143[zip.env] apply binary rule narrow_term_defs
0.143[zip.env] do unary inferences
0.143[zip.env] apply unary rule equality_resolution
0.143[zip.env] apply unary rule equality_factoring
0.143[zip.env] apply unary rule narrow_lit_defs
0.143[zip.env] apply unary rule ind_types.exhaustiveness
0.143[zip.env] apply unary rule ind_types.acyclicity
0.143[zip.env] apply unary rule avatar_check_empty
0.143[zip.env] apply generating rule avatar.lemmas (full: false)
0.143[zip.env] apply generating rule avatar_check_sat (full: false)
0.143[zip.avatar] SAT-solver reports "SAT"
0.143[zip.saturate] inferred new clauses: []
0.143[zip.sup] @[neg_reflect did not simplify the clause @]
0.143[zip.sup] @[neg_reflect did not simplify the clause @]
0.143[zip.saturate] ### step   123 ###
0.143[zip.saturate]
    given (123 steps, penalty 1):
      `forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f b))))+*]/id:135/depth:11`
0.144[zip.env] apply binary rule superposition_active
0.144[zip.env] apply binary rule superposition_passive
0.144[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f b))))+*]/id:135/depth:11[0]
         passive_lit=cQ_2 a X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.144[zip.sup] will yield a tautology
0.144[zip.sup] ... cancel, will yield a tautology
0.144[zip.env] apply binary rule ctx_narrow
0.144[zip.env] apply binary rule narrow_term_defs
0.144[zip.env] do unary inferences
0.144[zip.env] apply unary rule equality_resolution
0.144[zip.env] apply unary rule equality_factoring
0.144[zip.env] apply unary rule narrow_lit_defs
0.144[zip.env] apply unary rule ind_types.exhaustiveness
0.144[zip.env] apply unary rule ind_types.acyclicity
0.144[zip.env] apply unary rule avatar_check_empty
0.144[zip.env] apply generating rule avatar.lemmas (full: false)
0.144[zip.env] apply generating rule avatar_check_sat (full: false)
0.144[zip.avatar] SAT-solver reports "SAT"
0.144[zip.saturate] inferred new clauses: []
0.144[zip.sup] @[neg_reflect did not simplify the clause @]
0.144[zip.sup] @[neg_reflect did not simplify the clause @]
0.144[zip.saturate] ### step   124 ###
0.144[zip.saturate]
    given (124 steps, penalty 1):
      `forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f a))))+*]/id:136/depth:11`
0.144[zip.env] apply binary rule superposition_active
0.144[zip.env] apply binary rule superposition_passive
0.144[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f a))))+*]/id:136/depth:11[0]
         passive_lit=cQ_2 a X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.144[zip.sup] will yield a tautology
0.144[zip.sup] ... cancel, will yield a tautology
0.144[zip.env] apply binary rule ctx_narrow
0.144[zip.env] apply binary rule narrow_term_defs
0.144[zip.env] do unary inferences
0.144[zip.env] apply unary rule equality_resolution
0.144[zip.env] apply unary rule equality_factoring
0.144[zip.env] apply unary rule narrow_lit_defs
0.144[zip.env] apply unary rule ind_types.exhaustiveness
0.144[zip.env] apply unary rule ind_types.acyclicity
0.144[zip.env] apply unary rule avatar_check_empty
0.144[zip.env] apply generating rule avatar.lemmas (full: false)
0.144[zip.env] apply generating rule avatar_check_sat (full: false)
0.145[zip.avatar] SAT-solver reports "SAT"
0.145[zip.saturate] inferred new clauses: []
0.145[zip.sup] @[neg_reflect did not simplify the clause @]
0.145[zip.sup] @[neg_reflect did not simplify the clause @]
0.145[zip.saturate] ### step   125 ###
0.145[zip.saturate]
    given (125 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11`
0.145[zip.env] apply binary rule superposition_active
0.145[zip.env] apply binary rule superposition_passive
0.145[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.145[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 c X2 X0+*]/id:137/depth:12
0.146[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.146[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f c) d (f (f (f (f (f d)))))+* ∨ cQ_2 c X1 X0+*]/id:138/depth:12
0.146[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.146[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f (f (f c)))))+* ∨ cQ_2 c X0 c+*]/id:139/depth:12
0.146[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.146[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f (f (f b)))))+* ∨ cQ_2 c X0 b+*]/id:140/depth:12
0.146[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f X1)))))*]/id:120/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.147[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) d (f (f (f (f (f a)))))+* ∨ cQ_2 c X0 a+*]/id:141/depth:12
0.147[zip.env] apply binary rule ctx_narrow
0.147[zip.env] apply binary rule narrow_term_defs
0.147[zip.env] do unary inferences
0.147[zip.env] apply unary rule equality_resolution
0.147[zip.env] apply unary rule equality_factoring
0.147[zip.env] apply unary rule narrow_lit_defs
0.147[zip.env] apply unary rule ind_types.exhaustiveness
0.147[zip.env] apply unary rule ind_types.acyclicity
0.147[zip.env] apply unary rule avatar_check_empty
0.147[zip.env] apply generating rule avatar.lemmas (full: false)
0.147[zip.env] apply generating rule avatar_check_sat (full: false)
0.147[zip.avatar] SAT-solver reports "SAT"
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12, 
       forall X0 X1.
       [¬cQ_1 (f c) d (f (f (f (f (f d)))))+* ∨ cQ_2 c X1 X0+*]/id:138/depth:12, 
       forall X0. [¬cQ_1 (f c) d (f (f (f (f (f c)))))+* ∨ cQ_2 c X0 c+*]/id:139/depth:12, 
       forall X0. [¬cQ_1 (f c) d (f (f (f (f (f b)))))+* ∨ cQ_2 c X0 b+*]/id:140/depth:12, 
       forall X0. [¬cQ_1 (f c) d (f (f (f (f (f a)))))+* ∨ cQ_2 c X0 a+*]/id:141/depth:12]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.sup] @[neg_reflect did not simplify the clause @]
0.147[zip.saturate] ### step   126 ###
0.147[zip.saturate]
    given (126 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f c) d (f (f (f (f (f d)))))+* ∨ cQ_2 c X1 X0+*]/id:138/depth:12`
0.148[zip.env] apply binary rule superposition_active
0.148[zip.env] apply binary rule superposition_passive
0.148[zip.env] apply binary rule ctx_narrow
0.148[zip.env] apply binary rule narrow_term_defs
0.148[zip.env] do unary inferences
0.148[zip.env] apply unary rule equality_resolution
0.148[zip.env] apply unary rule equality_factoring
0.148[zip.env] apply unary rule narrow_lit_defs
0.148[zip.env] apply unary rule ind_types.exhaustiveness
0.148[zip.env] apply unary rule ind_types.acyclicity
0.148[zip.env] apply unary rule avatar_check_empty
0.148[zip.env] apply generating rule avatar.lemmas (full: false)
0.148[zip.env] apply generating rule avatar_check_sat (full: false)
0.148[zip.avatar] SAT-solver reports "SAT"
0.148[zip.saturate] inferred new clauses: []
0.148[zip.sup] @[neg_reflect did not simplify the clause @]
0.148[zip.sup] @[neg_reflect did not simplify the clause @]
0.148[zip.saturate] ### step   127 ###
0.148[zip.saturate]
    given (127 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f (f (f c)))))+* ∨ cQ_2 c X0 c+*]/id:139/depth:12`
0.148[zip.env] apply binary rule superposition_active
0.148[zip.env] apply binary rule superposition_passive
0.148[zip.env] apply binary rule ctx_narrow
0.148[zip.env] apply binary rule narrow_term_defs
0.148[zip.env] do unary inferences
0.148[zip.env] apply unary rule equality_resolution
0.148[zip.env] apply unary rule equality_factoring
0.148[zip.env] apply unary rule narrow_lit_defs
0.148[zip.env] apply unary rule ind_types.exhaustiveness
0.148[zip.env] apply unary rule ind_types.acyclicity
0.148[zip.env] apply unary rule avatar_check_empty
0.148[zip.env] apply generating rule avatar.lemmas (full: false)
0.148[zip.env] apply generating rule avatar_check_sat (full: false)
0.148[zip.avatar] SAT-solver reports "SAT"
0.148[zip.saturate] inferred new clauses: []
0.148[zip.sup] @[neg_reflect did not simplify the clause @]
0.148[zip.sup] @[neg_reflect did not simplify the clause @]
0.149[zip.saturate] ### step   128 ###
0.149[zip.saturate]
    given (128 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f (f (f b)))))+* ∨ cQ_2 c X0 b+*]/id:140/depth:12`
0.149[zip.env] apply binary rule superposition_active
0.149[zip.env] apply binary rule superposition_passive
0.149[zip.env] apply binary rule ctx_narrow
0.149[zip.env] apply binary rule narrow_term_defs
0.149[zip.env] do unary inferences
0.149[zip.env] apply unary rule equality_resolution
0.149[zip.env] apply unary rule equality_factoring
0.149[zip.env] apply unary rule narrow_lit_defs
0.149[zip.env] apply unary rule ind_types.exhaustiveness
0.149[zip.env] apply unary rule ind_types.acyclicity
0.149[zip.env] apply unary rule avatar_check_empty
0.149[zip.env] apply generating rule avatar.lemmas (full: false)
0.149[zip.env] apply generating rule avatar_check_sat (full: false)
0.149[zip.avatar] SAT-solver reports "SAT"
0.149[zip.saturate] inferred new clauses: []
0.149[zip.sup] @[neg_reflect did not simplify the clause @]
0.149[zip.sup] @[neg_reflect did not simplify the clause @]
0.150[zip.saturate] ### step   129 ###
0.150[zip.saturate]
    given (129 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) d (f (f (f (f (f a)))))+* ∨ cQ_2 c X0 a+*]/id:141/depth:12`
0.150[zip.env] apply binary rule superposition_active
0.150[zip.env] apply binary rule superposition_passive
0.150[zip.env] apply binary rule ctx_narrow
0.150[zip.env] apply binary rule narrow_term_defs
0.150[zip.env] do unary inferences
0.150[zip.env] apply unary rule equality_resolution
0.150[zip.env] apply unary rule equality_factoring
0.150[zip.env] apply unary rule narrow_lit_defs
0.150[zip.env] apply unary rule ind_types.exhaustiveness
0.150[zip.env] apply unary rule ind_types.acyclicity
0.150[zip.env] apply unary rule avatar_check_empty
0.150[zip.env] apply generating rule avatar.lemmas (full: false)
0.150[zip.env] apply generating rule avatar_check_sat (full: false)
0.150[zip.avatar] SAT-solver reports "SAT"
0.150[zip.saturate] inferred new clauses: []
0.151[zip.sup] @[neg_reflect did not simplify the clause @]
0.151[zip.sup] @[neg_reflect did not simplify the clause @]
0.151[zip.saturate] ### step   130 ###
0.151[zip.saturate]
    given (130 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11`
0.152[zip.env] apply binary rule superposition_active
0.152[zip.env] apply binary rule superposition_passive
0.152[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.152[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 b X2 X0+*]/id:142/depth:12
0.152[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.153[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f b) d (f (f (f (f (f d)))))+* ∨ cQ_2 b X1 X0+*]/id:143/depth:12
0.153[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.153[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f (f (f c)))))+* ∨ cQ_2 b X0 c+*]/id:144/depth:12
0.153[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.154[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f (f (f b)))))+* ∨ cQ_2 b X0 b+*]/id:145/depth:12
0.154[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f X1)))))*]/id:125/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.154[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) d (f (f (f (f (f a)))))+* ∨ cQ_2 b X0 a+*]/id:146/depth:12
0.154[zip.env] apply binary rule ctx_narrow
0.154[zip.env] apply binary rule narrow_term_defs
0.155[zip.env] do unary inferences
0.155[zip.env] apply unary rule equality_resolution
0.155[zip.env] apply unary rule equality_factoring
0.155[zip.env] apply unary rule narrow_lit_defs
0.155[zip.env] apply unary rule ind_types.exhaustiveness
0.155[zip.env] apply unary rule ind_types.acyclicity
0.155[zip.env] apply unary rule avatar_check_empty
0.155[zip.env] apply generating rule avatar.lemmas (full: false)
0.155[zip.env] apply generating rule avatar_check_sat (full: false)
0.155[zip.avatar] SAT-solver reports "SAT"
0.155[zip.sup] @[neg_reflect did not simplify the clause @]
0.155[zip.sup] @[neg_reflect did not simplify the clause @]
0.155[zip.sup] @[neg_reflect did not simplify the clause @]
0.155[zip.sup] @[neg_reflect did not simplify the clause @]
0.155[zip.sup] @[neg_reflect did not simplify the clause @]
0.155[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12, 
       forall X0 X1.
       [¬cQ_1 (f b) d (f (f (f (f (f d)))))+* ∨ cQ_2 b X1 X0+*]/id:143/depth:12, 
       forall X0. [¬cQ_1 (f b) d (f (f (f (f (f c)))))+* ∨ cQ_2 b X0 c+*]/id:144/depth:12, 
       forall X0. [¬cQ_1 (f b) d (f (f (f (f (f b)))))+* ∨ cQ_2 b X0 b+*]/id:145/depth:12, 
       forall X0. [¬cQ_1 (f b) d (f (f (f (f (f a)))))+* ∨ cQ_2 b X0 a+*]/id:146/depth:12]
0.156[zip.sup] @[neg_reflect did not simplify the clause @]
0.156[zip.sup] @[neg_reflect did not simplify the clause @]
0.156[zip.saturate] ### step   131 ###
0.156[zip.saturate]
    given (131 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f b) d (f (f (f (f (f d)))))+* ∨ cQ_2 b X1 X0+*]/id:143/depth:12`
0.156[zip.env] apply binary rule superposition_active
0.156[zip.env] apply binary rule superposition_passive
0.157[zip.env] apply binary rule ctx_narrow
0.157[zip.env] apply binary rule narrow_term_defs
0.157[zip.env] do unary inferences
0.157[zip.env] apply unary rule equality_resolution
0.157[zip.env] apply unary rule equality_factoring
0.157[zip.env] apply unary rule narrow_lit_defs
0.157[zip.env] apply unary rule ind_types.exhaustiveness
0.157[zip.env] apply unary rule ind_types.acyclicity
0.157[zip.env] apply unary rule avatar_check_empty
0.157[zip.env] apply generating rule avatar.lemmas (full: false)
0.157[zip.env] apply generating rule avatar_check_sat (full: false)
0.157[zip.avatar] SAT-solver reports "SAT"
0.157[zip.saturate] inferred new clauses: []
0.157[zip.sup] @[neg_reflect did not simplify the clause @]
0.157[zip.sup] @[neg_reflect did not simplify the clause @]
0.157[zip.saturate] ### step   132 ###
0.157[zip.saturate]
    given (132 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f (f (f c)))))+* ∨ cQ_2 b X0 c+*]/id:144/depth:12`
0.157[zip.env] apply binary rule superposition_active
0.157[zip.env] apply binary rule superposition_passive
0.157[zip.env] apply binary rule ctx_narrow
0.158[zip.env] apply binary rule narrow_term_defs
0.158[zip.env] do unary inferences
0.158[zip.env] apply unary rule equality_resolution
0.158[zip.env] apply unary rule equality_factoring
0.158[zip.env] apply unary rule narrow_lit_defs
0.158[zip.env] apply unary rule ind_types.exhaustiveness
0.158[zip.env] apply unary rule ind_types.acyclicity
0.158[zip.env] apply unary rule avatar_check_empty
0.158[zip.env] apply generating rule avatar.lemmas (full: false)
0.158[zip.env] apply generating rule avatar_check_sat (full: false)
0.158[zip.avatar] SAT-solver reports "SAT"
0.158[zip.saturate] inferred new clauses: []
0.158[zip.sup] @[neg_reflect did not simplify the clause @]
0.158[zip.sup] @[neg_reflect did not simplify the clause @]
0.158[zip.saturate] ### step   133 ###
0.158[zip.saturate]
    given (133 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f (f (f b)))))+* ∨ cQ_2 b X0 b+*]/id:145/depth:12`
0.158[zip.env] apply binary rule superposition_active
0.158[zip.env] apply binary rule superposition_passive
0.158[zip.env] apply binary rule ctx_narrow
0.158[zip.env] apply binary rule narrow_term_defs
0.158[zip.env] do unary inferences
0.158[zip.env] apply unary rule equality_resolution
0.158[zip.env] apply unary rule equality_factoring
0.158[zip.env] apply unary rule narrow_lit_defs
0.158[zip.env] apply unary rule ind_types.exhaustiveness
0.158[zip.env] apply unary rule ind_types.acyclicity
0.158[zip.env] apply unary rule avatar_check_empty
0.158[zip.env] apply generating rule avatar.lemmas (full: false)
0.158[zip.env] apply generating rule avatar_check_sat (full: false)
0.158[zip.avatar] SAT-solver reports "SAT"
0.158[zip.saturate] inferred new clauses: []
0.158[zip.sup] @[neg_reflect did not simplify the clause @]
0.158[zip.sup] @[neg_reflect did not simplify the clause @]
0.159[zip.saturate] ### step   134 ###
0.159[zip.saturate]
    given (134 steps, penalty 1):
      `forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2`
0.159[zip.env] apply binary rule superposition_active
0.159[zip.env] apply binary rule superposition_passive
0.159[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.159[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
     ¬cQ_1 X5 (f (f X1)) X4* ∨ ¬cP_1 (f X5) X3*]/id:147/depth:3
0.160[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.160[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [cQ_2 X2 X0 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 X4 (f d) X3* ∨ 
     ¬cP_1 (f X4) X2*]/id:148/depth:3
0.160[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.160[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [cQ_2 X1 c X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f c) X2* ∨ 
     ¬cP_1 (f X3) X1*]/id:149/depth:3
0.160[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.160[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [cQ_2 X1 b X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f b) X2* ∨ 
     ¬cP_1 (f X3) X1*]/id:150/depth:3
0.161[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.161[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [cQ_2 X1 a X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f a) X2* ∨ 
     ¬cP_1 (f X3) X1*]/id:151/depth:3
0.161[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ ¬cP_1 (f X3) X2* ∨ ¬cQ_1 X3 (f X1) X4* ∨ 
        ¬cP_1 (f X4) X5* ∨ cQ_2 X2 X0 X5+*]/id:21/depth:2[0]
         passive_lit=cQ_2 X2 X0 X5 p=4.←.ε)
      with subst={X0[0] → b[1], X2[0] → a[1], X0[1] → X5[0]}.

0.161[zip.sup] will yield a tautology
0.161[zip.sup] ... cancel, will yield a tautology
0.161[zip.env] apply binary rule ctx_narrow
0.161[zip.env] apply binary rule narrow_term_defs
0.161[zip.env] do unary inferences
0.161[zip.env] apply unary rule equality_resolution
0.161[zip.env] apply unary rule equality_factoring
0.161[zip.env] apply unary rule narrow_lit_defs
0.161[zip.env] apply unary rule ind_types.exhaustiveness
0.161[zip.env] apply unary rule ind_types.acyclicity
0.161[zip.env] apply unary rule avatar_check_empty
0.161[zip.env] apply generating rule avatar.lemmas (full: false)
0.161[zip.env] apply generating rule avatar_check_sat (full: false)
0.161[zip.avatar] SAT-solver reports "SAT"
0.161[zip.sup] @[neg_reflect did not simplify the clause @]
0.161[zip.sup] @[neg_reflect did not simplify the clause @]
0.161[zip.sup] @[neg_reflect did not simplify the clause @]
0.161[zip.sup] @[neg_reflect did not simplify the clause @]
0.162[zip.sup] @[neg_reflect did not simplify the clause @]
0.162[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X0 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 X5 (f (f X1)) X4* ∨ ¬cP_1 (f X5) X3*]/id:147/depth:3, 
       forall X0 X1 X2 X3 X4.
       [cQ_2 X2 X0 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 X4 (f d) X3* ∨ 
        ¬cP_1 (f X4) X2*]/id:148/depth:3, 
       forall X0 X1 X2 X3.
       [cQ_2 X1 c X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f c) X2* ∨ 
        ¬cP_1 (f X3) X1*]/id:149/depth:3, 
       forall X0 X1 X2 X3.
       [cQ_2 X1 b X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f b) X2* ∨ 
        ¬cP_1 (f X3) X1*]/id:150/depth:3, 
       forall X0 X1 X2 X3.
       [cQ_2 X1 a X0+* ∨ ¬cP_1 (f X2) X0+* ∨ ¬cQ_1 X3 (f a) X2* ∨ 
        ¬cP_1 (f X3) X1*]/id:151/depth:3]
0.162[zip.sup] @[neg_reflect did not simplify the clause @]
0.162[zip.sup] @[neg_reflect did not simplify the clause @]
0.162[zip.saturate] ### step   135 ###
0.162[zip.saturate]
    given (135 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) d (f (f (f (f (f a)))))+* ∨ cQ_2 b X0 a+*]/id:146/depth:12`
0.163[zip.env] apply binary rule superposition_active
0.163[zip.env] apply binary rule superposition_passive
0.163[zip.env] apply binary rule ctx_narrow
0.163[zip.env] apply binary rule narrow_term_defs
0.163[zip.env] do unary inferences
0.163[zip.env] apply unary rule equality_resolution
0.163[zip.env] apply unary rule equality_factoring
0.163[zip.env] apply unary rule narrow_lit_defs
0.163[zip.env] apply unary rule ind_types.exhaustiveness
0.163[zip.env] apply unary rule ind_types.acyclicity
0.163[zip.env] apply unary rule avatar_check_empty
0.163[zip.env] apply generating rule avatar.lemmas (full: false)
0.163[zip.env] apply generating rule avatar_check_sat (full: false)
0.163[zip.avatar] SAT-solver reports "SAT"
0.163[zip.saturate] inferred new clauses: []
0.163[zip.sup] @[neg_reflect did not simplify the clause @]
0.163[zip.sup] @[neg_reflect did not simplify the clause @]
0.163[zip.saturate] ### step   136 ###
0.163[zip.saturate]
    given (136 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11`
0.164[zip.env] apply binary rule superposition_active
0.164[zip.env] apply binary rule superposition_passive
0.164[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.164[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 a X2 X0+*]/id:152/depth:12
0.164[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.164[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f a) d (f (f (f (f (f d)))))+* ∨ cQ_2 a X1 X0+*]/id:153/depth:12
0.164[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.164[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f (f (f c)))))+* ∨ cQ_2 a X0 c+*]/id:154/depth:12
0.164[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.165[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f (f (f b)))))+* ∨ cQ_2 a X0 b+*]/id:155/depth:12
0.165[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.165[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) d (f (f (f (f (f a)))))+* ∨ cQ_2 a X0 a+*]/id:156/depth:12
0.165[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f X1)))))*]/id:132/depth:11[0]
         passive_lit=cQ_2 a X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.165[zip.sup] will yield a tautology
0.165[zip.sup] ... cancel, will yield a tautology
0.165[zip.env] apply binary rule ctx_narrow
0.165[zip.env] apply binary rule narrow_term_defs
0.165[zip.env] do unary inferences
0.165[zip.env] apply unary rule equality_resolution
0.165[zip.env] apply unary rule equality_factoring
0.165[zip.env] apply unary rule narrow_lit_defs
0.165[zip.env] apply unary rule ind_types.exhaustiveness
0.165[zip.env] apply unary rule ind_types.acyclicity
0.165[zip.env] apply unary rule avatar_check_empty
0.165[zip.env] apply generating rule avatar.lemmas (full: false)
0.165[zip.env] apply generating rule avatar_check_sat (full: false)
0.165[zip.avatar] SAT-solver reports "SAT"
0.165[zip.sup] @[neg_reflect did not simplify the clause @]
0.165[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12, 
       forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f d)))))+* ∨ cQ_2 a X1 X0+*]/id:153/depth:12, 
       forall X0. [¬cQ_1 (f a) d (f (f (f (f (f c)))))+* ∨ cQ_2 a X0 c+*]/id:154/depth:12, 
       forall X0. [¬cQ_1 (f a) d (f (f (f (f (f b)))))+* ∨ cQ_2 a X0 b+*]/id:155/depth:12, 
       forall X0. [¬cQ_1 (f a) d (f (f (f (f (f a)))))+* ∨ cQ_2 a X0 a+*]/id:156/depth:12]
0.166[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.sup] @[neg_reflect did not simplify the clause @]
0.166[zip.saturate] ### step   137 ###
0.167[zip.saturate]
    given (137 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f d)))))+* ∨ cQ_2 a X1 X0+*]/id:153/depth:12`
0.167[zip.env] apply binary rule superposition_active
0.167[zip.env] apply binary rule superposition_passive
0.167[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f d)))))+* ∨ cQ_2 a X1 X0+*]/id:153/depth:12[0]
         passive_lit=cQ_2 a X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.167[zip.sup] will yield a tautology
0.167[zip.sup] ... cancel, will yield a tautology
0.167[zip.env] apply binary rule ctx_narrow
0.167[zip.env] apply binary rule narrow_term_defs
0.167[zip.env] do unary inferences
0.167[zip.env] apply unary rule equality_resolution
0.167[zip.env] apply unary rule equality_factoring
0.167[zip.env] apply unary rule narrow_lit_defs
0.167[zip.env] apply unary rule ind_types.exhaustiveness
0.167[zip.env] apply unary rule ind_types.acyclicity
0.167[zip.env] apply unary rule avatar_check_empty
0.167[zip.env] apply generating rule avatar.lemmas (full: false)
0.167[zip.env] apply generating rule avatar_check_sat (full: false)
0.167[zip.avatar] SAT-solver reports "SAT"
0.167[zip.saturate] inferred new clauses: []
0.167[zip.sup] @[neg_reflect did not simplify the clause @]
0.168[zip.sup] @[neg_reflect did not simplify the clause @]
0.168[zip.saturate] ### step   138 ###
0.168[zip.saturate]
    given (138 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f (f (f c)))))+* ∨ cQ_2 a X0 c+*]/id:154/depth:12`
0.168[zip.env] apply binary rule superposition_active
0.168[zip.env] apply binary rule superposition_passive
0.168[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f (f (f c)))))+* ∨ cQ_2 a X0 c+*]/id:154/depth:12[0]
         passive_lit=cQ_2 a X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.168[zip.sup] will yield a tautology
0.168[zip.sup] ... cancel, will yield a tautology
0.168[zip.env] apply binary rule ctx_narrow
0.168[zip.env] apply binary rule narrow_term_defs
0.169[zip.env] do unary inferences
0.169[zip.env] apply unary rule equality_resolution
0.169[zip.env] apply unary rule equality_factoring
0.169[zip.env] apply unary rule narrow_lit_defs
0.169[zip.env] apply unary rule ind_types.exhaustiveness
0.169[zip.env] apply unary rule ind_types.acyclicity
0.169[zip.env] apply unary rule avatar_check_empty
0.169[zip.env] apply generating rule avatar.lemmas (full: false)
0.169[zip.env] apply generating rule avatar_check_sat (full: false)
0.169[zip.avatar] SAT-solver reports "SAT"
0.169[zip.saturate] inferred new clauses: []
0.169[zip.sup] @[neg_reflect did not simplify the clause @]
0.169[zip.sup] @[neg_reflect did not simplify the clause @]
0.169[zip.saturate] ### step   139 ###
0.169[zip.saturate]
    given (139 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f (f (f b)))))+* ∨ cQ_2 a X0 b+*]/id:155/depth:12`
0.169[zip.env] apply binary rule superposition_active
0.169[zip.env] apply binary rule superposition_passive
0.169[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f (f (f b)))))+* ∨ cQ_2 a X0 b+*]/id:155/depth:12[0]
         passive_lit=cQ_2 a X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.169[zip.sup] will yield a tautology
0.169[zip.sup] ... cancel, will yield a tautology
0.169[zip.env] apply binary rule ctx_narrow
0.169[zip.env] apply binary rule narrow_term_defs
0.169[zip.env] do unary inferences
0.169[zip.env] apply unary rule equality_resolution
0.169[zip.env] apply unary rule equality_factoring
0.169[zip.env] apply unary rule narrow_lit_defs
0.169[zip.env] apply unary rule ind_types.exhaustiveness
0.169[zip.env] apply unary rule ind_types.acyclicity
0.169[zip.env] apply unary rule avatar_check_empty
0.169[zip.env] apply generating rule avatar.lemmas (full: false)
0.169[zip.env] apply generating rule avatar_check_sat (full: false)
0.169[zip.avatar] SAT-solver reports "SAT"
0.169[zip.saturate] inferred new clauses: []
0.169[zip.sup] @[neg_reflect did not simplify the clause @]
0.170[zip.sup] @[neg_reflect did not simplify the clause @]
0.170[zip.saturate] ### step   140 ###
0.170[zip.saturate]
    given (140 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) d (f (f (f (f (f a)))))+* ∨ cQ_2 a X0 a+*]/id:156/depth:12`
0.170[zip.env] apply binary rule superposition_active
0.170[zip.env] apply binary rule superposition_passive
0.170[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) d (f (f (f (f (f a)))))+* ∨ cQ_2 a X0 a+*]/id:156/depth:12[0]
         passive_lit=cQ_2 a X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.170[zip.sup] will yield a tautology
0.170[zip.sup] ... cancel, will yield a tautology
0.170[zip.env] apply binary rule ctx_narrow
0.170[zip.env] apply binary rule narrow_term_defs
0.170[zip.env] do unary inferences
0.170[zip.env] apply unary rule equality_resolution
0.170[zip.env] apply unary rule equality_factoring
0.170[zip.env] apply unary rule narrow_lit_defs
0.170[zip.env] apply unary rule ind_types.exhaustiveness
0.170[zip.env] apply unary rule ind_types.acyclicity
0.170[zip.env] apply unary rule avatar_check_empty
0.170[zip.env] apply generating rule avatar.lemmas (full: false)
0.170[zip.env] apply generating rule avatar_check_sat (full: false)
0.170[zip.avatar] SAT-solver reports "SAT"
0.170[zip.saturate] inferred new clauses: []
0.170[zip.sup] @[neg_reflect did not simplify the clause @]
0.170[zip.sup] @[neg_reflect did not simplify the clause @]
0.170[zip.saturate] ### step   141 ###
0.170[zip.saturate]
    given (141 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [cQ_2 X0 X2 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 (f d) d X3*]/id:52/depth:5`
0.171[zip.env] apply binary rule superposition_active
0.171[zip.env] apply binary rule superposition_passive
0.171[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [cQ_2 X0 X2 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 (f d) d X3*]/id:52/depth:5[0]
         passive_lit=cQ_2 X0 X2 X1 p=0.←.ε)
      with subst={X0[0] → a[1], X2[0] → b[1], X0[1] → X1[0]}.

0.171[zip.sup] will yield a tautology
0.171[zip.sup] ... cancel, will yield a tautology
0.171[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [cQ_2 X0 X2 X1+* ∨ ¬cP_1 (f X3) X1+* ∨ ¬cQ_1 (f d) d X3*]/id:52/depth:5[0]
         passive_lit=¬cP_1 (f X3) X1 p=1.←.ε)
      with subst={X1[1] → X3[0], X2[1] → X1[0]}.

0.171[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6
0.171[zip.env] apply binary rule ctx_narrow
0.171[zip.env] apply binary rule narrow_term_defs
0.171[zip.env] do unary inferences
0.171[zip.env] apply unary rule equality_resolution
0.171[zip.env] apply unary rule equality_factoring
0.171[zip.env] apply unary rule narrow_lit_defs
0.171[zip.env] apply unary rule ind_types.exhaustiveness
0.171[zip.env] apply unary rule ind_types.acyclicity
0.171[zip.env] apply unary rule avatar_check_empty
0.171[zip.env] apply generating rule avatar.lemmas (full: false)
0.171[zip.env] apply generating rule avatar_check_sat (full: false)
0.171[zip.avatar] SAT-solver reports "SAT"
0.171[zip.sup] @[neg_reflect did not simplify the clause @]
0.171[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6]
0.171[zip.sup] @[neg_reflect did not simplify the clause @]
0.172[zip.sup] @[neg_reflect did not simplify the clause @]
0.172[zip.saturate] ### step   142 ###
0.172[zip.saturate]
    given (142 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6`
0.172[zip.env] apply binary rule superposition_active
0.172[zip.env] apply binary rule superposition_passive
0.172[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.172[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7
0.172[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.172[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d d+*]/id:159/depth:7
0.172[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.172[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d c+*]/id:160/depth:7
0.173[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.173[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d b+*]/id:161/depth:7
0.173[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.173[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d a+*]/id:162/depth:7
0.173[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d X1* ∨ cQ_2 X3 X2 X0+*]/id:157/depth:6[0]
         passive_lit=cQ_2 X3 X2 X0 p=2.←.ε)
      with subst={X2[0] → b[1], X3[0] → a[1], X0[1] → X0[0]}.

0.173[zip.sup] will yield a tautology
0.173[zip.sup] ... cancel, will yield a tautology
0.173[zip.env] apply binary rule ctx_narrow
0.173[zip.env] apply binary rule narrow_term_defs
0.173[zip.env] do unary inferences
0.173[zip.env] apply unary rule equality_resolution
0.173[zip.env] apply unary rule equality_factoring
0.173[zip.env] apply unary rule narrow_lit_defs
0.173[zip.env] apply unary rule ind_types.exhaustiveness
0.173[zip.env] apply unary rule ind_types.acyclicity
0.173[zip.env] apply unary rule avatar_check_empty
0.173[zip.env] apply generating rule avatar.lemmas (full: false)
0.173[zip.env] apply generating rule avatar_check_sat (full: false)
0.173[zip.avatar] SAT-solver reports "SAT"
0.173[zip.sup] @[neg_reflect did not simplify the clause @]
0.173[zip.sup] @[neg_reflect did not simplify the clause @]
0.173[zip.sup] @[neg_reflect did not simplify the clause @]
0.173[zip.sup] @[neg_reflect did not simplify the clause @]
0.173[zip.sup] @[neg_reflect did not simplify the clause @]
0.173[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7, 
       forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d d+*]/id:159/depth:7, 
       forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d c+*]/id:160/depth:7, 
       forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d b+*]/id:161/depth:7, 
       forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d a+*]/id:162/depth:7]
0.174[zip.sup] @[neg_reflect did not simplify the clause @]
0.174[zip.sup] @[neg_reflect did not simplify the clause @]
0.174[zip.saturate] ### step   143 ###
0.174[zip.saturate]
    given (143 steps, penalty 1):
      `forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d d+*]/id:159/depth:7`
0.174[zip.env] apply binary rule superposition_active
0.174[zip.env] apply binary rule superposition_passive
0.174[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d d+*]/id:159/depth:7[0]
         passive_lit=cQ_2 X2 X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X2[0] → a[1], X0[1] → X0[0]}.

0.174[zip.sup] will yield a tautology
0.174[zip.sup] ... cancel, will yield a tautology
0.174[zip.env] apply binary rule ctx_narrow
0.174[zip.env] apply binary rule narrow_term_defs
0.174[zip.env] do unary inferences
0.174[zip.env] apply unary rule equality_resolution
0.174[zip.env] apply unary rule equality_factoring
0.174[zip.env] apply unary rule narrow_lit_defs
0.174[zip.env] apply unary rule ind_types.exhaustiveness
0.174[zip.env] apply unary rule ind_types.acyclicity
0.174[zip.env] apply unary rule avatar_check_empty
0.174[zip.env] apply generating rule avatar.lemmas (full: false)
0.174[zip.env] apply generating rule avatar_check_sat (full: false)
0.174[zip.avatar] SAT-solver reports "SAT"
0.174[zip.saturate] inferred new clauses: []
0.174[zip.sup] @[neg_reflect did not simplify the clause @]
0.174[zip.sup] @[neg_reflect did not simplify the clause @]
0.174[zip.saturate] ### step   144 ###
0.174[zip.saturate]
    given (144 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d c+*]/id:160/depth:7`
0.174[zip.env] apply binary rule superposition_active
0.174[zip.env] apply binary rule superposition_passive
0.174[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d c+*]/id:160/depth:7[0]
         passive_lit=cQ_2 X1 X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → c[0]}.

0.175[zip.sup] will yield a tautology
0.175[zip.sup] ... cancel, will yield a tautology
0.175[zip.env] apply binary rule ctx_narrow
0.175[zip.env] apply binary rule narrow_term_defs
0.175[zip.env] do unary inferences
0.175[zip.env] apply unary rule equality_resolution
0.175[zip.env] apply unary rule equality_factoring
0.175[zip.env] apply unary rule narrow_lit_defs
0.175[zip.env] apply unary rule ind_types.exhaustiveness
0.175[zip.env] apply unary rule ind_types.acyclicity
0.175[zip.env] apply unary rule avatar_check_empty
0.175[zip.env] apply generating rule avatar.lemmas (full: false)
0.175[zip.env] apply generating rule avatar_check_sat (full: false)
0.175[zip.avatar] SAT-solver reports "SAT"
0.175[zip.saturate] inferred new clauses: []
0.175[zip.sup] @[neg_reflect did not simplify the clause @]
0.175[zip.sup] @[neg_reflect did not simplify the clause @]
0.175[zip.saturate] ### step   145 ###
0.175[zip.saturate]
    given (145 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d b+*]/id:161/depth:7`
0.175[zip.env] apply binary rule superposition_active
0.175[zip.env] apply binary rule superposition_passive
0.175[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d b+*]/id:161/depth:7[0]
         passive_lit=cQ_2 X1 X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → b[0]}.

0.175[zip.sup] will yield a tautology
0.175[zip.sup] ... cancel, will yield a tautology
0.175[zip.env] apply binary rule ctx_narrow
0.175[zip.env] apply binary rule narrow_term_defs
0.175[zip.env] do unary inferences
0.175[zip.env] apply unary rule equality_resolution
0.175[zip.env] apply unary rule equality_factoring
0.175[zip.env] apply unary rule narrow_lit_defs
0.175[zip.env] apply unary rule ind_types.exhaustiveness
0.175[zip.env] apply unary rule ind_types.acyclicity
0.175[zip.env] apply unary rule avatar_check_empty
0.175[zip.env] apply generating rule avatar.lemmas (full: false)
0.175[zip.env] apply generating rule avatar_check_sat (full: false)
0.175[zip.avatar] SAT-solver reports "SAT"
0.175[zip.saturate] inferred new clauses: []
0.175[zip.sup] @[neg_reflect did not simplify the clause @]
0.175[zip.sup] @[neg_reflect did not simplify the clause @]
0.175[zip.saturate] ### step   146 ###
0.175[zip.saturate]
    given (146 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d a+*]/id:162/depth:7`
0.176[zip.env] apply binary rule superposition_active
0.176[zip.env] apply binary rule superposition_passive
0.176[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d a+*]/id:162/depth:7[0]
         passive_lit=cQ_2 X1 X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → a[0]}.

0.176[zip.sup] will yield a tautology
0.176[zip.sup] ... cancel, will yield a tautology
0.176[zip.env] apply binary rule ctx_narrow
0.176[zip.env] apply binary rule narrow_term_defs
0.176[zip.env] do unary inferences
0.176[zip.env] apply unary rule equality_resolution
0.176[zip.env] apply unary rule equality_factoring
0.176[zip.env] apply unary rule narrow_lit_defs
0.176[zip.env] apply unary rule ind_types.exhaustiveness
0.176[zip.env] apply unary rule ind_types.acyclicity
0.176[zip.env] apply unary rule avatar_check_empty
0.176[zip.env] apply generating rule avatar.lemmas (full: false)
0.176[zip.env] apply generating rule avatar_check_sat (full: false)
0.176[zip.avatar] SAT-solver reports "SAT"
0.176[zip.saturate] inferred new clauses: []
0.176[zip.sup] @[neg_reflect did not simplify the clause @]
0.176[zip.sup] @[neg_reflect did not simplify the clause @]
0.176[zip.saturate] ### step   147 ###
0.176[zip.saturate]
    given (147 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7`
0.176[zip.env] apply binary rule superposition_active
0.176[zip.env] apply binary rule superposition_passive
0.176[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.176[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8
0.177[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.177[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2. [¬cQ_1 (f d) d (f d)+* ∨ cQ_2 X2 X1 X0+*]/id:164/depth:8
0.177[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.177[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f c)+* ∨ cQ_2 X1 X0 c+*]/id:165/depth:8
0.177[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.177[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f b)+* ∨ cQ_2 X1 X0 b+*]/id:166/depth:8
0.177[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.177[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f a)+* ∨ cQ_2 X1 X0 a+*]/id:167/depth:8
0.177[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f X1)*]/id:158/depth:7[0]
         passive_lit=cQ_2 X3 X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X3[0] → a[1], X0[1] → X0[0]}.

0.177[zip.sup] will yield a tautology
0.177[zip.sup] ... cancel, will yield a tautology
0.177[zip.env] apply binary rule ctx_narrow
0.177[zip.env] apply binary rule narrow_term_defs
0.178[zip.env] do unary inferences
0.178[zip.env] apply unary rule equality_resolution
0.178[zip.env] apply unary rule equality_factoring
0.178[zip.env] apply unary rule narrow_lit_defs
0.178[zip.env] apply unary rule ind_types.exhaustiveness
0.178[zip.env] apply unary rule ind_types.acyclicity
0.178[zip.env] apply unary rule avatar_check_empty
0.178[zip.env] apply generating rule avatar.lemmas (full: false)
0.178[zip.env] apply generating rule avatar_check_sat (full: false)
0.178[zip.avatar] SAT-solver reports "SAT"
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8, 
       forall X0 X1 X2. [¬cQ_1 (f d) d (f d)+* ∨ cQ_2 X2 X1 X0+*]/id:164/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) d (f c)+* ∨ cQ_2 X1 X0 c+*]/id:165/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) d (f b)+* ∨ cQ_2 X1 X0 b+*]/id:166/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) d (f a)+* ∨ cQ_2 X1 X0 a+*]/id:167/depth:8]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.sup] @[neg_reflect did not simplify the clause @]
0.178[zip.saturate] ### step   148 ###
0.178[zip.saturate]
    given (148 steps, penalty 1):
      `forall X0 X1 X2. [¬cQ_1 (f d) d (f d)+* ∨ cQ_2 X2 X1 X0+*]/id:164/depth:8`
0.178[zip.env] apply binary rule superposition_active
0.178[zip.env] apply binary rule superposition_passive
0.178[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2. [¬cQ_1 (f d) d (f d)+* ∨ cQ_2 X2 X1 X0+*]/id:164/depth:8[0]
         passive_lit=cQ_2 X2 X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X2[0] → a[1], X0[1] → X0[0]}.

0.179[zip.sup] will yield a tautology
0.179[zip.sup] ... cancel, will yield a tautology
0.179[zip.env] apply binary rule ctx_narrow
0.179[zip.env] apply binary rule narrow_term_defs
0.179[zip.env] do unary inferences
0.179[zip.env] apply unary rule equality_resolution
0.179[zip.env] apply unary rule equality_factoring
0.179[zip.env] apply unary rule narrow_lit_defs
0.179[zip.env] apply unary rule ind_types.exhaustiveness
0.179[zip.env] apply unary rule ind_types.acyclicity
0.179[zip.env] apply unary rule avatar_check_empty
0.179[zip.env] apply generating rule avatar.lemmas (full: false)
0.179[zip.env] apply generating rule avatar_check_sat (full: false)
0.179[zip.avatar] SAT-solver reports "SAT"
0.179[zip.saturate] inferred new clauses: []
0.179[zip.sup] @[neg_reflect did not simplify the clause @]
0.179[zip.sup] @[neg_reflect did not simplify the clause @]
0.179[zip.saturate] ### step   149 ###
0.179[zip.saturate]
    given (149 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f c)+* ∨ cQ_2 X1 X0 c+*]/id:165/depth:8`
0.179[zip.env] apply binary rule superposition_active
0.179[zip.env] apply binary rule superposition_passive
0.179[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f c)+* ∨ cQ_2 X1 X0 c+*]/id:165/depth:8[0]
         passive_lit=cQ_2 X1 X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → c[0]}.

0.179[zip.sup] will yield a tautology
0.179[zip.sup] ... cancel, will yield a tautology
0.179[zip.env] apply binary rule ctx_narrow
0.179[zip.env] apply binary rule narrow_term_defs
0.179[zip.env] do unary inferences
0.179[zip.env] apply unary rule equality_resolution
0.179[zip.env] apply unary rule equality_factoring
0.179[zip.env] apply unary rule narrow_lit_defs
0.179[zip.env] apply unary rule ind_types.exhaustiveness
0.179[zip.env] apply unary rule ind_types.acyclicity
0.179[zip.env] apply unary rule avatar_check_empty
0.179[zip.env] apply generating rule avatar.lemmas (full: false)
0.179[zip.env] apply generating rule avatar_check_sat (full: false)
0.179[zip.avatar] SAT-solver reports "SAT"
0.179[zip.saturate] inferred new clauses: []
0.179[zip.sup] @[neg_reflect did not simplify the clause @]
0.179[zip.sup] @[neg_reflect did not simplify the clause @]
0.179[zip.saturate] ### step   150 ###
0.179[zip.saturate]
    given (150 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f b)+* ∨ cQ_2 X1 X0 b+*]/id:166/depth:8`
0.180[zip.env] apply binary rule superposition_active
0.180[zip.env] apply binary rule superposition_passive
0.180[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f b)+* ∨ cQ_2 X1 X0 b+*]/id:166/depth:8[0]
         passive_lit=cQ_2 X1 X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → b[0]}.

0.180[zip.sup] will yield a tautology
0.180[zip.sup] ... cancel, will yield a tautology
0.180[zip.env] apply binary rule ctx_narrow
0.180[zip.env] apply binary rule narrow_term_defs
0.180[zip.env] do unary inferences
0.180[zip.env] apply unary rule equality_resolution
0.180[zip.env] apply unary rule equality_factoring
0.180[zip.env] apply unary rule narrow_lit_defs
0.180[zip.env] apply unary rule ind_types.exhaustiveness
0.180[zip.env] apply unary rule ind_types.acyclicity
0.180[zip.env] apply unary rule avatar_check_empty
0.180[zip.env] apply generating rule avatar.lemmas (full: false)
0.180[zip.env] apply generating rule avatar_check_sat (full: false)
0.180[zip.avatar] SAT-solver reports "SAT"
0.180[zip.saturate] inferred new clauses: []
0.180[zip.sup] @[neg_reflect did not simplify the clause @]
0.180[zip.sup] @[neg_reflect did not simplify the clause @]
0.180[zip.saturate] ### step   151 ###
0.180[zip.saturate]
    given (151 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f a)+* ∨ cQ_2 X1 X0 a+*]/id:167/depth:8`
0.180[zip.env] apply binary rule superposition_active
0.180[zip.env] apply binary rule superposition_passive
0.180[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f a)+* ∨ cQ_2 X1 X0 a+*]/id:167/depth:8[0]
         passive_lit=cQ_2 X1 X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → a[0]}.

0.181[zip.sup] will yield a tautology
0.181[zip.sup] ... cancel, will yield a tautology
0.181[zip.env] apply binary rule ctx_narrow
0.181[zip.env] apply binary rule narrow_term_defs
0.181[zip.env] do unary inferences
0.181[zip.env] apply unary rule equality_resolution
0.181[zip.env] apply unary rule equality_factoring
0.181[zip.env] apply unary rule narrow_lit_defs
0.181[zip.env] apply unary rule ind_types.exhaustiveness
0.181[zip.env] apply unary rule ind_types.acyclicity
0.181[zip.env] apply unary rule avatar_check_empty
0.181[zip.env] apply generating rule avatar.lemmas (full: false)
0.181[zip.env] apply generating rule avatar_check_sat (full: false)
0.181[zip.avatar] SAT-solver reports "SAT"
0.181[zip.saturate] inferred new clauses: []
0.181[zip.sup] @[neg_reflect did not simplify the clause @]
0.181[zip.sup] @[neg_reflect did not simplify the clause @]
0.181[zip.saturate] ### step   152 ###
0.181[zip.saturate]
    given (152 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12`
0.181[zip.env] apply binary rule superposition_active
0.181[zip.env] apply binary rule superposition_passive
0.181[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.182[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
     ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13
0.182[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.182[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f d))))))+*]/id:169/depth:13
0.182[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.183[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f c))))))+*]/id:170/depth:13
0.183[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.183[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f b))))))+*]/id:171/depth:13
0.183[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c X2 X0+*]/id:137/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.183[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f a))))))+*]/id:172/depth:13
0.183[zip.env] apply binary rule ctx_narrow
0.183[zip.env] apply binary rule narrow_term_defs
0.184[zip.env] do unary inferences
0.184[zip.env] apply unary rule equality_resolution
0.184[zip.env] apply unary rule equality_factoring
0.184[zip.env] apply unary rule narrow_lit_defs
0.184[zip.env] apply unary rule ind_types.exhaustiveness
0.184[zip.env] apply unary rule ind_types.acyclicity
0.184[zip.env] apply unary rule avatar_check_empty
0.184[zip.env] apply generating rule avatar.lemmas (full: false)
0.184[zip.env] apply generating rule avatar_check_sat (full: false)
0.184[zip.avatar] SAT-solver reports "SAT"
0.184[zip.sup] @[neg_reflect did not simplify the clause @]
0.184[zip.sup] @[neg_reflect did not simplify the clause @]
0.184[zip.sup] @[neg_reflect did not simplify the clause @]
0.184[zip.sup] @[neg_reflect did not simplify the clause @]
0.184[zip.sup] @[neg_reflect did not simplify the clause @]
0.184[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13, 
       forall X0 X1.
       [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f d))))))+*]/id:169/depth:13, 
       forall X0.
       [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f c))))))+*]/id:170/depth:13, 
       forall X0.
       [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f b))))))+*]/id:171/depth:13, 
       forall X0.
       [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f a))))))+*]/id:172/depth:13]
0.185[zip.sup] @[neg_reflect did not simplify the clause @]
0.185[zip.sup] @[neg_reflect did not simplify the clause @]
0.185[zip.saturate] ### step   153 ###
0.185[zip.saturate]
    given (153 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f d))))))+*]/id:169/depth:13`
0.186[zip.env] apply binary rule superposition_active
0.186[zip.env] apply binary rule superposition_passive
0.186[zip.env] apply binary rule ctx_narrow
0.186[zip.env] apply binary rule narrow_term_defs
0.186[zip.env] do unary inferences
0.186[zip.env] apply unary rule equality_resolution
0.186[zip.env] apply unary rule equality_factoring
0.186[zip.env] apply unary rule narrow_lit_defs
0.186[zip.env] apply unary rule ind_types.exhaustiveness
0.186[zip.env] apply unary rule ind_types.acyclicity
0.186[zip.env] apply unary rule avatar_check_empty
0.186[zip.env] apply generating rule avatar.lemmas (full: false)
0.186[zip.env] apply generating rule avatar_check_sat (full: false)
0.186[zip.avatar] SAT-solver reports "SAT"
0.186[zip.saturate] inferred new clauses: []
0.186[zip.sup] @[neg_reflect did not simplify the clause @]
0.186[zip.sup] @[neg_reflect did not simplify the clause @]
0.187[zip.saturate] ### step   154 ###
0.187[zip.saturate]
    given (154 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f c))))))+*]/id:170/depth:13`
0.187[zip.env] apply binary rule superposition_active
0.187[zip.env] apply binary rule superposition_passive
0.187[zip.env] apply binary rule ctx_narrow
0.187[zip.env] apply binary rule narrow_term_defs
0.187[zip.env] do unary inferences
0.187[zip.env] apply unary rule equality_resolution
0.187[zip.env] apply unary rule equality_factoring
0.187[zip.env] apply unary rule narrow_lit_defs
0.187[zip.env] apply unary rule ind_types.exhaustiveness
0.187[zip.env] apply unary rule ind_types.acyclicity
0.187[zip.env] apply unary rule avatar_check_empty
0.187[zip.env] apply generating rule avatar.lemmas (full: false)
0.187[zip.env] apply generating rule avatar_check_sat (full: false)
0.187[zip.avatar] SAT-solver reports "SAT"
0.187[zip.saturate] inferred new clauses: []
0.187[zip.sup] @[neg_reflect did not simplify the clause @]
0.187[zip.sup] @[neg_reflect did not simplify the clause @]
0.187[zip.saturate] ### step   155 ###
0.187[zip.saturate]
    given (155 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f b))))))+*]/id:171/depth:13`
0.188[zip.env] apply binary rule superposition_active
0.188[zip.env] apply binary rule superposition_passive
0.188[zip.env] apply binary rule ctx_narrow
0.188[zip.env] apply binary rule narrow_term_defs
0.188[zip.env] do unary inferences
0.188[zip.env] apply unary rule equality_resolution
0.188[zip.env] apply unary rule equality_factoring
0.188[zip.env] apply unary rule narrow_lit_defs
0.188[zip.env] apply unary rule ind_types.exhaustiveness
0.188[zip.env] apply unary rule ind_types.acyclicity
0.188[zip.env] apply unary rule avatar_check_empty
0.188[zip.env] apply generating rule avatar.lemmas (full: false)
0.188[zip.env] apply generating rule avatar_check_sat (full: false)
0.188[zip.avatar] SAT-solver reports "SAT"
0.188[zip.saturate] inferred new clauses: []
0.188[zip.sup] @[neg_reflect did not simplify the clause @]
0.188[zip.sup] @[neg_reflect did not simplify the clause @]
0.188[zip.saturate] ### step   156 ###
0.188[zip.saturate]
    given (156 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f a))))))+*]/id:172/depth:13`
0.188[zip.env] apply binary rule superposition_active
0.188[zip.env] apply binary rule superposition_passive
0.188[zip.env] apply binary rule ctx_narrow
0.188[zip.env] apply binary rule narrow_term_defs
0.188[zip.env] do unary inferences
0.188[zip.env] apply unary rule equality_resolution
0.188[zip.env] apply unary rule equality_factoring
0.188[zip.env] apply unary rule narrow_lit_defs
0.188[zip.env] apply unary rule ind_types.exhaustiveness
0.189[zip.env] apply unary rule ind_types.acyclicity
0.189[zip.env] apply unary rule avatar_check_empty
0.189[zip.env] apply generating rule avatar.lemmas (full: false)
0.189[zip.env] apply generating rule avatar_check_sat (full: false)
0.189[zip.avatar] SAT-solver reports "SAT"
0.189[zip.saturate] inferred new clauses: []
0.189[zip.sup] @[neg_reflect did not simplify the clause @]
0.189[zip.sup] @[neg_reflect did not simplify the clause @]
0.189[zip.saturate] ### step   157 ###
0.189[zip.saturate]
    given (157 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12`
0.190[zip.env] apply binary rule superposition_active
0.190[zip.env] apply binary rule superposition_passive
0.190[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.190[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
     ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13
0.190[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.190[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f d))))))+*]/id:174/depth:13
0.190[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.191[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f c))))))+*]/id:175/depth:13
0.191[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.191[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f b))))))+*]/id:176/depth:13
0.191[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b X2 X0+*]/id:142/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.191[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f a))))))+*]/id:177/depth:13
0.192[zip.env] apply binary rule ctx_narrow
0.192[zip.env] apply binary rule narrow_term_defs
0.192[zip.env] do unary inferences
0.192[zip.env] apply unary rule equality_resolution
0.192[zip.env] apply unary rule equality_factoring
0.192[zip.env] apply unary rule narrow_lit_defs
0.192[zip.env] apply unary rule ind_types.exhaustiveness
0.192[zip.env] apply unary rule ind_types.acyclicity
0.192[zip.env] apply unary rule avatar_check_empty
0.192[zip.env] apply generating rule avatar.lemmas (full: false)
0.192[zip.env] apply generating rule avatar_check_sat (full: false)
0.192[zip.avatar] SAT-solver reports "SAT"
0.192[zip.sup] @[neg_reflect did not simplify the clause @]
0.192[zip.sup] @[neg_reflect did not simplify the clause @]
0.192[zip.sup] @[neg_reflect did not simplify the clause @]
0.192[zip.sup] @[neg_reflect did not simplify the clause @]
0.192[zip.sup] @[neg_reflect did not simplify the clause @]
0.192[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13, 
       forall X0 X1.
       [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f d))))))+*]/id:174/depth:13, 
       forall X0.
       [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f c))))))+*]/id:175/depth:13, 
       forall X0.
       [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f b))))))+*]/id:176/depth:13, 
       forall X0.
       [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f a))))))+*]/id:177/depth:13]
0.193[zip.sup] @[neg_reflect did not simplify the clause @]
0.193[zip.sup] @[neg_reflect did not simplify the clause @]
0.193[zip.saturate] ### step   158 ###
0.193[zip.saturate]
    given (158 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f d))))))+*]/id:174/depth:13`
0.193[zip.env] apply binary rule superposition_active
0.193[zip.env] apply binary rule superposition_passive
0.193[zip.env] apply binary rule ctx_narrow
0.193[zip.env] apply binary rule narrow_term_defs
0.193[zip.env] do unary inferences
0.193[zip.env] apply unary rule equality_resolution
0.193[zip.env] apply unary rule equality_factoring
0.193[zip.env] apply unary rule narrow_lit_defs
0.193[zip.env] apply unary rule ind_types.exhaustiveness
0.193[zip.env] apply unary rule ind_types.acyclicity
0.193[zip.env] apply unary rule avatar_check_empty
0.193[zip.env] apply generating rule avatar.lemmas (full: false)
0.193[zip.env] apply generating rule avatar_check_sat (full: false)
0.193[zip.avatar] SAT-solver reports "SAT"
0.193[zip.saturate] inferred new clauses: []
0.193[zip.sup] @[neg_reflect did not simplify the clause @]
0.193[zip.sup] @[neg_reflect did not simplify the clause @]
0.194[zip.saturate] ### step   159 ###
0.194[zip.saturate]
    given (159 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f c))))))+*]/id:175/depth:13`
0.194[zip.env] apply binary rule superposition_active
0.194[zip.env] apply binary rule superposition_passive
0.194[zip.env] apply binary rule ctx_narrow
0.194[zip.env] apply binary rule narrow_term_defs
0.194[zip.env] do unary inferences
0.194[zip.env] apply unary rule equality_resolution
0.194[zip.env] apply unary rule equality_factoring
0.194[zip.env] apply unary rule narrow_lit_defs
0.194[zip.env] apply unary rule ind_types.exhaustiveness
0.194[zip.env] apply unary rule ind_types.acyclicity
0.194[zip.env] apply unary rule avatar_check_empty
0.194[zip.env] apply generating rule avatar.lemmas (full: false)
0.194[zip.env] apply generating rule avatar_check_sat (full: false)
0.194[zip.avatar] SAT-solver reports "SAT"
0.194[zip.saturate] inferred new clauses: []
0.194[zip.sup] @[neg_reflect did not simplify the clause @]
0.194[zip.sup] @[neg_reflect did not simplify the clause @]
0.194[zip.saturate] ### step   160 ###
0.194[zip.saturate]
    given (160 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f b))))))+*]/id:176/depth:13`
0.195[zip.env] apply binary rule superposition_active
0.195[zip.env] apply binary rule superposition_passive
0.195[zip.env] apply binary rule ctx_narrow
0.195[zip.env] apply binary rule narrow_term_defs
0.195[zip.env] do unary inferences
0.195[zip.env] apply unary rule equality_resolution
0.195[zip.env] apply unary rule equality_factoring
0.195[zip.env] apply unary rule narrow_lit_defs
0.195[zip.env] apply unary rule ind_types.exhaustiveness
0.195[zip.env] apply unary rule ind_types.acyclicity
0.195[zip.env] apply unary rule avatar_check_empty
0.195[zip.env] apply generating rule avatar.lemmas (full: false)
0.195[zip.env] apply generating rule avatar_check_sat (full: false)
0.195[zip.avatar] SAT-solver reports "SAT"
0.195[zip.saturate] inferred new clauses: []
0.195[zip.sup] @[neg_reflect did not simplify the clause @]
0.195[zip.sup] @[neg_reflect did not simplify the clause @]
0.195[zip.saturate] ### step   161 ###
0.195[zip.saturate]
    given (161 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f a))))))+*]/id:177/depth:13`
0.196[zip.env] apply binary rule superposition_active
0.196[zip.env] apply binary rule superposition_passive
0.196[zip.env] apply binary rule ctx_narrow
0.196[zip.env] apply binary rule narrow_term_defs
0.196[zip.env] do unary inferences
0.196[zip.env] apply unary rule equality_resolution
0.196[zip.env] apply unary rule equality_factoring
0.196[zip.env] apply unary rule narrow_lit_defs
0.196[zip.env] apply unary rule ind_types.exhaustiveness
0.196[zip.env] apply unary rule ind_types.acyclicity
0.196[zip.env] apply unary rule avatar_check_empty
0.196[zip.env] apply generating rule avatar.lemmas (full: false)
0.196[zip.env] apply generating rule avatar_check_sat (full: false)
0.196[zip.avatar] SAT-solver reports "SAT"
0.196[zip.saturate] inferred new clauses: []
0.196[zip.sup] @[neg_reflect did not simplify the clause @]
0.196[zip.sup] @[neg_reflect did not simplify the clause @]
0.197[zip.saturate] ### step   162 ###
0.197[zip.saturate]
    given (162 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12`
0.197[zip.env] apply binary rule superposition_active
0.197[zip.env] apply binary rule superposition_passive
0.197[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.197[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
     ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13
0.198[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.198[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f d))))))+*]/id:179/depth:13
0.198[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.198[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f c))))))+*]/id:180/depth:13
0.199[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.199[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f b))))))+*]/id:181/depth:13
0.199[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.199[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f a))))))+*]/id:182/depth:13
0.199[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a X2 X0+*]/id:152/depth:12[0] passive_lit=cQ_2 a X2 X0
         p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.200[zip.sup] will yield a tautology
0.200[zip.sup] ... cancel, will yield a tautology
0.200[zip.env] apply binary rule ctx_narrow
0.200[zip.env] apply binary rule narrow_term_defs
0.200[zip.env] do unary inferences
0.200[zip.env] apply unary rule equality_resolution
0.200[zip.env] apply unary rule equality_factoring
0.200[zip.env] apply unary rule narrow_lit_defs
0.200[zip.env] apply unary rule ind_types.exhaustiveness
0.200[zip.env] apply unary rule ind_types.acyclicity
0.200[zip.env] apply unary rule avatar_check_empty
0.200[zip.env] apply generating rule avatar.lemmas (full: false)
0.200[zip.env] apply generating rule avatar_check_sat (full: false)
0.200[zip.avatar] SAT-solver reports "SAT"
0.200[zip.sup] @[neg_reflect did not simplify the clause @]
0.200[zip.sup] @[neg_reflect did not simplify the clause @]
0.200[zip.sup] @[neg_reflect did not simplify the clause @]
0.200[zip.sup] @[neg_reflect did not simplify the clause @]
0.200[zip.sup] @[neg_reflect did not simplify the clause @]
0.200[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13, 
       forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f d))))))+*]/id:179/depth:13, 
       forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f c))))))+*]/id:180/depth:13, 
       forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f b))))))+*]/id:181/depth:13, 
       forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f a))))))+*]/id:182/depth:13]
0.201[zip.sup] @[neg_reflect did not simplify the clause @]
0.201[zip.sup] @[neg_reflect did not simplify the clause @]
0.201[zip.saturate] ### step   163 ###
0.202[zip.saturate]
    given (163 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f d))))))+*]/id:179/depth:13`
0.202[zip.env] apply binary rule superposition_active
0.202[zip.env] apply binary rule superposition_passive
0.202[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f d))))))+*]/id:179/depth:13[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.202[zip.sup] will yield a tautology
0.202[zip.sup] ... cancel, will yield a tautology
0.202[zip.env] apply binary rule ctx_narrow
0.202[zip.env] apply binary rule narrow_term_defs
0.203[zip.env] do unary inferences
0.203[zip.env] apply unary rule equality_resolution
0.203[zip.env] apply unary rule equality_factoring
0.203[zip.env] apply unary rule narrow_lit_defs
0.203[zip.env] apply unary rule ind_types.exhaustiveness
0.203[zip.env] apply unary rule ind_types.acyclicity
0.203[zip.env] apply unary rule avatar_check_empty
0.203[zip.env] apply generating rule avatar.lemmas (full: false)
0.203[zip.env] apply generating rule avatar_check_sat (full: false)
0.203[zip.avatar] SAT-solver reports "SAT"
0.203[zip.saturate] inferred new clauses: []
0.203[zip.sup] @[neg_reflect did not simplify the clause @]
0.203[zip.sup] @[neg_reflect did not simplify the clause @]
0.203[zip.saturate] ### step   164 ###
0.203[zip.saturate]
    given (164 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f c))))))+*]/id:180/depth:13`
0.204[zip.env] apply binary rule superposition_active
0.204[zip.env] apply binary rule superposition_passive
0.204[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f c))))))+*]/id:180/depth:13[0]
         passive_lit=cQ_2 a X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.204[zip.sup] will yield a tautology
0.204[zip.sup] ... cancel, will yield a tautology
0.204[zip.env] apply binary rule ctx_narrow
0.204[zip.env] apply binary rule narrow_term_defs
0.204[zip.env] do unary inferences
0.204[zip.env] apply unary rule equality_resolution
0.204[zip.env] apply unary rule equality_factoring
0.204[zip.env] apply unary rule narrow_lit_defs
0.204[zip.env] apply unary rule ind_types.exhaustiveness
0.204[zip.env] apply unary rule ind_types.acyclicity
0.204[zip.env] apply unary rule avatar_check_empty
0.204[zip.env] apply generating rule avatar.lemmas (full: false)
0.204[zip.env] apply generating rule avatar_check_sat (full: false)
0.204[zip.avatar] SAT-solver reports "SAT"
0.204[zip.saturate] inferred new clauses: []
0.204[zip.sup] @[neg_reflect did not simplify the clause @]
0.204[zip.sup] @[neg_reflect did not simplify the clause @]
0.205[zip.saturate] ### step   165 ###
0.205[zip.saturate]
    given (165 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f b))))))+*]/id:181/depth:13`
0.205[zip.env] apply binary rule superposition_active
0.205[zip.env] apply binary rule superposition_passive
0.205[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f b))))))+*]/id:181/depth:13[0]
         passive_lit=cQ_2 a X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.206[zip.sup] will yield a tautology
0.206[zip.sup] ... cancel, will yield a tautology
0.206[zip.env] apply binary rule ctx_narrow
0.206[zip.env] apply binary rule narrow_term_defs
0.206[zip.env] do unary inferences
0.206[zip.env] apply unary rule equality_resolution
0.206[zip.env] apply unary rule equality_factoring
0.206[zip.env] apply unary rule narrow_lit_defs
0.206[zip.env] apply unary rule ind_types.exhaustiveness
0.206[zip.env] apply unary rule ind_types.acyclicity
0.206[zip.env] apply unary rule avatar_check_empty
0.206[zip.env] apply generating rule avatar.lemmas (full: false)
0.206[zip.env] apply generating rule avatar_check_sat (full: false)
0.206[zip.avatar] SAT-solver reports "SAT"
0.206[zip.saturate] inferred new clauses: []
0.206[zip.sup] @[neg_reflect did not simplify the clause @]
0.206[zip.sup] @[neg_reflect did not simplify the clause @]
0.207[zip.saturate] ### step   166 ###
0.207[zip.saturate]
    given (166 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f a))))))+*]/id:182/depth:13`
0.207[zip.env] apply binary rule superposition_active
0.207[zip.env] apply binary rule superposition_passive
0.207[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f a))))))+*]/id:182/depth:13[0]
         passive_lit=cQ_2 a X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.208[zip.sup] will yield a tautology
0.208[zip.sup] ... cancel, will yield a tautology
0.208[zip.env] apply binary rule ctx_narrow
0.208[zip.env] apply binary rule narrow_term_defs
0.208[zip.env] do unary inferences
0.208[zip.env] apply unary rule equality_resolution
0.208[zip.env] apply unary rule equality_factoring
0.208[zip.env] apply unary rule narrow_lit_defs
0.208[zip.env] apply unary rule ind_types.exhaustiveness
0.208[zip.env] apply unary rule ind_types.acyclicity
0.208[zip.env] apply unary rule avatar_check_empty
0.208[zip.env] apply generating rule avatar.lemmas (full: false)
0.208[zip.env] apply generating rule avatar_check_sat (full: false)
0.208[zip.avatar] SAT-solver reports "SAT"
0.208[zip.saturate] inferred new clauses: []
0.208[zip.sup] @[neg_reflect did not simplify the clause @]
0.209[zip.sup] @[neg_reflect did not simplify the clause @]
0.209[zip.saturate] ### step   167 ###
0.209[zip.saturate]
    given (167 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8`
0.209[zip.env] apply binary rule superposition_active
0.209[zip.env] apply binary rule superposition_passive
0.209[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.210[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9
0.210[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.211[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f d))+*]/id:184/depth:9
0.211[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.211[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d (f (f c))+*]/id:185/depth:9
0.211[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.211[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d (f (f b))+*]/id:186/depth:9
0.211[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.212[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d (f (f a))+*]/id:187/depth:9
0.212[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f X1))* ∨ cQ_2 X3 X2 X0+*]/id:163/depth:8[0]
         passive_lit=cQ_2 X3 X2 X0 p=2.←.ε)
      with subst={X2[0] → b[1], X3[0] → a[1], X0[1] → X0[0]}.

0.212[zip.sup] will yield a tautology
0.212[zip.sup] ... cancel, will yield a tautology
0.212[zip.env] apply binary rule ctx_narrow
0.212[zip.env] apply binary rule narrow_term_defs
0.212[zip.env] do unary inferences
0.212[zip.env] apply unary rule equality_resolution
0.212[zip.env] apply unary rule equality_factoring
0.212[zip.env] apply unary rule narrow_lit_defs
0.212[zip.env] apply unary rule ind_types.exhaustiveness
0.212[zip.env] apply unary rule ind_types.acyclicity
0.212[zip.env] apply unary rule avatar_check_empty
0.212[zip.env] apply generating rule avatar.lemmas (full: false)
0.212[zip.env] apply generating rule avatar_check_sat (full: false)
0.212[zip.avatar] SAT-solver reports "SAT"
0.212[zip.sup] @[neg_reflect did not simplify the clause @]
0.212[zip.sup] @[neg_reflect did not simplify the clause @]
0.212[zip.sup] @[neg_reflect did not simplify the clause @]
0.212[zip.sup] @[neg_reflect did not simplify the clause @]
0.213[zip.sup] @[neg_reflect did not simplify the clause @]
0.213[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9, 
       forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f d))+*]/id:184/depth:9, 
       forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d (f (f c))+*]/id:185/depth:9, 
       forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d (f (f b))+*]/id:186/depth:9, 
       forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d (f (f a))+*]/id:187/depth:9]
0.213[zip.sup] @[neg_reflect did not simplify the clause @]
0.213[zip.sup] @[neg_reflect did not simplify the clause @]
0.213[zip.saturate] ### step   168 ###
0.213[zip.saturate]
    given (168 steps, penalty 1):
      `forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f d))+*]/id:184/depth:9`
0.214[zip.env] apply binary rule superposition_active
0.214[zip.env] apply binary rule superposition_passive
0.214[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2. [cQ_2 X2 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f d))+*]/id:184/depth:9[0]
         passive_lit=cQ_2 X2 X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X2[0] → a[1], X0[1] → X0[0]}.

0.214[zip.sup] will yield a tautology
0.214[zip.sup] ... cancel, will yield a tautology
0.214[zip.env] apply binary rule ctx_narrow
0.214[zip.env] apply binary rule narrow_term_defs
0.214[zip.env] do unary inferences
0.214[zip.env] apply unary rule equality_resolution
0.214[zip.env] apply unary rule equality_factoring
0.214[zip.env] apply unary rule narrow_lit_defs
0.214[zip.env] apply unary rule ind_types.exhaustiveness
0.214[zip.env] apply unary rule ind_types.acyclicity
0.214[zip.env] apply unary rule avatar_check_empty
0.214[zip.env] apply generating rule avatar.lemmas (full: false)
0.214[zip.env] apply generating rule avatar_check_sat (full: false)
0.214[zip.avatar] SAT-solver reports "SAT"
0.214[zip.saturate] inferred new clauses: []
0.214[zip.sup] @[neg_reflect did not simplify the clause @]
0.214[zip.sup] @[neg_reflect did not simplify the clause @]
0.215[zip.saturate] ### step   169 ###
0.215[zip.saturate]
    given (169 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d (f (f c))+*]/id:185/depth:9`
0.215[zip.env] apply binary rule superposition_active
0.215[zip.env] apply binary rule superposition_passive
0.215[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 c+* ∨ ¬cQ_1 (f d) d (f (f c))+*]/id:185/depth:9[0]
         passive_lit=cQ_2 X1 X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → c[0]}.

0.215[zip.sup] will yield a tautology
0.215[zip.sup] ... cancel, will yield a tautology
0.215[zip.env] apply binary rule ctx_narrow
0.215[zip.env] apply binary rule narrow_term_defs
0.215[zip.env] do unary inferences
0.215[zip.env] apply unary rule equality_resolution
0.215[zip.env] apply unary rule equality_factoring
0.215[zip.env] apply unary rule narrow_lit_defs
0.215[zip.env] apply unary rule ind_types.exhaustiveness
0.215[zip.env] apply unary rule ind_types.acyclicity
0.215[zip.env] apply unary rule avatar_check_empty
0.215[zip.env] apply generating rule avatar.lemmas (full: false)
0.215[zip.env] apply generating rule avatar_check_sat (full: false)
0.215[zip.avatar] SAT-solver reports "SAT"
0.215[zip.saturate] inferred new clauses: []
0.215[zip.sup] @[neg_reflect did not simplify the clause @]
0.215[zip.sup] @[neg_reflect did not simplify the clause @]
0.216[zip.saturate] ### step   170 ###
0.216[zip.saturate]
    given (170 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d (f (f b))+*]/id:186/depth:9`
0.216[zip.env] apply binary rule superposition_active
0.216[zip.env] apply binary rule superposition_passive
0.217[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 b+* ∨ ¬cQ_1 (f d) d (f (f b))+*]/id:186/depth:9[0]
         passive_lit=cQ_2 X1 X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → b[0]}.

0.217[zip.sup] will yield a tautology
0.217[zip.sup] ... cancel, will yield a tautology
0.217[zip.env] apply binary rule ctx_narrow
0.217[zip.env] apply binary rule narrow_term_defs
0.217[zip.env] do unary inferences
0.217[zip.env] apply unary rule equality_resolution
0.217[zip.env] apply unary rule equality_factoring
0.217[zip.env] apply unary rule narrow_lit_defs
0.217[zip.env] apply unary rule ind_types.exhaustiveness
0.217[zip.env] apply unary rule ind_types.acyclicity
0.217[zip.env] apply unary rule avatar_check_empty
0.217[zip.env] apply generating rule avatar.lemmas (full: false)
0.217[zip.env] apply generating rule avatar_check_sat (full: false)
0.217[zip.avatar] SAT-solver reports "SAT"
0.217[zip.saturate] inferred new clauses: []
0.217[zip.sup] @[neg_reflect did not simplify the clause @]
0.217[zip.sup] @[neg_reflect did not simplify the clause @]
0.217[zip.saturate] ### step   171 ###
0.217[zip.saturate]
    given (171 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d (f (f a))+*]/id:187/depth:9`
0.218[zip.env] apply binary rule superposition_active
0.218[zip.env] apply binary rule superposition_passive
0.218[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 X0 a+* ∨ ¬cQ_1 (f d) d (f (f a))+*]/id:187/depth:9[0]
         passive_lit=cQ_2 X1 X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → a[0]}.

0.218[zip.sup] will yield a tautology
0.218[zip.sup] ... cancel, will yield a tautology
0.218[zip.env] apply binary rule ctx_narrow
0.218[zip.env] apply binary rule narrow_term_defs
0.218[zip.env] do unary inferences
0.218[zip.env] apply unary rule equality_resolution
0.218[zip.env] apply unary rule equality_factoring
0.218[zip.env] apply unary rule narrow_lit_defs
0.218[zip.env] apply unary rule ind_types.exhaustiveness
0.218[zip.env] apply unary rule ind_types.acyclicity
0.218[zip.env] apply unary rule avatar_check_empty
0.218[zip.env] apply generating rule avatar.lemmas (full: false)
0.218[zip.env] apply generating rule avatar_check_sat (full: false)
0.218[zip.avatar] SAT-solver reports "SAT"
0.218[zip.saturate] inferred new clauses: []
0.218[zip.sup] @[neg_reflect did not simplify the clause @]
0.219[zip.sup] @[neg_reflect did not simplify the clause @]
0.219[zip.saturate] ### step   172 ###
0.219[zip.saturate]
    given (172 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13`
0.220[zip.env] apply binary rule superposition_active
0.220[zip.env] apply binary rule superposition_passive
0.220[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.220[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ 
     ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14
0.220[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.221[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cQ_1 (f c) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 c X1 X0+*]/id:189/depth:14
0.221[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.221[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f c) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 c X0 c+*]/id:190/depth:14
0.221[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.221[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f c) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 c X0 b+*]/id:191/depth:14
0.222[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f X1)))))))*]/id:168/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.222[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f c) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 c X0 a+*]/id:192/depth:14
0.222[zip.env] apply binary rule ctx_narrow
0.222[zip.env] apply binary rule narrow_term_defs
0.222[zip.env] do unary inferences
0.222[zip.env] apply unary rule equality_resolution
0.222[zip.env] apply unary rule equality_factoring
0.222[zip.env] apply unary rule narrow_lit_defs
0.222[zip.env] apply unary rule ind_types.exhaustiveness
0.222[zip.env] apply unary rule ind_types.acyclicity
0.222[zip.env] apply unary rule avatar_check_empty
0.222[zip.env] apply generating rule avatar.lemmas (full: false)
0.222[zip.env] apply generating rule avatar_check_sat (full: false)
0.222[zip.avatar] SAT-solver reports "SAT"
0.222[zip.sup] @[neg_reflect did not simplify the clause @]
0.222[zip.sup] @[neg_reflect did not simplify the clause @]
0.222[zip.sup] @[neg_reflect did not simplify the clause @]
0.222[zip.sup] @[neg_reflect did not simplify the clause @]
0.222[zip.sup] @[neg_reflect did not simplify the clause @]
0.222[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14, 
       forall X0 X1.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 c X1 X0+*]/id:189/depth:14, 
       forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 c X0 c+*]/id:190/depth:14, 
       forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 c X0 b+*]/id:191/depth:14, 
       forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 c X0 a+*]/id:192/depth:14]
0.223[zip.sup] @[neg_reflect did not simplify the clause @]
0.223[zip.sup] @[neg_reflect did not simplify the clause @]
0.223[zip.saturate] ### step   173 ###
0.223[zip.saturate]
    given (173 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 c X1 X0+*]/id:189/depth:14`
0.223[zip.env] apply binary rule superposition_active
0.223[zip.env] apply binary rule superposition_passive
0.223[zip.env] apply binary rule ctx_narrow
0.223[zip.env] apply binary rule narrow_term_defs
0.223[zip.env] do unary inferences
0.223[zip.env] apply unary rule equality_resolution
0.223[zip.env] apply unary rule equality_factoring
0.223[zip.env] apply unary rule narrow_lit_defs
0.224[zip.env] apply unary rule ind_types.exhaustiveness
0.224[zip.env] apply unary rule ind_types.acyclicity
0.224[zip.env] apply unary rule avatar_check_empty
0.224[zip.env] apply generating rule avatar.lemmas (full: false)
0.224[zip.env] apply generating rule avatar_check_sat (full: false)
0.224[zip.avatar] SAT-solver reports "SAT"
0.224[zip.saturate] inferred new clauses: []
0.224[zip.sup] @[neg_reflect did not simplify the clause @]
0.224[zip.sup] @[neg_reflect did not simplify the clause @]
0.224[zip.saturate] ### step   174 ###
0.224[zip.saturate]
    given (174 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 c X0 c+*]/id:190/depth:14`
0.224[zip.env] apply binary rule superposition_active
0.224[zip.env] apply binary rule superposition_passive
0.224[zip.env] apply binary rule ctx_narrow
0.224[zip.env] apply binary rule narrow_term_defs
0.224[zip.env] do unary inferences
0.224[zip.env] apply unary rule equality_resolution
0.225[zip.env] apply unary rule equality_factoring
0.225[zip.env] apply unary rule narrow_lit_defs
0.225[zip.env] apply unary rule ind_types.exhaustiveness
0.225[zip.env] apply unary rule ind_types.acyclicity
0.225[zip.env] apply unary rule avatar_check_empty
0.225[zip.env] apply generating rule avatar.lemmas (full: false)
0.225[zip.env] apply generating rule avatar_check_sat (full: false)
0.225[zip.avatar] SAT-solver reports "SAT"
0.225[zip.saturate] inferred new clauses: []
0.225[zip.sup] @[neg_reflect did not simplify the clause @]
0.225[zip.sup] @[neg_reflect did not simplify the clause @]
0.225[zip.saturate] ### step   175 ###
0.225[zip.saturate]
    given (175 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 c X0 b+*]/id:191/depth:14`
0.225[zip.env] apply binary rule superposition_active
0.225[zip.env] apply binary rule superposition_passive
0.226[zip.env] apply binary rule ctx_narrow
0.226[zip.env] apply binary rule narrow_term_defs
0.226[zip.env] do unary inferences
0.226[zip.env] apply unary rule equality_resolution
0.226[zip.env] apply unary rule equality_factoring
0.226[zip.env] apply unary rule narrow_lit_defs
0.226[zip.env] apply unary rule ind_types.exhaustiveness
0.226[zip.env] apply unary rule ind_types.acyclicity
0.226[zip.env] apply unary rule avatar_check_empty
0.226[zip.env] apply generating rule avatar.lemmas (full: false)
0.226[zip.env] apply generating rule avatar_check_sat (full: false)
0.226[zip.avatar] SAT-solver reports "SAT"
0.226[zip.saturate] inferred new clauses: []
0.226[zip.sup] @[neg_reflect did not simplify the clause @]
0.226[zip.sup] @[neg_reflect did not simplify the clause @]
0.226[zip.saturate] ### step   176 ###
0.226[zip.saturate]
    given (176 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f c) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 c X0 a+*]/id:192/depth:14`
0.226[zip.env] apply binary rule superposition_active
0.226[zip.env] apply binary rule superposition_passive
0.226[zip.env] apply binary rule ctx_narrow
0.226[zip.env] apply binary rule narrow_term_defs
0.226[zip.env] do unary inferences
0.226[zip.env] apply unary rule equality_resolution
0.226[zip.env] apply unary rule equality_factoring
0.226[zip.env] apply unary rule narrow_lit_defs
0.226[zip.env] apply unary rule ind_types.exhaustiveness
0.226[zip.env] apply unary rule ind_types.acyclicity
0.226[zip.env] apply unary rule avatar_check_empty
0.226[zip.env] apply generating rule avatar.lemmas (full: false)
0.226[zip.env] apply generating rule avatar_check_sat (full: false)
0.226[zip.avatar] SAT-solver reports "SAT"
0.226[zip.saturate] inferred new clauses: []
0.226[zip.sup] @[neg_reflect did not simplify the clause @]
0.227[zip.sup] @[neg_reflect did not simplify the clause @]
0.227[zip.saturate] ### step   177 ###
0.227[zip.saturate]
    given (177 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13`
0.228[zip.env] apply binary rule superposition_active
0.228[zip.env] apply binary rule superposition_passive
0.228[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.228[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ 
     ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14
0.228[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.228[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cQ_1 (f b) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 b X1 X0+*]/id:194/depth:14
0.228[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.228[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f b) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 b X0 c+*]/id:195/depth:14
0.229[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.229[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f b) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 b X0 b+*]/id:196/depth:14
0.229[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f X1)))))))*]/id:173/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.229[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f b) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 b X0 a+*]/id:197/depth:14
0.229[zip.env] apply binary rule ctx_narrow
0.229[zip.env] apply binary rule narrow_term_defs
0.229[zip.env] do unary inferences
0.229[zip.env] apply unary rule equality_resolution
0.229[zip.env] apply unary rule equality_factoring
0.229[zip.env] apply unary rule narrow_lit_defs
0.229[zip.env] apply unary rule ind_types.exhaustiveness
0.229[zip.env] apply unary rule ind_types.acyclicity
0.229[zip.env] apply unary rule avatar_check_empty
0.229[zip.env] apply generating rule avatar.lemmas (full: false)
0.229[zip.env] apply generating rule avatar_check_sat (full: false)
0.229[zip.avatar] SAT-solver reports "SAT"
0.229[zip.sup] @[neg_reflect did not simplify the clause @]
0.229[zip.sup] @[neg_reflect did not simplify the clause @]
0.229[zip.sup] @[neg_reflect did not simplify the clause @]
0.229[zip.sup] @[neg_reflect did not simplify the clause @]
0.229[zip.sup] @[neg_reflect did not simplify the clause @]
0.229[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14, 
       forall X0 X1.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 b X1 X0+*]/id:194/depth:14, 
       forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 b X0 c+*]/id:195/depth:14, 
       forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 b X0 b+*]/id:196/depth:14, 
       forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 b X0 a+*]/id:197/depth:14]
0.230[zip.sup] @[neg_reflect did not simplify the clause @]
0.230[zip.sup] @[neg_reflect did not simplify the clause @]
0.230[zip.saturate] ### step   178 ###
0.230[zip.saturate]
    given (178 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 b X1 X0+*]/id:194/depth:14`
0.230[zip.env] apply binary rule superposition_active
0.230[zip.env] apply binary rule superposition_passive
0.230[zip.env] apply binary rule ctx_narrow
0.230[zip.env] apply binary rule narrow_term_defs
0.230[zip.env] do unary inferences
0.230[zip.env] apply unary rule equality_resolution
0.230[zip.env] apply unary rule equality_factoring
0.230[zip.env] apply unary rule narrow_lit_defs
0.230[zip.env] apply unary rule ind_types.exhaustiveness
0.230[zip.env] apply unary rule ind_types.acyclicity
0.230[zip.env] apply unary rule avatar_check_empty
0.230[zip.env] apply generating rule avatar.lemmas (full: false)
0.230[zip.env] apply generating rule avatar_check_sat (full: false)
0.230[zip.avatar] SAT-solver reports "SAT"
0.230[zip.saturate] inferred new clauses: []
0.231[zip.sup] @[neg_reflect did not simplify the clause @]
0.231[zip.sup] @[neg_reflect did not simplify the clause @]
0.231[zip.saturate] ### step   179 ###
0.231[zip.saturate]
    given (179 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 b X0 c+*]/id:195/depth:14`
0.231[zip.env] apply binary rule superposition_active
0.231[zip.env] apply binary rule superposition_passive
0.231[zip.env] apply binary rule ctx_narrow
0.231[zip.env] apply binary rule narrow_term_defs
0.231[zip.env] do unary inferences
0.231[zip.env] apply unary rule equality_resolution
0.231[zip.env] apply unary rule equality_factoring
0.231[zip.env] apply unary rule narrow_lit_defs
0.231[zip.env] apply unary rule ind_types.exhaustiveness
0.231[zip.env] apply unary rule ind_types.acyclicity
0.231[zip.env] apply unary rule avatar_check_empty
0.231[zip.env] apply generating rule avatar.lemmas (full: false)
0.231[zip.env] apply generating rule avatar_check_sat (full: false)
0.231[zip.avatar] SAT-solver reports "SAT"
0.231[zip.saturate] inferred new clauses: []
0.231[zip.sup] @[neg_reflect did not simplify the clause @]
0.231[zip.sup] @[neg_reflect did not simplify the clause @]
0.231[zip.saturate] ### step   180 ###
0.231[zip.saturate]
    given (180 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 b X0 b+*]/id:196/depth:14`
0.232[zip.env] apply binary rule superposition_active
0.232[zip.env] apply binary rule superposition_passive
0.232[zip.env] apply binary rule ctx_narrow
0.232[zip.env] apply binary rule narrow_term_defs
0.232[zip.env] do unary inferences
0.232[zip.env] apply unary rule equality_resolution
0.232[zip.env] apply unary rule equality_factoring
0.232[zip.env] apply unary rule narrow_lit_defs
0.232[zip.env] apply unary rule ind_types.exhaustiveness
0.232[zip.env] apply unary rule ind_types.acyclicity
0.232[zip.env] apply unary rule avatar_check_empty
0.232[zip.env] apply generating rule avatar.lemmas (full: false)
0.232[zip.env] apply generating rule avatar_check_sat (full: false)
0.232[zip.avatar] SAT-solver reports "SAT"
0.232[zip.saturate] inferred new clauses: []
0.232[zip.sup] @[neg_reflect did not simplify the clause @]
0.232[zip.sup] @[neg_reflect did not simplify the clause @]
0.233[zip.saturate] ### step   181 ###
0.233[zip.saturate]
    given (181 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f b) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 b X0 a+*]/id:197/depth:14`
0.234[zip.env] apply binary rule superposition_active
0.234[zip.env] apply binary rule superposition_passive
0.234[zip.env] apply binary rule ctx_narrow
0.234[zip.env] apply binary rule narrow_term_defs
0.234[zip.env] do unary inferences
0.234[zip.env] apply unary rule equality_resolution
0.234[zip.env] apply unary rule equality_factoring
0.234[zip.env] apply unary rule narrow_lit_defs
0.234[zip.env] apply unary rule ind_types.exhaustiveness
0.234[zip.env] apply unary rule ind_types.acyclicity
0.234[zip.env] apply unary rule avatar_check_empty
0.234[zip.env] apply generating rule avatar.lemmas (full: false)
0.234[zip.env] apply generating rule avatar_check_sat (full: false)
0.234[zip.avatar] SAT-solver reports "SAT"
0.234[zip.saturate] inferred new clauses: []
0.234[zip.sup] @[neg_reflect did not simplify the clause @]
0.234[zip.sup] @[neg_reflect did not simplify the clause @]
0.235[zip.saturate] ### step   182 ###
0.235[zip.saturate]
    given (182 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13`
0.236[zip.env] apply binary rule superposition_active
0.236[zip.env] apply binary rule superposition_passive
0.236[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.236[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ 
     ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14
0.236[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.237[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cQ_1 (f a) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 a X1 X0+*]/id:199/depth:14
0.237[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.237[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f a) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 a X0 c+*]/id:200/depth:14
0.237[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.238[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f a) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 a X0 b+*]/id:201/depth:14
0.238[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.238[zip.sup]
    ... ok, conclusion
    forall X0.
    [¬cQ_1 (f a) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 a X0 a+*]/id:202/depth:14
0.238[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f X1)))))))*]/id:178/depth:13[0]
         passive_lit=cQ_2 a X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.238[zip.sup] will yield a tautology
0.238[zip.sup] ... cancel, will yield a tautology
0.238[zip.env] apply binary rule ctx_narrow
0.238[zip.env] apply binary rule narrow_term_defs
0.239[zip.env] do unary inferences
0.239[zip.env] apply unary rule equality_resolution
0.239[zip.env] apply unary rule equality_factoring
0.239[zip.env] apply unary rule narrow_lit_defs
0.239[zip.env] apply unary rule ind_types.exhaustiveness
0.239[zip.env] apply unary rule ind_types.acyclicity
0.239[zip.env] apply unary rule avatar_check_empty
0.239[zip.env] apply generating rule avatar.lemmas (full: false)
0.239[zip.env] apply generating rule avatar_check_sat (full: false)
0.239[zip.avatar] SAT-solver reports "SAT"
0.239[zip.sup] @[neg_reflect did not simplify the clause @]
0.239[zip.sup] @[neg_reflect did not simplify the clause @]
0.239[zip.sup] @[neg_reflect did not simplify the clause @]
0.239[zip.sup] @[neg_reflect did not simplify the clause @]
0.239[zip.sup] @[neg_reflect did not simplify the clause @]
0.239[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14, 
       forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 a X1 X0+*]/id:199/depth:14, 
       forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 a X0 c+*]/id:200/depth:14, 
       forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 a X0 b+*]/id:201/depth:14, 
       forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 a X0 a+*]/id:202/depth:14]
0.240[zip.sup] @[neg_reflect did not simplify the clause @]
0.240[zip.sup] @[neg_reflect did not simplify the clause @]
0.240[zip.saturate] ### step   183 ###
0.240[zip.saturate]
    given (183 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 a X1 X0+*]/id:199/depth:14`
0.240[zip.env] apply binary rule superposition_active
0.240[zip.env] apply binary rule superposition_passive
0.241[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f d)))))))+* ∨ cQ_2 a X1 X0+*]/id:199/depth:14[0]
         passive_lit=cQ_2 a X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.241[zip.sup] will yield a tautology
0.241[zip.sup] ... cancel, will yield a tautology
0.241[zip.env] apply binary rule ctx_narrow
0.241[zip.env] apply binary rule narrow_term_defs
0.241[zip.env] do unary inferences
0.241[zip.env] apply unary rule equality_resolution
0.241[zip.env] apply unary rule equality_factoring
0.241[zip.env] apply unary rule narrow_lit_defs
0.241[zip.env] apply unary rule ind_types.exhaustiveness
0.241[zip.env] apply unary rule ind_types.acyclicity
0.241[zip.env] apply unary rule avatar_check_empty
0.241[zip.env] apply generating rule avatar.lemmas (full: false)
0.241[zip.env] apply generating rule avatar_check_sat (full: false)
0.241[zip.avatar] SAT-solver reports "SAT"
0.241[zip.saturate] inferred new clauses: []
0.241[zip.sup] @[neg_reflect did not simplify the clause @]
0.241[zip.sup] @[neg_reflect did not simplify the clause @]
0.241[zip.saturate] ### step   184 ###
0.241[zip.saturate]
    given (184 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 a X0 c+*]/id:200/depth:14`
0.242[zip.env] apply binary rule superposition_active
0.242[zip.env] apply binary rule superposition_passive
0.242[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f c)))))))+* ∨ cQ_2 a X0 c+*]/id:200/depth:14[0]
         passive_lit=cQ_2 a X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.242[zip.sup] will yield a tautology
0.242[zip.sup] ... cancel, will yield a tautology
0.242[zip.env] apply binary rule ctx_narrow
0.242[zip.env] apply binary rule narrow_term_defs
0.242[zip.env] do unary inferences
0.242[zip.env] apply unary rule equality_resolution
0.242[zip.env] apply unary rule equality_factoring
0.242[zip.env] apply unary rule narrow_lit_defs
0.242[zip.env] apply unary rule ind_types.exhaustiveness
0.242[zip.env] apply unary rule ind_types.acyclicity
0.242[zip.env] apply unary rule avatar_check_empty
0.242[zip.env] apply generating rule avatar.lemmas (full: false)
0.242[zip.env] apply generating rule avatar_check_sat (full: false)
0.242[zip.avatar] SAT-solver reports "SAT"
0.242[zip.saturate] inferred new clauses: []
0.242[zip.sup] @[neg_reflect did not simplify the clause @]
0.242[zip.sup] @[neg_reflect did not simplify the clause @]
0.243[zip.saturate] ### step   185 ###
0.243[zip.saturate]
    given (185 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 a X0 b+*]/id:201/depth:14`
0.243[zip.env] apply binary rule superposition_active
0.243[zip.env] apply binary rule superposition_passive
0.243[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f b)))))))+* ∨ cQ_2 a X0 b+*]/id:201/depth:14[0]
         passive_lit=cQ_2 a X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.243[zip.sup] will yield a tautology
0.243[zip.sup] ... cancel, will yield a tautology
0.243[zip.env] apply binary rule ctx_narrow
0.243[zip.env] apply binary rule narrow_term_defs
0.243[zip.env] do unary inferences
0.243[zip.env] apply unary rule equality_resolution
0.243[zip.env] apply unary rule equality_factoring
0.243[zip.env] apply unary rule narrow_lit_defs
0.243[zip.env] apply unary rule ind_types.exhaustiveness
0.243[zip.env] apply unary rule ind_types.acyclicity
0.243[zip.env] apply unary rule avatar_check_empty
0.243[zip.env] apply generating rule avatar.lemmas (full: false)
0.243[zip.env] apply generating rule avatar_check_sat (full: false)
0.243[zip.avatar] SAT-solver reports "SAT"
0.243[zip.saturate] inferred new clauses: []
0.243[zip.sup] @[neg_reflect did not simplify the clause @]
0.243[zip.sup] @[neg_reflect did not simplify the clause @]
0.244[zip.saturate] ### step   186 ###
0.244[zip.saturate]
    given (186 steps, penalty 1):
      `forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 a X0 a+*]/id:202/depth:14`
0.244[zip.env] apply binary rule superposition_active
0.244[zip.env] apply binary rule superposition_passive
0.244[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [¬cQ_1 (f a) d (f (f (f (f (f (f (f a)))))))+* ∨ cQ_2 a X0 a+*]/id:202/depth:14[0]
         passive_lit=cQ_2 a X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.244[zip.sup] will yield a tautology
0.244[zip.sup] ... cancel, will yield a tautology
0.244[zip.env] apply binary rule ctx_narrow
0.244[zip.env] apply binary rule narrow_term_defs
0.244[zip.env] do unary inferences
0.244[zip.env] apply unary rule equality_resolution
0.244[zip.env] apply unary rule equality_factoring
0.244[zip.env] apply unary rule narrow_lit_defs
0.244[zip.env] apply unary rule ind_types.exhaustiveness
0.244[zip.env] apply unary rule ind_types.acyclicity
0.244[zip.env] apply unary rule avatar_check_empty
0.244[zip.env] apply generating rule avatar.lemmas (full: false)
0.244[zip.env] apply generating rule avatar_check_sat (full: false)
0.244[zip.avatar] SAT-solver reports "SAT"
0.244[zip.saturate] inferred new clauses: []
0.244[zip.sup] @[neg_reflect did not simplify the clause @]
0.244[zip.sup] @[neg_reflect did not simplify the clause @]
0.245[zip.saturate] ### step   187 ###
0.245[zip.saturate]
    given (187 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9`
0.245[zip.env] apply binary rule superposition_active
0.245[zip.env] apply binary rule superposition_passive
0.245[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.245[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f (f (f X1))))* ∨ 
     cQ_2 X3 X2 X0+*]/id:203/depth:10
0.245[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.245[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2. [¬cQ_1 (f d) d (f (f (f d)))+* ∨ cQ_2 X2 X1 X0+*]/id:204/depth:10
0.245[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.246[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f (f (f c)))+* ∨ cQ_2 X1 X0 c+*]/id:205/depth:10
0.246[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.246[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f (f (f b)))+* ∨ cQ_2 X1 X0 b+*]/id:206/depth:10
0.246[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.246[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) d (f (f (f a)))+* ∨ cQ_2 X1 X0 a+*]/id:207/depth:10
0.246[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X3 X2 X0+* ∨ ¬cQ_1 (f d) d (f (f (f X1)))*]/id:183/depth:9[0]
         passive_lit=cQ_2 X3 X2 X0 p=1.←.ε)
      with subst={X2[0] → b[1], X3[0] → a[1], X0[1] → X0[0]}.

0.246[zip.sup] will yield a tautology
0.246[zip.sup] ... cancel, will yield a tautology
0.246[zip.env] apply binary rule ctx_narrow
0.246[zip.env] apply binary rule narrow_term_defs
0.246[zip.env] do unary inferences
0.246[zip.env] apply unary rule equality_resolution
0.246[zip.env] apply unary rule equality_factoring
0.246[zip.env] apply unary rule narrow_lit_defs
0.246[zip.env] apply unary rule ind_types.exhaustiveness
0.246[zip.env] apply unary rule ind_types.acyclicity
0.246[zip.env] apply unary rule avatar_check_empty
0.246[zip.env] apply generating rule avatar.lemmas (full: false)
0.246[zip.env] apply generating rule avatar_check_sat (full: false)
0.246[zip.avatar] SAT-solver reports "SAT"
0.246[zip.sup] @[neg_reflect did not simplify the clause @]
0.246[zip.sup] @[neg_reflect did not simplify the clause @]
0.246[zip.sup] @[neg_reflect did not simplify the clause @]
0.247[zip.sup] @[neg_reflect did not simplify the clause @]
0.247[zip.sup] @[neg_reflect did not simplify the clause @]
0.247[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) d (f (f (f (f X1))))* ∨ 
        cQ_2 X3 X2 X0+*]/id:203/depth:10, 
       forall X0 X1 X2. [¬cQ_1 (f d) d (f (f (f d)))+* ∨ cQ_2 X2 X1 X0+*]/id:204/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) d (f (f (f c)))+* ∨ cQ_2 X1 X0 c+*]/id:205/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) d (f (f (f b)))+* ∨ cQ_2 X1 X0 b+*]/id:206/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) d (f (f (f a)))+* ∨ cQ_2 X1 X0 a+*]/id:207/depth:10]
0.247[zip.sup] @[neg_reflect did not simplify the clause @]
0.247[zip.sup] @[neg_reflect did not simplify the clause @]
0.247[zip.saturate] ### step   188 ###
0.247[zip.saturate]
    given (188 steps, penalty 1):
      `forall X0 X1 X2. [¬cQ_1 (f d) d (f (f (f d)))+* ∨ cQ_2 X2 X1 X0+*]/id:204/depth:10`
0.247[zip.env] apply binary rule superposition_active
0.248[zip.env] apply binary rule superposition_passive
0.248[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2. [¬cQ_1 (f d) d (f (f (f d)))+* ∨ cQ_2 X2 X1 X0+*]/id:204/depth:10[0]
         passive_lit=cQ_2 X2 X1 X0 p=1.←.ε)
      with subst={X1[0] → b[1], X2[0] → a[1], X0[1] → X0[0]}.

0.248[zip.sup] will yield a tautology
0.248[zip.sup] ... cancel, will yield a tautology
0.248[zip.env] apply binary rule ctx_narrow
0.248[zip.env] apply binary rule narrow_term_defs
0.248[zip.env] do unary inferences
0.248[zip.env] apply unary rule equality_resolution
0.248[zip.env] apply unary rule equality_factoring
0.248[zip.env] apply unary rule narrow_lit_defs
0.248[zip.env] apply unary rule ind_types.exhaustiveness
0.248[zip.env] apply unary rule ind_types.acyclicity
0.248[zip.env] apply unary rule avatar_check_empty
0.248[zip.env] apply generating rule avatar.lemmas (full: false)
0.248[zip.env] apply generating rule avatar_check_sat (full: false)
0.248[zip.avatar] SAT-solver reports "SAT"
0.248[zip.saturate] inferred new clauses: []
0.248[zip.sup] @[neg_reflect did not simplify the clause @]
0.248[zip.sup] @[neg_reflect did not simplify the clause @]
0.248[zip.saturate] ### step   189 ###
0.248[zip.saturate]
    given (189 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f (f (f c)))+* ∨ cQ_2 X1 X0 c+*]/id:205/depth:10`
0.249[zip.env] apply binary rule superposition_active
0.249[zip.env] apply binary rule superposition_passive
0.249[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f (f (f c)))+* ∨ cQ_2 X1 X0 c+*]/id:205/depth:10[0]
         passive_lit=cQ_2 X1 X0 c p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → c[0]}.

0.249[zip.sup] will yield a tautology
0.249[zip.sup] ... cancel, will yield a tautology
0.249[zip.env] apply binary rule ctx_narrow
0.249[zip.env] apply binary rule narrow_term_defs
0.249[zip.env] do unary inferences
0.249[zip.env] apply unary rule equality_resolution
0.250[zip.env] apply unary rule equality_factoring
0.250[zip.env] apply unary rule narrow_lit_defs
0.250[zip.env] apply unary rule ind_types.exhaustiveness
0.250[zip.env] apply unary rule ind_types.acyclicity
0.250[zip.env] apply unary rule avatar_check_empty
0.250[zip.env] apply generating rule avatar.lemmas (full: false)
0.250[zip.env] apply generating rule avatar_check_sat (full: false)
0.250[zip.avatar] SAT-solver reports "SAT"
0.250[zip.saturate] inferred new clauses: []
0.250[zip.sup] @[neg_reflect did not simplify the clause @]
0.250[zip.sup] @[neg_reflect did not simplify the clause @]
0.250[zip.saturate] ### step   190 ###
0.250[zip.saturate]
    given (190 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f (f (f b)))+* ∨ cQ_2 X1 X0 b+*]/id:206/depth:10`
0.250[zip.env] apply binary rule superposition_active
0.251[zip.env] apply binary rule superposition_passive
0.251[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f (f (f b)))+* ∨ cQ_2 X1 X0 b+*]/id:206/depth:10[0]
         passive_lit=cQ_2 X1 X0 b p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → b[0]}.

0.251[zip.sup] will yield a tautology
0.251[zip.sup] ... cancel, will yield a tautology
0.251[zip.env] apply binary rule ctx_narrow
0.251[zip.env] apply binary rule narrow_term_defs
0.251[zip.env] do unary inferences
0.251[zip.env] apply unary rule equality_resolution
0.251[zip.env] apply unary rule equality_factoring
0.251[zip.env] apply unary rule narrow_lit_defs
0.251[zip.env] apply unary rule ind_types.exhaustiveness
0.251[zip.env] apply unary rule ind_types.acyclicity
0.251[zip.env] apply unary rule avatar_check_empty
0.251[zip.env] apply generating rule avatar.lemmas (full: false)
0.251[zip.env] apply generating rule avatar_check_sat (full: false)
0.251[zip.avatar] SAT-solver reports "SAT"
0.251[zip.saturate] inferred new clauses: []
0.251[zip.sup] @[neg_reflect did not simplify the clause @]
0.251[zip.sup] @[neg_reflect did not simplify the clause @]
0.251[zip.saturate] ### step   191 ###
0.251[zip.saturate]
    given (191 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) d (f (f (f a)))+* ∨ cQ_2 X1 X0 a+*]/id:207/depth:10`
0.252[zip.env] apply binary rule superposition_active
0.252[zip.env] apply binary rule superposition_passive
0.252[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) d (f (f (f a)))+* ∨ cQ_2 X1 X0 a+*]/id:207/depth:10[0]
         passive_lit=cQ_2 X1 X0 a p=1.←.ε)
      with subst={X0[0] → b[1], X1[0] → a[1], X0[1] → a[0]}.

0.252[zip.sup] will yield a tautology
0.252[zip.sup] ... cancel, will yield a tautology
0.252[zip.env] apply binary rule ctx_narrow
0.252[zip.env] apply binary rule narrow_term_defs
0.252[zip.env] do unary inferences
0.252[zip.env] apply unary rule equality_resolution
0.252[zip.env] apply unary rule equality_factoring
0.252[zip.env] apply unary rule narrow_lit_defs
0.252[zip.env] apply unary rule ind_types.exhaustiveness
0.252[zip.env] apply unary rule ind_types.acyclicity
0.252[zip.env] apply unary rule avatar_check_empty
0.252[zip.env] apply generating rule avatar.lemmas (full: false)
0.252[zip.env] apply generating rule avatar_check_sat (full: false)
0.252[zip.avatar] SAT-solver reports "SAT"
0.252[zip.saturate] inferred new clauses: []
0.252[zip.sup] @[neg_reflect did not simplify the clause @]
0.252[zip.sup] @[neg_reflect did not simplify the clause @]
0.253[zip.saturate] ### step   192 ###
0.253[zip.saturate]
    given (192 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14`
0.253[zip.env] apply binary rule superposition_active
0.253[zip.env] apply binary rule superposition_passive
0.253[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.254[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
     ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:208/depth:15
0.254[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.254[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f d))))))))+*]/id:209/depth:15
0.254[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.254[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f c))))))))+*]/id:210/depth:15
0.254[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.255[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f b))))))))+*]/id:211/depth:15
0.255[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 c X2 X0+*]/id:188/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.255[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f a))))))))+*]/id:212/depth:15
0.255[zip.env] apply binary rule ctx_narrow
0.255[zip.env] apply binary rule narrow_term_defs
0.255[zip.env] do unary inferences
0.255[zip.env] apply unary rule equality_resolution
0.255[zip.env] apply unary rule equality_factoring
0.255[zip.env] apply unary rule narrow_lit_defs
0.255[zip.env] apply unary rule ind_types.exhaustiveness
0.255[zip.env] apply unary rule ind_types.acyclicity
0.255[zip.env] apply unary rule avatar_check_empty
0.255[zip.env] apply generating rule avatar.lemmas (full: false)
0.255[zip.env] apply generating rule avatar_check_sat (full: false)
0.255[zip.avatar] SAT-solver reports "SAT"
0.255[zip.sup] @[neg_reflect did not simplify the clause @]
0.255[zip.sup] @[neg_reflect did not simplify the clause @]
0.255[zip.sup] @[neg_reflect did not simplify the clause @]
0.255[zip.sup] @[neg_reflect did not simplify the clause @]
0.255[zip.sup] @[neg_reflect did not simplify the clause @]
0.255[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 c X2 X0+* ∨ 
        ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:208/depth:15, 
       forall X0 X1.
       [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f d))))))))+*]/id:209/depth:15, 
       forall X0.
       [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f c))))))))+*]/id:210/depth:15, 
       forall X0.
       [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f b))))))))+*]/id:211/depth:15, 
       forall X0.
       [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f a))))))))+*]/id:212/depth:15]
0.256[zip.sup] @[neg_reflect did not simplify the clause @]
0.256[zip.sup] @[neg_reflect did not simplify the clause @]
0.256[zip.saturate] ### step   193 ###
0.256[zip.saturate]
    given (193 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 c X1 X0+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f d))))))))+*]/id:209/depth:15`
0.256[zip.env] apply binary rule superposition_active
0.256[zip.env] apply binary rule superposition_passive
0.256[zip.env] apply binary rule ctx_narrow
0.256[zip.env] apply binary rule narrow_term_defs
0.256[zip.env] do unary inferences
0.256[zip.env] apply unary rule equality_resolution
0.256[zip.env] apply unary rule equality_factoring
0.256[zip.env] apply unary rule narrow_lit_defs
0.256[zip.env] apply unary rule ind_types.exhaustiveness
0.256[zip.env] apply unary rule ind_types.acyclicity
0.256[zip.env] apply unary rule avatar_check_empty
0.256[zip.env] apply generating rule avatar.lemmas (full: false)
0.256[zip.env] apply generating rule avatar_check_sat (full: false)
0.256[zip.avatar] SAT-solver reports "SAT"
0.256[zip.saturate] inferred new clauses: []
0.256[zip.sup] @[neg_reflect did not simplify the clause @]
0.256[zip.sup] @[neg_reflect did not simplify the clause @]
0.257[zip.saturate] ### step   194 ###
0.257[zip.saturate]
    given (194 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 c+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f c))))))))+*]/id:210/depth:15`
0.257[zip.env] apply binary rule superposition_active
0.257[zip.env] apply binary rule superposition_passive
0.257[zip.env] apply binary rule ctx_narrow
0.257[zip.env] apply binary rule narrow_term_defs
0.257[zip.env] do unary inferences
0.257[zip.env] apply unary rule equality_resolution
0.257[zip.env] apply unary rule equality_factoring
0.257[zip.env] apply unary rule narrow_lit_defs
0.257[zip.env] apply unary rule ind_types.exhaustiveness
0.257[zip.env] apply unary rule ind_types.acyclicity
0.257[zip.env] apply unary rule avatar_check_empty
0.257[zip.env] apply generating rule avatar.lemmas (full: false)
0.257[zip.env] apply generating rule avatar_check_sat (full: false)
0.257[zip.avatar] SAT-solver reports "SAT"
0.257[zip.saturate] inferred new clauses: []
0.257[zip.sup] @[neg_reflect did not simplify the clause @]
0.257[zip.sup] @[neg_reflect did not simplify the clause @]
0.257[zip.saturate] ### step   195 ###
0.257[zip.saturate]
    given (195 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 b+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f b))))))))+*]/id:211/depth:15`
0.258[zip.env] apply binary rule superposition_active
0.258[zip.env] apply binary rule superposition_passive
0.258[zip.env] apply binary rule ctx_narrow
0.258[zip.env] apply binary rule narrow_term_defs
0.258[zip.env] do unary inferences
0.258[zip.env] apply unary rule equality_resolution
0.258[zip.env] apply unary rule equality_factoring
0.258[zip.env] apply unary rule narrow_lit_defs
0.258[zip.env] apply unary rule ind_types.exhaustiveness
0.258[zip.env] apply unary rule ind_types.acyclicity
0.258[zip.env] apply unary rule avatar_check_empty
0.258[zip.env] apply generating rule avatar.lemmas (full: false)
0.258[zip.env] apply generating rule avatar_check_sat (full: false)
0.258[zip.avatar] SAT-solver reports "SAT"
0.258[zip.saturate] inferred new clauses: []
0.258[zip.sup] @[neg_reflect did not simplify the clause @]
0.258[zip.sup] @[neg_reflect did not simplify the clause @]
0.258[zip.saturate] ### step   196 ###
0.258[zip.saturate]
    given (196 steps, penalty 1):
      `forall X0.
       [cQ_2 c X0 a+* ∨ ¬cQ_1 (f c) d (f (f (f (f (f (f (f (f a))))))))+*]/id:212/depth:15`
0.259[zip.env] apply binary rule superposition_active
0.259[zip.env] apply binary rule superposition_passive
0.259[zip.env] apply binary rule ctx_narrow
0.259[zip.env] apply binary rule narrow_term_defs
0.259[zip.env] do unary inferences
0.259[zip.env] apply unary rule equality_resolution
0.259[zip.env] apply unary rule equality_factoring
0.259[zip.env] apply unary rule narrow_lit_defs
0.259[zip.env] apply unary rule ind_types.exhaustiveness
0.259[zip.env] apply unary rule ind_types.acyclicity
0.259[zip.env] apply unary rule avatar_check_empty
0.259[zip.env] apply generating rule avatar.lemmas (full: false)
0.259[zip.env] apply generating rule avatar_check_sat (full: false)
0.259[zip.avatar] SAT-solver reports "SAT"
0.259[zip.saturate] inferred new clauses: []
0.259[zip.sup] @[neg_reflect did not simplify the clause @]
0.259[zip.sup] @[neg_reflect did not simplify the clause @]
0.260[zip.saturate] ### step   197 ###
0.260[zip.saturate]
    given (197 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14`
0.260[zip.env] apply binary rule superposition_active
0.260[zip.env] apply binary rule superposition_passive
0.260[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.261[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
     ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:213/depth:15
0.261[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.261[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f d))))))))+*]/id:214/depth:15
0.261[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.262[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f c))))))))+*]/id:215/depth:15
0.262[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.262[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f b))))))))+*]/id:216/depth:15
0.262[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 b X2 X0+*]/id:193/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.262[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f a))))))))+*]/id:217/depth:15
0.263[zip.env] apply binary rule ctx_narrow
0.263[zip.env] apply binary rule narrow_term_defs
0.263[zip.env] do unary inferences
0.263[zip.env] apply unary rule equality_resolution
0.263[zip.env] apply unary rule equality_factoring
0.263[zip.env] apply unary rule narrow_lit_defs
0.263[zip.env] apply unary rule ind_types.exhaustiveness
0.263[zip.env] apply unary rule ind_types.acyclicity
0.263[zip.env] apply unary rule avatar_check_empty
0.263[zip.env] apply generating rule avatar.lemmas (full: false)
0.263[zip.env] apply generating rule avatar_check_sat (full: false)
0.263[zip.avatar] SAT-solver reports "SAT"
0.263[zip.sup] @[neg_reflect did not simplify the clause @]
0.263[zip.sup] @[neg_reflect did not simplify the clause @]
0.263[zip.sup] @[neg_reflect did not simplify the clause @]
0.263[zip.sup] @[neg_reflect did not simplify the clause @]
0.263[zip.sup] @[neg_reflect did not simplify the clause @]
0.263[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 b X2 X0+* ∨ 
        ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:213/depth:15, 
       forall X0 X1.
       [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f d))))))))+*]/id:214/depth:15, 
       forall X0.
       [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f c))))))))+*]/id:215/depth:15, 
       forall X0.
       [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f b))))))))+*]/id:216/depth:15, 
       forall X0.
       [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f a))))))))+*]/id:217/depth:15]
0.264[zip.sup] @[neg_reflect did not simplify the clause @]
0.264[zip.sup] @[neg_reflect did not simplify the clause @]
0.264[zip.saturate] ### step   198 ###
0.264[zip.saturate]
    given (198 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 b X1 X0+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f d))))))))+*]/id:214/depth:15`
0.265[zip.env] apply binary rule superposition_active
0.265[zip.env] apply binary rule superposition_passive
0.265[zip.env] apply binary rule ctx_narrow
0.265[zip.env] apply binary rule narrow_term_defs
0.265[zip.env] do unary inferences
0.265[zip.env] apply unary rule equality_resolution
0.265[zip.env] apply unary rule equality_factoring
0.265[zip.env] apply unary rule narrow_lit_defs
0.265[zip.env] apply unary rule ind_types.exhaustiveness
0.265[zip.env] apply unary rule ind_types.acyclicity
0.265[zip.env] apply unary rule avatar_check_empty
0.265[zip.env] apply generating rule avatar.lemmas (full: false)
0.265[zip.env] apply generating rule avatar_check_sat (full: false)
0.265[zip.avatar] SAT-solver reports "SAT"
0.265[zip.saturate] inferred new clauses: []
0.265[zip.sup] @[neg_reflect did not simplify the clause @]
0.265[zip.sup] @[neg_reflect did not simplify the clause @]
0.266[zip.saturate] ### step   199 ###
0.266[zip.saturate]
    given (199 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 c+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f c))))))))+*]/id:215/depth:15`
0.267[zip.env] apply binary rule superposition_active
0.267[zip.env] apply binary rule superposition_passive
0.267[zip.env] apply binary rule ctx_narrow
0.267[zip.env] apply binary rule narrow_term_defs
0.267[zip.env] do unary inferences
0.267[zip.env] apply unary rule equality_resolution
0.267[zip.env] apply unary rule equality_factoring
0.267[zip.env] apply unary rule narrow_lit_defs
0.267[zip.env] apply unary rule ind_types.exhaustiveness
0.267[zip.env] apply unary rule ind_types.acyclicity
0.267[zip.env] apply unary rule avatar_check_empty
0.267[zip.env] apply generating rule avatar.lemmas (full: false)
0.267[zip.env] apply generating rule avatar_check_sat (full: false)
0.267[zip.avatar] SAT-solver reports "SAT"
0.267[zip.saturate] inferred new clauses: []
0.267[zip.sup] @[neg_reflect did not simplify the clause @]
0.267[zip.sup] @[neg_reflect did not simplify the clause @]
0.268[zip.saturate] ### step   200 ###
0.268[zip.saturate]
    given (200 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 b+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f b))))))))+*]/id:216/depth:15`
0.268[zip.env] apply binary rule superposition_active
0.268[zip.env] apply binary rule superposition_passive
0.268[zip.env] apply binary rule ctx_narrow
0.268[zip.env] apply binary rule narrow_term_defs
0.268[zip.env] do unary inferences
0.268[zip.env] apply unary rule equality_resolution
0.268[zip.env] apply unary rule equality_factoring
0.268[zip.env] apply unary rule narrow_lit_defs
0.268[zip.env] apply unary rule ind_types.exhaustiveness
0.269[zip.env] apply unary rule ind_types.acyclicity
0.269[zip.env] apply unary rule avatar_check_empty
0.269[zip.env] apply generating rule avatar.lemmas (full: false)
0.269[zip.env] apply generating rule avatar_check_sat (full: false)
0.269[zip.avatar] SAT-solver reports "SAT"
0.269[zip.saturate] inferred new clauses: []
0.269[zip.sup] @[neg_reflect did not simplify the clause @]
0.269[zip.sup] @[neg_reflect did not simplify the clause @]
0.269[zip.saturate] ### step   201 ###
0.269[zip.saturate]
    given (201 steps, penalty 1):
      `forall X0.
       [cQ_2 b X0 a+* ∨ ¬cQ_1 (f b) d (f (f (f (f (f (f (f (f a))))))))+*]/id:217/depth:15`
0.270[zip.env] apply binary rule superposition_active
0.270[zip.env] apply binary rule superposition_passive
0.270[zip.env] apply binary rule ctx_narrow
0.270[zip.env] apply binary rule narrow_term_defs
0.270[zip.env] do unary inferences
0.270[zip.env] apply unary rule equality_resolution
0.270[zip.env] apply unary rule equality_factoring
0.270[zip.env] apply unary rule narrow_lit_defs
0.270[zip.env] apply unary rule ind_types.exhaustiveness
0.270[zip.env] apply unary rule ind_types.acyclicity
0.270[zip.env] apply unary rule avatar_check_empty
0.270[zip.env] apply generating rule avatar.lemmas (full: false)
0.270[zip.env] apply generating rule avatar_check_sat (full: false)
0.270[zip.avatar] SAT-solver reports "SAT"
0.270[zip.saturate] inferred new clauses: []
0.270[zip.sup] @[neg_reflect did not simplify the clause @]
0.271[zip.sup] @[neg_reflect did not simplify the clause @]
0.271[zip.saturate] ### step   202 ###
0.271[zip.saturate]
    given (202 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14`
0.272[zip.env] apply binary rule superposition_active
0.272[zip.env] apply binary rule superposition_passive
0.272[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.272[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
     ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:218/depth:15
0.272[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.273[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f d))))))))+*]/id:219/depth:15
0.273[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.273[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f c))))))))+*]/id:220/depth:15
0.273[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.273[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f b))))))))+*]/id:221/depth:15
0.273[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.273[zip.sup]
    ... ok, conclusion
    forall X0.
    [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f a))))))))+*]/id:222/depth:15
0.274[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f X1))))))))* ∨ cQ_2 a X2 X0+*]/id:198/depth:14[0]
         passive_lit=cQ_2 a X2 X0 p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X0[0]}.

0.274[zip.sup] will yield a tautology
0.274[zip.sup] ... cancel, will yield a tautology
0.274[zip.env] apply binary rule ctx_narrow
0.274[zip.env] apply binary rule narrow_term_defs
0.274[zip.env] do unary inferences
0.274[zip.env] apply unary rule equality_resolution
0.274[zip.env] apply unary rule equality_factoring
0.274[zip.env] apply unary rule narrow_lit_defs
0.274[zip.env] apply unary rule ind_types.exhaustiveness
0.274[zip.env] apply unary rule ind_types.acyclicity
0.274[zip.env] apply unary rule avatar_check_empty
0.274[zip.env] apply generating rule avatar.lemmas (full: false)
0.274[zip.env] apply generating rule avatar_check_sat (full: false)
0.274[zip.avatar] SAT-solver reports "SAT"
0.274[zip.sup] @[neg_reflect did not simplify the clause @]
0.274[zip.sup] @[neg_reflect did not simplify the clause @]
0.274[zip.sup] @[neg_reflect did not simplify the clause @]
0.274[zip.sup] @[neg_reflect did not simplify the clause @]
0.274[zip.sup] @[neg_reflect did not simplify the clause @]
0.275[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 a X2 X0+* ∨ 
        ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f (f X1)))))))))*]/id:218/depth:15, 
       forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f d))))))))+*]/id:219/depth:15, 
       forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f c))))))))+*]/id:220/depth:15, 
       forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f b))))))))+*]/id:221/depth:15, 
       forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f a))))))))+*]/id:222/depth:15]
0.275[zip.sup] @[neg_reflect did not simplify the clause @]
0.275[zip.sup] @[neg_reflect did not simplify the clause @]
0.276[zip.saturate] ### step   203 ###
0.276[zip.saturate]
    given (203 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f d))))))))+*]/id:219/depth:15`
0.276[zip.env] apply binary rule superposition_active
0.276[zip.env] apply binary rule superposition_passive
0.276[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [cQ_2 a X1 X0+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f d))))))))+*]/id:219/depth:15[0]
         passive_lit=cQ_2 a X1 X0 p=0.←.ε)
      with subst={X1[0] → b[1], X0[1] → X0[0]}.

0.277[zip.sup] will yield a tautology
0.277[zip.sup] ... cancel, will yield a tautology
0.277[zip.env] apply binary rule ctx_narrow
0.277[zip.env] apply binary rule narrow_term_defs
0.277[zip.env] do unary inferences
0.277[zip.env] apply unary rule equality_resolution
0.277[zip.env] apply unary rule equality_factoring
0.277[zip.env] apply unary rule narrow_lit_defs
0.277[zip.env] apply unary rule ind_types.exhaustiveness
0.277[zip.env] apply unary rule ind_types.acyclicity
0.277[zip.env] apply unary rule avatar_check_empty
0.277[zip.env] apply generating rule avatar.lemmas (full: false)
0.277[zip.env] apply generating rule avatar_check_sat (full: false)
0.277[zip.avatar] SAT-solver reports "SAT"
0.277[zip.saturate] inferred new clauses: []
0.277[zip.sup] @[neg_reflect did not simplify the clause @]
0.277[zip.sup] @[neg_reflect did not simplify the clause @]
0.278[zip.saturate] ### step   204 ###
0.278[zip.saturate]
    given (204 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f c))))))))+*]/id:220/depth:15`
0.278[zip.env] apply binary rule superposition_active
0.278[zip.env] apply binary rule superposition_passive
0.278[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 c+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f c))))))))+*]/id:220/depth:15[0]
         passive_lit=cQ_2 a X0 c p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → c[0]}.

0.278[zip.sup] will yield a tautology
0.278[zip.sup] ... cancel, will yield a tautology
0.278[zip.env] apply binary rule ctx_narrow
0.278[zip.env] apply binary rule narrow_term_defs
0.279[zip.env] do unary inferences
0.279[zip.env] apply unary rule equality_resolution
0.279[zip.env] apply unary rule equality_factoring
0.279[zip.env] apply unary rule narrow_lit_defs
0.279[zip.env] apply unary rule ind_types.exhaustiveness
0.279[zip.env] apply unary rule ind_types.acyclicity
0.279[zip.env] apply unary rule avatar_check_empty
0.279[zip.env] apply generating rule avatar.lemmas (full: false)
0.279[zip.env] apply generating rule avatar_check_sat (full: false)
0.279[zip.avatar] SAT-solver reports "SAT"
0.279[zip.saturate] inferred new clauses: []
0.279[zip.sup] @[neg_reflect did not simplify the clause @]
0.279[zip.sup] @[neg_reflect did not simplify the clause @]
0.279[zip.saturate] ### step   205 ###
0.279[zip.saturate]
    given (205 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f b))))))))+*]/id:221/depth:15`
0.280[zip.env] apply binary rule superposition_active
0.280[zip.env] apply binary rule superposition_passive
0.280[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 b+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f b))))))))+*]/id:221/depth:15[0]
         passive_lit=cQ_2 a X0 b p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → b[0]}.

0.280[zip.sup] will yield a tautology
0.280[zip.sup] ... cancel, will yield a tautology
0.280[zip.env] apply binary rule ctx_narrow
0.280[zip.env] apply binary rule narrow_term_defs
0.280[zip.env] do unary inferences
0.280[zip.env] apply unary rule equality_resolution
0.280[zip.env] apply unary rule equality_factoring
0.280[zip.env] apply unary rule narrow_lit_defs
0.280[zip.env] apply unary rule ind_types.exhaustiveness
0.280[zip.env] apply unary rule ind_types.acyclicity
0.280[zip.env] apply unary rule avatar_check_empty
0.280[zip.env] apply generating rule avatar.lemmas (full: false)
0.280[zip.env] apply generating rule avatar_check_sat (full: false)
0.280[zip.avatar] SAT-solver reports "SAT"
0.280[zip.saturate] inferred new clauses: []
0.280[zip.sup] @[neg_reflect did not simplify the clause @]
0.280[zip.sup] @[neg_reflect did not simplify the clause @]
0.280[zip.saturate] ### step   206 ###
0.280[zip.saturate]
    given (206 steps, penalty 1):
      `forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f a))))))))+*]/id:222/depth:15`
0.281[zip.env] apply binary rule superposition_active
0.281[zip.env] apply binary rule superposition_passive
0.281[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0.
       [cQ_2 a X0 a+* ∨ ¬cQ_1 (f a) d (f (f (f (f (f (f (f (f a))))))))+*]/id:222/depth:15[0]
         passive_lit=cQ_2 a X0 a p=0.←.ε)
      with subst={X0[0] → b[1], X0[1] → a[0]}.

0.281[zip.sup] will yield a tautology
0.281[zip.sup] ... cancel, will yield a tautology
0.281[zip.env] apply binary rule ctx_narrow
0.281[zip.env] apply binary rule narrow_term_defs
0.281[zip.env] do unary inferences
0.281[zip.env] apply unary rule equality_resolution
0.281[zip.env] apply unary rule equality_factoring
0.281[zip.env] apply unary rule narrow_lit_defs
0.281[zip.env] apply unary rule ind_types.exhaustiveness
0.281[zip.env] apply unary rule ind_types.acyclicity
0.281[zip.env] apply unary rule avatar_check_empty
0.281[zip.env] apply generating rule avatar.lemmas (full: false)
0.281[zip.env] apply generating rule avatar_check_sat (full: false)
0.281[zip.avatar] SAT-solver reports "SAT"
0.281[zip.saturate] inferred new clauses: []
0.281[zip.sup] @[neg_reflect did not simplify the clause @]
0.281[zip.sup] @[neg_reflect did not simplify the clause @]
0.282[zip.saturate] ### step   207 ###
0.282[zip.saturate]
    given (207 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4`
0.282[zip.env] apply binary rule superposition_active
0.282[zip.env] apply binary rule superposition_passive
0.282[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.283[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 (f (f X1)) c X3*]/id:223/depth:5
0.283[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.284[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 X0 c X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) c X2*]/id:224/depth:5
0.284[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.284[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 c c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) c X1*]/id:225/depth:5
0.284[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.284[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 b c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) c X1*]/id:226/depth:5
0.285[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) c X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 c X3+*]/id:33/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.285[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 a c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) c X1*]/id:227/depth:5
0.285[zip.env] apply binary rule ctx_narrow
0.285[zip.env] apply binary rule narrow_term_defs
0.285[zip.env] do unary inferences
0.285[zip.env] apply unary rule equality_resolution
0.285[zip.env] apply unary rule equality_factoring
0.285[zip.env] apply unary rule narrow_lit_defs
0.285[zip.env] apply unary rule ind_types.exhaustiveness
0.285[zip.env] apply unary rule ind_types.acyclicity
0.285[zip.env] apply unary rule avatar_check_empty
0.285[zip.env] apply generating rule avatar.lemmas (full: false)
0.285[zip.env] apply generating rule avatar_check_sat (full: false)
0.285[zip.avatar] SAT-solver reports "SAT"
0.285[zip.sup] @[neg_reflect did not simplify the clause @]
0.285[zip.sup] @[neg_reflect did not simplify the clause @]
0.285[zip.sup] @[neg_reflect did not simplify the clause @]
0.285[zip.sup] @[neg_reflect did not simplify the clause @]
0.285[zip.sup] @[neg_reflect did not simplify the clause @]
0.285[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 c X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 (f (f X1)) c X3*]/id:223/depth:5, 
       forall X0 X1 X2.
       [cQ_2 X0 c X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) c X2*]/id:224/depth:5, 
       forall X0 X1.
       [cQ_2 c c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) c X1*]/id:225/depth:5, 
       forall X0 X1.
       [cQ_2 b c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) c X1*]/id:226/depth:5, 
       forall X0 X1.
       [cQ_2 a c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) c X1*]/id:227/depth:5]
0.286[zip.sup] @[neg_reflect did not simplify the clause @]
0.286[zip.sup] @[neg_reflect did not simplify the clause @]
0.286[zip.saturate] ### step   208 ###
0.286[zip.saturate]
    given (208 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 X0 c X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) c X2*]/id:224/depth:5`
0.286[zip.env] apply binary rule superposition_active
0.286[zip.env] apply binary rule superposition_passive
0.286[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 X0 c X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) c X2*]/id:224/depth:5[0]
         passive_lit=¬cP_1 (f X2) X1 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X1[0]}.

0.287[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6
0.287[zip.env] apply binary rule ctx_narrow
0.287[zip.env] apply binary rule narrow_term_defs
0.287[zip.env] do unary inferences
0.287[zip.env] apply unary rule equality_resolution
0.287[zip.env] apply unary rule equality_factoring
0.287[zip.env] apply unary rule narrow_lit_defs
0.287[zip.env] apply unary rule ind_types.exhaustiveness
0.287[zip.env] apply unary rule ind_types.acyclicity
0.287[zip.env] apply unary rule avatar_check_empty
0.287[zip.env] apply generating rule avatar.lemmas (full: false)
0.287[zip.env] apply generating rule avatar_check_sat (full: false)
0.287[zip.avatar] SAT-solver reports "SAT"
0.287[zip.sup] @[neg_reflect did not simplify the clause @]
0.287[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6]
0.287[zip.sup] @[neg_reflect did not simplify the clause @]
0.287[zip.sup] @[neg_reflect did not simplify the clause @]
0.287[zip.saturate] ### step   209 ###
0.287[zip.saturate]
    given (209 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6`
0.287[zip.env] apply binary rule superposition_active
0.287[zip.env] apply binary rule superposition_passive
0.287[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.287[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7
0.288[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.288[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c d+*]/id:230/depth:7
0.288[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.288[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c c+*]/id:231/depth:7
0.288[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.288[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c b+*]/id:232/depth:7
0.288[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c X1* ∨ cQ_2 X2 c X0+*]/id:228/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.289[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c a+*]/id:233/depth:7
0.289[zip.env] apply binary rule ctx_narrow
0.289[zip.env] apply binary rule narrow_term_defs
0.289[zip.env] do unary inferences
0.289[zip.env] apply unary rule equality_resolution
0.289[zip.env] apply unary rule equality_factoring
0.289[zip.env] apply unary rule narrow_lit_defs
0.289[zip.env] apply unary rule ind_types.exhaustiveness
0.289[zip.env] apply unary rule ind_types.acyclicity
0.289[zip.env] apply unary rule avatar_check_empty
0.289[zip.env] apply generating rule avatar.lemmas (full: false)
0.289[zip.env] apply generating rule avatar_check_sat (full: false)
0.289[zip.avatar] SAT-solver reports "SAT"
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.289[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7, 
       forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c d+*]/id:230/depth:7, 
       forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c c+*]/id:231/depth:7, 
       forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c b+*]/id:232/depth:7, 
       forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c a+*]/id:233/depth:7]
0.289[zip.sup] @[neg_reflect did not simplify the clause @]
0.290[zip.sup] @[neg_reflect did not simplify the clause @]
0.290[zip.saturate] ### step   210 ###
0.290[zip.saturate]
    given (210 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c d+*]/id:230/depth:7`
0.290[zip.env] apply binary rule superposition_active
0.290[zip.env] apply binary rule superposition_passive
0.290[zip.env] apply binary rule ctx_narrow
0.290[zip.env] apply binary rule narrow_term_defs
0.290[zip.env] do unary inferences
0.290[zip.env] apply unary rule equality_resolution
0.290[zip.env] apply unary rule equality_factoring
0.290[zip.env] apply unary rule narrow_lit_defs
0.290[zip.env] apply unary rule ind_types.exhaustiveness
0.290[zip.env] apply unary rule ind_types.acyclicity
0.291[zip.env] apply unary rule avatar_check_empty
0.291[zip.env] apply generating rule avatar.lemmas (full: false)
0.291[zip.env] apply generating rule avatar_check_sat (full: false)
0.291[zip.avatar] SAT-solver reports "SAT"
0.291[zip.saturate] inferred new clauses: []
0.291[zip.sup] @[neg_reflect did not simplify the clause @]
0.291[zip.sup] @[neg_reflect did not simplify the clause @]
0.291[zip.saturate] ### step   211 ###
0.291[zip.saturate]
    given (211 steps, penalty 1):
      `forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c c+*]/id:231/depth:7`
0.292[zip.env] apply binary rule superposition_active
0.292[zip.env] apply binary rule superposition_passive
0.292[zip.env] apply binary rule ctx_narrow
0.292[zip.env] apply binary rule narrow_term_defs
0.292[zip.env] do unary inferences
0.292[zip.env] apply unary rule equality_resolution
0.292[zip.env] apply unary rule equality_factoring
0.292[zip.env] apply unary rule narrow_lit_defs
0.292[zip.env] apply unary rule ind_types.exhaustiveness
0.292[zip.env] apply unary rule ind_types.acyclicity
0.292[zip.env] apply unary rule avatar_check_empty
0.292[zip.env] apply generating rule avatar.lemmas (full: false)
0.292[zip.env] apply generating rule avatar_check_sat (full: false)
0.292[zip.avatar] SAT-solver reports "SAT"
0.292[zip.saturate] inferred new clauses: []
0.292[zip.sup] @[neg_reflect did not simplify the clause @]
0.292[zip.sup] @[neg_reflect did not simplify the clause @]
0.292[zip.saturate] ### step   212 ###
0.292[zip.saturate]
    given (212 steps, penalty 1):
      `forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c b+*]/id:232/depth:7`
0.292[zip.env] apply binary rule superposition_active
0.292[zip.env] apply binary rule superposition_passive
0.292[zip.env] apply binary rule ctx_narrow
0.292[zip.env] apply binary rule narrow_term_defs
0.292[zip.env] do unary inferences
0.292[zip.env] apply unary rule equality_resolution
0.292[zip.env] apply unary rule equality_factoring
0.292[zip.env] apply unary rule narrow_lit_defs
0.292[zip.env] apply unary rule ind_types.exhaustiveness
0.292[zip.env] apply unary rule ind_types.acyclicity
0.292[zip.env] apply unary rule avatar_check_empty
0.292[zip.env] apply generating rule avatar.lemmas (full: false)
0.292[zip.env] apply generating rule avatar_check_sat (full: false)
0.292[zip.avatar] SAT-solver reports "SAT"
0.292[zip.saturate] inferred new clauses: []
0.293[zip.sup] @[neg_reflect did not simplify the clause @]
0.293[zip.sup] @[neg_reflect did not simplify the clause @]
0.293[zip.saturate] ### step   213 ###
0.293[zip.saturate]
    given (213 steps, penalty 1):
      `forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c a+*]/id:233/depth:7`
0.293[zip.env] apply binary rule superposition_active
0.293[zip.env] apply binary rule superposition_passive
0.293[zip.env] apply binary rule ctx_narrow
0.293[zip.env] apply binary rule narrow_term_defs
0.293[zip.env] do unary inferences
0.293[zip.env] apply unary rule equality_resolution
0.293[zip.env] apply unary rule equality_factoring
0.293[zip.env] apply unary rule narrow_lit_defs
0.293[zip.env] apply unary rule ind_types.exhaustiveness
0.293[zip.env] apply unary rule ind_types.acyclicity
0.293[zip.env] apply unary rule avatar_check_empty
0.293[zip.env] apply generating rule avatar.lemmas (full: false)
0.293[zip.env] apply generating rule avatar_check_sat (full: false)
0.293[zip.avatar] SAT-solver reports "SAT"
0.293[zip.saturate] inferred new clauses: []
0.293[zip.sup] @[neg_reflect did not simplify the clause @]
0.293[zip.sup] @[neg_reflect did not simplify the clause @]
0.294[zip.saturate] ### step   214 ###
0.294[zip.saturate]
    given (214 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 c c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) c X1*]/id:225/depth:5`
0.294[zip.env] apply binary rule superposition_active
0.294[zip.env] apply binary rule superposition_passive
0.294[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 c c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) c X1*]/id:225/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.294[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6
0.294[zip.env] apply binary rule ctx_narrow
0.294[zip.env] apply binary rule narrow_term_defs
0.294[zip.env] do unary inferences
0.294[zip.env] apply unary rule equality_resolution
0.294[zip.env] apply unary rule equality_factoring
0.294[zip.env] apply unary rule narrow_lit_defs
0.294[zip.env] apply unary rule ind_types.exhaustiveness
0.294[zip.env] apply unary rule ind_types.acyclicity
0.294[zip.env] apply unary rule avatar_check_empty
0.294[zip.env] apply generating rule avatar.lemmas (full: false)
0.294[zip.env] apply generating rule avatar_check_sat (full: false)
0.294[zip.avatar] SAT-solver reports "SAT"
0.294[zip.sup] @[neg_reflect did not simplify the clause @]
0.294[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6]
0.295[zip.sup] @[neg_reflect did not simplify the clause @]
0.295[zip.sup] @[neg_reflect did not simplify the clause @]
0.295[zip.saturate] ### step   215 ###
0.295[zip.saturate]
    given (215 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6`
0.295[zip.env] apply binary rule superposition_active
0.295[zip.env] apply binary rule superposition_passive
0.295[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.296[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7
0.296[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.296[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c d+*]/id:236/depth:7
0.296[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.296[zip.sup]
    ... ok, conclusion [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c c+*]/id:237/depth:7
0.296[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.296[zip.sup]
    ... ok, conclusion [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c b+*]/id:238/depth:7
0.296[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c X1* ∨ cQ_2 c c X0+*]/id:234/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.297[zip.sup]
    ... ok, conclusion [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c a+*]/id:239/depth:7
0.297[zip.env] apply binary rule ctx_narrow
0.297[zip.env] apply binary rule narrow_term_defs
0.297[zip.env] do unary inferences
0.297[zip.env] apply unary rule equality_resolution
0.297[zip.env] apply unary rule equality_factoring
0.297[zip.env] apply unary rule narrow_lit_defs
0.297[zip.env] apply unary rule ind_types.exhaustiveness
0.297[zip.env] apply unary rule ind_types.acyclicity
0.297[zip.env] apply unary rule avatar_check_empty
0.297[zip.env] apply generating rule avatar.lemmas (full: false)
0.297[zip.env] apply generating rule avatar_check_sat (full: false)
0.297[zip.avatar] SAT-solver reports "SAT"
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.297[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7, 
       forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c d+*]/id:236/depth:7, 
       [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c c+*]/id:237/depth:7, 
       [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c b+*]/id:238/depth:7, 
       [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c a+*]/id:239/depth:7]
0.297[zip.sup] @[neg_reflect did not simplify the clause @]
0.298[zip.sup] @[neg_reflect did not simplify the clause @]
0.298[zip.saturate] ### step   216 ###
0.298[zip.saturate]
    given (216 steps, penalty 1):
      `forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c d+*]/id:236/depth:7`
0.298[zip.env] apply binary rule superposition_active
0.298[zip.env] apply binary rule superposition_passive
0.298[zip.env] apply binary rule ctx_narrow
0.298[zip.env] apply binary rule narrow_term_defs
0.298[zip.env] do unary inferences
0.298[zip.env] apply unary rule equality_resolution
0.298[zip.env] apply unary rule equality_factoring
0.298[zip.env] apply unary rule narrow_lit_defs
0.298[zip.env] apply unary rule ind_types.exhaustiveness
0.298[zip.env] apply unary rule ind_types.acyclicity
0.298[zip.env] apply unary rule avatar_check_empty
0.298[zip.env] apply generating rule avatar.lemmas (full: false)
0.298[zip.env] apply generating rule avatar_check_sat (full: false)
0.298[zip.avatar] SAT-solver reports "SAT"
0.298[zip.saturate] inferred new clauses: []
0.298[zip.sup] @[neg_reflect did not simplify the clause @]
0.298[zip.sup] @[neg_reflect did not simplify the clause @]
0.298[zip.saturate] ### step   217 ###
0.298[zip.saturate]
    given (217 steps, penalty 1):
      `[cQ_2 c c c+ ∨ ¬cQ_1 (f c) c c+*]/id:237/depth:7`
0.299[zip.env] apply binary rule superposition_active
0.299[zip.env] apply binary rule superposition_passive
0.299[zip.env] apply binary rule ctx_narrow
0.299[zip.env] apply binary rule narrow_term_defs
0.299[zip.env] do unary inferences
0.299[zip.env] apply unary rule equality_resolution
0.299[zip.env] apply unary rule equality_factoring
0.299[zip.env] apply unary rule narrow_lit_defs
0.299[zip.env] apply unary rule ind_types.exhaustiveness
0.299[zip.env] apply unary rule ind_types.acyclicity
0.299[zip.env] apply unary rule avatar_check_empty
0.299[zip.env] apply generating rule avatar.lemmas (full: false)
0.299[zip.env] apply generating rule avatar_check_sat (full: false)
0.299[zip.avatar] SAT-solver reports "SAT"
0.299[zip.saturate] inferred new clauses: []
0.299[zip.sup] @[neg_reflect did not simplify the clause @]
0.299[zip.sup] @[neg_reflect did not simplify the clause @]
0.299[zip.saturate] ### step   218 ###
0.299[zip.saturate]
    given (218 steps, penalty 1):
      `[cQ_2 c c b+ ∨ ¬cQ_1 (f c) c b+*]/id:238/depth:7`
0.300[zip.env] apply binary rule superposition_active
0.300[zip.env] apply binary rule superposition_passive
0.300[zip.env] apply binary rule ctx_narrow
0.300[zip.env] apply binary rule narrow_term_defs
0.300[zip.env] do unary inferences
0.300[zip.env] apply unary rule equality_resolution
0.300[zip.env] apply unary rule equality_factoring
0.300[zip.env] apply unary rule narrow_lit_defs
0.300[zip.env] apply unary rule ind_types.exhaustiveness
0.300[zip.env] apply unary rule ind_types.acyclicity
0.300[zip.env] apply unary rule avatar_check_empty
0.300[zip.env] apply generating rule avatar.lemmas (full: false)
0.300[zip.env] apply generating rule avatar_check_sat (full: false)
0.300[zip.avatar] SAT-solver reports "SAT"
0.300[zip.saturate] inferred new clauses: []
0.300[zip.sup] @[neg_reflect did not simplify the clause @]
0.300[zip.sup] @[neg_reflect did not simplify the clause @]
0.300[zip.saturate] ### step   219 ###
0.300[zip.saturate]
    given (219 steps, penalty 1):
      `[cQ_2 c c a+ ∨ ¬cQ_1 (f c) c a+*]/id:239/depth:7`
0.301[zip.env] apply binary rule superposition_active
0.301[zip.env] apply binary rule superposition_passive
0.301[zip.env] apply binary rule ctx_narrow
0.301[zip.env] apply binary rule narrow_term_defs
0.301[zip.env] do unary inferences
0.301[zip.env] apply unary rule equality_resolution
0.301[zip.env] apply unary rule equality_factoring
0.301[zip.env] apply unary rule narrow_lit_defs
0.301[zip.env] apply unary rule ind_types.exhaustiveness
0.301[zip.env] apply unary rule ind_types.acyclicity
0.301[zip.env] apply unary rule avatar_check_empty
0.301[zip.env] apply generating rule avatar.lemmas (full: false)
0.301[zip.env] apply generating rule avatar_check_sat (full: false)
0.301[zip.avatar] SAT-solver reports "SAT"
0.301[zip.saturate] inferred new clauses: []
0.301[zip.sup] @[neg_reflect did not simplify the clause @]
0.301[zip.sup] @[neg_reflect did not simplify the clause @]
0.302[zip.saturate] ### step   220 ###
0.302[zip.saturate]
    given (220 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 b c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) c X1*]/id:226/depth:5`
0.302[zip.env] apply binary rule superposition_active
0.302[zip.env] apply binary rule superposition_passive
0.302[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 b c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) c X1*]/id:226/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.302[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6
0.303[zip.env] apply binary rule ctx_narrow
0.303[zip.env] apply binary rule narrow_term_defs
0.303[zip.env] do unary inferences
0.303[zip.env] apply unary rule equality_resolution
0.303[zip.env] apply unary rule equality_factoring
0.303[zip.env] apply unary rule narrow_lit_defs
0.303[zip.env] apply unary rule ind_types.exhaustiveness
0.303[zip.env] apply unary rule ind_types.acyclicity
0.303[zip.env] apply unary rule avatar_check_empty
0.303[zip.env] apply generating rule avatar.lemmas (full: false)
0.303[zip.env] apply generating rule avatar_check_sat (full: false)
0.303[zip.avatar] SAT-solver reports "SAT"
0.303[zip.sup] @[neg_reflect did not simplify the clause @]
0.303[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6]
0.303[zip.sup] @[neg_reflect did not simplify the clause @]
0.303[zip.sup] @[neg_reflect did not simplify the clause @]
0.303[zip.saturate] ### step   221 ###
0.303[zip.saturate]
    given (221 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6`
0.304[zip.env] apply binary rule superposition_active
0.304[zip.env] apply binary rule superposition_passive
0.304[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.304[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7
0.304[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.304[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c d+*]/id:242/depth:7
0.305[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.305[zip.sup]
    ... ok, conclusion [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c c+*]/id:243/depth:7
0.305[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.305[zip.sup]
    ... ok, conclusion [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c b+*]/id:244/depth:7
0.305[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c X1* ∨ cQ_2 b c X0+*]/id:240/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.305[zip.sup]
    ... ok, conclusion [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c a+*]/id:245/depth:7
0.305[zip.env] apply binary rule ctx_narrow
0.305[zip.env] apply binary rule narrow_term_defs
0.305[zip.env] do unary inferences
0.305[zip.env] apply unary rule equality_resolution
0.305[zip.env] apply unary rule equality_factoring
0.305[zip.env] apply unary rule narrow_lit_defs
0.305[zip.env] apply unary rule ind_types.exhaustiveness
0.305[zip.env] apply unary rule ind_types.acyclicity
0.305[zip.env] apply unary rule avatar_check_empty
0.305[zip.env] apply generating rule avatar.lemmas (full: false)
0.305[zip.env] apply generating rule avatar_check_sat (full: false)
0.306[zip.avatar] SAT-solver reports "SAT"
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7, 
       forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c d+*]/id:242/depth:7, 
       [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c c+*]/id:243/depth:7, 
       [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c b+*]/id:244/depth:7, 
       [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c a+*]/id:245/depth:7]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.sup] @[neg_reflect did not simplify the clause @]
0.306[zip.saturate] ### step   222 ###
0.306[zip.saturate]
    given (222 steps, penalty 1):
      `forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c d+*]/id:242/depth:7`
0.307[zip.env] apply binary rule superposition_active
0.307[zip.env] apply binary rule superposition_passive
0.307[zip.env] apply binary rule ctx_narrow
0.307[zip.env] apply binary rule narrow_term_defs
0.307[zip.env] do unary inferences
0.307[zip.env] apply unary rule equality_resolution
0.307[zip.env] apply unary rule equality_factoring
0.307[zip.env] apply unary rule narrow_lit_defs
0.307[zip.env] apply unary rule ind_types.exhaustiveness
0.307[zip.env] apply unary rule ind_types.acyclicity
0.307[zip.env] apply unary rule avatar_check_empty
0.307[zip.env] apply generating rule avatar.lemmas (full: false)
0.307[zip.env] apply generating rule avatar_check_sat (full: false)
0.307[zip.avatar] SAT-solver reports "SAT"
0.307[zip.saturate] inferred new clauses: []
0.307[zip.sup] @[neg_reflect did not simplify the clause @]
0.307[zip.sup] @[neg_reflect did not simplify the clause @]
0.307[zip.saturate] ### step   223 ###
0.307[zip.saturate]
    given (223 steps, penalty 1):
      `[cQ_2 b c c+ ∨ ¬cQ_1 (f b) c c+*]/id:243/depth:7`
0.308[zip.env] apply binary rule superposition_active
0.308[zip.env] apply binary rule superposition_passive
0.308[zip.env] apply binary rule ctx_narrow
0.308[zip.env] apply binary rule narrow_term_defs
0.308[zip.env] do unary inferences
0.308[zip.env] apply unary rule equality_resolution
0.308[zip.env] apply unary rule equality_factoring
0.308[zip.env] apply unary rule narrow_lit_defs
0.308[zip.env] apply unary rule ind_types.exhaustiveness
0.308[zip.env] apply unary rule ind_types.acyclicity
0.308[zip.env] apply unary rule avatar_check_empty
0.308[zip.env] apply generating rule avatar.lemmas (full: false)
0.308[zip.env] apply generating rule avatar_check_sat (full: false)
0.308[zip.avatar] SAT-solver reports "SAT"
0.308[zip.saturate] inferred new clauses: []
0.308[zip.sup] @[neg_reflect did not simplify the clause @]
0.308[zip.sup] @[neg_reflect did not simplify the clause @]
0.308[zip.saturate] ### step   224 ###
0.308[zip.saturate]
    given (224 steps, penalty 1):
      `[cQ_2 b c b+ ∨ ¬cQ_1 (f b) c b+*]/id:244/depth:7`
0.308[zip.env] apply binary rule superposition_active
0.308[zip.env] apply binary rule superposition_passive
0.308[zip.env] apply binary rule ctx_narrow
0.308[zip.env] apply binary rule narrow_term_defs
0.308[zip.env] do unary inferences
0.308[zip.env] apply unary rule equality_resolution
0.308[zip.env] apply unary rule equality_factoring
0.308[zip.env] apply unary rule narrow_lit_defs
0.308[zip.env] apply unary rule ind_types.exhaustiveness
0.308[zip.env] apply unary rule ind_types.acyclicity
0.308[zip.env] apply unary rule avatar_check_empty
0.308[zip.env] apply generating rule avatar.lemmas (full: false)
0.308[zip.env] apply generating rule avatar_check_sat (full: false)
0.308[zip.avatar] SAT-solver reports "SAT"
0.309[zip.saturate] inferred new clauses: []
0.309[zip.sup] @[neg_reflect did not simplify the clause @]
0.309[zip.sup] @[neg_reflect did not simplify the clause @]
0.309[zip.saturate] ### step   225 ###
0.309[zip.saturate]
    given (225 steps, penalty 1):
      `[cQ_2 b c a+ ∨ ¬cQ_1 (f b) c a+*]/id:245/depth:7`
0.309[zip.env] apply binary rule superposition_active
0.309[zip.env] apply binary rule superposition_passive
0.309[zip.env] apply binary rule ctx_narrow
0.309[zip.env] apply binary rule narrow_term_defs
0.309[zip.env] do unary inferences
0.309[zip.env] apply unary rule equality_resolution
0.309[zip.env] apply unary rule equality_factoring
0.309[zip.env] apply unary rule narrow_lit_defs
0.309[zip.env] apply unary rule ind_types.exhaustiveness
0.309[zip.env] apply unary rule ind_types.acyclicity
0.309[zip.env] apply unary rule avatar_check_empty
0.309[zip.env] apply generating rule avatar.lemmas (full: false)
0.309[zip.env] apply generating rule avatar_check_sat (full: false)
0.309[zip.avatar] SAT-solver reports "SAT"
0.309[zip.saturate] inferred new clauses: []
0.309[zip.sup] @[neg_reflect did not simplify the clause @]
0.310[zip.sup] @[neg_reflect did not simplify the clause @]
0.310[zip.saturate] ### step   226 ###
0.310[zip.saturate]
    given (226 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 a c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) c X1*]/id:227/depth:5`
0.310[zip.env] apply binary rule superposition_active
0.310[zip.env] apply binary rule superposition_passive
0.310[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 a c X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) c X1*]/id:227/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.311[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6
0.311[zip.env] apply binary rule ctx_narrow
0.311[zip.env] apply binary rule narrow_term_defs
0.311[zip.env] do unary inferences
0.311[zip.env] apply unary rule equality_resolution
0.311[zip.env] apply unary rule equality_factoring
0.311[zip.env] apply unary rule narrow_lit_defs
0.311[zip.env] apply unary rule ind_types.exhaustiveness
0.311[zip.env] apply unary rule ind_types.acyclicity
0.311[zip.env] apply unary rule avatar_check_empty
0.311[zip.env] apply generating rule avatar.lemmas (full: false)
0.311[zip.env] apply generating rule avatar_check_sat (full: false)
0.311[zip.avatar] SAT-solver reports "SAT"
0.311[zip.sup] @[neg_reflect did not simplify the clause @]
0.311[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6]
0.311[zip.sup] @[neg_reflect did not simplify the clause @]
0.311[zip.sup] @[neg_reflect did not simplify the clause @]
0.312[zip.saturate] ### step   227 ###
0.312[zip.saturate]
    given (227 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6`
0.312[zip.env] apply binary rule superposition_active
0.312[zip.env] apply binary rule superposition_passive
0.312[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.313[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7
0.313[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.313[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c d+*]/id:248/depth:7
0.313[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.313[zip.sup]
    ... ok, conclusion [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c c+*]/id:249/depth:7
0.313[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.314[zip.sup]
    ... ok, conclusion [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c b+*]/id:250/depth:7
0.314[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c X1* ∨ cQ_2 a c X0+*]/id:246/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.314[zip.sup]
    ... ok, conclusion [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c a+*]/id:251/depth:7
0.314[zip.env] apply binary rule ctx_narrow
0.314[zip.env] apply binary rule narrow_term_defs
0.314[zip.env] do unary inferences
0.314[zip.env] apply unary rule equality_resolution
0.314[zip.env] apply unary rule equality_factoring
0.314[zip.env] apply unary rule narrow_lit_defs
0.314[zip.env] apply unary rule ind_types.exhaustiveness
0.314[zip.env] apply unary rule ind_types.acyclicity
0.314[zip.env] apply unary rule avatar_check_empty
0.314[zip.env] apply generating rule avatar.lemmas (full: false)
0.314[zip.env] apply generating rule avatar_check_sat (full: false)
0.314[zip.avatar] SAT-solver reports "SAT"
0.314[zip.sup] @[neg_reflect did not simplify the clause @]
0.314[zip.sup] @[neg_reflect did not simplify the clause @]
0.314[zip.sup] @[neg_reflect did not simplify the clause @]
0.314[zip.sup] @[neg_reflect did not simplify the clause @]
0.314[zip.sup] @[neg_reflect did not simplify the clause @]
0.314[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7, 
       forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c d+*]/id:248/depth:7, 
       [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c c+*]/id:249/depth:7, 
       [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c b+*]/id:250/depth:7, 
       [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c a+*]/id:251/depth:7]
0.315[zip.sup] @[neg_reflect did not simplify the clause @]
0.315[zip.sup] @[neg_reflect did not simplify the clause @]
0.315[zip.saturate] ### step   228 ###
0.315[zip.saturate]
    given (228 steps, penalty 1):
      `forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c d+*]/id:248/depth:7`
0.315[zip.env] apply binary rule superposition_active
0.315[zip.env] apply binary rule superposition_passive
0.315[zip.env] apply binary rule ctx_narrow
0.315[zip.env] apply binary rule narrow_term_defs
0.315[zip.env] do unary inferences
0.315[zip.env] apply unary rule equality_resolution
0.315[zip.env] apply unary rule equality_factoring
0.315[zip.env] apply unary rule narrow_lit_defs
0.315[zip.env] apply unary rule ind_types.exhaustiveness
0.315[zip.env] apply unary rule ind_types.acyclicity
0.315[zip.env] apply unary rule avatar_check_empty
0.315[zip.env] apply generating rule avatar.lemmas (full: false)
0.315[zip.env] apply generating rule avatar_check_sat (full: false)
0.315[zip.avatar] SAT-solver reports "SAT"
0.315[zip.saturate] inferred new clauses: []
0.316[zip.sup] @[neg_reflect did not simplify the clause @]
0.316[zip.sup] @[neg_reflect did not simplify the clause @]
0.316[zip.saturate] ### step   229 ###
0.316[zip.saturate]
    given (229 steps, penalty 1):
      `[cQ_2 a c c+ ∨ ¬cQ_1 (f a) c c+*]/id:249/depth:7`
0.316[zip.env] apply binary rule superposition_active
0.316[zip.env] apply binary rule superposition_passive
0.316[zip.env] apply binary rule ctx_narrow
0.316[zip.env] apply binary rule narrow_term_defs
0.316[zip.env] do unary inferences
0.316[zip.env] apply unary rule equality_resolution
0.316[zip.env] apply unary rule equality_factoring
0.316[zip.env] apply unary rule narrow_lit_defs
0.316[zip.env] apply unary rule ind_types.exhaustiveness
0.316[zip.env] apply unary rule ind_types.acyclicity
0.316[zip.env] apply unary rule avatar_check_empty
0.316[zip.env] apply generating rule avatar.lemmas (full: false)
0.316[zip.env] apply generating rule avatar_check_sat (full: false)
0.316[zip.avatar] SAT-solver reports "SAT"
0.316[zip.saturate] inferred new clauses: []
0.316[zip.sup] @[neg_reflect did not simplify the clause @]
0.316[zip.sup] @[neg_reflect did not simplify the clause @]
0.317[zip.saturate] ### step   230 ###
0.317[zip.saturate]
    given (230 steps, penalty 1):
      `[cQ_2 a c b+ ∨ ¬cQ_1 (f a) c b+*]/id:250/depth:7`
0.317[zip.env] apply binary rule superposition_active
0.317[zip.env] apply binary rule superposition_passive
0.317[zip.env] apply binary rule ctx_narrow
0.317[zip.env] apply binary rule narrow_term_defs
0.317[zip.env] do unary inferences
0.317[zip.env] apply unary rule equality_resolution
0.317[zip.env] apply unary rule equality_factoring
0.317[zip.env] apply unary rule narrow_lit_defs
0.317[zip.env] apply unary rule ind_types.exhaustiveness
0.317[zip.env] apply unary rule ind_types.acyclicity
0.317[zip.env] apply unary rule avatar_check_empty
0.317[zip.env] apply generating rule avatar.lemmas (full: false)
0.317[zip.env] apply generating rule avatar_check_sat (full: false)
0.317[zip.avatar] SAT-solver reports "SAT"
0.317[zip.saturate] inferred new clauses: []
0.317[zip.sup] @[neg_reflect did not simplify the clause @]
0.317[zip.sup] @[neg_reflect did not simplify the clause @]
0.317[zip.saturate] ### step   231 ###
0.317[zip.saturate]
    given (231 steps, penalty 1):
      `[cQ_2 a c a+ ∨ ¬cQ_1 (f a) c a+*]/id:251/depth:7`
0.317[zip.env] apply binary rule superposition_active
0.317[zip.env] apply binary rule superposition_passive
0.317[zip.env] apply binary rule ctx_narrow
0.317[zip.env] apply binary rule narrow_term_defs
0.317[zip.env] do unary inferences
0.317[zip.env] apply unary rule equality_resolution
0.317[zip.env] apply unary rule equality_factoring
0.317[zip.env] apply unary rule narrow_lit_defs
0.317[zip.env] apply unary rule ind_types.exhaustiveness
0.317[zip.env] apply unary rule ind_types.acyclicity
0.317[zip.env] apply unary rule avatar_check_empty
0.317[zip.env] apply generating rule avatar.lemmas (full: false)
0.318[zip.env] apply generating rule avatar_check_sat (full: false)
0.318[zip.avatar] SAT-solver reports "SAT"
0.318[zip.saturate] inferred new clauses: []
0.318[zip.sup] @[neg_reflect did not simplify the clause @]
0.318[zip.sup] @[neg_reflect did not simplify the clause @]
0.318[zip.saturate] ### step   232 ###
0.318[zip.saturate]
    given (232 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7`
0.318[zip.env] apply binary rule superposition_active
0.318[zip.env] apply binary rule superposition_passive
0.318[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.319[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8
0.319[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.319[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) c (f d)+* ∨ cQ_2 X1 c X0+*]/id:253/depth:8
0.319[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.320[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f c)+* ∨ cQ_2 X0 c c+*]/id:254/depth:8
0.320[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.320[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f b)+* ∨ cQ_2 X0 c b+*]/id:255/depth:8
0.320[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f X1)*]/id:229/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.320[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f a)+* ∨ cQ_2 X0 c a+*]/id:256/depth:8
0.320[zip.env] apply binary rule ctx_narrow
0.320[zip.env] apply binary rule narrow_term_defs
0.320[zip.env] do unary inferences
0.320[zip.env] apply unary rule equality_resolution
0.320[zip.env] apply unary rule equality_factoring
0.320[zip.env] apply unary rule narrow_lit_defs
0.320[zip.env] apply unary rule ind_types.exhaustiveness
0.320[zip.env] apply unary rule ind_types.acyclicity
0.320[zip.env] apply unary rule avatar_check_empty
0.320[zip.env] apply generating rule avatar.lemmas (full: false)
0.320[zip.env] apply generating rule avatar_check_sat (full: false)
0.320[zip.avatar] SAT-solver reports "SAT"
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) c (f d)+* ∨ cQ_2 X1 c X0+*]/id:253/depth:8, 
       forall X0. [¬cQ_1 (f d) c (f c)+* ∨ cQ_2 X0 c c+*]/id:254/depth:8, 
       forall X0. [¬cQ_1 (f d) c (f b)+* ∨ cQ_2 X0 c b+*]/id:255/depth:8, 
       forall X0. [¬cQ_1 (f d) c (f a)+* ∨ cQ_2 X0 c a+*]/id:256/depth:8]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.sup] @[neg_reflect did not simplify the clause @]
0.321[zip.saturate] ### step   233 ###
0.321[zip.saturate]
    given (233 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) c (f d)+* ∨ cQ_2 X1 c X0+*]/id:253/depth:8`
0.322[zip.env] apply binary rule superposition_active
0.322[zip.env] apply binary rule superposition_passive
0.322[zip.env] apply binary rule ctx_narrow
0.322[zip.env] apply binary rule narrow_term_defs
0.322[zip.env] do unary inferences
0.322[zip.env] apply unary rule equality_resolution
0.322[zip.env] apply unary rule equality_factoring
0.322[zip.env] apply unary rule narrow_lit_defs
0.322[zip.env] apply unary rule ind_types.exhaustiveness
0.322[zip.env] apply unary rule ind_types.acyclicity
0.322[zip.env] apply unary rule avatar_check_empty
0.322[zip.env] apply generating rule avatar.lemmas (full: false)
0.322[zip.env] apply generating rule avatar_check_sat (full: false)
0.322[zip.avatar] SAT-solver reports "SAT"
0.322[zip.saturate] inferred new clauses: []
0.322[zip.sup] @[neg_reflect did not simplify the clause @]
0.322[zip.sup] @[neg_reflect did not simplify the clause @]
0.322[zip.saturate] ### step   234 ###
0.322[zip.saturate]
    given (234 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f c)+* ∨ cQ_2 X0 c c+*]/id:254/depth:8`
0.323[zip.env] apply binary rule superposition_active
0.323[zip.env] apply binary rule superposition_passive
0.323[zip.env] apply binary rule ctx_narrow
0.323[zip.env] apply binary rule narrow_term_defs
0.323[zip.env] do unary inferences
0.323[zip.env] apply unary rule equality_resolution
0.323[zip.env] apply unary rule equality_factoring
0.323[zip.env] apply unary rule narrow_lit_defs
0.323[zip.env] apply unary rule ind_types.exhaustiveness
0.323[zip.env] apply unary rule ind_types.acyclicity
0.323[zip.env] apply unary rule avatar_check_empty
0.323[zip.env] apply generating rule avatar.lemmas (full: false)
0.323[zip.env] apply generating rule avatar_check_sat (full: false)
0.323[zip.avatar] SAT-solver reports "SAT"
0.323[zip.saturate] inferred new clauses: []
0.323[zip.sup] @[neg_reflect did not simplify the clause @]
0.323[zip.sup] @[neg_reflect did not simplify the clause @]
0.323[zip.saturate] ### step   235 ###
0.323[zip.saturate]
    given (235 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f b)+* ∨ cQ_2 X0 c b+*]/id:255/depth:8`
0.324[zip.env] apply binary rule superposition_active
0.324[zip.env] apply binary rule superposition_passive
0.324[zip.env] apply binary rule ctx_narrow
0.324[zip.env] apply binary rule narrow_term_defs
0.324[zip.env] do unary inferences
0.324[zip.env] apply unary rule equality_resolution
0.324[zip.env] apply unary rule equality_factoring
0.324[zip.env] apply unary rule narrow_lit_defs
0.324[zip.env] apply unary rule ind_types.exhaustiveness
0.324[zip.env] apply unary rule ind_types.acyclicity
0.324[zip.env] apply unary rule avatar_check_empty
0.324[zip.env] apply generating rule avatar.lemmas (full: false)
0.324[zip.env] apply generating rule avatar_check_sat (full: false)
0.324[zip.avatar] SAT-solver reports "SAT"
0.324[zip.saturate] inferred new clauses: []
0.324[zip.sup] @[neg_reflect did not simplify the clause @]
0.324[zip.sup] @[neg_reflect did not simplify the clause @]
0.324[zip.saturate] ### step   236 ###
0.324[zip.saturate]
    given (236 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f a)+* ∨ cQ_2 X0 c a+*]/id:256/depth:8`
0.324[zip.env] apply binary rule superposition_active
0.324[zip.env] apply binary rule superposition_passive
0.324[zip.env] apply binary rule ctx_narrow
0.324[zip.env] apply binary rule narrow_term_defs
0.324[zip.env] do unary inferences
0.324[zip.env] apply unary rule equality_resolution
0.324[zip.env] apply unary rule equality_factoring
0.324[zip.env] apply unary rule narrow_lit_defs
0.324[zip.env] apply unary rule ind_types.exhaustiveness
0.324[zip.env] apply unary rule ind_types.acyclicity
0.324[zip.env] apply unary rule avatar_check_empty
0.324[zip.env] apply generating rule avatar.lemmas (full: false)
0.324[zip.env] apply generating rule avatar_check_sat (full: false)
0.324[zip.avatar] SAT-solver reports "SAT"
0.324[zip.saturate] inferred new clauses: []
0.325[zip.sup] @[neg_reflect did not simplify the clause @]
0.325[zip.sup] @[neg_reflect did not simplify the clause @]
0.325[zip.saturate] ### step   237 ###
0.325[zip.saturate]
    given (237 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7`
0.325[zip.env] apply binary rule superposition_active
0.325[zip.env] apply binary rule superposition_passive
0.325[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.326[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8
0.326[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.326[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) c (f d)+* ∨ cQ_2 c c X0+*]/id:258/depth:8
0.326[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.327[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f c)+* ∨ cQ_2 c c c+]/id:259/depth:8
0.327[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.327[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f b)+* ∨ cQ_2 c c b+]/id:260/depth:8
0.327[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f X1)*]/id:235/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.327[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f a)+* ∨ cQ_2 c c a+]/id:261/depth:8
0.327[zip.env] apply binary rule ctx_narrow
0.327[zip.env] apply binary rule narrow_term_defs
0.327[zip.env] do unary inferences
0.327[zip.env] apply unary rule equality_resolution
0.327[zip.env] apply unary rule equality_factoring
0.327[zip.env] apply unary rule narrow_lit_defs
0.327[zip.env] apply unary rule ind_types.exhaustiveness
0.327[zip.env] apply unary rule ind_types.acyclicity
0.327[zip.env] apply unary rule avatar_check_empty
0.327[zip.env] apply generating rule avatar.lemmas (full: false)
0.327[zip.env] apply generating rule avatar_check_sat (full: false)
0.327[zip.avatar] SAT-solver reports "SAT"
0.327[zip.sup] @[neg_reflect did not simplify the clause @]
0.328[zip.sup] @[neg_reflect did not simplify the clause @]
0.328[zip.sup] @[neg_reflect did not simplify the clause @]
0.328[zip.sup] @[neg_reflect did not simplify the clause @]
0.328[zip.sup] @[neg_reflect did not simplify the clause @]
0.328[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8, 
       forall X0. [¬cQ_1 (f c) c (f d)+* ∨ cQ_2 c c X0+*]/id:258/depth:8, 
       [¬cQ_1 (f c) c (f c)+* ∨ cQ_2 c c c+]/id:259/depth:8, 
       [¬cQ_1 (f c) c (f b)+* ∨ cQ_2 c c b+]/id:260/depth:8, 
       [¬cQ_1 (f c) c (f a)+* ∨ cQ_2 c c a+]/id:261/depth:8]
0.328[zip.sup] @[neg_reflect did not simplify the clause @]
0.329[zip.sup] @[neg_reflect did not simplify the clause @]
0.329[zip.saturate] ### step   238 ###
0.329[zip.saturate]
    given (238 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) c (f d)+* ∨ cQ_2 c c X0+*]/id:258/depth:8`
0.329[zip.env] apply binary rule superposition_active
0.329[zip.env] apply binary rule superposition_passive
0.329[zip.env] apply binary rule ctx_narrow
0.329[zip.env] apply binary rule narrow_term_defs
0.329[zip.env] do unary inferences
0.329[zip.env] apply unary rule equality_resolution
0.329[zip.env] apply unary rule equality_factoring
0.329[zip.env] apply unary rule narrow_lit_defs
0.329[zip.env] apply unary rule ind_types.exhaustiveness
0.329[zip.env] apply unary rule ind_types.acyclicity
0.329[zip.env] apply unary rule avatar_check_empty
0.329[zip.env] apply generating rule avatar.lemmas (full: false)
0.329[zip.env] apply generating rule avatar_check_sat (full: false)
0.329[zip.avatar] SAT-solver reports "SAT"
0.329[zip.saturate] inferred new clauses: []
0.329[zip.sup] @[neg_reflect did not simplify the clause @]
0.329[zip.sup] @[neg_reflect did not simplify the clause @]
0.330[zip.saturate] ### step   239 ###
0.330[zip.saturate]
    given (239 steps, penalty 1):
      `[¬cQ_1 (f c) c (f c)+* ∨ cQ_2 c c c+]/id:259/depth:8`
0.330[zip.env] apply binary rule superposition_active
0.330[zip.env] apply binary rule superposition_passive
0.330[zip.env] apply binary rule ctx_narrow
0.330[zip.env] apply binary rule narrow_term_defs
0.330[zip.env] do unary inferences
0.330[zip.env] apply unary rule equality_resolution
0.330[zip.env] apply unary rule equality_factoring
0.330[zip.env] apply unary rule narrow_lit_defs
0.330[zip.env] apply unary rule ind_types.exhaustiveness
0.330[zip.env] apply unary rule ind_types.acyclicity
0.330[zip.env] apply unary rule avatar_check_empty
0.330[zip.env] apply generating rule avatar.lemmas (full: false)
0.330[zip.env] apply generating rule avatar_check_sat (full: false)
0.330[zip.avatar] SAT-solver reports "SAT"
0.330[zip.saturate] inferred new clauses: []
0.330[zip.sup] @[neg_reflect did not simplify the clause @]
0.330[zip.sup] @[neg_reflect did not simplify the clause @]
0.331[zip.saturate] ### step   240 ###
0.331[zip.saturate]
    given (240 steps, penalty 1):
      `[¬cQ_1 (f c) c (f b)+* ∨ cQ_2 c c b+]/id:260/depth:8`
0.331[zip.env] apply binary rule superposition_active
0.331[zip.env] apply binary rule superposition_passive
0.331[zip.env] apply binary rule ctx_narrow
0.331[zip.env] apply binary rule narrow_term_defs
0.331[zip.env] do unary inferences
0.331[zip.env] apply unary rule equality_resolution
0.331[zip.env] apply unary rule equality_factoring
0.331[zip.env] apply unary rule narrow_lit_defs
0.331[zip.env] apply unary rule ind_types.exhaustiveness
0.331[zip.env] apply unary rule ind_types.acyclicity
0.331[zip.env] apply unary rule avatar_check_empty
0.331[zip.env] apply generating rule avatar.lemmas (full: false)
0.331[zip.env] apply generating rule avatar_check_sat (full: false)
0.331[zip.avatar] SAT-solver reports "SAT"
0.331[zip.saturate] inferred new clauses: []
0.331[zip.sup] @[neg_reflect did not simplify the clause @]
0.332[zip.sup] @[neg_reflect did not simplify the clause @]
0.332[zip.saturate] ### step   241 ###
0.332[zip.saturate]
    given (241 steps, penalty 1):
      `[¬cQ_1 (f c) c (f a)+* ∨ cQ_2 c c a+]/id:261/depth:8`
0.332[zip.env] apply binary rule superposition_active
0.332[zip.env] apply binary rule superposition_passive
0.332[zip.env] apply binary rule ctx_narrow
0.332[zip.env] apply binary rule narrow_term_defs
0.332[zip.env] do unary inferences
0.332[zip.env] apply unary rule equality_resolution
0.332[zip.env] apply unary rule equality_factoring
0.332[zip.env] apply unary rule narrow_lit_defs
0.332[zip.env] apply unary rule ind_types.exhaustiveness
0.332[zip.env] apply unary rule ind_types.acyclicity
0.332[zip.env] apply unary rule avatar_check_empty
0.332[zip.env] apply generating rule avatar.lemmas (full: false)
0.332[zip.env] apply generating rule avatar_check_sat (full: false)
0.332[zip.avatar] SAT-solver reports "SAT"
0.332[zip.saturate] inferred new clauses: []
0.332[zip.sup] @[neg_reflect did not simplify the clause @]
0.333[zip.sup] @[neg_reflect did not simplify the clause @]
0.333[zip.saturate] ### step   242 ###
0.334[zip.saturate]
    given (242 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7`
0.334[zip.env] apply binary rule superposition_active
0.334[zip.env] apply binary rule superposition_passive
0.334[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.335[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8
0.335[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.335[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) c (f d)+* ∨ cQ_2 b c X0+*]/id:263/depth:8
0.335[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.336[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f c)+* ∨ cQ_2 b c c+]/id:264/depth:8
0.336[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.336[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f b)+* ∨ cQ_2 b c b+]/id:265/depth:8
0.336[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f X1)*]/id:241/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.336[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f a)+* ∨ cQ_2 b c a+]/id:266/depth:8
0.336[zip.env] apply binary rule ctx_narrow
0.336[zip.env] apply binary rule narrow_term_defs
0.336[zip.env] do unary inferences
0.336[zip.env] apply unary rule equality_resolution
0.336[zip.env] apply unary rule equality_factoring
0.336[zip.env] apply unary rule narrow_lit_defs
0.336[zip.env] apply unary rule ind_types.exhaustiveness
0.336[zip.env] apply unary rule ind_types.acyclicity
0.336[zip.env] apply unary rule avatar_check_empty
0.336[zip.env] apply generating rule avatar.lemmas (full: false)
0.336[zip.env] apply generating rule avatar_check_sat (full: false)
0.336[zip.avatar] SAT-solver reports "SAT"
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8, 
       forall X0. [¬cQ_1 (f b) c (f d)+* ∨ cQ_2 b c X0+*]/id:263/depth:8, 
       [¬cQ_1 (f b) c (f c)+* ∨ cQ_2 b c c+]/id:264/depth:8, 
       [¬cQ_1 (f b) c (f b)+* ∨ cQ_2 b c b+]/id:265/depth:8, 
       [¬cQ_1 (f b) c (f a)+* ∨ cQ_2 b c a+]/id:266/depth:8]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.337[zip.sup] @[neg_reflect did not simplify the clause @]
0.338[zip.saturate] ### step   243 ###
0.338[zip.saturate]
    given (243 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) c (f d)+* ∨ cQ_2 b c X0+*]/id:263/depth:8`
0.338[zip.env] apply binary rule superposition_active
0.338[zip.env] apply binary rule superposition_passive
0.338[zip.env] apply binary rule ctx_narrow
0.338[zip.env] apply binary rule narrow_term_defs
0.338[zip.env] do unary inferences
0.338[zip.env] apply unary rule equality_resolution
0.338[zip.env] apply unary rule equality_factoring
0.338[zip.env] apply unary rule narrow_lit_defs
0.338[zip.env] apply unary rule ind_types.exhaustiveness
0.338[zip.env] apply unary rule ind_types.acyclicity
0.338[zip.env] apply unary rule avatar_check_empty
0.338[zip.env] apply generating rule avatar.lemmas (full: false)
0.338[zip.env] apply generating rule avatar_check_sat (full: false)
0.338[zip.avatar] SAT-solver reports "SAT"
0.338[zip.saturate] inferred new clauses: []
0.338[zip.sup] @[neg_reflect did not simplify the clause @]
0.338[zip.sup] @[neg_reflect did not simplify the clause @]
0.339[zip.saturate] ### step   244 ###
0.339[zip.saturate]
    given (244 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4`
0.339[zip.env] apply binary rule superposition_active
0.339[zip.env] apply binary rule superposition_passive
0.339[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.339[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 (f (f X1)) b X3*]/id:267/depth:5
0.340[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.340[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 X0 b X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) b X2*]/id:268/depth:5
0.340[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.340[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 c b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) b X1*]/id:269/depth:5
0.341[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.341[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 b b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) b X1*]/id:270/depth:5
0.341[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.342[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 a b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) b X1*]/id:271/depth:5
0.342[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) b X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 b X3+*]/id:39/depth:4[0] passive_lit=cQ_2 X0 b X3 p=3.←.ε)
      with subst={X0[0] → a[1], X0[1] → X3[0]}.

0.342[zip.sup] will yield a tautology
0.342[zip.sup] ... cancel, will yield a tautology
0.342[zip.env] apply binary rule ctx_narrow
0.342[zip.env] apply binary rule narrow_term_defs
0.342[zip.env] do unary inferences
0.342[zip.env] apply unary rule equality_resolution
0.342[zip.env] apply unary rule equality_factoring
0.342[zip.env] apply unary rule narrow_lit_defs
0.342[zip.env] apply unary rule ind_types.exhaustiveness
0.342[zip.env] apply unary rule ind_types.acyclicity
0.342[zip.env] apply unary rule avatar_check_empty
0.342[zip.env] apply generating rule avatar.lemmas (full: false)
0.342[zip.env] apply generating rule avatar_check_sat (full: false)
0.342[zip.avatar] SAT-solver reports "SAT"
0.342[zip.sup] @[neg_reflect did not simplify the clause @]
0.343[zip.sup] @[neg_reflect did not simplify the clause @]
0.343[zip.sup] @[neg_reflect did not simplify the clause @]
0.343[zip.sup] @[neg_reflect did not simplify the clause @]
0.343[zip.sup] @[neg_reflect did not simplify the clause @]
0.343[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 b X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 (f (f X1)) b X3*]/id:267/depth:5, 
       forall X0 X1 X2.
       [cQ_2 X0 b X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) b X2*]/id:268/depth:5, 
       forall X0 X1.
       [cQ_2 c b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) b X1*]/id:269/depth:5, 
       forall X0 X1.
       [cQ_2 b b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) b X1*]/id:270/depth:5, 
       forall X0 X1.
       [cQ_2 a b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) b X1*]/id:271/depth:5]
0.343[zip.sup] @[neg_reflect did not simplify the clause @]
0.344[zip.sup] @[neg_reflect did not simplify the clause @]
0.344[zip.saturate] ### step   245 ###
0.344[zip.saturate]
    given (245 steps, penalty 1):
      `[¬cQ_1 (f b) c (f c)+* ∨ cQ_2 b c c+]/id:264/depth:8`
0.344[zip.env] apply binary rule superposition_active
0.344[zip.env] apply binary rule superposition_passive
0.344[zip.env] apply binary rule ctx_narrow
0.344[zip.env] apply binary rule narrow_term_defs
0.344[zip.env] do unary inferences
0.344[zip.env] apply unary rule equality_resolution
0.344[zip.env] apply unary rule equality_factoring
0.344[zip.env] apply unary rule narrow_lit_defs
0.344[zip.env] apply unary rule ind_types.exhaustiveness
0.344[zip.env] apply unary rule ind_types.acyclicity
0.344[zip.env] apply unary rule avatar_check_empty
0.344[zip.env] apply generating rule avatar.lemmas (full: false)
0.344[zip.env] apply generating rule avatar_check_sat (full: false)
0.344[zip.avatar] SAT-solver reports "SAT"
0.344[zip.saturate] inferred new clauses: []
0.344[zip.sup] @[neg_reflect did not simplify the clause @]
0.344[zip.sup] @[neg_reflect did not simplify the clause @]
0.345[zip.saturate] ### step   246 ###
0.345[zip.saturate]
    given (246 steps, penalty 1):
      `[¬cQ_1 (f b) c (f b)+* ∨ cQ_2 b c b+]/id:265/depth:8`
0.345[zip.env] apply binary rule superposition_active
0.345[zip.env] apply binary rule superposition_passive
0.345[zip.env] apply binary rule ctx_narrow
0.345[zip.env] apply binary rule narrow_term_defs
0.345[zip.env] do unary inferences
0.345[zip.env] apply unary rule equality_resolution
0.345[zip.env] apply unary rule equality_factoring
0.345[zip.env] apply unary rule narrow_lit_defs
0.345[zip.env] apply unary rule ind_types.exhaustiveness
0.345[zip.env] apply unary rule ind_types.acyclicity
0.345[zip.env] apply unary rule avatar_check_empty
0.345[zip.env] apply generating rule avatar.lemmas (full: false)
0.345[zip.env] apply generating rule avatar_check_sat (full: false)
0.345[zip.avatar] SAT-solver reports "SAT"
0.345[zip.saturate] inferred new clauses: []
0.345[zip.sup] @[neg_reflect did not simplify the clause @]
0.345[zip.sup] @[neg_reflect did not simplify the clause @]
0.345[zip.saturate] ### step   247 ###
0.345[zip.saturate]
    given (247 steps, penalty 1):
      `[¬cQ_1 (f b) c (f a)+* ∨ cQ_2 b c a+]/id:266/depth:8`
0.346[zip.env] apply binary rule superposition_active
0.346[zip.env] apply binary rule superposition_passive
0.346[zip.env] apply binary rule ctx_narrow
0.346[zip.env] apply binary rule narrow_term_defs
0.346[zip.env] do unary inferences
0.346[zip.env] apply unary rule equality_resolution
0.346[zip.env] apply unary rule equality_factoring
0.346[zip.env] apply unary rule narrow_lit_defs
0.346[zip.env] apply unary rule ind_types.exhaustiveness
0.346[zip.env] apply unary rule ind_types.acyclicity
0.346[zip.env] apply unary rule avatar_check_empty
0.346[zip.env] apply generating rule avatar.lemmas (full: false)
0.346[zip.env] apply generating rule avatar_check_sat (full: false)
0.346[zip.avatar] SAT-solver reports "SAT"
0.346[zip.saturate] inferred new clauses: []
0.346[zip.sup] @[neg_reflect did not simplify the clause @]
0.346[zip.sup] @[neg_reflect did not simplify the clause @]
0.346[zip.saturate] ### step   248 ###
0.346[zip.saturate]
    given (248 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7`
0.346[zip.env] apply binary rule superposition_active
0.346[zip.env] apply binary rule superposition_passive
0.347[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.347[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8
0.347[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.347[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) c (f d)+* ∨ cQ_2 a c X0+*]/id:273/depth:8
0.347[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.347[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f c)+* ∨ cQ_2 a c c+]/id:274/depth:8
0.348[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.348[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f b)+* ∨ cQ_2 a c b+]/id:275/depth:8
0.348[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f X1)*]/id:247/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.348[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f a)+* ∨ cQ_2 a c a+]/id:276/depth:8
0.348[zip.env] apply binary rule ctx_narrow
0.348[zip.env] apply binary rule narrow_term_defs
0.348[zip.env] do unary inferences
0.348[zip.env] apply unary rule equality_resolution
0.348[zip.env] apply unary rule equality_factoring
0.348[zip.env] apply unary rule narrow_lit_defs
0.348[zip.env] apply unary rule ind_types.exhaustiveness
0.348[zip.env] apply unary rule ind_types.acyclicity
0.348[zip.env] apply unary rule avatar_check_empty
0.348[zip.env] apply generating rule avatar.lemmas (full: false)
0.348[zip.env] apply generating rule avatar_check_sat (full: false)
0.348[zip.avatar] SAT-solver reports "SAT"
0.348[zip.sup] @[neg_reflect did not simplify the clause @]
0.348[zip.sup] @[neg_reflect did not simplify the clause @]
0.348[zip.sup] @[neg_reflect did not simplify the clause @]
0.349[zip.sup] @[neg_reflect did not simplify the clause @]
0.349[zip.sup] @[neg_reflect did not simplify the clause @]
0.349[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8, 
       forall X0. [¬cQ_1 (f a) c (f d)+* ∨ cQ_2 a c X0+*]/id:273/depth:8, 
       [¬cQ_1 (f a) c (f c)+* ∨ cQ_2 a c c+]/id:274/depth:8, 
       [¬cQ_1 (f a) c (f b)+* ∨ cQ_2 a c b+]/id:275/depth:8, 
       [¬cQ_1 (f a) c (f a)+* ∨ cQ_2 a c a+]/id:276/depth:8]
0.349[zip.sup] @[neg_reflect did not simplify the clause @]
0.349[zip.sup] @[neg_reflect did not simplify the clause @]
0.350[zip.saturate] ### step   249 ###
0.350[zip.saturate]
    given (249 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) c (f d)+* ∨ cQ_2 a c X0+*]/id:273/depth:8`
0.350[zip.env] apply binary rule superposition_active
0.350[zip.env] apply binary rule superposition_passive
0.350[zip.env] apply binary rule ctx_narrow
0.350[zip.env] apply binary rule narrow_term_defs
0.350[zip.env] do unary inferences
0.350[zip.env] apply unary rule equality_resolution
0.350[zip.env] apply unary rule equality_factoring
0.350[zip.env] apply unary rule narrow_lit_defs
0.350[zip.env] apply unary rule ind_types.exhaustiveness
0.350[zip.env] apply unary rule ind_types.acyclicity
0.350[zip.env] apply unary rule avatar_check_empty
0.350[zip.env] apply generating rule avatar.lemmas (full: false)
0.350[zip.env] apply generating rule avatar_check_sat (full: false)
0.350[zip.avatar] SAT-solver reports "SAT"
0.350[zip.saturate] inferred new clauses: []
0.350[zip.sup] @[neg_reflect did not simplify the clause @]
0.350[zip.sup] @[neg_reflect did not simplify the clause @]
0.351[zip.saturate] ### step   250 ###
0.351[zip.saturate]
    given (250 steps, penalty 1):
      `[¬cQ_1 (f a) c (f c)+* ∨ cQ_2 a c c+]/id:274/depth:8`
0.351[zip.env] apply binary rule superposition_active
0.351[zip.env] apply binary rule superposition_passive
0.351[zip.env] apply binary rule ctx_narrow
0.351[zip.env] apply binary rule narrow_term_defs
0.351[zip.env] do unary inferences
0.351[zip.env] apply unary rule equality_resolution
0.351[zip.env] apply unary rule equality_factoring
0.351[zip.env] apply unary rule narrow_lit_defs
0.351[zip.env] apply unary rule ind_types.exhaustiveness
0.351[zip.env] apply unary rule ind_types.acyclicity
0.351[zip.env] apply unary rule avatar_check_empty
0.351[zip.env] apply generating rule avatar.lemmas (full: false)
0.351[zip.env] apply generating rule avatar_check_sat (full: false)
0.351[zip.avatar] SAT-solver reports "SAT"
0.351[zip.saturate] inferred new clauses: []
0.351[zip.sup] @[neg_reflect did not simplify the clause @]
0.351[zip.sup] @[neg_reflect did not simplify the clause @]
0.351[zip.saturate] ### step   251 ###
0.351[zip.saturate]
    given (251 steps, penalty 1):
      `[¬cQ_1 (f a) c (f b)+* ∨ cQ_2 a c b+]/id:275/depth:8`
0.352[zip.env] apply binary rule superposition_active
0.352[zip.env] apply binary rule superposition_passive
0.352[zip.env] apply binary rule ctx_narrow
0.352[zip.env] apply binary rule narrow_term_defs
0.352[zip.env] do unary inferences
0.352[zip.env] apply unary rule equality_resolution
0.352[zip.env] apply unary rule equality_factoring
0.352[zip.env] apply unary rule narrow_lit_defs
0.352[zip.env] apply unary rule ind_types.exhaustiveness
0.352[zip.env] apply unary rule ind_types.acyclicity
0.352[zip.env] apply unary rule avatar_check_empty
0.352[zip.env] apply generating rule avatar.lemmas (full: false)
0.352[zip.env] apply generating rule avatar_check_sat (full: false)
0.352[zip.avatar] SAT-solver reports "SAT"
0.352[zip.saturate] inferred new clauses: []
0.352[zip.sup] @[neg_reflect did not simplify the clause @]
0.352[zip.sup] @[neg_reflect did not simplify the clause @]
0.352[zip.saturate] ### step   252 ###
0.352[zip.saturate]
    given (252 steps, penalty 1):
      `[¬cQ_1 (f a) c (f a)+* ∨ cQ_2 a c a+]/id:276/depth:8`
0.353[zip.env] apply binary rule superposition_active
0.353[zip.env] apply binary rule superposition_passive
0.353[zip.env] apply binary rule ctx_narrow
0.353[zip.env] apply binary rule narrow_term_defs
0.353[zip.env] do unary inferences
0.353[zip.env] apply unary rule equality_resolution
0.353[zip.env] apply unary rule equality_factoring
0.353[zip.env] apply unary rule narrow_lit_defs
0.353[zip.env] apply unary rule ind_types.exhaustiveness
0.353[zip.env] apply unary rule ind_types.acyclicity
0.353[zip.env] apply unary rule avatar_check_empty
0.353[zip.env] apply generating rule avatar.lemmas (full: false)
0.353[zip.env] apply generating rule avatar_check_sat (full: false)
0.353[zip.avatar] SAT-solver reports "SAT"
0.353[zip.saturate] inferred new clauses: []
0.353[zip.sup] @[neg_reflect did not simplify the clause @]
0.353[zip.sup] @[neg_reflect did not simplify the clause @]
0.353[zip.saturate] ### step   253 ###
0.353[zip.saturate]
    given (253 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 X0 b X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) b X2*]/id:268/depth:5`
0.354[zip.env] apply binary rule superposition_active
0.354[zip.env] apply binary rule superposition_passive
0.354[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [cQ_2 X0 b X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) b X2*]/id:268/depth:5[0]
         passive_lit=cQ_2 X0 b X1 p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → X1[0]}.

0.354[zip.sup] will yield a tautology
0.354[zip.sup] ... cancel, will yield a tautology
0.354[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 X0 b X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) b X2*]/id:268/depth:5[0]
         passive_lit=¬cP_1 (f X2) X1 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X1[0]}.

0.354[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6
0.354[zip.env] apply binary rule ctx_narrow
0.354[zip.env] apply binary rule narrow_term_defs
0.354[zip.env] do unary inferences
0.354[zip.env] apply unary rule equality_resolution
0.354[zip.env] apply unary rule equality_factoring
0.354[zip.env] apply unary rule narrow_lit_defs
0.354[zip.env] apply unary rule ind_types.exhaustiveness
0.354[zip.env] apply unary rule ind_types.acyclicity
0.354[zip.env] apply unary rule avatar_check_empty
0.354[zip.env] apply generating rule avatar.lemmas (full: false)
0.354[zip.env] apply generating rule avatar_check_sat (full: false)
0.354[zip.avatar] SAT-solver reports "SAT"
0.354[zip.sup] @[neg_reflect did not simplify the clause @]
0.354[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6]
0.354[zip.sup] @[neg_reflect did not simplify the clause @]
0.355[zip.sup] @[neg_reflect did not simplify the clause @]
0.355[zip.saturate] ### step   254 ###
0.355[zip.saturate]
    given (254 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6`
0.355[zip.env] apply binary rule superposition_active
0.355[zip.env] apply binary rule superposition_passive
0.355[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.355[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7
0.355[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.356[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b d+*]/id:279/depth:7
0.356[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.356[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b c+*]/id:280/depth:7
0.356[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.356[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b b+*]/id:281/depth:7
0.356[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.356[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b a+*]/id:282/depth:7
0.356[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b X1* ∨ cQ_2 X2 b X0+*]/id:277/depth:6[0]
         passive_lit=cQ_2 X2 b X0 p=2.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.356[zip.sup] will yield a tautology
0.356[zip.sup] ... cancel, will yield a tautology
0.356[zip.env] apply binary rule ctx_narrow
0.356[zip.env] apply binary rule narrow_term_defs
0.357[zip.env] do unary inferences
0.357[zip.env] apply unary rule equality_resolution
0.357[zip.env] apply unary rule equality_factoring
0.357[zip.env] apply unary rule narrow_lit_defs
0.357[zip.env] apply unary rule ind_types.exhaustiveness
0.357[zip.env] apply unary rule ind_types.acyclicity
0.357[zip.env] apply unary rule avatar_check_empty
0.357[zip.env] apply generating rule avatar.lemmas (full: false)
0.357[zip.env] apply generating rule avatar_check_sat (full: false)
0.357[zip.avatar] SAT-solver reports "SAT"
0.357[zip.sup] @[neg_reflect did not simplify the clause @]
0.357[zip.sup] @[neg_reflect did not simplify the clause @]
0.357[zip.sup] @[neg_reflect did not simplify the clause @]
0.357[zip.sup] @[neg_reflect did not simplify the clause @]
0.357[zip.sup] @[neg_reflect did not simplify the clause @]
0.357[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7, 
       forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b d+*]/id:279/depth:7, 
       forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b c+*]/id:280/depth:7, 
       forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b b+*]/id:281/depth:7, 
       forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b a+*]/id:282/depth:7]
0.358[zip.sup] @[neg_reflect did not simplify the clause @]
0.358[zip.sup] @[neg_reflect did not simplify the clause @]
0.358[zip.saturate] ### step   255 ###
0.358[zip.saturate]
    given (255 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b d+*]/id:279/depth:7`
0.358[zip.env] apply binary rule superposition_active
0.358[zip.env] apply binary rule superposition_passive
0.358[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b d+*]/id:279/depth:7[0]
         passive_lit=cQ_2 X1 b X0 p=0.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.358[zip.sup] will yield a tautology
0.358[zip.sup] ... cancel, will yield a tautology
0.358[zip.env] apply binary rule ctx_narrow
0.358[zip.env] apply binary rule narrow_term_defs
0.358[zip.env] do unary inferences
0.358[zip.env] apply unary rule equality_resolution
0.358[zip.env] apply unary rule equality_factoring
0.358[zip.env] apply unary rule narrow_lit_defs
0.358[zip.env] apply unary rule ind_types.exhaustiveness
0.358[zip.env] apply unary rule ind_types.acyclicity
0.358[zip.env] apply unary rule avatar_check_empty
0.358[zip.env] apply generating rule avatar.lemmas (full: false)
0.358[zip.env] apply generating rule avatar_check_sat (full: false)
0.358[zip.avatar] SAT-solver reports "SAT"
0.358[zip.saturate] inferred new clauses: []
0.358[zip.sup] @[neg_reflect did not simplify the clause @]
0.358[zip.sup] @[neg_reflect did not simplify the clause @]
0.358[zip.saturate] ### step   256 ###
0.358[zip.saturate]
    given (256 steps, penalty 1):
      `forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b c+*]/id:280/depth:7`
0.359[zip.env] apply binary rule superposition_active
0.359[zip.env] apply binary rule superposition_passive
0.359[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b c+*]/id:280/depth:7[0]
         passive_lit=cQ_2 X0 b c p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.359[zip.sup] will yield a tautology
0.359[zip.sup] ... cancel, will yield a tautology
0.359[zip.env] apply binary rule ctx_narrow
0.359[zip.env] apply binary rule narrow_term_defs
0.359[zip.env] do unary inferences
0.359[zip.env] apply unary rule equality_resolution
0.359[zip.env] apply unary rule equality_factoring
0.359[zip.env] apply unary rule narrow_lit_defs
0.359[zip.env] apply unary rule ind_types.exhaustiveness
0.359[zip.env] apply unary rule ind_types.acyclicity
0.359[zip.env] apply unary rule avatar_check_empty
0.359[zip.env] apply generating rule avatar.lemmas (full: false)
0.359[zip.env] apply generating rule avatar_check_sat (full: false)
0.359[zip.avatar] SAT-solver reports "SAT"
0.359[zip.saturate] inferred new clauses: []
0.359[zip.sup] @[neg_reflect did not simplify the clause @]
0.359[zip.sup] @[neg_reflect did not simplify the clause @]
0.359[zip.saturate] ### step   257 ###
0.359[zip.saturate]
    given (257 steps, penalty 1):
      `forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b b+*]/id:281/depth:7`
0.359[zip.env] apply binary rule superposition_active
0.359[zip.env] apply binary rule superposition_passive
0.359[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b b+*]/id:281/depth:7[0]
         passive_lit=cQ_2 X0 b b p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.359[zip.sup] will yield a tautology
0.359[zip.sup] ... cancel, will yield a tautology
0.359[zip.env] apply binary rule ctx_narrow
0.359[zip.env] apply binary rule narrow_term_defs
0.359[zip.env] do unary inferences
0.359[zip.env] apply unary rule equality_resolution
0.359[zip.env] apply unary rule equality_factoring
0.359[zip.env] apply unary rule narrow_lit_defs
0.359[zip.env] apply unary rule ind_types.exhaustiveness
0.359[zip.env] apply unary rule ind_types.acyclicity
0.359[zip.env] apply unary rule avatar_check_empty
0.359[zip.env] apply generating rule avatar.lemmas (full: false)
0.360[zip.env] apply generating rule avatar_check_sat (full: false)
0.360[zip.avatar] SAT-solver reports "SAT"
0.360[zip.saturate] inferred new clauses: []
0.360[zip.sup] @[neg_reflect did not simplify the clause @]
0.360[zip.sup] @[neg_reflect did not simplify the clause @]
0.360[zip.saturate] ### step   258 ###
0.360[zip.saturate]
    given (258 steps, penalty 1):
      `forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b a+*]/id:282/depth:7`
0.360[zip.env] apply binary rule superposition_active
0.360[zip.env] apply binary rule superposition_passive
0.360[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b a+*]/id:282/depth:7[0]
         passive_lit=cQ_2 X0 b a p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.360[zip.sup] will yield a tautology
0.360[zip.sup] ... cancel, will yield a tautology
0.360[zip.env] apply binary rule ctx_narrow
0.360[zip.env] apply binary rule narrow_term_defs
0.360[zip.env] do unary inferences
0.360[zip.env] apply unary rule equality_resolution
0.360[zip.env] apply unary rule equality_factoring
0.360[zip.env] apply unary rule narrow_lit_defs
0.360[zip.env] apply unary rule ind_types.exhaustiveness
0.360[zip.env] apply unary rule ind_types.acyclicity
0.360[zip.env] apply unary rule avatar_check_empty
0.360[zip.env] apply generating rule avatar.lemmas (full: false)
0.360[zip.env] apply generating rule avatar_check_sat (full: false)
0.360[zip.avatar] SAT-solver reports "SAT"
0.360[zip.saturate] inferred new clauses: []
0.360[zip.sup] @[neg_reflect did not simplify the clause @]
0.360[zip.sup] @[neg_reflect did not simplify the clause @]
0.360[zip.saturate] ### step   259 ###
0.360[zip.saturate]
    given (259 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 c b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) b X1*]/id:269/depth:5`
0.361[zip.env] apply binary rule superposition_active
0.361[zip.env] apply binary rule superposition_passive
0.361[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 c b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) b X1*]/id:269/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.361[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6
0.361[zip.env] apply binary rule ctx_narrow
0.361[zip.env] apply binary rule narrow_term_defs
0.361[zip.env] do unary inferences
0.361[zip.env] apply unary rule equality_resolution
0.361[zip.env] apply unary rule equality_factoring
0.361[zip.env] apply unary rule narrow_lit_defs
0.361[zip.env] apply unary rule ind_types.exhaustiveness
0.361[zip.env] apply unary rule ind_types.acyclicity
0.361[zip.env] apply unary rule avatar_check_empty
0.361[zip.env] apply generating rule avatar.lemmas (full: false)
0.361[zip.env] apply generating rule avatar_check_sat (full: false)
0.361[zip.avatar] SAT-solver reports "SAT"
0.361[zip.sup] @[neg_reflect did not simplify the clause @]
0.361[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6]
0.361[zip.sup] @[neg_reflect did not simplify the clause @]
0.361[zip.sup] @[neg_reflect did not simplify the clause @]
0.361[zip.saturate] ### step   260 ###
0.361[zip.saturate]
    given (260 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6`
0.362[zip.env] apply binary rule superposition_active
0.362[zip.env] apply binary rule superposition_passive
0.362[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.362[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7
0.362[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.362[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b d+*]/id:285/depth:7
0.362[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.362[zip.sup]
    ... ok, conclusion [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b c+*]/id:286/depth:7
0.362[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.362[zip.sup]
    ... ok, conclusion [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b b+*]/id:287/depth:7
0.362[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b X1* ∨ cQ_2 c b X0+*]/id:283/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.363[zip.sup]
    ... ok, conclusion [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b a+*]/id:288/depth:7
0.363[zip.env] apply binary rule ctx_narrow
0.363[zip.env] apply binary rule narrow_term_defs
0.363[zip.env] do unary inferences
0.363[zip.env] apply unary rule equality_resolution
0.363[zip.env] apply unary rule equality_factoring
0.363[zip.env] apply unary rule narrow_lit_defs
0.363[zip.env] apply unary rule ind_types.exhaustiveness
0.363[zip.env] apply unary rule ind_types.acyclicity
0.363[zip.env] apply unary rule avatar_check_empty
0.363[zip.env] apply generating rule avatar.lemmas (full: false)
0.363[zip.env] apply generating rule avatar_check_sat (full: false)
0.363[zip.avatar] SAT-solver reports "SAT"
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7, 
       forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b d+*]/id:285/depth:7, 
       [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b c+*]/id:286/depth:7, 
       [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b b+*]/id:287/depth:7, 
       [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b a+*]/id:288/depth:7]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.sup] @[neg_reflect did not simplify the clause @]
0.363[zip.saturate] ### step   261 ###
0.363[zip.saturate]
    given (261 steps, penalty 1):
      `forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b d+*]/id:285/depth:7`
0.364[zip.env] apply binary rule superposition_active
0.364[zip.env] apply binary rule superposition_passive
0.364[zip.env] apply binary rule ctx_narrow
0.364[zip.env] apply binary rule narrow_term_defs
0.364[zip.env] do unary inferences
0.364[zip.env] apply unary rule equality_resolution
0.364[zip.env] apply unary rule equality_factoring
0.364[zip.env] apply unary rule narrow_lit_defs
0.364[zip.env] apply unary rule ind_types.exhaustiveness
0.364[zip.env] apply unary rule ind_types.acyclicity
0.364[zip.env] apply unary rule avatar_check_empty
0.364[zip.env] apply generating rule avatar.lemmas (full: false)
0.364[zip.env] apply generating rule avatar_check_sat (full: false)
0.364[zip.avatar] SAT-solver reports "SAT"
0.364[zip.saturate] inferred new clauses: []
0.364[zip.sup] @[neg_reflect did not simplify the clause @]
0.364[zip.sup] @[neg_reflect did not simplify the clause @]
0.364[zip.saturate] ### step   262 ###
0.364[zip.saturate]
    given (262 steps, penalty 1):
      `[cQ_2 c b c+ ∨ ¬cQ_1 (f c) b c+*]/id:286/depth:7`
0.364[zip.env] apply binary rule superposition_active
0.364[zip.env] apply binary rule superposition_passive
0.364[zip.env] apply binary rule ctx_narrow
0.364[zip.env] apply binary rule narrow_term_defs
0.364[zip.env] do unary inferences
0.364[zip.env] apply unary rule equality_resolution
0.364[zip.env] apply unary rule equality_factoring
0.364[zip.env] apply unary rule narrow_lit_defs
0.364[zip.env] apply unary rule ind_types.exhaustiveness
0.364[zip.env] apply unary rule ind_types.acyclicity
0.364[zip.env] apply unary rule avatar_check_empty
0.364[zip.env] apply generating rule avatar.lemmas (full: false)
0.364[zip.env] apply generating rule avatar_check_sat (full: false)
0.364[zip.avatar] SAT-solver reports "SAT"
0.364[zip.saturate] inferred new clauses: []
0.364[zip.sup] @[neg_reflect did not simplify the clause @]
0.364[zip.sup] @[neg_reflect did not simplify the clause @]
0.364[zip.saturate] ### step   263 ###
0.364[zip.saturate]
    given (263 steps, penalty 1):
      `[cQ_2 c b b+ ∨ ¬cQ_1 (f c) b b+*]/id:287/depth:7`
0.365[zip.env] apply binary rule superposition_active
0.365[zip.env] apply binary rule superposition_passive
0.365[zip.env] apply binary rule ctx_narrow
0.365[zip.env] apply binary rule narrow_term_defs
0.365[zip.env] do unary inferences
0.365[zip.env] apply unary rule equality_resolution
0.365[zip.env] apply unary rule equality_factoring
0.365[zip.env] apply unary rule narrow_lit_defs
0.365[zip.env] apply unary rule ind_types.exhaustiveness
0.365[zip.env] apply unary rule ind_types.acyclicity
0.365[zip.env] apply unary rule avatar_check_empty
0.365[zip.env] apply generating rule avatar.lemmas (full: false)
0.365[zip.env] apply generating rule avatar_check_sat (full: false)
0.365[zip.avatar] SAT-solver reports "SAT"
0.365[zip.saturate] inferred new clauses: []
0.365[zip.sup] @[neg_reflect did not simplify the clause @]
0.365[zip.sup] @[neg_reflect did not simplify the clause @]
0.365[zip.saturate] ### step   264 ###
0.365[zip.saturate]
    given (264 steps, penalty 1):
      `[cQ_2 c b a+ ∨ ¬cQ_1 (f c) b a+*]/id:288/depth:7`
0.365[zip.env] apply binary rule superposition_active
0.365[zip.env] apply binary rule superposition_passive
0.365[zip.env] apply binary rule ctx_narrow
0.365[zip.env] apply binary rule narrow_term_defs
0.365[zip.env] do unary inferences
0.365[zip.env] apply unary rule equality_resolution
0.365[zip.env] apply unary rule equality_factoring
0.365[zip.env] apply unary rule narrow_lit_defs
0.365[zip.env] apply unary rule ind_types.exhaustiveness
0.365[zip.env] apply unary rule ind_types.acyclicity
0.365[zip.env] apply unary rule avatar_check_empty
0.365[zip.env] apply generating rule avatar.lemmas (full: false)
0.365[zip.env] apply generating rule avatar_check_sat (full: false)
0.365[zip.avatar] SAT-solver reports "SAT"
0.365[zip.saturate] inferred new clauses: []
0.366[zip.sup] @[neg_reflect did not simplify the clause @]
0.366[zip.sup] @[neg_reflect did not simplify the clause @]
0.366[zip.saturate] ### step   265 ###
0.366[zip.saturate]
    given (265 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 b b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) b X1*]/id:270/depth:5`
0.366[zip.env] apply binary rule superposition_active
0.366[zip.env] apply binary rule superposition_passive
0.366[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 b b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) b X1*]/id:270/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.366[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6
0.367[zip.env] apply binary rule ctx_narrow
0.367[zip.env] apply binary rule narrow_term_defs
0.367[zip.env] do unary inferences
0.367[zip.env] apply unary rule equality_resolution
0.367[zip.env] apply unary rule equality_factoring
0.367[zip.env] apply unary rule narrow_lit_defs
0.367[zip.env] apply unary rule ind_types.exhaustiveness
0.367[zip.env] apply unary rule ind_types.acyclicity
0.367[zip.env] apply unary rule avatar_check_empty
0.367[zip.env] apply generating rule avatar.lemmas (full: false)
0.367[zip.env] apply generating rule avatar_check_sat (full: false)
0.367[zip.avatar] SAT-solver reports "SAT"
0.367[zip.sup] @[neg_reflect did not simplify the clause @]
0.367[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6]
0.367[zip.sup] @[neg_reflect did not simplify the clause @]
0.367[zip.sup] @[neg_reflect did not simplify the clause @]
0.367[zip.saturate] ### step   266 ###
0.367[zip.saturate]
    given (266 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6`
0.367[zip.env] apply binary rule superposition_active
0.368[zip.env] apply binary rule superposition_passive
0.368[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.368[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7
0.368[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.368[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b d+*]/id:291/depth:7
0.368[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.368[zip.sup]
    ... ok, conclusion [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b c+*]/id:292/depth:7
0.369[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.369[zip.sup]
    ... ok, conclusion [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b b+*]/id:293/depth:7
0.369[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b X1* ∨ cQ_2 b b X0+*]/id:289/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.369[zip.sup]
    ... ok, conclusion [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b a+*]/id:294/depth:7
0.369[zip.env] apply binary rule ctx_narrow
0.369[zip.env] apply binary rule narrow_term_defs
0.369[zip.env] do unary inferences
0.369[zip.env] apply unary rule equality_resolution
0.369[zip.env] apply unary rule equality_factoring
0.369[zip.env] apply unary rule narrow_lit_defs
0.369[zip.env] apply unary rule ind_types.exhaustiveness
0.369[zip.env] apply unary rule ind_types.acyclicity
0.369[zip.env] apply unary rule avatar_check_empty
0.369[zip.env] apply generating rule avatar.lemmas (full: false)
0.369[zip.env] apply generating rule avatar_check_sat (full: false)
0.369[zip.avatar] SAT-solver reports "SAT"
0.369[zip.sup] @[neg_reflect did not simplify the clause @]
0.369[zip.sup] @[neg_reflect did not simplify the clause @]
0.369[zip.sup] @[neg_reflect did not simplify the clause @]
0.369[zip.sup] @[neg_reflect did not simplify the clause @]
0.369[zip.sup] @[neg_reflect did not simplify the clause @]
0.369[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7, 
       forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b d+*]/id:291/depth:7, 
       [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b c+*]/id:292/depth:7, 
       [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b b+*]/id:293/depth:7, 
       [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b a+*]/id:294/depth:7]
0.370[zip.sup] @[neg_reflect did not simplify the clause @]
0.370[zip.sup] @[neg_reflect did not simplify the clause @]
0.370[zip.saturate] ### step   267 ###
0.370[zip.saturate]
    given (267 steps, penalty 1):
      `forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b d+*]/id:291/depth:7`
0.370[zip.env] apply binary rule superposition_active
0.370[zip.env] apply binary rule superposition_passive
0.370[zip.env] apply binary rule ctx_narrow
0.370[zip.env] apply binary rule narrow_term_defs
0.370[zip.env] do unary inferences
0.370[zip.env] apply unary rule equality_resolution
0.370[zip.env] apply unary rule equality_factoring
0.370[zip.env] apply unary rule narrow_lit_defs
0.370[zip.env] apply unary rule ind_types.exhaustiveness
0.370[zip.env] apply unary rule ind_types.acyclicity
0.370[zip.env] apply unary rule avatar_check_empty
0.370[zip.env] apply generating rule avatar.lemmas (full: false)
0.370[zip.env] apply generating rule avatar_check_sat (full: false)
0.370[zip.avatar] SAT-solver reports "SAT"
0.370[zip.saturate] inferred new clauses: []
0.370[zip.sup] @[neg_reflect did not simplify the clause @]
0.370[zip.sup] @[neg_reflect did not simplify the clause @]
0.370[zip.saturate] ### step   268 ###
0.370[zip.saturate]
    given (268 steps, penalty 1):
      `[cQ_2 b b c+ ∨ ¬cQ_1 (f b) b c+*]/id:292/depth:7`
0.370[zip.env] apply binary rule superposition_active
0.370[zip.env] apply binary rule superposition_passive
0.370[zip.env] apply binary rule ctx_narrow
0.370[zip.env] apply binary rule narrow_term_defs
0.370[zip.env] do unary inferences
0.371[zip.env] apply unary rule equality_resolution
0.371[zip.env] apply unary rule equality_factoring
0.371[zip.env] apply unary rule narrow_lit_defs
0.371[zip.env] apply unary rule ind_types.exhaustiveness
0.371[zip.env] apply unary rule ind_types.acyclicity
0.371[zip.env] apply unary rule avatar_check_empty
0.371[zip.env] apply generating rule avatar.lemmas (full: false)
0.371[zip.env] apply generating rule avatar_check_sat (full: false)
0.371[zip.avatar] SAT-solver reports "SAT"
0.371[zip.saturate] inferred new clauses: []
0.371[zip.sup] @[neg_reflect did not simplify the clause @]
0.371[zip.sup] @[neg_reflect did not simplify the clause @]
0.371[zip.saturate] ### step   269 ###
0.371[zip.saturate]
    given (269 steps, penalty 1):
      `[cQ_2 b b b+ ∨ ¬cQ_1 (f b) b b+*]/id:293/depth:7`
0.371[zip.env] apply binary rule superposition_active
0.371[zip.env] apply binary rule superposition_passive
0.371[zip.env] apply binary rule ctx_narrow
0.371[zip.env] apply binary rule narrow_term_defs
0.371[zip.env] do unary inferences
0.371[zip.env] apply unary rule equality_resolution
0.371[zip.env] apply unary rule equality_factoring
0.371[zip.env] apply unary rule narrow_lit_defs
0.371[zip.env] apply unary rule ind_types.exhaustiveness
0.371[zip.env] apply unary rule ind_types.acyclicity
0.371[zip.env] apply unary rule avatar_check_empty
0.371[zip.env] apply generating rule avatar.lemmas (full: false)
0.371[zip.env] apply generating rule avatar_check_sat (full: false)
0.371[zip.avatar] SAT-solver reports "SAT"
0.371[zip.saturate] inferred new clauses: []
0.371[zip.sup] @[neg_reflect did not simplify the clause @]
0.371[zip.sup] @[neg_reflect did not simplify the clause @]
0.371[zip.saturate] ### step   270 ###
0.371[zip.saturate]
    given (270 steps, penalty 1):
      `[cQ_2 b b a+ ∨ ¬cQ_1 (f b) b a+*]/id:294/depth:7`
0.372[zip.env] apply binary rule superposition_active
0.372[zip.env] apply binary rule superposition_passive
0.372[zip.env] apply binary rule ctx_narrow
0.372[zip.env] apply binary rule narrow_term_defs
0.372[zip.env] do unary inferences
0.372[zip.env] apply unary rule equality_resolution
0.372[zip.env] apply unary rule equality_factoring
0.372[zip.env] apply unary rule narrow_lit_defs
0.372[zip.env] apply unary rule ind_types.exhaustiveness
0.372[zip.env] apply unary rule ind_types.acyclicity
0.372[zip.env] apply unary rule avatar_check_empty
0.372[zip.env] apply generating rule avatar.lemmas (full: false)
0.372[zip.env] apply generating rule avatar_check_sat (full: false)
0.372[zip.avatar] SAT-solver reports "SAT"
0.372[zip.saturate] inferred new clauses: []
0.372[zip.sup] @[neg_reflect did not simplify the clause @]
0.372[zip.sup] @[neg_reflect did not simplify the clause @]
0.372[zip.saturate] ### step   271 ###
0.372[zip.saturate]
    given (271 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 a b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) b X1*]/id:271/depth:5`
0.372[zip.env] apply binary rule superposition_active
0.372[zip.env] apply binary rule superposition_passive
0.372[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [cQ_2 a b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) b X1*]/id:271/depth:5[0]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.372[zip.sup] will yield a tautology
0.372[zip.sup] ... cancel, will yield a tautology
0.372[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 a b X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) b X1*]/id:271/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.372[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6
0.373[zip.env] apply binary rule ctx_narrow
0.373[zip.env] apply binary rule narrow_term_defs
0.373[zip.env] do unary inferences
0.373[zip.env] apply unary rule equality_resolution
0.373[zip.env] apply unary rule equality_factoring
0.373[zip.env] apply unary rule narrow_lit_defs
0.373[zip.env] apply unary rule ind_types.exhaustiveness
0.373[zip.env] apply unary rule ind_types.acyclicity
0.373[zip.env] apply unary rule avatar_check_empty
0.373[zip.env] apply generating rule avatar.lemmas (full: false)
0.373[zip.env] apply generating rule avatar_check_sat (full: false)
0.373[zip.avatar] SAT-solver reports "SAT"
0.373[zip.sup] @[neg_reflect did not simplify the clause @]
0.373[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6]
0.373[zip.sup] @[neg_reflect did not simplify the clause @]
0.373[zip.sup] @[neg_reflect did not simplify the clause @]
0.373[zip.saturate] ### step   272 ###
0.373[zip.saturate]
    given (272 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6`
0.373[zip.env] apply binary rule superposition_active
0.373[zip.env] apply binary rule superposition_passive
0.373[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.374[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7
0.374[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.374[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b d+*]/id:297/depth:7
0.374[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.374[zip.sup]
    ... ok, conclusion [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b c+*]/id:298/depth:7
0.374[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.374[zip.sup]
    ... ok, conclusion [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b b+*]/id:299/depth:7
0.374[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.374[zip.sup]
    ... ok, conclusion [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b a+*]/id:300/depth:7
0.374[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b X1* ∨ cQ_2 a b X0+*]/id:295/depth:6[0]
         passive_lit=cQ_2 a b X0 p=2.←.ε)
      with subst={X0[1] → X0[0]}.

0.374[zip.sup] will yield a tautology
0.374[zip.sup] ... cancel, will yield a tautology
0.374[zip.env] apply binary rule ctx_narrow
0.374[zip.env] apply binary rule narrow_term_defs
0.374[zip.env] do unary inferences
0.375[zip.env] apply unary rule equality_resolution
0.375[zip.env] apply unary rule equality_factoring
0.375[zip.env] apply unary rule narrow_lit_defs
0.375[zip.env] apply unary rule ind_types.exhaustiveness
0.375[zip.env] apply unary rule ind_types.acyclicity
0.375[zip.env] apply unary rule avatar_check_empty
0.375[zip.env] apply generating rule avatar.lemmas (full: false)
0.375[zip.env] apply generating rule avatar_check_sat (full: false)
0.375[zip.avatar] SAT-solver reports "SAT"
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7, 
       forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b d+*]/id:297/depth:7, 
       [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b c+*]/id:298/depth:7, 
       [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b b+*]/id:299/depth:7, 
       [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b a+*]/id:300/depth:7]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.sup] @[neg_reflect did not simplify the clause @]
0.375[zip.saturate] ### step   273 ###
0.375[zip.saturate]
    given (273 steps, penalty 1):
      `forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b d+*]/id:297/depth:7`
0.375[zip.env] apply binary rule superposition_active
0.375[zip.env] apply binary rule superposition_passive
0.375[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b d+*]/id:297/depth:7[0]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.376[zip.sup] will yield a tautology
0.376[zip.sup] ... cancel, will yield a tautology
0.376[zip.env] apply binary rule ctx_narrow
0.376[zip.env] apply binary rule narrow_term_defs
0.376[zip.env] do unary inferences
0.376[zip.env] apply unary rule equality_resolution
0.376[zip.env] apply unary rule equality_factoring
0.376[zip.env] apply unary rule narrow_lit_defs
0.376[zip.env] apply unary rule ind_types.exhaustiveness
0.376[zip.env] apply unary rule ind_types.acyclicity
0.376[zip.env] apply unary rule avatar_check_empty
0.376[zip.env] apply generating rule avatar.lemmas (full: false)
0.376[zip.env] apply generating rule avatar_check_sat (full: false)
0.376[zip.avatar] SAT-solver reports "SAT"
0.376[zip.saturate] inferred new clauses: []
0.376[zip.sup] @[neg_reflect did not simplify the clause @]
0.376[zip.sup] @[neg_reflect did not simplify the clause @]
0.376[zip.saturate] ### step   274 ###
0.376[zip.saturate]
    given (274 steps, penalty 1):
      `[cQ_2 a b c+ ∨ ¬cQ_1 (f a) b c+*]/id:298/depth:7`
0.376[zip.env] apply binary rule superposition_active
0.376[zip.env] apply binary rule superposition_passive
0.376[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b c+ ∨ ¬cQ_1 (f a) b c+*]/id:298/depth:7[0]
         passive_lit=cQ_2 a b c p=0.←.ε)
      with subst={X0[1] → c[0]}.

0.376[zip.sup] will yield a tautology
0.376[zip.sup] ... cancel, will yield a tautology
0.376[zip.env] apply binary rule ctx_narrow
0.376[zip.env] apply binary rule narrow_term_defs
0.376[zip.env] do unary inferences
0.376[zip.env] apply unary rule equality_resolution
0.376[zip.env] apply unary rule equality_factoring
0.376[zip.env] apply unary rule narrow_lit_defs
0.376[zip.env] apply unary rule ind_types.exhaustiveness
0.376[zip.env] apply unary rule ind_types.acyclicity
0.376[zip.env] apply unary rule avatar_check_empty
0.376[zip.env] apply generating rule avatar.lemmas (full: false)
0.376[zip.env] apply generating rule avatar_check_sat (full: false)
0.376[zip.avatar] SAT-solver reports "SAT"
0.376[zip.saturate] inferred new clauses: []
0.376[zip.sup] @[neg_reflect did not simplify the clause @]
0.376[zip.sup] @[neg_reflect did not simplify the clause @]
0.376[zip.saturate] ### step   275 ###
0.376[zip.saturate]
    given (275 steps, penalty 1):
      `[cQ_2 a b b+ ∨ ¬cQ_1 (f a) b b+*]/id:299/depth:7`
0.377[zip.env] apply binary rule superposition_active
0.377[zip.env] apply binary rule superposition_passive
0.377[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b b+ ∨ ¬cQ_1 (f a) b b+*]/id:299/depth:7[0]
         passive_lit=cQ_2 a b b p=0.←.ε)
      with subst={X0[1] → b[0]}.

0.377[zip.sup] will yield a tautology
0.377[zip.sup] ... cancel, will yield a tautology
0.377[zip.env] apply binary rule ctx_narrow
0.377[zip.env] apply binary rule narrow_term_defs
0.377[zip.env] do unary inferences
0.377[zip.env] apply unary rule equality_resolution
0.377[zip.env] apply unary rule equality_factoring
0.377[zip.env] apply unary rule narrow_lit_defs
0.377[zip.env] apply unary rule ind_types.exhaustiveness
0.377[zip.env] apply unary rule ind_types.acyclicity
0.377[zip.env] apply unary rule avatar_check_empty
0.377[zip.env] apply generating rule avatar.lemmas (full: false)
0.377[zip.env] apply generating rule avatar_check_sat (full: false)
0.377[zip.avatar] SAT-solver reports "SAT"
0.377[zip.saturate] inferred new clauses: []
0.377[zip.sup] @[neg_reflect did not simplify the clause @]
0.377[zip.sup] @[neg_reflect did not simplify the clause @]
0.377[zip.saturate] ### step   276 ###
0.377[zip.saturate]
    given (276 steps, penalty 1):
      `[cQ_2 a b a+ ∨ ¬cQ_1 (f a) b a+*]/id:300/depth:7`
0.377[zip.env] apply binary rule superposition_active
0.377[zip.env] apply binary rule superposition_passive
0.377[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b a+ ∨ ¬cQ_1 (f a) b a+*]/id:300/depth:7[0]
         passive_lit=cQ_2 a b a p=0.←.ε)
      with subst={X0[1] → a[0]}.

0.377[zip.sup] will yield a tautology
0.377[zip.sup] ... cancel, will yield a tautology
0.377[zip.env] apply binary rule ctx_narrow
0.377[zip.env] apply binary rule narrow_term_defs
0.377[zip.env] do unary inferences
0.377[zip.env] apply unary rule equality_resolution
0.377[zip.env] apply unary rule equality_factoring
0.377[zip.env] apply unary rule narrow_lit_defs
0.377[zip.env] apply unary rule ind_types.exhaustiveness
0.377[zip.env] apply unary rule ind_types.acyclicity
0.377[zip.env] apply unary rule avatar_check_empty
0.377[zip.env] apply generating rule avatar.lemmas (full: false)
0.377[zip.env] apply generating rule avatar_check_sat (full: false)
0.377[zip.avatar] SAT-solver reports "SAT"
0.377[zip.saturate] inferred new clauses: []
0.377[zip.sup] @[neg_reflect did not simplify the clause @]
0.378[zip.sup] @[neg_reflect did not simplify the clause @]
0.378[zip.saturate] ### step   277 ###
0.378[zip.saturate]
    given (277 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7`
0.378[zip.env] apply binary rule superposition_active
0.378[zip.env] apply binary rule superposition_passive
0.378[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.378[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8
0.378[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.378[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) b (f d)+* ∨ cQ_2 X1 b X0+*]/id:302/depth:8
0.378[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.379[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f c)+* ∨ cQ_2 X0 b c+*]/id:303/depth:8
0.379[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.379[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f b)+* ∨ cQ_2 X0 b b+*]/id:304/depth:8
0.379[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.379[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f a)+* ∨ cQ_2 X0 b a+*]/id:305/depth:8
0.379[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f X1)*]/id:278/depth:7[0]
         passive_lit=cQ_2 X2 b X0 p=1.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.379[zip.sup] will yield a tautology
0.379[zip.sup] ... cancel, will yield a tautology
0.379[zip.env] apply binary rule ctx_narrow
0.379[zip.env] apply binary rule narrow_term_defs
0.379[zip.env] do unary inferences
0.379[zip.env] apply unary rule equality_resolution
0.379[zip.env] apply unary rule equality_factoring
0.379[zip.env] apply unary rule narrow_lit_defs
0.379[zip.env] apply unary rule ind_types.exhaustiveness
0.379[zip.env] apply unary rule ind_types.acyclicity
0.379[zip.env] apply unary rule avatar_check_empty
0.379[zip.env] apply generating rule avatar.lemmas (full: false)
0.379[zip.env] apply generating rule avatar_check_sat (full: false)
0.379[zip.avatar] SAT-solver reports "SAT"
0.379[zip.sup] @[neg_reflect did not simplify the clause @]
0.379[zip.sup] @[neg_reflect did not simplify the clause @]
0.379[zip.sup] @[neg_reflect did not simplify the clause @]
0.379[zip.sup] @[neg_reflect did not simplify the clause @]
0.379[zip.sup] @[neg_reflect did not simplify the clause @]
0.379[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) b (f d)+* ∨ cQ_2 X1 b X0+*]/id:302/depth:8, 
       forall X0. [¬cQ_1 (f d) b (f c)+* ∨ cQ_2 X0 b c+*]/id:303/depth:8, 
       forall X0. [¬cQ_1 (f d) b (f b)+* ∨ cQ_2 X0 b b+*]/id:304/depth:8, 
       forall X0. [¬cQ_1 (f d) b (f a)+* ∨ cQ_2 X0 b a+*]/id:305/depth:8]
0.380[zip.sup] @[neg_reflect did not simplify the clause @]
0.380[zip.sup] @[neg_reflect did not simplify the clause @]
0.380[zip.saturate] ### step   278 ###
0.380[zip.saturate]
    given (278 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) b (f d)+* ∨ cQ_2 X1 b X0+*]/id:302/depth:8`
0.380[zip.env] apply binary rule superposition_active
0.380[zip.env] apply binary rule superposition_passive
0.380[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) b (f d)+* ∨ cQ_2 X1 b X0+*]/id:302/depth:8[0]
         passive_lit=cQ_2 X1 b X0 p=1.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.380[zip.sup] will yield a tautology
0.380[zip.sup] ... cancel, will yield a tautology
0.380[zip.env] apply binary rule ctx_narrow
0.380[zip.env] apply binary rule narrow_term_defs
0.380[zip.env] do unary inferences
0.380[zip.env] apply unary rule equality_resolution
0.380[zip.env] apply unary rule equality_factoring
0.380[zip.env] apply unary rule narrow_lit_defs
0.380[zip.env] apply unary rule ind_types.exhaustiveness
0.380[zip.env] apply unary rule ind_types.acyclicity
0.380[zip.env] apply unary rule avatar_check_empty
0.380[zip.env] apply generating rule avatar.lemmas (full: false)
0.380[zip.env] apply generating rule avatar_check_sat (full: false)
0.380[zip.avatar] SAT-solver reports "SAT"
0.380[zip.saturate] inferred new clauses: []
0.380[zip.sup] @[neg_reflect did not simplify the clause @]
0.380[zip.sup] @[neg_reflect did not simplify the clause @]
0.381[zip.saturate] ### step   279 ###
0.381[zip.saturate]
    given (279 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f c)+* ∨ cQ_2 X0 b c+*]/id:303/depth:8`
0.381[zip.env] apply binary rule superposition_active
0.381[zip.env] apply binary rule superposition_passive
0.381[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f c)+* ∨ cQ_2 X0 b c+*]/id:303/depth:8[0]
         passive_lit=cQ_2 X0 b c p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.381[zip.sup] will yield a tautology
0.381[zip.sup] ... cancel, will yield a tautology
0.381[zip.env] apply binary rule ctx_narrow
0.381[zip.env] apply binary rule narrow_term_defs
0.381[zip.env] do unary inferences
0.381[zip.env] apply unary rule equality_resolution
0.381[zip.env] apply unary rule equality_factoring
0.381[zip.env] apply unary rule narrow_lit_defs
0.381[zip.env] apply unary rule ind_types.exhaustiveness
0.381[zip.env] apply unary rule ind_types.acyclicity
0.381[zip.env] apply unary rule avatar_check_empty
0.381[zip.env] apply generating rule avatar.lemmas (full: false)
0.381[zip.env] apply generating rule avatar_check_sat (full: false)
0.381[zip.avatar] SAT-solver reports "SAT"
0.381[zip.saturate] inferred new clauses: []
0.381[zip.sup] @[neg_reflect did not simplify the clause @]
0.381[zip.sup] @[neg_reflect did not simplify the clause @]
0.381[zip.saturate] ### step   280 ###
0.381[zip.saturate]
    given (280 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f b)+* ∨ cQ_2 X0 b b+*]/id:304/depth:8`
0.381[zip.env] apply binary rule superposition_active
0.382[zip.env] apply binary rule superposition_passive
0.382[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f b)+* ∨ cQ_2 X0 b b+*]/id:304/depth:8[0]
         passive_lit=cQ_2 X0 b b p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.382[zip.sup] will yield a tautology
0.382[zip.sup] ... cancel, will yield a tautology
0.382[zip.env] apply binary rule ctx_narrow
0.382[zip.env] apply binary rule narrow_term_defs
0.382[zip.env] do unary inferences
0.382[zip.env] apply unary rule equality_resolution
0.382[zip.env] apply unary rule equality_factoring
0.382[zip.env] apply unary rule narrow_lit_defs
0.382[zip.env] apply unary rule ind_types.exhaustiveness
0.382[zip.env] apply unary rule ind_types.acyclicity
0.382[zip.env] apply unary rule avatar_check_empty
0.382[zip.env] apply generating rule avatar.lemmas (full: false)
0.382[zip.env] apply generating rule avatar_check_sat (full: false)
0.382[zip.avatar] SAT-solver reports "SAT"
0.382[zip.saturate] inferred new clauses: []
0.382[zip.sup] @[neg_reflect did not simplify the clause @]
0.382[zip.sup] @[neg_reflect did not simplify the clause @]
0.382[zip.saturate] ### step   281 ###
0.382[zip.saturate]
    given (281 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f a)+* ∨ cQ_2 X0 b a+*]/id:305/depth:8`
0.382[zip.env] apply binary rule superposition_active
0.382[zip.env] apply binary rule superposition_passive
0.382[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f a)+* ∨ cQ_2 X0 b a+*]/id:305/depth:8[0]
         passive_lit=cQ_2 X0 b a p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.382[zip.sup] will yield a tautology
0.382[zip.sup] ... cancel, will yield a tautology
0.382[zip.env] apply binary rule ctx_narrow
0.382[zip.env] apply binary rule narrow_term_defs
0.383[zip.env] do unary inferences
0.383[zip.env] apply unary rule equality_resolution
0.383[zip.env] apply unary rule equality_factoring
0.383[zip.env] apply unary rule narrow_lit_defs
0.383[zip.env] apply unary rule ind_types.exhaustiveness
0.383[zip.env] apply unary rule ind_types.acyclicity
0.383[zip.env] apply unary rule avatar_check_empty
0.383[zip.env] apply generating rule avatar.lemmas (full: false)
0.383[zip.env] apply generating rule avatar_check_sat (full: false)
0.383[zip.avatar] SAT-solver reports "SAT"
0.383[zip.saturate] inferred new clauses: []
0.383[zip.sup] @[neg_reflect did not simplify the clause @]
0.383[zip.sup] @[neg_reflect did not simplify the clause @]
0.383[zip.saturate] ### step   282 ###
0.384[zip.saturate]
    given (282 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7`
0.384[zip.env] apply binary rule superposition_active
0.384[zip.env] apply binary rule superposition_passive
0.384[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.385[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8
0.385[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.385[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) b (f d)+* ∨ cQ_2 c b X0+*]/id:307/depth:8
0.385[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.386[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f c)+* ∨ cQ_2 c b c+]/id:308/depth:8
0.386[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.386[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f b)+* ∨ cQ_2 c b b+]/id:309/depth:8
0.386[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f X1)*]/id:284/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.386[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f a)+* ∨ cQ_2 c b a+]/id:310/depth:8
0.386[zip.env] apply binary rule ctx_narrow
0.386[zip.env] apply binary rule narrow_term_defs
0.387[zip.env] do unary inferences
0.387[zip.env] apply unary rule equality_resolution
0.387[zip.env] apply unary rule equality_factoring
0.387[zip.env] apply unary rule narrow_lit_defs
0.387[zip.env] apply unary rule ind_types.exhaustiveness
0.387[zip.env] apply unary rule ind_types.acyclicity
0.387[zip.env] apply unary rule avatar_check_empty
0.387[zip.env] apply generating rule avatar.lemmas (full: false)
0.387[zip.env] apply generating rule avatar_check_sat (full: false)
0.387[zip.avatar] SAT-solver reports "SAT"
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8, 
       forall X0. [¬cQ_1 (f c) b (f d)+* ∨ cQ_2 c b X0+*]/id:307/depth:8, 
       [¬cQ_1 (f c) b (f c)+* ∨ cQ_2 c b c+]/id:308/depth:8, 
       [¬cQ_1 (f c) b (f b)+* ∨ cQ_2 c b b+]/id:309/depth:8, 
       [¬cQ_1 (f c) b (f a)+* ∨ cQ_2 c b a+]/id:310/depth:8]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.sup] @[neg_reflect did not simplify the clause @]
0.387[zip.saturate] ### step   283 ###
0.387[zip.saturate]
    given (283 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) b (f d)+* ∨ cQ_2 c b X0+*]/id:307/depth:8`
0.388[zip.env] apply binary rule superposition_active
0.388[zip.env] apply binary rule superposition_passive
0.388[zip.env] apply binary rule ctx_narrow
0.388[zip.env] apply binary rule narrow_term_defs
0.388[zip.env] do unary inferences
0.388[zip.env] apply unary rule equality_resolution
0.388[zip.env] apply unary rule equality_factoring
0.388[zip.env] apply unary rule narrow_lit_defs
0.388[zip.env] apply unary rule ind_types.exhaustiveness
0.388[zip.env] apply unary rule ind_types.acyclicity
0.388[zip.env] apply unary rule avatar_check_empty
0.388[zip.env] apply generating rule avatar.lemmas (full: false)
0.388[zip.env] apply generating rule avatar_check_sat (full: false)
0.388[zip.avatar] SAT-solver reports "SAT"
0.388[zip.saturate] inferred new clauses: []
0.388[zip.sup] @[neg_reflect did not simplify the clause @]
0.388[zip.sup] @[neg_reflect did not simplify the clause @]
0.388[zip.saturate] ### step   284 ###
0.388[zip.saturate]
    given (284 steps, penalty 1):
      `[¬cQ_1 (f c) b (f c)+* ∨ cQ_2 c b c+]/id:308/depth:8`
0.388[zip.env] apply binary rule superposition_active
0.388[zip.env] apply binary rule superposition_passive
0.388[zip.env] apply binary rule ctx_narrow
0.388[zip.env] apply binary rule narrow_term_defs
0.388[zip.env] do unary inferences
0.388[zip.env] apply unary rule equality_resolution
0.388[zip.env] apply unary rule equality_factoring
0.388[zip.env] apply unary rule narrow_lit_defs
0.388[zip.env] apply unary rule ind_types.exhaustiveness
0.388[zip.env] apply unary rule ind_types.acyclicity
0.388[zip.env] apply unary rule avatar_check_empty
0.388[zip.env] apply generating rule avatar.lemmas (full: false)
0.388[zip.env] apply generating rule avatar_check_sat (full: false)
0.388[zip.avatar] SAT-solver reports "SAT"
0.388[zip.saturate] inferred new clauses: []
0.388[zip.sup] @[neg_reflect did not simplify the clause @]
0.388[zip.sup] @[neg_reflect did not simplify the clause @]
0.388[zip.saturate] ### step   285 ###
0.388[zip.saturate]
    given (285 steps, penalty 1):
      `[¬cQ_1 (f c) b (f b)+* ∨ cQ_2 c b b+]/id:309/depth:8`
0.389[zip.env] apply binary rule superposition_active
0.389[zip.env] apply binary rule superposition_passive
0.389[zip.env] apply binary rule ctx_narrow
0.389[zip.env] apply binary rule narrow_term_defs
0.389[zip.env] do unary inferences
0.389[zip.env] apply unary rule equality_resolution
0.389[zip.env] apply unary rule equality_factoring
0.389[zip.env] apply unary rule narrow_lit_defs
0.389[zip.env] apply unary rule ind_types.exhaustiveness
0.389[zip.env] apply unary rule ind_types.acyclicity
0.389[zip.env] apply unary rule avatar_check_empty
0.389[zip.env] apply generating rule avatar.lemmas (full: false)
0.389[zip.env] apply generating rule avatar_check_sat (full: false)
0.389[zip.avatar] SAT-solver reports "SAT"
0.389[zip.saturate] inferred new clauses: []
0.389[zip.sup] @[neg_reflect did not simplify the clause @]
0.389[zip.sup] @[neg_reflect did not simplify the clause @]
0.389[zip.saturate] ### step   286 ###
0.389[zip.saturate]
    given (286 steps, penalty 1):
      `[¬cQ_1 (f c) b (f a)+* ∨ cQ_2 c b a+]/id:310/depth:8`
0.389[zip.env] apply binary rule superposition_active
0.389[zip.env] apply binary rule superposition_passive
0.389[zip.env] apply binary rule ctx_narrow
0.389[zip.env] apply binary rule narrow_term_defs
0.389[zip.env] do unary inferences
0.389[zip.env] apply unary rule equality_resolution
0.389[zip.env] apply unary rule equality_factoring
0.389[zip.env] apply unary rule narrow_lit_defs
0.389[zip.env] apply unary rule ind_types.exhaustiveness
0.389[zip.env] apply unary rule ind_types.acyclicity
0.389[zip.env] apply unary rule avatar_check_empty
0.389[zip.env] apply generating rule avatar.lemmas (full: false)
0.389[zip.env] apply generating rule avatar_check_sat (full: false)
0.389[zip.avatar] SAT-solver reports "SAT"
0.389[zip.saturate] inferred new clauses: []
0.389[zip.sup] @[neg_reflect did not simplify the clause @]
0.390[zip.sup] @[neg_reflect did not simplify the clause @]
0.390[zip.saturate] ### step   287 ###
0.390[zip.saturate]
    given (287 steps, penalty 1):
      `forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4`
0.390[zip.env] apply binary rule superposition_active
0.390[zip.env] apply binary rule superposition_passive
0.390[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.390[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
     ¬cQ_1 (f (f X1)) a X3*]/id:311/depth:5
0.391[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.391[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [cQ_2 X0 a X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) a X2*]/id:312/depth:5
0.391[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.391[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 c a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) a X1*]/id:313/depth:5
0.391[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.391[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 b a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) a X1*]/id:314/depth:5
0.391[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f X1) a X2* ∨ ¬cP_1 (f X2) X3* ∨ 
        cQ_2 X0 a X3+*]/id:46/depth:4[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.392[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [cQ_2 a a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) a X1*]/id:315/depth:5
0.392[zip.env] apply binary rule ctx_narrow
0.392[zip.env] apply binary rule narrow_term_defs
0.392[zip.env] do unary inferences
0.392[zip.env] apply unary rule equality_resolution
0.392[zip.env] apply unary rule equality_factoring
0.392[zip.env] apply unary rule narrow_lit_defs
0.392[zip.env] apply unary rule ind_types.exhaustiveness
0.392[zip.env] apply unary rule ind_types.acyclicity
0.392[zip.env] apply unary rule avatar_check_empty
0.392[zip.env] apply generating rule avatar.lemmas (full: false)
0.392[zip.env] apply generating rule avatar_check_sat (full: false)
0.392[zip.avatar] SAT-solver reports "SAT"
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 a X2+* ∨ ¬cP_1 (f X3) X2* ∨ 
        ¬cQ_1 (f (f X1)) a X3*]/id:311/depth:5, 
       forall X0 X1 X2.
       [cQ_2 X0 a X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) a X2*]/id:312/depth:5, 
       forall X0 X1.
       [cQ_2 c a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) a X1*]/id:313/depth:5, 
       forall X0 X1.
       [cQ_2 b a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) a X1*]/id:314/depth:5, 
       forall X0 X1.
       [cQ_2 a a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) a X1*]/id:315/depth:5]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.392[zip.sup] @[neg_reflect did not simplify the clause @]
0.393[zip.saturate] ### step   288 ###
0.393[zip.saturate]
    given (288 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7`
0.393[zip.env] apply binary rule superposition_active
0.393[zip.env] apply binary rule superposition_passive
0.393[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.393[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8
0.393[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.393[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) b (f d)+* ∨ cQ_2 b b X0+*]/id:317/depth:8
0.393[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.394[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f c)+* ∨ cQ_2 b b c+]/id:318/depth:8
0.394[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.394[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f b)+* ∨ cQ_2 b b b+]/id:319/depth:8
0.394[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f X1)*]/id:290/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.394[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f a)+* ∨ cQ_2 b b a+]/id:320/depth:8
0.394[zip.env] apply binary rule ctx_narrow
0.394[zip.env] apply binary rule narrow_term_defs
0.394[zip.env] do unary inferences
0.394[zip.env] apply unary rule equality_resolution
0.394[zip.env] apply unary rule equality_factoring
0.394[zip.env] apply unary rule narrow_lit_defs
0.394[zip.env] apply unary rule ind_types.exhaustiveness
0.394[zip.env] apply unary rule ind_types.acyclicity
0.394[zip.env] apply unary rule avatar_check_empty
0.394[zip.env] apply generating rule avatar.lemmas (full: false)
0.394[zip.env] apply generating rule avatar_check_sat (full: false)
0.394[zip.avatar] SAT-solver reports "SAT"
0.394[zip.sup] @[neg_reflect did not simplify the clause @]
0.394[zip.sup] @[neg_reflect did not simplify the clause @]
0.394[zip.sup] @[neg_reflect did not simplify the clause @]
0.394[zip.sup] @[neg_reflect did not simplify the clause @]
0.394[zip.sup] @[neg_reflect did not simplify the clause @]
0.394[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8, 
       forall X0. [¬cQ_1 (f b) b (f d)+* ∨ cQ_2 b b X0+*]/id:317/depth:8, 
       [¬cQ_1 (f b) b (f c)+* ∨ cQ_2 b b c+]/id:318/depth:8, 
       [¬cQ_1 (f b) b (f b)+* ∨ cQ_2 b b b+]/id:319/depth:8, 
       [¬cQ_1 (f b) b (f a)+* ∨ cQ_2 b b a+]/id:320/depth:8]
0.395[zip.sup] @[neg_reflect did not simplify the clause @]
0.395[zip.sup] @[neg_reflect did not simplify the clause @]
0.395[zip.saturate] ### step   289 ###
0.395[zip.saturate]
    given (289 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) b (f d)+* ∨ cQ_2 b b X0+*]/id:317/depth:8`
0.395[zip.env] apply binary rule superposition_active
0.395[zip.env] apply binary rule superposition_passive
0.395[zip.env] apply binary rule ctx_narrow
0.395[zip.env] apply binary rule narrow_term_defs
0.395[zip.env] do unary inferences
0.395[zip.env] apply unary rule equality_resolution
0.395[zip.env] apply unary rule equality_factoring
0.395[zip.env] apply unary rule narrow_lit_defs
0.395[zip.env] apply unary rule ind_types.exhaustiveness
0.395[zip.env] apply unary rule ind_types.acyclicity
0.395[zip.env] apply unary rule avatar_check_empty
0.395[zip.env] apply generating rule avatar.lemmas (full: false)
0.395[zip.env] apply generating rule avatar_check_sat (full: false)
0.395[zip.avatar] SAT-solver reports "SAT"
0.395[zip.saturate] inferred new clauses: []
0.395[zip.sup] @[neg_reflect did not simplify the clause @]
0.395[zip.sup] @[neg_reflect did not simplify the clause @]
0.395[zip.saturate] ### step   290 ###
0.395[zip.saturate]
    given (290 steps, penalty 1):
      `[¬cQ_1 (f b) b (f c)+* ∨ cQ_2 b b c+]/id:318/depth:8`
0.396[zip.env] apply binary rule superposition_active
0.396[zip.env] apply binary rule superposition_passive
0.396[zip.env] apply binary rule ctx_narrow
0.396[zip.env] apply binary rule narrow_term_defs
0.396[zip.env] do unary inferences
0.396[zip.env] apply unary rule equality_resolution
0.396[zip.env] apply unary rule equality_factoring
0.396[zip.env] apply unary rule narrow_lit_defs
0.396[zip.env] apply unary rule ind_types.exhaustiveness
0.396[zip.env] apply unary rule ind_types.acyclicity
0.396[zip.env] apply unary rule avatar_check_empty
0.396[zip.env] apply generating rule avatar.lemmas (full: false)
0.396[zip.env] apply generating rule avatar_check_sat (full: false)
0.396[zip.avatar] SAT-solver reports "SAT"
0.396[zip.saturate] inferred new clauses: []
0.396[zip.sup] @[neg_reflect did not simplify the clause @]
0.396[zip.sup] @[neg_reflect did not simplify the clause @]
0.396[zip.saturate] ### step   291 ###
0.396[zip.saturate]
    given (291 steps, penalty 1):
      `[¬cQ_1 (f b) b (f b)+* ∨ cQ_2 b b b+]/id:319/depth:8`
0.396[zip.env] apply binary rule superposition_active
0.396[zip.env] apply binary rule superposition_passive
0.396[zip.env] apply binary rule ctx_narrow
0.396[zip.env] apply binary rule narrow_term_defs
0.396[zip.env] do unary inferences
0.396[zip.env] apply unary rule equality_resolution
0.396[zip.env] apply unary rule equality_factoring
0.396[zip.env] apply unary rule narrow_lit_defs
0.396[zip.env] apply unary rule ind_types.exhaustiveness
0.396[zip.env] apply unary rule ind_types.acyclicity
0.396[zip.env] apply unary rule avatar_check_empty
0.396[zip.env] apply generating rule avatar.lemmas (full: false)
0.396[zip.env] apply generating rule avatar_check_sat (full: false)
0.396[zip.avatar] SAT-solver reports "SAT"
0.396[zip.saturate] inferred new clauses: []
0.396[zip.sup] @[neg_reflect did not simplify the clause @]
0.396[zip.sup] @[neg_reflect did not simplify the clause @]
0.396[zip.saturate] ### step   292 ###
0.396[zip.saturate]
    given (292 steps, penalty 1):
      `[¬cQ_1 (f b) b (f a)+* ∨ cQ_2 b b a+]/id:320/depth:8`
0.397[zip.env] apply binary rule superposition_active
0.397[zip.env] apply binary rule superposition_passive
0.397[zip.env] apply binary rule ctx_narrow
0.397[zip.env] apply binary rule narrow_term_defs
0.397[zip.env] do unary inferences
0.397[zip.env] apply unary rule equality_resolution
0.397[zip.env] apply unary rule equality_factoring
0.397[zip.env] apply unary rule narrow_lit_defs
0.397[zip.env] apply unary rule ind_types.exhaustiveness
0.397[zip.env] apply unary rule ind_types.acyclicity
0.397[zip.env] apply unary rule avatar_check_empty
0.397[zip.env] apply generating rule avatar.lemmas (full: false)
0.397[zip.env] apply generating rule avatar_check_sat (full: false)
0.397[zip.avatar] SAT-solver reports "SAT"
0.397[zip.saturate] inferred new clauses: []
0.397[zip.sup] @[neg_reflect did not simplify the clause @]
0.397[zip.sup] @[neg_reflect did not simplify the clause @]
0.397[zip.saturate] ### step   293 ###
0.397[zip.saturate]
    given (293 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7`
0.398[zip.env] apply binary rule superposition_active
0.398[zip.env] apply binary rule superposition_passive
0.398[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.398[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8
0.398[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.398[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) b (f d)+* ∨ cQ_2 a b X0+*]/id:322/depth:8
0.399[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.399[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f c)+* ∨ cQ_2 a b c+]/id:323/depth:8
0.399[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.399[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f b)+* ∨ cQ_2 a b b+]/id:324/depth:8
0.399[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.399[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f a)+* ∨ cQ_2 a b a+]/id:325/depth:8
0.399[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f X1)*]/id:296/depth:7[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.400[zip.sup] will yield a tautology
0.400[zip.sup] ... cancel, will yield a tautology
0.400[zip.env] apply binary rule ctx_narrow
0.400[zip.env] apply binary rule narrow_term_defs
0.400[zip.env] do unary inferences
0.400[zip.env] apply unary rule equality_resolution
0.400[zip.env] apply unary rule equality_factoring
0.400[zip.env] apply unary rule narrow_lit_defs
0.400[zip.env] apply unary rule ind_types.exhaustiveness
0.400[zip.env] apply unary rule ind_types.acyclicity
0.400[zip.env] apply unary rule avatar_check_empty
0.400[zip.env] apply generating rule avatar.lemmas (full: false)
0.400[zip.env] apply generating rule avatar_check_sat (full: false)
0.400[zip.avatar] SAT-solver reports "SAT"
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.400[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8, 
       forall X0. [¬cQ_1 (f a) b (f d)+* ∨ cQ_2 a b X0+*]/id:322/depth:8, 
       [¬cQ_1 (f a) b (f c)+* ∨ cQ_2 a b c+]/id:323/depth:8, 
       [¬cQ_1 (f a) b (f b)+* ∨ cQ_2 a b b+]/id:324/depth:8, 
       [¬cQ_1 (f a) b (f a)+* ∨ cQ_2 a b a+]/id:325/depth:8]
0.400[zip.sup] @[neg_reflect did not simplify the clause @]
0.401[zip.sup] @[neg_reflect did not simplify the clause @]
0.401[zip.saturate] ### step   294 ###
0.401[zip.saturate]
    given (294 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) b (f d)+* ∨ cQ_2 a b X0+*]/id:322/depth:8`
0.401[zip.env] apply binary rule superposition_active
0.401[zip.env] apply binary rule superposition_passive
0.401[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) b (f d)+* ∨ cQ_2 a b X0+*]/id:322/depth:8[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.401[zip.sup] will yield a tautology
0.401[zip.sup] ... cancel, will yield a tautology
0.401[zip.env] apply binary rule ctx_narrow
0.401[zip.env] apply binary rule narrow_term_defs
0.401[zip.env] do unary inferences
0.401[zip.env] apply unary rule equality_resolution
0.401[zip.env] apply unary rule equality_factoring
0.401[zip.env] apply unary rule narrow_lit_defs
0.401[zip.env] apply unary rule ind_types.exhaustiveness
0.401[zip.env] apply unary rule ind_types.acyclicity
0.401[zip.env] apply unary rule avatar_check_empty
0.402[zip.env] apply generating rule avatar.lemmas (full: false)
0.402[zip.env] apply generating rule avatar_check_sat (full: false)
0.402[zip.avatar] SAT-solver reports "SAT"
0.402[zip.saturate] inferred new clauses: []
0.402[zip.sup] @[neg_reflect did not simplify the clause @]
0.402[zip.sup] @[neg_reflect did not simplify the clause @]
0.402[zip.saturate] ### step   295 ###
0.402[zip.saturate]
    given (295 steps, penalty 1):
      `[¬cQ_1 (f a) b (f c)+* ∨ cQ_2 a b c+]/id:323/depth:8`
0.402[zip.env] apply binary rule superposition_active
0.402[zip.env] apply binary rule superposition_passive
0.402[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f c)+* ∨ cQ_2 a b c+]/id:323/depth:8[0]
         passive_lit=cQ_2 a b c p=1.←.ε)
      with subst={X0[1] → c[0]}.

0.403[zip.sup] will yield a tautology
0.403[zip.sup] ... cancel, will yield a tautology
0.403[zip.env] apply binary rule ctx_narrow
0.403[zip.env] apply binary rule narrow_term_defs
0.403[zip.env] do unary inferences
0.403[zip.env] apply unary rule equality_resolution
0.403[zip.env] apply unary rule equality_factoring
0.403[zip.env] apply unary rule narrow_lit_defs
0.403[zip.env] apply unary rule ind_types.exhaustiveness
0.403[zip.env] apply unary rule ind_types.acyclicity
0.403[zip.env] apply unary rule avatar_check_empty
0.403[zip.env] apply generating rule avatar.lemmas (full: false)
0.403[zip.env] apply generating rule avatar_check_sat (full: false)
0.403[zip.avatar] SAT-solver reports "SAT"
0.403[zip.saturate] inferred new clauses: []
0.403[zip.sup] @[neg_reflect did not simplify the clause @]
0.403[zip.sup] @[neg_reflect did not simplify the clause @]
0.403[zip.saturate] ### step   296 ###
0.403[zip.saturate]
    given (296 steps, penalty 1):
      `[¬cQ_1 (f a) b (f b)+* ∨ cQ_2 a b b+]/id:324/depth:8`
0.403[zip.env] apply binary rule superposition_active
0.403[zip.env] apply binary rule superposition_passive
0.404[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f b)+* ∨ cQ_2 a b b+]/id:324/depth:8[0]
         passive_lit=cQ_2 a b b p=1.←.ε)
      with subst={X0[1] → b[0]}.

0.404[zip.sup] will yield a tautology
0.404[zip.sup] ... cancel, will yield a tautology
0.404[zip.env] apply binary rule ctx_narrow
0.404[zip.env] apply binary rule narrow_term_defs
0.404[zip.env] do unary inferences
0.404[zip.env] apply unary rule equality_resolution
0.404[zip.env] apply unary rule equality_factoring
0.404[zip.env] apply unary rule narrow_lit_defs
0.404[zip.env] apply unary rule ind_types.exhaustiveness
0.404[zip.env] apply unary rule ind_types.acyclicity
0.404[zip.env] apply unary rule avatar_check_empty
0.404[zip.env] apply generating rule avatar.lemmas (full: false)
0.404[zip.env] apply generating rule avatar_check_sat (full: false)
0.404[zip.avatar] SAT-solver reports "SAT"
0.404[zip.saturate] inferred new clauses: []
0.404[zip.sup] @[neg_reflect did not simplify the clause @]
0.404[zip.sup] @[neg_reflect did not simplify the clause @]
0.404[zip.saturate] ### step   297 ###
0.404[zip.saturate]
    given (297 steps, penalty 1):
      `[¬cQ_1 (f a) b (f a)+* ∨ cQ_2 a b a+]/id:325/depth:8`
0.404[zip.env] apply binary rule superposition_active
0.404[zip.env] apply binary rule superposition_passive
0.405[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f a)+* ∨ cQ_2 a b a+]/id:325/depth:8[0]
         passive_lit=cQ_2 a b a p=1.←.ε)
      with subst={X0[1] → a[0]}.

0.405[zip.sup] will yield a tautology
0.405[zip.sup] ... cancel, will yield a tautology
0.405[zip.env] apply binary rule ctx_narrow
0.405[zip.env] apply binary rule narrow_term_defs
0.405[zip.env] do unary inferences
0.405[zip.env] apply unary rule equality_resolution
0.405[zip.env] apply unary rule equality_factoring
0.405[zip.env] apply unary rule narrow_lit_defs
0.405[zip.env] apply unary rule ind_types.exhaustiveness
0.405[zip.env] apply unary rule ind_types.acyclicity
0.405[zip.env] apply unary rule avatar_check_empty
0.405[zip.env] apply generating rule avatar.lemmas (full: false)
0.405[zip.env] apply generating rule avatar_check_sat (full: false)
0.405[zip.avatar] SAT-solver reports "SAT"
0.405[zip.saturate] inferred new clauses: []
0.405[zip.sup] @[neg_reflect did not simplify the clause @]
0.405[zip.sup] @[neg_reflect did not simplify the clause @]
0.405[zip.saturate] ### step   298 ###
0.405[zip.saturate]
    given (298 steps, penalty 1):
      `forall X0 X1 X2.
       [cQ_2 X0 a X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) a X2*]/id:312/depth:5`
0.405[zip.env] apply binary rule superposition_active
0.405[zip.env] apply binary rule superposition_passive
0.405[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [cQ_2 X0 a X1+* ∨ ¬cP_1 (f X2) X1+* ∨ ¬cQ_1 (f d) a X2*]/id:312/depth:5[0]
         passive_lit=¬cP_1 (f X2) X1 p=1.←.ε)
      with subst={X1[1] → X2[0], X2[1] → X1[0]}.

0.406[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6
0.406[zip.env] apply binary rule ctx_narrow
0.406[zip.env] apply binary rule narrow_term_defs
0.406[zip.env] do unary inferences
0.406[zip.env] apply unary rule equality_resolution
0.406[zip.env] apply unary rule equality_factoring
0.406[zip.env] apply unary rule narrow_lit_defs
0.406[zip.env] apply unary rule ind_types.exhaustiveness
0.406[zip.env] apply unary rule ind_types.acyclicity
0.406[zip.env] apply unary rule avatar_check_empty
0.406[zip.env] apply generating rule avatar.lemmas (full: false)
0.406[zip.env] apply generating rule avatar_check_sat (full: false)
0.406[zip.avatar] SAT-solver reports "SAT"
0.406[zip.sup] @[neg_reflect did not simplify the clause @]
0.406[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6]
0.406[zip.sup] @[neg_reflect did not simplify the clause @]
0.406[zip.sup] @[neg_reflect did not simplify the clause @]
0.406[zip.saturate] ### step   299 ###
0.406[zip.saturate]
    given (299 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6`
0.406[zip.env] apply binary rule superposition_active
0.406[zip.env] apply binary rule superposition_passive
0.406[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.406[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7
0.407[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.407[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a d+*]/id:328/depth:7
0.407[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.407[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a c+*]/id:329/depth:7
0.407[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.407[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a b+*]/id:330/depth:7
0.407[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a X1* ∨ cQ_2 X2 a X0+*]/id:326/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.407[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a a+*]/id:331/depth:7
0.407[zip.env] apply binary rule ctx_narrow
0.407[zip.env] apply binary rule narrow_term_defs
0.407[zip.env] do unary inferences
0.407[zip.env] apply unary rule equality_resolution
0.407[zip.env] apply unary rule equality_factoring
0.407[zip.env] apply unary rule narrow_lit_defs
0.407[zip.env] apply unary rule ind_types.exhaustiveness
0.407[zip.env] apply unary rule ind_types.acyclicity
0.407[zip.env] apply unary rule avatar_check_empty
0.407[zip.env] apply generating rule avatar.lemmas (full: false)
0.407[zip.env] apply generating rule avatar_check_sat (full: false)
0.407[zip.avatar] SAT-solver reports "SAT"
0.407[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7, 
       forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a d+*]/id:328/depth:7, 
       forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a c+*]/id:329/depth:7, 
       forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a b+*]/id:330/depth:7, 
       forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a a+*]/id:331/depth:7]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.saturate] ### step   300 ###
0.408[zip.saturate]
    given (300 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a d+*]/id:328/depth:7`
0.408[zip.env] apply binary rule superposition_active
0.408[zip.env] apply binary rule superposition_passive
0.408[zip.env] apply binary rule ctx_narrow
0.408[zip.env] apply binary rule narrow_term_defs
0.408[zip.env] do unary inferences
0.408[zip.env] apply unary rule equality_resolution
0.408[zip.env] apply unary rule equality_factoring
0.408[zip.env] apply unary rule narrow_lit_defs
0.408[zip.env] apply unary rule ind_types.exhaustiveness
0.408[zip.env] apply unary rule ind_types.acyclicity
0.408[zip.env] apply unary rule avatar_check_empty
0.408[zip.env] apply generating rule avatar.lemmas (full: false)
0.408[zip.env] apply generating rule avatar_check_sat (full: false)
0.408[zip.avatar] SAT-solver reports "SAT"
0.408[zip.saturate] inferred new clauses: []
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.sup] @[neg_reflect did not simplify the clause @]
0.408[zip.saturate] ### step   301 ###
0.408[zip.saturate]
    given (301 steps, penalty 1):
      `forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a c+*]/id:329/depth:7`
0.409[zip.env] apply binary rule superposition_active
0.409[zip.env] apply binary rule superposition_passive
0.409[zip.env] apply binary rule ctx_narrow
0.409[zip.env] apply binary rule narrow_term_defs
0.409[zip.env] do unary inferences
0.409[zip.env] apply unary rule equality_resolution
0.409[zip.env] apply unary rule equality_factoring
0.409[zip.env] apply unary rule narrow_lit_defs
0.409[zip.env] apply unary rule ind_types.exhaustiveness
0.409[zip.env] apply unary rule ind_types.acyclicity
0.409[zip.env] apply unary rule avatar_check_empty
0.409[zip.env] apply generating rule avatar.lemmas (full: false)
0.409[zip.env] apply generating rule avatar_check_sat (full: false)
0.409[zip.avatar] SAT-solver reports "SAT"
0.409[zip.saturate] inferred new clauses: []
0.409[zip.sup] @[neg_reflect did not simplify the clause @]
0.409[zip.sup] @[neg_reflect did not simplify the clause @]
0.409[zip.saturate] ### step   302 ###
0.409[zip.saturate]
    given (302 steps, penalty 1):
      `forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a b+*]/id:330/depth:7`
0.409[zip.env] apply binary rule superposition_active
0.409[zip.env] apply binary rule superposition_passive
0.409[zip.env] apply binary rule ctx_narrow
0.409[zip.env] apply binary rule narrow_term_defs
0.409[zip.env] do unary inferences
0.409[zip.env] apply unary rule equality_resolution
0.409[zip.env] apply unary rule equality_factoring
0.409[zip.env] apply unary rule narrow_lit_defs
0.409[zip.env] apply unary rule ind_types.exhaustiveness
0.409[zip.env] apply unary rule ind_types.acyclicity
0.409[zip.env] apply unary rule avatar_check_empty
0.409[zip.env] apply generating rule avatar.lemmas (full: false)
0.409[zip.env] apply generating rule avatar_check_sat (full: false)
0.409[zip.avatar] SAT-solver reports "SAT"
0.409[zip.saturate] inferred new clauses: []
0.409[zip.sup] @[neg_reflect did not simplify the clause @]
0.409[zip.sup] @[neg_reflect did not simplify the clause @]
0.409[zip.saturate] ### step   303 ###
0.409[zip.saturate]
    given (303 steps, penalty 1):
      `forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a a+*]/id:331/depth:7`
0.409[zip.env] apply binary rule superposition_active
0.409[zip.env] apply binary rule superposition_passive
0.409[zip.env] apply binary rule ctx_narrow
0.409[zip.env] apply binary rule narrow_term_defs
0.409[zip.env] do unary inferences
0.409[zip.env] apply unary rule equality_resolution
0.409[zip.env] apply unary rule equality_factoring
0.410[zip.env] apply unary rule narrow_lit_defs
0.410[zip.env] apply unary rule ind_types.exhaustiveness
0.410[zip.env] apply unary rule ind_types.acyclicity
0.410[zip.env] apply unary rule avatar_check_empty
0.410[zip.env] apply generating rule avatar.lemmas (full: false)
0.410[zip.env] apply generating rule avatar_check_sat (full: false)
0.410[zip.avatar] SAT-solver reports "SAT"
0.410[zip.saturate] inferred new clauses: []
0.410[zip.sup] @[neg_reflect did not simplify the clause @]
0.410[zip.sup] @[neg_reflect did not simplify the clause @]
0.410[zip.saturate] ### step   304 ###
0.410[zip.saturate]
    given (304 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 c a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) a X1*]/id:313/depth:5`
0.410[zip.env] apply binary rule superposition_active
0.410[zip.env] apply binary rule superposition_passive
0.410[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 c a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f c) a X1*]/id:313/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.410[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6
0.410[zip.env] apply binary rule ctx_narrow
0.410[zip.env] apply binary rule narrow_term_defs
0.410[zip.env] do unary inferences
0.410[zip.env] apply unary rule equality_resolution
0.410[zip.env] apply unary rule equality_factoring
0.410[zip.env] apply unary rule narrow_lit_defs
0.410[zip.env] apply unary rule ind_types.exhaustiveness
0.410[zip.env] apply unary rule ind_types.acyclicity
0.410[zip.env] apply unary rule avatar_check_empty
0.410[zip.env] apply generating rule avatar.lemmas (full: false)
0.410[zip.env] apply generating rule avatar_check_sat (full: false)
0.410[zip.avatar] SAT-solver reports "SAT"
0.410[zip.sup] @[neg_reflect did not simplify the clause @]
0.410[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6]
0.410[zip.sup] @[neg_reflect did not simplify the clause @]
0.411[zip.sup] @[neg_reflect did not simplify the clause @]
0.411[zip.saturate] ### step   305 ###
0.411[zip.saturate]
    given (305 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6`
0.411[zip.env] apply binary rule superposition_active
0.411[zip.env] apply binary rule superposition_passive
0.411[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.411[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7
0.411[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.411[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a d+*]/id:334/depth:7
0.412[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.412[zip.sup]
    ... ok, conclusion [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a c+*]/id:335/depth:7
0.412[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.412[zip.sup]
    ... ok, conclusion [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a b+*]/id:336/depth:7
0.412[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a X1* ∨ cQ_2 c a X0+*]/id:332/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.412[zip.sup]
    ... ok, conclusion [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a a+*]/id:337/depth:7
0.412[zip.env] apply binary rule ctx_narrow
0.412[zip.env] apply binary rule narrow_term_defs
0.413[zip.env] do unary inferences
0.413[zip.env] apply unary rule equality_resolution
0.413[zip.env] apply unary rule equality_factoring
0.413[zip.env] apply unary rule narrow_lit_defs
0.413[zip.env] apply unary rule ind_types.exhaustiveness
0.413[zip.env] apply unary rule ind_types.acyclicity
0.413[zip.env] apply unary rule avatar_check_empty
0.413[zip.env] apply generating rule avatar.lemmas (full: false)
0.413[zip.env] apply generating rule avatar_check_sat (full: false)
0.413[zip.avatar] SAT-solver reports "SAT"
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7, 
       forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a d+*]/id:334/depth:7, 
       [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a c+*]/id:335/depth:7, 
       [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a b+*]/id:336/depth:7, 
       [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a a+*]/id:337/depth:7]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.sup] @[neg_reflect did not simplify the clause @]
0.413[zip.saturate] ### step   306 ###
0.414[zip.saturate]
    given (306 steps, penalty 1):
      `forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a d+*]/id:334/depth:7`
0.414[zip.env] apply binary rule superposition_active
0.414[zip.env] apply binary rule superposition_passive
0.414[zip.env] apply binary rule ctx_narrow
0.414[zip.env] apply binary rule narrow_term_defs
0.414[zip.env] do unary inferences
0.414[zip.env] apply unary rule equality_resolution
0.414[zip.env] apply unary rule equality_factoring
0.414[zip.env] apply unary rule narrow_lit_defs
0.414[zip.env] apply unary rule ind_types.exhaustiveness
0.414[zip.env] apply unary rule ind_types.acyclicity
0.414[zip.env] apply unary rule avatar_check_empty
0.414[zip.env] apply generating rule avatar.lemmas (full: false)
0.414[zip.env] apply generating rule avatar_check_sat (full: false)
0.414[zip.avatar] SAT-solver reports "SAT"
0.414[zip.saturate] inferred new clauses: []
0.414[zip.sup] @[neg_reflect did not simplify the clause @]
0.414[zip.sup] @[neg_reflect did not simplify the clause @]
0.414[zip.saturate] ### step   307 ###
0.414[zip.saturate]
    given (307 steps, penalty 1):
      `[cQ_2 c a c+ ∨ ¬cQ_1 (f c) a c+*]/id:335/depth:7`
0.415[zip.env] apply binary rule superposition_active
0.415[zip.env] apply binary rule superposition_passive
0.415[zip.env] apply binary rule ctx_narrow
0.415[zip.env] apply binary rule narrow_term_defs
0.415[zip.env] do unary inferences
0.415[zip.env] apply unary rule equality_resolution
0.415[zip.env] apply unary rule equality_factoring
0.415[zip.env] apply unary rule narrow_lit_defs
0.415[zip.env] apply unary rule ind_types.exhaustiveness
0.415[zip.env] apply unary rule ind_types.acyclicity
0.415[zip.env] apply unary rule avatar_check_empty
0.415[zip.env] apply generating rule avatar.lemmas (full: false)
0.415[zip.env] apply generating rule avatar_check_sat (full: false)
0.415[zip.avatar] SAT-solver reports "SAT"
0.415[zip.saturate] inferred new clauses: []
0.415[zip.sup] @[neg_reflect did not simplify the clause @]
0.415[zip.sup] @[neg_reflect did not simplify the clause @]
0.415[zip.saturate] ### step   308 ###
0.415[zip.saturate]
    given (308 steps, penalty 1):
      `[cQ_2 c a b+ ∨ ¬cQ_1 (f c) a b+*]/id:336/depth:7`
0.415[zip.env] apply binary rule superposition_active
0.415[zip.env] apply binary rule superposition_passive
0.415[zip.env] apply binary rule ctx_narrow
0.415[zip.env] apply binary rule narrow_term_defs
0.415[zip.env] do unary inferences
0.415[zip.env] apply unary rule equality_resolution
0.415[zip.env] apply unary rule equality_factoring
0.415[zip.env] apply unary rule narrow_lit_defs
0.415[zip.env] apply unary rule ind_types.exhaustiveness
0.415[zip.env] apply unary rule ind_types.acyclicity
0.415[zip.env] apply unary rule avatar_check_empty
0.415[zip.env] apply generating rule avatar.lemmas (full: false)
0.415[zip.env] apply generating rule avatar_check_sat (full: false)
0.415[zip.avatar] SAT-solver reports "SAT"
0.415[zip.saturate] inferred new clauses: []
0.415[zip.sup] @[neg_reflect did not simplify the clause @]
0.415[zip.sup] @[neg_reflect did not simplify the clause @]
0.416[zip.saturate] ### step   309 ###
0.416[zip.saturate]
    given (309 steps, penalty 1):
      `[cQ_2 c a a+ ∨ ¬cQ_1 (f c) a a+*]/id:337/depth:7`
0.416[zip.env] apply binary rule superposition_active
0.416[zip.env] apply binary rule superposition_passive
0.416[zip.env] apply binary rule ctx_narrow
0.416[zip.env] apply binary rule narrow_term_defs
0.416[zip.env] do unary inferences
0.416[zip.env] apply unary rule equality_resolution
0.416[zip.env] apply unary rule equality_factoring
0.416[zip.env] apply unary rule narrow_lit_defs
0.416[zip.env] apply unary rule ind_types.exhaustiveness
0.416[zip.env] apply unary rule ind_types.acyclicity
0.416[zip.env] apply unary rule avatar_check_empty
0.416[zip.env] apply generating rule avatar.lemmas (full: false)
0.416[zip.env] apply generating rule avatar_check_sat (full: false)
0.416[zip.avatar] SAT-solver reports "SAT"
0.416[zip.saturate] inferred new clauses: []
0.416[zip.sup] @[neg_reflect did not simplify the clause @]
0.417[zip.sup] @[neg_reflect did not simplify the clause @]
0.417[zip.saturate] ### step   310 ###
0.417[zip.saturate]
    given (310 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 b a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) a X1*]/id:314/depth:5`
0.417[zip.env] apply binary rule superposition_active
0.417[zip.env] apply binary rule superposition_passive
0.417[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 b a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f b) a X1*]/id:314/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.418[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6
0.418[zip.env] apply binary rule ctx_narrow
0.418[zip.env] apply binary rule narrow_term_defs
0.418[zip.env] do unary inferences
0.418[zip.env] apply unary rule equality_resolution
0.418[zip.env] apply unary rule equality_factoring
0.418[zip.env] apply unary rule narrow_lit_defs
0.418[zip.env] apply unary rule ind_types.exhaustiveness
0.418[zip.env] apply unary rule ind_types.acyclicity
0.418[zip.env] apply unary rule avatar_check_empty
0.418[zip.env] apply generating rule avatar.lemmas (full: false)
0.418[zip.env] apply generating rule avatar_check_sat (full: false)
0.418[zip.avatar] SAT-solver reports "SAT"
0.419[zip.sup] @[neg_reflect did not simplify the clause @]
0.419[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6]
0.419[zip.sup] @[neg_reflect did not simplify the clause @]
0.419[zip.sup] @[neg_reflect did not simplify the clause @]
0.419[zip.saturate] ### step   311 ###
0.419[zip.saturate]
    given (311 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6`
0.419[zip.env] apply binary rule superposition_active
0.419[zip.env] apply binary rule superposition_passive
0.419[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.420[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7
0.420[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.420[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a d+*]/id:340/depth:7
0.420[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.420[zip.sup]
    ... ok, conclusion [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a c+*]/id:341/depth:7
0.420[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.420[zip.sup]
    ... ok, conclusion [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a b+*]/id:342/depth:7
0.420[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a X1* ∨ cQ_2 b a X0+*]/id:338/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.421[zip.sup]
    ... ok, conclusion [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a a+*]/id:343/depth:7
0.421[zip.env] apply binary rule ctx_narrow
0.421[zip.env] apply binary rule narrow_term_defs
0.421[zip.env] do unary inferences
0.421[zip.env] apply unary rule equality_resolution
0.421[zip.env] apply unary rule equality_factoring
0.421[zip.env] apply unary rule narrow_lit_defs
0.421[zip.env] apply unary rule ind_types.exhaustiveness
0.421[zip.env] apply unary rule ind_types.acyclicity
0.421[zip.env] apply unary rule avatar_check_empty
0.421[zip.env] apply generating rule avatar.lemmas (full: false)
0.421[zip.env] apply generating rule avatar_check_sat (full: false)
0.421[zip.avatar] SAT-solver reports "SAT"
0.421[zip.sup] @[neg_reflect did not simplify the clause @]
0.421[zip.sup] @[neg_reflect did not simplify the clause @]
0.421[zip.sup] @[neg_reflect did not simplify the clause @]
0.421[zip.sup] @[neg_reflect did not simplify the clause @]
0.421[zip.sup] @[neg_reflect did not simplify the clause @]
0.421[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7, 
       forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a d+*]/id:340/depth:7, 
       [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a c+*]/id:341/depth:7, 
       [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a b+*]/id:342/depth:7, 
       [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a a+*]/id:343/depth:7]
0.422[zip.sup] @[neg_reflect did not simplify the clause @]
0.422[zip.sup] @[neg_reflect did not simplify the clause @]
0.422[zip.saturate] ### step   312 ###
0.422[zip.saturate]
    given (312 steps, penalty 1):
      `forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a d+*]/id:340/depth:7`
0.422[zip.env] apply binary rule superposition_active
0.422[zip.env] apply binary rule superposition_passive
0.422[zip.env] apply binary rule ctx_narrow
0.422[zip.env] apply binary rule narrow_term_defs
0.423[zip.env] do unary inferences
0.423[zip.env] apply unary rule equality_resolution
0.423[zip.env] apply unary rule equality_factoring
0.423[zip.env] apply unary rule narrow_lit_defs
0.423[zip.env] apply unary rule ind_types.exhaustiveness
0.423[zip.env] apply unary rule ind_types.acyclicity
0.423[zip.env] apply unary rule avatar_check_empty
0.423[zip.env] apply generating rule avatar.lemmas (full: false)
0.423[zip.env] apply generating rule avatar_check_sat (full: false)
0.423[zip.avatar] SAT-solver reports "SAT"
0.423[zip.saturate] inferred new clauses: []
0.423[zip.sup] @[neg_reflect did not simplify the clause @]
0.423[zip.sup] @[neg_reflect did not simplify the clause @]
0.423[zip.saturate] ### step   313 ###
0.423[zip.saturate]
    given (313 steps, penalty 1):
      `[cQ_2 b a c+ ∨ ¬cQ_1 (f b) a c+*]/id:341/depth:7`
0.423[zip.env] apply binary rule superposition_active
0.423[zip.env] apply binary rule superposition_passive
0.423[zip.env] apply binary rule ctx_narrow
0.423[zip.env] apply binary rule narrow_term_defs
0.423[zip.env] do unary inferences
0.423[zip.env] apply unary rule equality_resolution
0.423[zip.env] apply unary rule equality_factoring
0.423[zip.env] apply unary rule narrow_lit_defs
0.423[zip.env] apply unary rule ind_types.exhaustiveness
0.423[zip.env] apply unary rule ind_types.acyclicity
0.423[zip.env] apply unary rule avatar_check_empty
0.423[zip.env] apply generating rule avatar.lemmas (full: false)
0.423[zip.env] apply generating rule avatar_check_sat (full: false)
0.423[zip.avatar] SAT-solver reports "SAT"
0.423[zip.saturate] inferred new clauses: []
0.424[zip.sup] @[neg_reflect did not simplify the clause @]
0.424[zip.sup] @[neg_reflect did not simplify the clause @]
0.424[zip.saturate] ### step   314 ###
0.424[zip.saturate]
    given (314 steps, penalty 1):
      `[cQ_2 b a b+ ∨ ¬cQ_1 (f b) a b+*]/id:342/depth:7`
0.424[zip.env] apply binary rule superposition_active
0.424[zip.env] apply binary rule superposition_passive
0.424[zip.env] apply binary rule ctx_narrow
0.424[zip.env] apply binary rule narrow_term_defs
0.424[zip.env] do unary inferences
0.424[zip.env] apply unary rule equality_resolution
0.424[zip.env] apply unary rule equality_factoring
0.424[zip.env] apply unary rule narrow_lit_defs
0.424[zip.env] apply unary rule ind_types.exhaustiveness
0.424[zip.env] apply unary rule ind_types.acyclicity
0.424[zip.env] apply unary rule avatar_check_empty
0.424[zip.env] apply generating rule avatar.lemmas (full: false)
0.424[zip.env] apply generating rule avatar_check_sat (full: false)
0.424[zip.avatar] SAT-solver reports "SAT"
0.424[zip.saturate] inferred new clauses: []
0.424[zip.sup] @[neg_reflect did not simplify the clause @]
0.425[zip.sup] @[neg_reflect did not simplify the clause @]
0.425[zip.saturate] ### step   315 ###
0.425[zip.saturate]
    given (315 steps, penalty 1):
      `[cQ_2 b a a+ ∨ ¬cQ_1 (f b) a a+*]/id:343/depth:7`
0.425[zip.env] apply binary rule superposition_active
0.425[zip.env] apply binary rule superposition_passive
0.425[zip.env] apply binary rule ctx_narrow
0.425[zip.env] apply binary rule narrow_term_defs
0.425[zip.env] do unary inferences
0.425[zip.env] apply unary rule equality_resolution
0.425[zip.env] apply unary rule equality_factoring
0.425[zip.env] apply unary rule narrow_lit_defs
0.425[zip.env] apply unary rule ind_types.exhaustiveness
0.425[zip.env] apply unary rule ind_types.acyclicity
0.425[zip.env] apply unary rule avatar_check_empty
0.425[zip.env] apply generating rule avatar.lemmas (full: false)
0.425[zip.env] apply generating rule avatar_check_sat (full: false)
0.425[zip.avatar] SAT-solver reports "SAT"
0.425[zip.saturate] inferred new clauses: []
0.425[zip.sup] @[neg_reflect did not simplify the clause @]
0.425[zip.sup] @[neg_reflect did not simplify the clause @]
0.426[zip.saturate] ### step   316 ###
0.426[zip.saturate]
    given (316 steps, penalty 1):
      `forall X0 X1.
       [cQ_2 a a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) a X1*]/id:315/depth:5`
0.426[zip.env] apply binary rule superposition_active
0.426[zip.env] apply binary rule superposition_passive
0.426[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [cQ_2 a a X0+* ∨ ¬cP_1 (f X1) X0+* ∨ ¬cQ_1 (f a) a X1*]/id:315/depth:5[0]
         passive_lit=¬cP_1 (f X1) X0 p=1.←.ε)
      with subst={X1[1] → X1[0], X2[1] → X0[0]}.

0.426[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6
0.426[zip.env] apply binary rule ctx_narrow
0.426[zip.env] apply binary rule narrow_term_defs
0.426[zip.env] do unary inferences
0.426[zip.env] apply unary rule equality_resolution
0.426[zip.env] apply unary rule equality_factoring
0.426[zip.env] apply unary rule narrow_lit_defs
0.426[zip.env] apply unary rule ind_types.exhaustiveness
0.426[zip.env] apply unary rule ind_types.acyclicity
0.426[zip.env] apply unary rule avatar_check_empty
0.426[zip.env] apply generating rule avatar.lemmas (full: false)
0.426[zip.env] apply generating rule avatar_check_sat (full: false)
0.426[zip.avatar] SAT-solver reports "SAT"
0.426[zip.sup] @[neg_reflect did not simplify the clause @]
0.426[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6]
0.427[zip.sup] @[neg_reflect did not simplify the clause @]
0.427[zip.sup] @[neg_reflect did not simplify the clause @]
0.427[zip.saturate] ### step   317 ###
0.427[zip.saturate]
    given (317 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6`
0.427[zip.env] apply binary rule superposition_active
0.427[zip.env] apply binary rule superposition_passive
0.427[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.428[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7
0.428[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.428[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a d+*]/id:346/depth:7
0.428[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.428[zip.sup]
    ... ok, conclusion [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a c+*]/id:347/depth:7
0.428[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.428[zip.sup]
    ... ok, conclusion [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a b+*]/id:348/depth:7
0.428[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a X1* ∨ cQ_2 a a X0+*]/id:344/depth:6[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.429[zip.sup]
    ... ok, conclusion [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a a+*]/id:349/depth:7
0.429[zip.env] apply binary rule ctx_narrow
0.429[zip.env] apply binary rule narrow_term_defs
0.429[zip.env] do unary inferences
0.429[zip.env] apply unary rule equality_resolution
0.429[zip.env] apply unary rule equality_factoring
0.429[zip.env] apply unary rule narrow_lit_defs
0.429[zip.env] apply unary rule ind_types.exhaustiveness
0.429[zip.env] apply unary rule ind_types.acyclicity
0.429[zip.env] apply unary rule avatar_check_empty
0.429[zip.env] apply generating rule avatar.lemmas (full: false)
0.429[zip.env] apply generating rule avatar_check_sat (full: false)
0.429[zip.avatar] SAT-solver reports "SAT"
0.429[zip.sup] @[neg_reflect did not simplify the clause @]
0.429[zip.sup] @[neg_reflect did not simplify the clause @]
0.429[zip.sup] @[neg_reflect did not simplify the clause @]
0.429[zip.sup] @[neg_reflect did not simplify the clause @]
0.429[zip.sup] @[neg_reflect did not simplify the clause @]
0.429[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7, 
       forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a d+*]/id:346/depth:7, 
       [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a c+*]/id:347/depth:7, 
       [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a b+*]/id:348/depth:7, 
       [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a a+*]/id:349/depth:7]
0.430[zip.sup] @[neg_reflect did not simplify the clause @]
0.430[zip.sup] @[neg_reflect did not simplify the clause @]
0.430[zip.saturate] ### step   318 ###
0.430[zip.saturate]
    given (318 steps, penalty 1):
      `forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5`
0.430[zip.env] apply binary rule superposition_active
0.430[zip.env] apply binary rule superposition_passive
0.430[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.431[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f (f (f X1))) d X2* ∨ 
     ¬cP_1 (f X2) X3* ∨ cQ_2 X0 X4 X3+*]/id:350/depth:6
0.431[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.431[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cQ_1 (f (f d)) d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:351/depth:6
0.431[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.432[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 (f (f c)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:352/depth:6
0.432[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.432[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 (f (f b)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:353/depth:6
0.432[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.433[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cQ_1 (f (f a)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:354/depth:6
0.433[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ cQ_2 X0 X3 X2+* ∨ ¬cP_1 (f X4) X2* ∨ 
        ¬cQ_1 (f (f X1)) d X4*]/id:51/depth:5[0] passive_lit=cQ_2 X0 X3 X2
         p=1.←.ε)
      with subst={X0[0] → a[1], X3[0] → b[1], X0[1] → X2[0]}.

0.433[zip.sup] will yield a tautology
0.433[zip.sup] ... cancel, will yield a tautology
0.433[zip.env] apply binary rule ctx_narrow
0.433[zip.env] apply binary rule narrow_term_defs
0.433[zip.env] do unary inferences
0.433[zip.env] apply unary rule equality_resolution
0.433[zip.env] apply unary rule equality_factoring
0.433[zip.env] apply unary rule narrow_lit_defs
0.433[zip.env] apply unary rule ind_types.exhaustiveness
0.433[zip.env] apply unary rule ind_types.acyclicity
0.433[zip.env] apply unary rule avatar_check_empty
0.433[zip.env] apply generating rule avatar.lemmas (full: false)
0.433[zip.env] apply generating rule avatar_check_sat (full: false)
0.433[zip.avatar] SAT-solver reports "SAT"
0.433[zip.sup] @[neg_reflect did not simplify the clause @]
0.433[zip.sup] @[neg_reflect did not simplify the clause @]
0.434[zip.sup] @[neg_reflect did not simplify the clause @]
0.434[zip.sup] @[neg_reflect did not simplify the clause @]
0.434[zip.sup] @[neg_reflect did not simplify the clause @]
0.434[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f (f (f X1))) d X2* ∨ 
        ¬cP_1 (f X2) X3* ∨ cQ_2 X0 X4 X3+*]/id:350/depth:6, 
       forall X0 X1 X2 X3.
       [¬cQ_1 (f (f d)) d X1+* ∨ ¬cP_1 (f X1) X2* ∨ cQ_2 X0 X3 X2+*]/id:351/depth:6, 
       forall X0 X1 X2.
       [¬cQ_1 (f (f c)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:352/depth:6, 
       forall X0 X1 X2.
       [¬cQ_1 (f (f b)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:353/depth:6, 
       forall X0 X1 X2.
       [¬cQ_1 (f (f a)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:354/depth:6]
0.434[zip.sup] @[neg_reflect did not simplify the clause @]
0.435[zip.sup] @[neg_reflect did not simplify the clause @]
0.435[zip.saturate] ### step   319 ###
0.435[zip.saturate]
    given (319 steps, penalty 1):
      `forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a d+*]/id:346/depth:7`
0.435[zip.env] apply binary rule superposition_active
0.435[zip.env] apply binary rule superposition_passive
0.435[zip.env] apply binary rule ctx_narrow
0.435[zip.env] apply binary rule narrow_term_defs
0.435[zip.env] do unary inferences
0.435[zip.env] apply unary rule equality_resolution
0.435[zip.env] apply unary rule equality_factoring
0.435[zip.env] apply unary rule narrow_lit_defs
0.435[zip.env] apply unary rule ind_types.exhaustiveness
0.435[zip.env] apply unary rule ind_types.acyclicity
0.435[zip.env] apply unary rule avatar_check_empty
0.435[zip.env] apply generating rule avatar.lemmas (full: false)
0.435[zip.env] apply generating rule avatar_check_sat (full: false)
0.435[zip.avatar] SAT-solver reports "SAT"
0.435[zip.saturate] inferred new clauses: []
0.435[zip.sup] @[neg_reflect did not simplify the clause @]
0.435[zip.sup] @[neg_reflect did not simplify the clause @]
0.436[zip.saturate] ### step   320 ###
0.436[zip.saturate]
    given (320 steps, penalty 1):
      `[cQ_2 a a c+ ∨ ¬cQ_1 (f a) a c+*]/id:347/depth:7`
0.436[zip.env] apply binary rule superposition_active
0.436[zip.env] apply binary rule superposition_passive
0.436[zip.env] apply binary rule ctx_narrow
0.436[zip.env] apply binary rule narrow_term_defs
0.436[zip.env] do unary inferences
0.436[zip.env] apply unary rule equality_resolution
0.436[zip.env] apply unary rule equality_factoring
0.436[zip.env] apply unary rule narrow_lit_defs
0.436[zip.env] apply unary rule ind_types.exhaustiveness
0.436[zip.env] apply unary rule ind_types.acyclicity
0.436[zip.env] apply unary rule avatar_check_empty
0.436[zip.env] apply generating rule avatar.lemmas (full: false)
0.436[zip.env] apply generating rule avatar_check_sat (full: false)
0.436[zip.avatar] SAT-solver reports "SAT"
0.436[zip.saturate] inferred new clauses: []
0.436[zip.sup] @[neg_reflect did not simplify the clause @]
0.436[zip.sup] @[neg_reflect did not simplify the clause @]
0.436[zip.saturate] ### step   321 ###
0.436[zip.saturate]
    given (321 steps, penalty 1):
      `[cQ_2 a a b+ ∨ ¬cQ_1 (f a) a b+*]/id:348/depth:7`
0.436[zip.env] apply binary rule superposition_active
0.436[zip.env] apply binary rule superposition_passive
0.436[zip.env] apply binary rule ctx_narrow
0.436[zip.env] apply binary rule narrow_term_defs
0.436[zip.env] do unary inferences
0.436[zip.env] apply unary rule equality_resolution
0.436[zip.env] apply unary rule equality_factoring
0.436[zip.env] apply unary rule narrow_lit_defs
0.436[zip.env] apply unary rule ind_types.exhaustiveness
0.436[zip.env] apply unary rule ind_types.acyclicity
0.436[zip.env] apply unary rule avatar_check_empty
0.436[zip.env] apply generating rule avatar.lemmas (full: false)
0.436[zip.env] apply generating rule avatar_check_sat (full: false)
0.436[zip.avatar] SAT-solver reports "SAT"
0.436[zip.saturate] inferred new clauses: []
0.436[zip.sup] @[neg_reflect did not simplify the clause @]
0.436[zip.sup] @[neg_reflect did not simplify the clause @]
0.436[zip.saturate] ### step   322 ###
0.436[zip.saturate]
    given (322 steps, penalty 1):
      `[cQ_2 a a a+ ∨ ¬cQ_1 (f a) a a+*]/id:349/depth:7`
0.437[zip.env] apply binary rule superposition_active
0.437[zip.env] apply binary rule superposition_passive
0.437[zip.env] apply binary rule ctx_narrow
0.437[zip.env] apply binary rule narrow_term_defs
0.437[zip.env] do unary inferences
0.437[zip.env] apply unary rule equality_resolution
0.437[zip.env] apply unary rule equality_factoring
0.437[zip.env] apply unary rule narrow_lit_defs
0.437[zip.env] apply unary rule ind_types.exhaustiveness
0.437[zip.env] apply unary rule ind_types.acyclicity
0.437[zip.env] apply unary rule avatar_check_empty
0.437[zip.env] apply generating rule avatar.lemmas (full: false)
0.437[zip.env] apply generating rule avatar_check_sat (full: false)
0.437[zip.avatar] SAT-solver reports "SAT"
0.437[zip.saturate] inferred new clauses: []
0.437[zip.sup] @[neg_reflect did not simplify the clause @]
0.437[zip.sup] @[neg_reflect did not simplify the clause @]
0.437[zip.saturate] ### step   323 ###
0.437[zip.saturate]
    given (323 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7`
0.437[zip.env] apply binary rule superposition_active
0.437[zip.env] apply binary rule superposition_passive
0.437[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.437[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8
0.438[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.438[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) a (f d)+* ∨ cQ_2 X1 a X0+*]/id:356/depth:8
0.438[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.438[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f c)+* ∨ cQ_2 X0 a c+*]/id:357/depth:8
0.438[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.438[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f b)+* ∨ cQ_2 X0 a b+*]/id:358/depth:8
0.438[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f X1)*]/id:327/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.438[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f a)+* ∨ cQ_2 X0 a a+*]/id:359/depth:8
0.438[zip.env] apply binary rule ctx_narrow
0.438[zip.env] apply binary rule narrow_term_defs
0.438[zip.env] do unary inferences
0.438[zip.env] apply unary rule equality_resolution
0.438[zip.env] apply unary rule equality_factoring
0.438[zip.env] apply unary rule narrow_lit_defs
0.438[zip.env] apply unary rule ind_types.exhaustiveness
0.438[zip.env] apply unary rule ind_types.acyclicity
0.438[zip.env] apply unary rule avatar_check_empty
0.438[zip.env] apply generating rule avatar.lemmas (full: false)
0.438[zip.env] apply generating rule avatar_check_sat (full: false)
0.438[zip.avatar] SAT-solver reports "SAT"
0.438[zip.sup] @[neg_reflect did not simplify the clause @]
0.438[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8, 
       forall X0 X1. [¬cQ_1 (f d) a (f d)+* ∨ cQ_2 X1 a X0+*]/id:356/depth:8, 
       forall X0. [¬cQ_1 (f d) a (f c)+* ∨ cQ_2 X0 a c+*]/id:357/depth:8, 
       forall X0. [¬cQ_1 (f d) a (f b)+* ∨ cQ_2 X0 a b+*]/id:358/depth:8, 
       forall X0. [¬cQ_1 (f d) a (f a)+* ∨ cQ_2 X0 a a+*]/id:359/depth:8]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.saturate] ### step   324 ###
0.439[zip.saturate]
    given (324 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) a (f d)+* ∨ cQ_2 X1 a X0+*]/id:356/depth:8`
0.439[zip.env] apply binary rule superposition_active
0.439[zip.env] apply binary rule superposition_passive
0.439[zip.env] apply binary rule ctx_narrow
0.439[zip.env] apply binary rule narrow_term_defs
0.439[zip.env] do unary inferences
0.439[zip.env] apply unary rule equality_resolution
0.439[zip.env] apply unary rule equality_factoring
0.439[zip.env] apply unary rule narrow_lit_defs
0.439[zip.env] apply unary rule ind_types.exhaustiveness
0.439[zip.env] apply unary rule ind_types.acyclicity
0.439[zip.env] apply unary rule avatar_check_empty
0.439[zip.env] apply generating rule avatar.lemmas (full: false)
0.439[zip.env] apply generating rule avatar_check_sat (full: false)
0.439[zip.avatar] SAT-solver reports "SAT"
0.439[zip.saturate] inferred new clauses: []
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.439[zip.sup] @[neg_reflect did not simplify the clause @]
0.440[zip.saturate] ### step   325 ###
0.440[zip.saturate]
    given (325 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f c)+* ∨ cQ_2 X0 a c+*]/id:357/depth:8`
0.440[zip.env] apply binary rule superposition_active
0.440[zip.env] apply binary rule superposition_passive
0.440[zip.env] apply binary rule ctx_narrow
0.440[zip.env] apply binary rule narrow_term_defs
0.440[zip.env] do unary inferences
0.440[zip.env] apply unary rule equality_resolution
0.440[zip.env] apply unary rule equality_factoring
0.440[zip.env] apply unary rule narrow_lit_defs
0.440[zip.env] apply unary rule ind_types.exhaustiveness
0.440[zip.env] apply unary rule ind_types.acyclicity
0.440[zip.env] apply unary rule avatar_check_empty
0.440[zip.env] apply generating rule avatar.lemmas (full: false)
0.440[zip.env] apply generating rule avatar_check_sat (full: false)
0.440[zip.avatar] SAT-solver reports "SAT"
0.440[zip.saturate] inferred new clauses: []
0.440[zip.sup] @[neg_reflect did not simplify the clause @]
0.440[zip.sup] @[neg_reflect did not simplify the clause @]
0.440[zip.saturate] ### step   326 ###
0.440[zip.saturate]
    given (326 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f b)+* ∨ cQ_2 X0 a b+*]/id:358/depth:8`
0.440[zip.env] apply binary rule superposition_active
0.440[zip.env] apply binary rule superposition_passive
0.440[zip.env] apply binary rule ctx_narrow
0.440[zip.env] apply binary rule narrow_term_defs
0.440[zip.env] do unary inferences
0.440[zip.env] apply unary rule equality_resolution
0.440[zip.env] apply unary rule equality_factoring
0.440[zip.env] apply unary rule narrow_lit_defs
0.440[zip.env] apply unary rule ind_types.exhaustiveness
0.440[zip.env] apply unary rule ind_types.acyclicity
0.440[zip.env] apply unary rule avatar_check_empty
0.440[zip.env] apply generating rule avatar.lemmas (full: false)
0.440[zip.env] apply generating rule avatar_check_sat (full: false)
0.440[zip.avatar] SAT-solver reports "SAT"
0.440[zip.saturate] inferred new clauses: []
0.440[zip.sup] @[neg_reflect did not simplify the clause @]
0.440[zip.sup] @[neg_reflect did not simplify the clause @]
0.441[zip.saturate] ### step   327 ###
0.441[zip.saturate]
    given (327 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f a)+* ∨ cQ_2 X0 a a+*]/id:359/depth:8`
0.441[zip.env] apply binary rule superposition_active
0.441[zip.env] apply binary rule superposition_passive
0.441[zip.env] apply binary rule ctx_narrow
0.441[zip.env] apply binary rule narrow_term_defs
0.441[zip.env] do unary inferences
0.441[zip.env] apply unary rule equality_resolution
0.441[zip.env] apply unary rule equality_factoring
0.441[zip.env] apply unary rule narrow_lit_defs
0.441[zip.env] apply unary rule ind_types.exhaustiveness
0.441[zip.env] apply unary rule ind_types.acyclicity
0.441[zip.env] apply unary rule avatar_check_empty
0.441[zip.env] apply generating rule avatar.lemmas (full: false)
0.441[zip.env] apply generating rule avatar_check_sat (full: false)
0.441[zip.avatar] SAT-solver reports "SAT"
0.441[zip.saturate] inferred new clauses: []
0.441[zip.sup] @[neg_reflect did not simplify the clause @]
0.441[zip.sup] @[neg_reflect did not simplify the clause @]
0.441[zip.saturate] ### step   328 ###
0.441[zip.saturate]
    given (328 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7`
0.442[zip.env] apply binary rule superposition_active
0.442[zip.env] apply binary rule superposition_passive
0.442[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.442[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8
0.442[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.442[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) a (f d)+* ∨ cQ_2 c a X0+*]/id:361/depth:8
0.442[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.442[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f c)+* ∨ cQ_2 c a c+]/id:362/depth:8
0.442[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.442[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f b)+* ∨ cQ_2 c a b+]/id:363/depth:8
0.443[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f X1)*]/id:333/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.443[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f a)+* ∨ cQ_2 c a a+]/id:364/depth:8
0.443[zip.env] apply binary rule ctx_narrow
0.443[zip.env] apply binary rule narrow_term_defs
0.443[zip.env] do unary inferences
0.443[zip.env] apply unary rule equality_resolution
0.443[zip.env] apply unary rule equality_factoring
0.443[zip.env] apply unary rule narrow_lit_defs
0.443[zip.env] apply unary rule ind_types.exhaustiveness
0.443[zip.env] apply unary rule ind_types.acyclicity
0.443[zip.env] apply unary rule avatar_check_empty
0.443[zip.env] apply generating rule avatar.lemmas (full: false)
0.443[zip.env] apply generating rule avatar_check_sat (full: false)
0.443[zip.avatar] SAT-solver reports "SAT"
0.443[zip.sup] @[neg_reflect did not simplify the clause @]
0.443[zip.sup] @[neg_reflect did not simplify the clause @]
0.443[zip.sup] @[neg_reflect did not simplify the clause @]
0.443[zip.sup] @[neg_reflect did not simplify the clause @]
0.443[zip.sup] @[neg_reflect did not simplify the clause @]
0.443[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8, 
       forall X0. [¬cQ_1 (f c) a (f d)+* ∨ cQ_2 c a X0+*]/id:361/depth:8, 
       [¬cQ_1 (f c) a (f c)+* ∨ cQ_2 c a c+]/id:362/depth:8, 
       [¬cQ_1 (f c) a (f b)+* ∨ cQ_2 c a b+]/id:363/depth:8, 
       [¬cQ_1 (f c) a (f a)+* ∨ cQ_2 c a a+]/id:364/depth:8]
0.444[zip.sup] @[neg_reflect did not simplify the clause @]
0.444[zip.sup] @[neg_reflect did not simplify the clause @]
0.444[zip.saturate] ### step   329 ###
0.444[zip.saturate]
    given (329 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) a (f d)+* ∨ cQ_2 c a X0+*]/id:361/depth:8`
0.444[zip.env] apply binary rule superposition_active
0.444[zip.env] apply binary rule superposition_passive
0.444[zip.env] apply binary rule ctx_narrow
0.444[zip.env] apply binary rule narrow_term_defs
0.444[zip.env] do unary inferences
0.444[zip.env] apply unary rule equality_resolution
0.444[zip.env] apply unary rule equality_factoring
0.444[zip.env] apply unary rule narrow_lit_defs
0.444[zip.env] apply unary rule ind_types.exhaustiveness
0.444[zip.env] apply unary rule ind_types.acyclicity
0.444[zip.env] apply unary rule avatar_check_empty
0.444[zip.env] apply generating rule avatar.lemmas (full: false)
0.444[zip.env] apply generating rule avatar_check_sat (full: false)
0.444[zip.avatar] SAT-solver reports "SAT"
0.444[zip.saturate] inferred new clauses: []
0.444[zip.sup] @[neg_reflect did not simplify the clause @]
0.444[zip.sup] @[neg_reflect did not simplify the clause @]
0.444[zip.saturate] ### step   330 ###
0.444[zip.saturate]
    given (330 steps, penalty 1):
      `[¬cQ_1 (f c) a (f c)+* ∨ cQ_2 c a c+]/id:362/depth:8`
0.445[zip.env] apply binary rule superposition_active
0.445[zip.env] apply binary rule superposition_passive
0.445[zip.env] apply binary rule ctx_narrow
0.445[zip.env] apply binary rule narrow_term_defs
0.445[zip.env] do unary inferences
0.445[zip.env] apply unary rule equality_resolution
0.445[zip.env] apply unary rule equality_factoring
0.445[zip.env] apply unary rule narrow_lit_defs
0.445[zip.env] apply unary rule ind_types.exhaustiveness
0.445[zip.env] apply unary rule ind_types.acyclicity
0.445[zip.env] apply unary rule avatar_check_empty
0.445[zip.env] apply generating rule avatar.lemmas (full: false)
0.445[zip.env] apply generating rule avatar_check_sat (full: false)
0.445[zip.avatar] SAT-solver reports "SAT"
0.445[zip.saturate] inferred new clauses: []
0.445[zip.sup] @[neg_reflect did not simplify the clause @]
0.445[zip.sup] @[neg_reflect did not simplify the clause @]
0.445[zip.saturate] ### step   331 ###
0.445[zip.saturate]
    given (331 steps, penalty 1):
      `[¬cQ_1 (f c) a (f b)+* ∨ cQ_2 c a b+]/id:363/depth:8`
0.446[zip.env] apply binary rule superposition_active
0.446[zip.env] apply binary rule superposition_passive
0.446[zip.env] apply binary rule ctx_narrow
0.446[zip.env] apply binary rule narrow_term_defs
0.446[zip.env] do unary inferences
0.446[zip.env] apply unary rule equality_resolution
0.446[zip.env] apply unary rule equality_factoring
0.446[zip.env] apply unary rule narrow_lit_defs
0.446[zip.env] apply unary rule ind_types.exhaustiveness
0.446[zip.env] apply unary rule ind_types.acyclicity
0.446[zip.env] apply unary rule avatar_check_empty
0.446[zip.env] apply generating rule avatar.lemmas (full: false)
0.446[zip.env] apply generating rule avatar_check_sat (full: false)
0.446[zip.avatar] SAT-solver reports "SAT"
0.446[zip.saturate] inferred new clauses: []
0.446[zip.sup] @[neg_reflect did not simplify the clause @]
0.446[zip.sup] @[neg_reflect did not simplify the clause @]
0.446[zip.saturate] ### step   332 ###
0.446[zip.saturate]
    given (332 steps, penalty 1):
      `[¬cQ_1 (f c) a (f a)+* ∨ cQ_2 c a a+]/id:364/depth:8`
0.446[zip.env] apply binary rule superposition_active
0.446[zip.env] apply binary rule superposition_passive
0.447[zip.env] apply binary rule ctx_narrow
0.447[zip.env] apply binary rule narrow_term_defs
0.447[zip.env] do unary inferences
0.447[zip.env] apply unary rule equality_resolution
0.447[zip.env] apply unary rule equality_factoring
0.447[zip.env] apply unary rule narrow_lit_defs
0.447[zip.env] apply unary rule ind_types.exhaustiveness
0.447[zip.env] apply unary rule ind_types.acyclicity
0.447[zip.env] apply unary rule avatar_check_empty
0.447[zip.env] apply generating rule avatar.lemmas (full: false)
0.447[zip.env] apply generating rule avatar_check_sat (full: false)
0.447[zip.avatar] SAT-solver reports "SAT"
0.447[zip.saturate] inferred new clauses: []
0.447[zip.sup] @[neg_reflect did not simplify the clause @]
0.447[zip.sup] @[neg_reflect did not simplify the clause @]
0.447[zip.saturate] ### step   333 ###
0.447[zip.saturate]
    given (333 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7`
0.448[zip.env] apply binary rule superposition_active
0.448[zip.env] apply binary rule superposition_passive
0.448[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.448[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8
0.448[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.449[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) a (f d)+* ∨ cQ_2 b a X0+*]/id:366/depth:8
0.449[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.449[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f c)+* ∨ cQ_2 b a c+]/id:367/depth:8
0.449[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.449[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f b)+* ∨ cQ_2 b a b+]/id:368/depth:8
0.449[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f X1)*]/id:339/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.450[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f a)+* ∨ cQ_2 b a a+]/id:369/depth:8
0.450[zip.env] apply binary rule ctx_narrow
0.450[zip.env] apply binary rule narrow_term_defs
0.450[zip.env] do unary inferences
0.450[zip.env] apply unary rule equality_resolution
0.450[zip.env] apply unary rule equality_factoring
0.450[zip.env] apply unary rule narrow_lit_defs
0.450[zip.env] apply unary rule ind_types.exhaustiveness
0.450[zip.env] apply unary rule ind_types.acyclicity
0.450[zip.env] apply unary rule avatar_check_empty
0.450[zip.env] apply generating rule avatar.lemmas (full: false)
0.450[zip.env] apply generating rule avatar_check_sat (full: false)
0.450[zip.avatar] SAT-solver reports "SAT"
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8, 
       forall X0. [¬cQ_1 (f b) a (f d)+* ∨ cQ_2 b a X0+*]/id:366/depth:8, 
       [¬cQ_1 (f b) a (f c)+* ∨ cQ_2 b a c+]/id:367/depth:8, 
       [¬cQ_1 (f b) a (f b)+* ∨ cQ_2 b a b+]/id:368/depth:8, 
       [¬cQ_1 (f b) a (f a)+* ∨ cQ_2 b a a+]/id:369/depth:8]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.450[zip.sup] @[neg_reflect did not simplify the clause @]
0.451[zip.saturate] ### step   334 ###
0.451[zip.saturate]
    given (334 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) a (f d)+* ∨ cQ_2 b a X0+*]/id:366/depth:8`
0.451[zip.env] apply binary rule superposition_active
0.451[zip.env] apply binary rule superposition_passive
0.451[zip.env] apply binary rule ctx_narrow
0.451[zip.env] apply binary rule narrow_term_defs
0.451[zip.env] do unary inferences
0.451[zip.env] apply unary rule equality_resolution
0.451[zip.env] apply unary rule equality_factoring
0.451[zip.env] apply unary rule narrow_lit_defs
0.451[zip.env] apply unary rule ind_types.exhaustiveness
0.451[zip.env] apply unary rule ind_types.acyclicity
0.451[zip.env] apply unary rule avatar_check_empty
0.451[zip.env] apply generating rule avatar.lemmas (full: false)
0.451[zip.env] apply generating rule avatar_check_sat (full: false)
0.451[zip.avatar] SAT-solver reports "SAT"
0.451[zip.saturate] inferred new clauses: []
0.451[zip.sup] @[neg_reflect did not simplify the clause @]
0.451[zip.sup] @[neg_reflect did not simplify the clause @]
0.451[zip.saturate] ### step   335 ###
0.451[zip.saturate]
    given (335 steps, penalty 1):
      `[¬cQ_1 (f b) a (f c)+* ∨ cQ_2 b a c+]/id:367/depth:8`
0.452[zip.env] apply binary rule superposition_active
0.452[zip.env] apply binary rule superposition_passive
0.452[zip.env] apply binary rule ctx_narrow
0.452[zip.env] apply binary rule narrow_term_defs
0.452[zip.env] do unary inferences
0.452[zip.env] apply unary rule equality_resolution
0.452[zip.env] apply unary rule equality_factoring
0.452[zip.env] apply unary rule narrow_lit_defs
0.452[zip.env] apply unary rule ind_types.exhaustiveness
0.452[zip.env] apply unary rule ind_types.acyclicity
0.452[zip.env] apply unary rule avatar_check_empty
0.452[zip.env] apply generating rule avatar.lemmas (full: false)
0.452[zip.env] apply generating rule avatar_check_sat (full: false)
0.452[zip.avatar] SAT-solver reports "SAT"
0.452[zip.saturate] inferred new clauses: []
0.452[zip.sup] @[neg_reflect did not simplify the clause @]
0.452[zip.sup] @[neg_reflect did not simplify the clause @]
0.452[zip.saturate] ### step   336 ###
0.452[zip.saturate]
    given (336 steps, penalty 1):
      `[¬cQ_1 (f b) a (f b)+* ∨ cQ_2 b a b+]/id:368/depth:8`
0.452[zip.env] apply binary rule superposition_active
0.452[zip.env] apply binary rule superposition_passive
0.452[zip.env] apply binary rule ctx_narrow
0.452[zip.env] apply binary rule narrow_term_defs
0.452[zip.env] do unary inferences
0.452[zip.env] apply unary rule equality_resolution
0.452[zip.env] apply unary rule equality_factoring
0.452[zip.env] apply unary rule narrow_lit_defs
0.452[zip.env] apply unary rule ind_types.exhaustiveness
0.452[zip.env] apply unary rule ind_types.acyclicity
0.452[zip.env] apply unary rule avatar_check_empty
0.452[zip.env] apply generating rule avatar.lemmas (full: false)
0.452[zip.env] apply generating rule avatar_check_sat (full: false)
0.452[zip.avatar] SAT-solver reports "SAT"
0.452[zip.saturate] inferred new clauses: []
0.452[zip.sup] @[neg_reflect did not simplify the clause @]
0.452[zip.sup] @[neg_reflect did not simplify the clause @]
0.453[zip.saturate] ### step   337 ###
0.453[zip.saturate]
    given (337 steps, penalty 1):
      `[¬cQ_1 (f b) a (f a)+* ∨ cQ_2 b a a+]/id:369/depth:8`
0.453[zip.env] apply binary rule superposition_active
0.453[zip.env] apply binary rule superposition_passive
0.453[zip.env] apply binary rule ctx_narrow
0.453[zip.env] apply binary rule narrow_term_defs
0.453[zip.env] do unary inferences
0.453[zip.env] apply unary rule equality_resolution
0.453[zip.env] apply unary rule equality_factoring
0.453[zip.env] apply unary rule narrow_lit_defs
0.453[zip.env] apply unary rule ind_types.exhaustiveness
0.453[zip.env] apply unary rule ind_types.acyclicity
0.453[zip.env] apply unary rule avatar_check_empty
0.453[zip.env] apply generating rule avatar.lemmas (full: false)
0.453[zip.env] apply generating rule avatar_check_sat (full: false)
0.453[zip.avatar] SAT-solver reports "SAT"
0.453[zip.saturate] inferred new clauses: []
0.453[zip.sup] @[neg_reflect did not simplify the clause @]
0.453[zip.sup] @[neg_reflect did not simplify the clause @]
0.453[zip.saturate] ### step   338 ###
0.453[zip.saturate]
    given (338 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7`
0.453[zip.env] apply binary rule superposition_active
0.453[zip.env] apply binary rule superposition_passive
0.454[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.454[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8
0.454[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.454[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) a (f d)+* ∨ cQ_2 a a X0+*]/id:371/depth:8
0.454[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.454[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f c)+* ∨ cQ_2 a a c+]/id:372/depth:8
0.454[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.454[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f b)+* ∨ cQ_2 a a b+]/id:373/depth:8
0.455[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f X1)*]/id:345/depth:7[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.455[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f a)+* ∨ cQ_2 a a a+]/id:374/depth:8
0.455[zip.env] apply binary rule ctx_narrow
0.455[zip.env] apply binary rule narrow_term_defs
0.455[zip.env] do unary inferences
0.455[zip.env] apply unary rule equality_resolution
0.455[zip.env] apply unary rule equality_factoring
0.455[zip.env] apply unary rule narrow_lit_defs
0.455[zip.env] apply unary rule ind_types.exhaustiveness
0.455[zip.env] apply unary rule ind_types.acyclicity
0.455[zip.env] apply unary rule avatar_check_empty
0.455[zip.env] apply generating rule avatar.lemmas (full: false)
0.455[zip.env] apply generating rule avatar_check_sat (full: false)
0.455[zip.avatar] SAT-solver reports "SAT"
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8, 
       forall X0. [¬cQ_1 (f a) a (f d)+* ∨ cQ_2 a a X0+*]/id:371/depth:8, 
       [¬cQ_1 (f a) a (f c)+* ∨ cQ_2 a a c+]/id:372/depth:8, 
       [¬cQ_1 (f a) a (f b)+* ∨ cQ_2 a a b+]/id:373/depth:8, 
       [¬cQ_1 (f a) a (f a)+* ∨ cQ_2 a a a+]/id:374/depth:8]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.455[zip.sup] @[neg_reflect did not simplify the clause @]
0.456[zip.saturate] ### step   339 ###
0.456[zip.saturate]
    given (339 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) a (f d)+* ∨ cQ_2 a a X0+*]/id:371/depth:8`
0.456[zip.env] apply binary rule superposition_active
0.456[zip.env] apply binary rule superposition_passive
0.456[zip.env] apply binary rule ctx_narrow
0.456[zip.env] apply binary rule narrow_term_defs
0.456[zip.env] do unary inferences
0.456[zip.env] apply unary rule equality_resolution
0.456[zip.env] apply unary rule equality_factoring
0.456[zip.env] apply unary rule narrow_lit_defs
0.456[zip.env] apply unary rule ind_types.exhaustiveness
0.456[zip.env] apply unary rule ind_types.acyclicity
0.456[zip.env] apply unary rule avatar_check_empty
0.456[zip.env] apply generating rule avatar.lemmas (full: false)
0.456[zip.env] apply generating rule avatar_check_sat (full: false)
0.456[zip.avatar] SAT-solver reports "SAT"
0.456[zip.saturate] inferred new clauses: []
0.456[zip.sup] @[neg_reflect did not simplify the clause @]
0.456[zip.sup] @[neg_reflect did not simplify the clause @]
0.456[zip.saturate] ### step   340 ###
0.456[zip.saturate]
    given (340 steps, penalty 1):
      `[¬cQ_1 (f a) a (f c)+* ∨ cQ_2 a a c+]/id:372/depth:8`
0.456[zip.env] apply binary rule superposition_active
0.456[zip.env] apply binary rule superposition_passive
0.456[zip.env] apply binary rule ctx_narrow
0.456[zip.env] apply binary rule narrow_term_defs
0.456[zip.env] do unary inferences
0.456[zip.env] apply unary rule equality_resolution
0.456[zip.env] apply unary rule equality_factoring
0.456[zip.env] apply unary rule narrow_lit_defs
0.456[zip.env] apply unary rule ind_types.exhaustiveness
0.456[zip.env] apply unary rule ind_types.acyclicity
0.456[zip.env] apply unary rule avatar_check_empty
0.456[zip.env] apply generating rule avatar.lemmas (full: false)
0.456[zip.env] apply generating rule avatar_check_sat (full: false)
0.456[zip.avatar] SAT-solver reports "SAT"
0.456[zip.saturate] inferred new clauses: []
0.456[zip.sup] @[neg_reflect did not simplify the clause @]
0.457[zip.sup] @[neg_reflect did not simplify the clause @]
0.457[zip.saturate] ### step   341 ###
0.457[zip.saturate]
    given (341 steps, penalty 1):
      `[¬cQ_1 (f a) a (f b)+* ∨ cQ_2 a a b+]/id:373/depth:8`
0.457[zip.env] apply binary rule superposition_active
0.457[zip.env] apply binary rule superposition_passive
0.457[zip.env] apply binary rule ctx_narrow
0.457[zip.env] apply binary rule narrow_term_defs
0.457[zip.env] do unary inferences
0.457[zip.env] apply unary rule equality_resolution
0.457[zip.env] apply unary rule equality_factoring
0.457[zip.env] apply unary rule narrow_lit_defs
0.457[zip.env] apply unary rule ind_types.exhaustiveness
0.457[zip.env] apply unary rule ind_types.acyclicity
0.457[zip.env] apply unary rule avatar_check_empty
0.457[zip.env] apply generating rule avatar.lemmas (full: false)
0.457[zip.env] apply generating rule avatar_check_sat (full: false)
0.457[zip.avatar] SAT-solver reports "SAT"
0.457[zip.saturate] inferred new clauses: []
0.457[zip.sup] @[neg_reflect did not simplify the clause @]
0.457[zip.sup] @[neg_reflect did not simplify the clause @]
0.457[zip.saturate] ### step   342 ###
0.457[zip.saturate]
    given (342 steps, penalty 1):
      `[¬cQ_1 (f a) a (f a)+* ∨ cQ_2 a a a+]/id:374/depth:8`
0.457[zip.env] apply binary rule superposition_active
0.457[zip.env] apply binary rule superposition_passive
0.457[zip.env] apply binary rule ctx_narrow
0.457[zip.env] apply binary rule narrow_term_defs
0.457[zip.env] do unary inferences
0.457[zip.env] apply unary rule equality_resolution
0.457[zip.env] apply unary rule equality_factoring
0.457[zip.env] apply unary rule narrow_lit_defs
0.457[zip.env] apply unary rule ind_types.exhaustiveness
0.457[zip.env] apply unary rule ind_types.acyclicity
0.457[zip.env] apply unary rule avatar_check_empty
0.457[zip.env] apply generating rule avatar.lemmas (full: false)
0.457[zip.env] apply generating rule avatar_check_sat (full: false)
0.457[zip.avatar] SAT-solver reports "SAT"
0.457[zip.saturate] inferred new clauses: []
0.457[zip.sup] @[neg_reflect did not simplify the clause @]
0.458[zip.sup] @[neg_reflect did not simplify the clause @]
0.458[zip.saturate] ### step   343 ###
0.458[zip.saturate]
    given (343 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8`
0.458[zip.env] apply binary rule superposition_active
0.458[zip.env] apply binary rule superposition_passive
0.458[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.458[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9
0.459[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.459[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f d))+*]/id:376/depth:9
0.459[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.459[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f c))+*]/id:377/depth:9
0.459[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.459[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f b))+*]/id:378/depth:9
0.459[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f X1))* ∨ cQ_2 X2 c X0+*]/id:252/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.459[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f a))+*]/id:379/depth:9
0.459[zip.env] apply binary rule ctx_narrow
0.459[zip.env] apply binary rule narrow_term_defs
0.459[zip.env] do unary inferences
0.459[zip.env] apply unary rule equality_resolution
0.459[zip.env] apply unary rule equality_factoring
0.460[zip.env] apply unary rule narrow_lit_defs
0.460[zip.env] apply unary rule ind_types.exhaustiveness
0.460[zip.env] apply unary rule ind_types.acyclicity
0.460[zip.env] apply unary rule avatar_check_empty
0.460[zip.env] apply generating rule avatar.lemmas (full: false)
0.460[zip.env] apply generating rule avatar_check_sat (full: false)
0.460[zip.avatar] SAT-solver reports "SAT"
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9, 
       forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f d))+*]/id:376/depth:9, 
       forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f c))+*]/id:377/depth:9, 
       forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f b))+*]/id:378/depth:9, 
       forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f a))+*]/id:379/depth:9]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.sup] @[neg_reflect did not simplify the clause @]
0.460[zip.saturate] ### step   344 ###
0.460[zip.saturate]
    given (344 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f d))+*]/id:376/depth:9`
0.461[zip.env] apply binary rule superposition_active
0.461[zip.env] apply binary rule superposition_passive
0.461[zip.env] apply binary rule ctx_narrow
0.461[zip.env] apply binary rule narrow_term_defs
0.461[zip.env] do unary inferences
0.461[zip.env] apply unary rule equality_resolution
0.461[zip.env] apply unary rule equality_factoring
0.461[zip.env] apply unary rule narrow_lit_defs
0.461[zip.env] apply unary rule ind_types.exhaustiveness
0.461[zip.env] apply unary rule ind_types.acyclicity
0.461[zip.env] apply unary rule avatar_check_empty
0.461[zip.env] apply generating rule avatar.lemmas (full: false)
0.461[zip.env] apply generating rule avatar_check_sat (full: false)
0.461[zip.avatar] SAT-solver reports "SAT"
0.461[zip.saturate] inferred new clauses: []
0.461[zip.sup] @[neg_reflect did not simplify the clause @]
0.461[zip.sup] @[neg_reflect did not simplify the clause @]
0.461[zip.saturate] ### step   345 ###
0.461[zip.saturate]
    given (345 steps, penalty 1):
      `forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f c))+*]/id:377/depth:9`
0.461[zip.env] apply binary rule superposition_active
0.461[zip.env] apply binary rule superposition_passive
0.461[zip.env] apply binary rule ctx_narrow
0.461[zip.env] apply binary rule narrow_term_defs
0.461[zip.env] do unary inferences
0.461[zip.env] apply unary rule equality_resolution
0.461[zip.env] apply unary rule equality_factoring
0.461[zip.env] apply unary rule narrow_lit_defs
0.461[zip.env] apply unary rule ind_types.exhaustiveness
0.461[zip.env] apply unary rule ind_types.acyclicity
0.461[zip.env] apply unary rule avatar_check_empty
0.461[zip.env] apply generating rule avatar.lemmas (full: false)
0.461[zip.env] apply generating rule avatar_check_sat (full: false)
0.461[zip.avatar] SAT-solver reports "SAT"
0.461[zip.saturate] inferred new clauses: []
0.461[zip.sup] @[neg_reflect did not simplify the clause @]
0.461[zip.sup] @[neg_reflect did not simplify the clause @]
0.462[zip.saturate] ### step   346 ###
0.462[zip.saturate]
    given (346 steps, penalty 1):
      `forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f b))+*]/id:378/depth:9`
0.462[zip.env] apply binary rule superposition_active
0.462[zip.env] apply binary rule superposition_passive
0.462[zip.env] apply binary rule ctx_narrow
0.462[zip.env] apply binary rule narrow_term_defs
0.462[zip.env] do unary inferences
0.462[zip.env] apply unary rule equality_resolution
0.462[zip.env] apply unary rule equality_factoring
0.462[zip.env] apply unary rule narrow_lit_defs
0.462[zip.env] apply unary rule ind_types.exhaustiveness
0.462[zip.env] apply unary rule ind_types.acyclicity
0.462[zip.env] apply unary rule avatar_check_empty
0.462[zip.env] apply generating rule avatar.lemmas (full: false)
0.462[zip.env] apply generating rule avatar_check_sat (full: false)
0.462[zip.avatar] SAT-solver reports "SAT"
0.462[zip.saturate] inferred new clauses: []
0.462[zip.sup] @[neg_reflect did not simplify the clause @]
0.462[zip.sup] @[neg_reflect did not simplify the clause @]
0.462[zip.saturate] ### step   347 ###
0.462[zip.saturate]
    given (347 steps, penalty 1):
      `forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f a))+*]/id:379/depth:9`
0.462[zip.env] apply binary rule superposition_active
0.462[zip.env] apply binary rule superposition_passive
0.462[zip.env] apply binary rule ctx_narrow
0.462[zip.env] apply binary rule narrow_term_defs
0.462[zip.env] do unary inferences
0.462[zip.env] apply unary rule equality_resolution
0.462[zip.env] apply unary rule equality_factoring
0.462[zip.env] apply unary rule narrow_lit_defs
0.462[zip.env] apply unary rule ind_types.exhaustiveness
0.462[zip.env] apply unary rule ind_types.acyclicity
0.462[zip.env] apply unary rule avatar_check_empty
0.462[zip.env] apply generating rule avatar.lemmas (full: false)
0.462[zip.env] apply generating rule avatar_check_sat (full: false)
0.462[zip.avatar] SAT-solver reports "SAT"
0.462[zip.saturate] inferred new clauses: []
0.462[zip.sup] @[neg_reflect did not simplify the clause @]
0.463[zip.sup] @[neg_reflect did not simplify the clause @]
0.463[zip.saturate] ### step   348 ###
0.463[zip.saturate]
    given (348 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8`
0.463[zip.env] apply binary rule superposition_active
0.463[zip.env] apply binary rule superposition_passive
0.463[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.463[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9
0.463[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.464[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f d))+*]/id:381/depth:9
0.464[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.464[zip.sup]
    ... ok, conclusion
    [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f c))+*]/id:382/depth:9
0.464[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.464[zip.sup]
    ... ok, conclusion
    [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f b))+*]/id:383/depth:9
0.464[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f X1))* ∨ cQ_2 c c X0+*]/id:257/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.464[zip.sup]
    ... ok, conclusion
    [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f a))+*]/id:384/depth:9
0.464[zip.env] apply binary rule ctx_narrow
0.464[zip.env] apply binary rule narrow_term_defs
0.464[zip.env] do unary inferences
0.464[zip.env] apply unary rule equality_resolution
0.464[zip.env] apply unary rule equality_factoring
0.464[zip.env] apply unary rule narrow_lit_defs
0.464[zip.env] apply unary rule ind_types.exhaustiveness
0.464[zip.env] apply unary rule ind_types.acyclicity
0.464[zip.env] apply unary rule avatar_check_empty
0.464[zip.env] apply generating rule avatar.lemmas (full: false)
0.464[zip.env] apply generating rule avatar_check_sat (full: false)
0.465[zip.avatar] SAT-solver reports "SAT"
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9, 
       forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f d))+*]/id:381/depth:9, 
       [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f c))+*]/id:382/depth:9, 
       [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f b))+*]/id:383/depth:9, 
       [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f a))+*]/id:384/depth:9]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.sup] @[neg_reflect did not simplify the clause @]
0.465[zip.saturate] ### step   349 ###
0.465[zip.saturate]
    given (349 steps, penalty 1):
      `forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f d))+*]/id:381/depth:9`
0.466[zip.env] apply binary rule superposition_active
0.466[zip.env] apply binary rule superposition_passive
0.466[zip.env] apply binary rule ctx_narrow
0.466[zip.env] apply binary rule narrow_term_defs
0.466[zip.env] do unary inferences
0.466[zip.env] apply unary rule equality_resolution
0.466[zip.env] apply unary rule equality_factoring
0.466[zip.env] apply unary rule narrow_lit_defs
0.466[zip.env] apply unary rule ind_types.exhaustiveness
0.466[zip.env] apply unary rule ind_types.acyclicity
0.466[zip.env] apply unary rule avatar_check_empty
0.466[zip.env] apply generating rule avatar.lemmas (full: false)
0.466[zip.env] apply generating rule avatar_check_sat (full: false)
0.466[zip.avatar] SAT-solver reports "SAT"
0.466[zip.saturate] inferred new clauses: []
0.466[zip.sup] @[neg_reflect did not simplify the clause @]
0.466[zip.sup] @[neg_reflect did not simplify the clause @]
0.467[zip.saturate] ### step   350 ###
0.467[zip.saturate]
    given (350 steps, penalty 1):
      `[cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f c))+*]/id:382/depth:9`
0.467[zip.env] apply binary rule superposition_active
0.467[zip.env] apply binary rule superposition_passive
0.467[zip.env] apply binary rule ctx_narrow
0.467[zip.env] apply binary rule narrow_term_defs
0.467[zip.env] do unary inferences
0.467[zip.env] apply unary rule equality_resolution
0.467[zip.env] apply unary rule equality_factoring
0.467[zip.env] apply unary rule narrow_lit_defs
0.467[zip.env] apply unary rule ind_types.exhaustiveness
0.467[zip.env] apply unary rule ind_types.acyclicity
0.467[zip.env] apply unary rule avatar_check_empty
0.467[zip.env] apply generating rule avatar.lemmas (full: false)
0.467[zip.env] apply generating rule avatar_check_sat (full: false)
0.467[zip.avatar] SAT-solver reports "SAT"
0.467[zip.saturate] inferred new clauses: []
0.468[zip.sup] @[neg_reflect did not simplify the clause @]
0.468[zip.sup] @[neg_reflect did not simplify the clause @]
0.468[zip.saturate] ### step   351 ###
0.468[zip.saturate]
    given (351 steps, penalty 1):
      `[cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f b))+*]/id:383/depth:9`
0.469[zip.env] apply binary rule superposition_active
0.469[zip.env] apply binary rule superposition_passive
0.469[zip.env] apply binary rule ctx_narrow
0.469[zip.env] apply binary rule narrow_term_defs
0.469[zip.env] do unary inferences
0.469[zip.env] apply unary rule equality_resolution
0.469[zip.env] apply unary rule equality_factoring
0.469[zip.env] apply unary rule narrow_lit_defs
0.469[zip.env] apply unary rule ind_types.exhaustiveness
0.469[zip.env] apply unary rule ind_types.acyclicity
0.469[zip.env] apply unary rule avatar_check_empty
0.469[zip.env] apply generating rule avatar.lemmas (full: false)
0.469[zip.env] apply generating rule avatar_check_sat (full: false)
0.469[zip.avatar] SAT-solver reports "SAT"
0.469[zip.saturate] inferred new clauses: []
0.469[zip.sup] @[neg_reflect did not simplify the clause @]
0.469[zip.sup] @[neg_reflect did not simplify the clause @]
0.469[zip.saturate] ### step   352 ###
0.469[zip.saturate]
    given (352 steps, penalty 1):
      `[cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f a))+*]/id:384/depth:9`
0.470[zip.env] apply binary rule superposition_active
0.470[zip.env] apply binary rule superposition_passive
0.470[zip.env] apply binary rule ctx_narrow
0.470[zip.env] apply binary rule narrow_term_defs
0.470[zip.env] do unary inferences
0.470[zip.env] apply unary rule equality_resolution
0.470[zip.env] apply unary rule equality_factoring
0.470[zip.env] apply unary rule narrow_lit_defs
0.470[zip.env] apply unary rule ind_types.exhaustiveness
0.470[zip.env] apply unary rule ind_types.acyclicity
0.470[zip.env] apply unary rule avatar_check_empty
0.470[zip.env] apply generating rule avatar.lemmas (full: false)
0.470[zip.env] apply generating rule avatar_check_sat (full: false)
0.470[zip.avatar] SAT-solver reports "SAT"
0.470[zip.saturate] inferred new clauses: []
0.470[zip.sup] @[neg_reflect did not simplify the clause @]
0.470[zip.sup] @[neg_reflect did not simplify the clause @]
0.470[zip.saturate] ### step   353 ###
0.470[zip.saturate]
    given (353 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8`
0.471[zip.env] apply binary rule superposition_active
0.471[zip.env] apply binary rule superposition_passive
0.471[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.471[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9
0.471[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.471[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f d))+*]/id:386/depth:9
0.471[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.471[zip.sup]
    ... ok, conclusion
    [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f c))+*]/id:387/depth:9
0.472[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.472[zip.sup]
    ... ok, conclusion
    [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f b))+*]/id:388/depth:9
0.472[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f X1))* ∨ cQ_2 b c X0+*]/id:262/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.472[zip.sup]
    ... ok, conclusion
    [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f a))+*]/id:389/depth:9
0.472[zip.env] apply binary rule ctx_narrow
0.472[zip.env] apply binary rule narrow_term_defs
0.472[zip.env] do unary inferences
0.472[zip.env] apply unary rule equality_resolution
0.472[zip.env] apply unary rule equality_factoring
0.472[zip.env] apply unary rule narrow_lit_defs
0.472[zip.env] apply unary rule ind_types.exhaustiveness
0.472[zip.env] apply unary rule ind_types.acyclicity
0.472[zip.env] apply unary rule avatar_check_empty
0.472[zip.env] apply generating rule avatar.lemmas (full: false)
0.472[zip.env] apply generating rule avatar_check_sat (full: false)
0.472[zip.avatar] SAT-solver reports "SAT"
0.472[zip.sup] @[neg_reflect did not simplify the clause @]
0.472[zip.sup] @[neg_reflect did not simplify the clause @]
0.472[zip.sup] @[neg_reflect did not simplify the clause @]
0.472[zip.sup] @[neg_reflect did not simplify the clause @]
0.472[zip.sup] @[neg_reflect did not simplify the clause @]
0.472[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9, 
       forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f d))+*]/id:386/depth:9, 
       [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f c))+*]/id:387/depth:9, 
       [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f b))+*]/id:388/depth:9, 
       [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f a))+*]/id:389/depth:9]
0.473[zip.sup] @[neg_reflect did not simplify the clause @]
0.473[zip.sup] @[neg_reflect did not simplify the clause @]
0.473[zip.saturate] ### step   354 ###
0.473[zip.saturate]
    given (354 steps, penalty 1):
      `forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f d))+*]/id:386/depth:9`
0.473[zip.env] apply binary rule superposition_active
0.473[zip.env] apply binary rule superposition_passive
0.473[zip.env] apply binary rule ctx_narrow
0.473[zip.env] apply binary rule narrow_term_defs
0.473[zip.env] do unary inferences
0.473[zip.env] apply unary rule equality_resolution
0.473[zip.env] apply unary rule equality_factoring
0.473[zip.env] apply unary rule narrow_lit_defs
0.473[zip.env] apply unary rule ind_types.exhaustiveness
0.473[zip.env] apply unary rule ind_types.acyclicity
0.473[zip.env] apply unary rule avatar_check_empty
0.473[zip.env] apply generating rule avatar.lemmas (full: false)
0.473[zip.env] apply generating rule avatar_check_sat (full: false)
0.473[zip.avatar] SAT-solver reports "SAT"
0.473[zip.saturate] inferred new clauses: []
0.474[zip.sup] @[neg_reflect did not simplify the clause @]
0.474[zip.sup] @[neg_reflect did not simplify the clause @]
0.474[zip.saturate] ### step   355 ###
0.474[zip.saturate]
    given (355 steps, penalty 1):
      `[cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f c))+*]/id:387/depth:9`
0.474[zip.env] apply binary rule superposition_active
0.474[zip.env] apply binary rule superposition_passive
0.474[zip.env] apply binary rule ctx_narrow
0.474[zip.env] apply binary rule narrow_term_defs
0.474[zip.env] do unary inferences
0.474[zip.env] apply unary rule equality_resolution
0.474[zip.env] apply unary rule equality_factoring
0.474[zip.env] apply unary rule narrow_lit_defs
0.474[zip.env] apply unary rule ind_types.exhaustiveness
0.474[zip.env] apply unary rule ind_types.acyclicity
0.474[zip.env] apply unary rule avatar_check_empty
0.474[zip.env] apply generating rule avatar.lemmas (full: false)
0.474[zip.env] apply generating rule avatar_check_sat (full: false)
0.474[zip.avatar] SAT-solver reports "SAT"
0.474[zip.saturate] inferred new clauses: []
0.474[zip.sup] @[neg_reflect did not simplify the clause @]
0.474[zip.sup] @[neg_reflect did not simplify the clause @]
0.475[zip.saturate] ### step   356 ###
0.475[zip.saturate]
    given (356 steps, penalty 1):
      `[cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f b))+*]/id:388/depth:9`
0.475[zip.env] apply binary rule superposition_active
0.475[zip.env] apply binary rule superposition_passive
0.475[zip.env] apply binary rule ctx_narrow
0.475[zip.env] apply binary rule narrow_term_defs
0.475[zip.env] do unary inferences
0.475[zip.env] apply unary rule equality_resolution
0.475[zip.env] apply unary rule equality_factoring
0.475[zip.env] apply unary rule narrow_lit_defs
0.475[zip.env] apply unary rule ind_types.exhaustiveness
0.475[zip.env] apply unary rule ind_types.acyclicity
0.475[zip.env] apply unary rule avatar_check_empty
0.475[zip.env] apply generating rule avatar.lemmas (full: false)
0.475[zip.env] apply generating rule avatar_check_sat (full: false)
0.475[zip.avatar] SAT-solver reports "SAT"
0.475[zip.saturate] inferred new clauses: []
0.475[zip.sup] @[neg_reflect did not simplify the clause @]
0.475[zip.sup] @[neg_reflect did not simplify the clause @]
0.475[zip.saturate] ### step   357 ###
0.475[zip.saturate]
    given (357 steps, penalty 1):
      `[cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f a))+*]/id:389/depth:9`
0.475[zip.env] apply binary rule superposition_active
0.475[zip.env] apply binary rule superposition_passive
0.476[zip.env] apply binary rule ctx_narrow
0.476[zip.env] apply binary rule narrow_term_defs
0.476[zip.env] do unary inferences
0.476[zip.env] apply unary rule equality_resolution
0.476[zip.env] apply unary rule equality_factoring
0.476[zip.env] apply unary rule narrow_lit_defs
0.476[zip.env] apply unary rule ind_types.exhaustiveness
0.476[zip.env] apply unary rule ind_types.acyclicity
0.476[zip.env] apply unary rule avatar_check_empty
0.476[zip.env] apply generating rule avatar.lemmas (full: false)
0.476[zip.env] apply generating rule avatar_check_sat (full: false)
0.476[zip.avatar] SAT-solver reports "SAT"
0.476[zip.saturate] inferred new clauses: []
0.476[zip.sup] @[neg_reflect did not simplify the clause @]
0.476[zip.sup] @[neg_reflect did not simplify the clause @]
0.476[zip.saturate] ### step   358 ###
0.476[zip.saturate]
    given (358 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8`
0.476[zip.env] apply binary rule superposition_active
0.476[zip.env] apply binary rule superposition_passive
0.476[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.477[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9
0.477[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.477[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f d))+*]/id:391/depth:9
0.477[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.477[zip.sup]
    ... ok, conclusion
    [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f c))+*]/id:392/depth:9
0.477[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.477[zip.sup]
    ... ok, conclusion
    [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f b))+*]/id:393/depth:9
0.477[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f X1))* ∨ cQ_2 a c X0+*]/id:272/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.477[zip.sup]
    ... ok, conclusion
    [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f a))+*]/id:394/depth:9
0.478[zip.env] apply binary rule ctx_narrow
0.478[zip.env] apply binary rule narrow_term_defs
0.478[zip.env] do unary inferences
0.478[zip.env] apply unary rule equality_resolution
0.478[zip.env] apply unary rule equality_factoring
0.478[zip.env] apply unary rule narrow_lit_defs
0.478[zip.env] apply unary rule ind_types.exhaustiveness
0.478[zip.env] apply unary rule ind_types.acyclicity
0.478[zip.env] apply unary rule avatar_check_empty
0.478[zip.env] apply generating rule avatar.lemmas (full: false)
0.478[zip.env] apply generating rule avatar_check_sat (full: false)
0.478[zip.avatar] SAT-solver reports "SAT"
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9, 
       forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f d))+*]/id:391/depth:9, 
       [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f c))+*]/id:392/depth:9, 
       [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f b))+*]/id:393/depth:9, 
       [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f a))+*]/id:394/depth:9]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.sup] @[neg_reflect did not simplify the clause @]
0.478[zip.saturate] ### step   359 ###
0.478[zip.saturate]
    given (359 steps, penalty 1):
      `forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f d))+*]/id:391/depth:9`
0.478[zip.env] apply binary rule superposition_active
0.478[zip.env] apply binary rule superposition_passive
0.478[zip.env] apply binary rule ctx_narrow
0.479[zip.env] apply binary rule narrow_term_defs
0.479[zip.env] do unary inferences
0.479[zip.env] apply unary rule equality_resolution
0.479[zip.env] apply unary rule equality_factoring
0.479[zip.env] apply unary rule narrow_lit_defs
0.479[zip.env] apply unary rule ind_types.exhaustiveness
0.479[zip.env] apply unary rule ind_types.acyclicity
0.479[zip.env] apply unary rule avatar_check_empty
0.479[zip.env] apply generating rule avatar.lemmas (full: false)
0.479[zip.env] apply generating rule avatar_check_sat (full: false)
0.479[zip.avatar] SAT-solver reports "SAT"
0.479[zip.saturate] inferred new clauses: []
0.479[zip.sup] @[neg_reflect did not simplify the clause @]
0.479[zip.sup] @[neg_reflect did not simplify the clause @]
0.479[zip.saturate] ### step   360 ###
0.479[zip.saturate]
    given (360 steps, penalty 1):
      `[cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f c))+*]/id:392/depth:9`
0.479[zip.env] apply binary rule superposition_active
0.479[zip.env] apply binary rule superposition_passive
0.479[zip.env] apply binary rule ctx_narrow
0.479[zip.env] apply binary rule narrow_term_defs
0.479[zip.env] do unary inferences
0.479[zip.env] apply unary rule equality_resolution
0.479[zip.env] apply unary rule equality_factoring
0.479[zip.env] apply unary rule narrow_lit_defs
0.479[zip.env] apply unary rule ind_types.exhaustiveness
0.479[zip.env] apply unary rule ind_types.acyclicity
0.479[zip.env] apply unary rule avatar_check_empty
0.479[zip.env] apply generating rule avatar.lemmas (full: false)
0.479[zip.env] apply generating rule avatar_check_sat (full: false)
0.479[zip.avatar] SAT-solver reports "SAT"
0.479[zip.saturate] inferred new clauses: []
0.479[zip.sup] @[neg_reflect did not simplify the clause @]
0.479[zip.sup] @[neg_reflect did not simplify the clause @]
0.479[zip.saturate] ### step   361 ###
0.479[zip.saturate]
    given (361 steps, penalty 1):
      `[cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f b))+*]/id:393/depth:9`
0.480[zip.env] apply binary rule superposition_active
0.480[zip.env] apply binary rule superposition_passive
0.480[zip.env] apply binary rule ctx_narrow
0.480[zip.env] apply binary rule narrow_term_defs
0.480[zip.env] do unary inferences
0.480[zip.env] apply unary rule equality_resolution
0.480[zip.env] apply unary rule equality_factoring
0.480[zip.env] apply unary rule narrow_lit_defs
0.480[zip.env] apply unary rule ind_types.exhaustiveness
0.480[zip.env] apply unary rule ind_types.acyclicity
0.480[zip.env] apply unary rule avatar_check_empty
0.480[zip.env] apply generating rule avatar.lemmas (full: false)
0.480[zip.env] apply generating rule avatar_check_sat (full: false)
0.480[zip.avatar] SAT-solver reports "SAT"
0.480[zip.saturate] inferred new clauses: []
0.480[zip.sup] @[neg_reflect did not simplify the clause @]
0.480[zip.sup] @[neg_reflect did not simplify the clause @]
0.480[zip.saturate] ### step   362 ###
0.480[zip.saturate]
    given (362 steps, penalty 1):
      `[cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f a))+*]/id:394/depth:9`
0.480[zip.env] apply binary rule superposition_active
0.480[zip.env] apply binary rule superposition_passive
0.480[zip.env] apply binary rule ctx_narrow
0.480[zip.env] apply binary rule narrow_term_defs
0.480[zip.env] do unary inferences
0.480[zip.env] apply unary rule equality_resolution
0.480[zip.env] apply unary rule equality_factoring
0.480[zip.env] apply unary rule narrow_lit_defs
0.480[zip.env] apply unary rule ind_types.exhaustiveness
0.480[zip.env] apply unary rule ind_types.acyclicity
0.480[zip.env] apply unary rule avatar_check_empty
0.480[zip.env] apply generating rule avatar.lemmas (full: false)
0.480[zip.env] apply generating rule avatar_check_sat (full: false)
0.480[zip.avatar] SAT-solver reports "SAT"
0.480[zip.saturate] inferred new clauses: []
0.480[zip.sup] @[neg_reflect did not simplify the clause @]
0.480[zip.sup] @[neg_reflect did not simplify the clause @]
0.481[zip.saturate] ### step   363 ###
0.481[zip.saturate]
    given (363 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8`
0.481[zip.env] apply binary rule superposition_active
0.481[zip.env] apply binary rule superposition_passive
0.481[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.481[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9
0.481[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.482[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f d))+*]/id:396/depth:9
0.482[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.482[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f c))+*]/id:397/depth:9
0.482[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.482[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f b))+*]/id:398/depth:9
0.482[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.483[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f a))+*]/id:399/depth:9
0.483[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f X1))* ∨ cQ_2 X2 b X0+*]/id:301/depth:8[0]
         passive_lit=cQ_2 X2 b X0 p=2.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.483[zip.sup] will yield a tautology
0.483[zip.sup] ... cancel, will yield a tautology
0.483[zip.env] apply binary rule ctx_narrow
0.483[zip.env] apply binary rule narrow_term_defs
0.483[zip.env] do unary inferences
0.483[zip.env] apply unary rule equality_resolution
0.483[zip.env] apply unary rule equality_factoring
0.483[zip.env] apply unary rule narrow_lit_defs
0.483[zip.env] apply unary rule ind_types.exhaustiveness
0.483[zip.env] apply unary rule ind_types.acyclicity
0.483[zip.env] apply unary rule avatar_check_empty
0.483[zip.env] apply generating rule avatar.lemmas (full: false)
0.483[zip.env] apply generating rule avatar_check_sat (full: false)
0.483[zip.avatar] SAT-solver reports "SAT"
0.483[zip.sup] @[neg_reflect did not simplify the clause @]
0.483[zip.sup] @[neg_reflect did not simplify the clause @]
0.483[zip.sup] @[neg_reflect did not simplify the clause @]
0.483[zip.sup] @[neg_reflect did not simplify the clause @]
0.483[zip.sup] @[neg_reflect did not simplify the clause @]
0.484[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9, 
       forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f d))+*]/id:396/depth:9, 
       forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f c))+*]/id:397/depth:9, 
       forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f b))+*]/id:398/depth:9, 
       forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f a))+*]/id:399/depth:9]
0.484[zip.sup] @[neg_reflect did not simplify the clause @]
0.484[zip.sup] @[neg_reflect did not simplify the clause @]
0.484[zip.saturate] ### step   364 ###
0.484[zip.saturate]
    given (364 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f d))+*]/id:396/depth:9`
0.484[zip.env] apply binary rule superposition_active
0.484[zip.env] apply binary rule superposition_passive
0.484[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f d))+*]/id:396/depth:9[0]
         passive_lit=cQ_2 X1 b X0 p=0.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.484[zip.sup] will yield a tautology
0.484[zip.sup] ... cancel, will yield a tautology
0.484[zip.env] apply binary rule ctx_narrow
0.484[zip.env] apply binary rule narrow_term_defs
0.485[zip.env] do unary inferences
0.485[zip.env] apply unary rule equality_resolution
0.485[zip.env] apply unary rule equality_factoring
0.485[zip.env] apply unary rule narrow_lit_defs
0.485[zip.env] apply unary rule ind_types.exhaustiveness
0.485[zip.env] apply unary rule ind_types.acyclicity
0.485[zip.env] apply unary rule avatar_check_empty
0.485[zip.env] apply generating rule avatar.lemmas (full: false)
0.485[zip.env] apply generating rule avatar_check_sat (full: false)
0.485[zip.avatar] SAT-solver reports "SAT"
0.485[zip.saturate] inferred new clauses: []
0.485[zip.sup] @[neg_reflect did not simplify the clause @]
0.485[zip.sup] @[neg_reflect did not simplify the clause @]
0.485[zip.saturate] ### step   365 ###
0.485[zip.saturate]
    given (365 steps, penalty 1):
      `forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f c))+*]/id:397/depth:9`
0.485[zip.env] apply binary rule superposition_active
0.485[zip.env] apply binary rule superposition_passive
0.485[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f c))+*]/id:397/depth:9[0]
         passive_lit=cQ_2 X0 b c p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.485[zip.sup] will yield a tautology
0.485[zip.sup] ... cancel, will yield a tautology
0.485[zip.env] apply binary rule ctx_narrow
0.485[zip.env] apply binary rule narrow_term_defs
0.485[zip.env] do unary inferences
0.485[zip.env] apply unary rule equality_resolution
0.485[zip.env] apply unary rule equality_factoring
0.485[zip.env] apply unary rule narrow_lit_defs
0.485[zip.env] apply unary rule ind_types.exhaustiveness
0.485[zip.env] apply unary rule ind_types.acyclicity
0.485[zip.env] apply unary rule avatar_check_empty
0.485[zip.env] apply generating rule avatar.lemmas (full: false)
0.485[zip.env] apply generating rule avatar_check_sat (full: false)
0.485[zip.avatar] SAT-solver reports "SAT"
0.485[zip.saturate] inferred new clauses: []
0.486[zip.sup] @[neg_reflect did not simplify the clause @]
0.486[zip.sup] @[neg_reflect did not simplify the clause @]
0.486[zip.saturate] ### step   366 ###
0.486[zip.saturate]
    given (366 steps, penalty 1):
      `forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f b))+*]/id:398/depth:9`
0.486[zip.env] apply binary rule superposition_active
0.486[zip.env] apply binary rule superposition_passive
0.486[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f b))+*]/id:398/depth:9[0]
         passive_lit=cQ_2 X0 b b p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.486[zip.sup] will yield a tautology
0.486[zip.sup] ... cancel, will yield a tautology
0.486[zip.env] apply binary rule ctx_narrow
0.486[zip.env] apply binary rule narrow_term_defs
0.486[zip.env] do unary inferences
0.486[zip.env] apply unary rule equality_resolution
0.486[zip.env] apply unary rule equality_factoring
0.486[zip.env] apply unary rule narrow_lit_defs
0.486[zip.env] apply unary rule ind_types.exhaustiveness
0.486[zip.env] apply unary rule ind_types.acyclicity
0.486[zip.env] apply unary rule avatar_check_empty
0.486[zip.env] apply generating rule avatar.lemmas (full: false)
0.486[zip.env] apply generating rule avatar_check_sat (full: false)
0.486[zip.avatar] SAT-solver reports "SAT"
0.486[zip.saturate] inferred new clauses: []
0.486[zip.sup] @[neg_reflect did not simplify the clause @]
0.486[zip.sup] @[neg_reflect did not simplify the clause @]
0.487[zip.saturate] ### step   367 ###
0.487[zip.saturate]
    given (367 steps, penalty 1):
      `forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f a))+*]/id:399/depth:9`
0.487[zip.env] apply binary rule superposition_active
0.487[zip.env] apply binary rule superposition_passive
0.487[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f a))+*]/id:399/depth:9[0]
         passive_lit=cQ_2 X0 b a p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.487[zip.sup] will yield a tautology
0.487[zip.sup] ... cancel, will yield a tautology
0.487[zip.env] apply binary rule ctx_narrow
0.487[zip.env] apply binary rule narrow_term_defs
0.487[zip.env] do unary inferences
0.487[zip.env] apply unary rule equality_resolution
0.487[zip.env] apply unary rule equality_factoring
0.487[zip.env] apply unary rule narrow_lit_defs
0.487[zip.env] apply unary rule ind_types.exhaustiveness
0.487[zip.env] apply unary rule ind_types.acyclicity
0.487[zip.env] apply unary rule avatar_check_empty
0.487[zip.env] apply generating rule avatar.lemmas (full: false)
0.487[zip.env] apply generating rule avatar_check_sat (full: false)
0.487[zip.avatar] SAT-solver reports "SAT"
0.487[zip.saturate] inferred new clauses: []
0.487[zip.sup] @[neg_reflect did not simplify the clause @]
0.487[zip.sup] @[neg_reflect did not simplify the clause @]
0.488[zip.saturate] ### step   368 ###
0.488[zip.saturate]
    given (368 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8`
0.488[zip.env] apply binary rule superposition_active
0.488[zip.env] apply binary rule superposition_passive
0.488[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.488[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9
0.488[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.488[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f d))+*]/id:401/depth:9
0.488[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.489[zip.sup]
    ... ok, conclusion
    [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f c))+*]/id:402/depth:9
0.489[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.489[zip.sup]
    ... ok, conclusion
    [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f b))+*]/id:403/depth:9
0.489[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f X1))* ∨ cQ_2 c b X0+*]/id:306/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.489[zip.sup]
    ... ok, conclusion
    [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f a))+*]/id:404/depth:9
0.489[zip.env] apply binary rule ctx_narrow
0.489[zip.env] apply binary rule narrow_term_defs
0.489[zip.env] do unary inferences
0.489[zip.env] apply unary rule equality_resolution
0.489[zip.env] apply unary rule equality_factoring
0.489[zip.env] apply unary rule narrow_lit_defs
0.489[zip.env] apply unary rule ind_types.exhaustiveness
0.489[zip.env] apply unary rule ind_types.acyclicity
0.489[zip.env] apply unary rule avatar_check_empty
0.489[zip.env] apply generating rule avatar.lemmas (full: false)
0.489[zip.env] apply generating rule avatar_check_sat (full: false)
0.489[zip.avatar] SAT-solver reports "SAT"
0.489[zip.sup] @[neg_reflect did not simplify the clause @]
0.489[zip.sup] @[neg_reflect did not simplify the clause @]
0.489[zip.sup] @[neg_reflect did not simplify the clause @]
0.489[zip.sup] @[neg_reflect did not simplify the clause @]
0.489[zip.sup] @[neg_reflect did not simplify the clause @]
0.489[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9, 
       forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f d))+*]/id:401/depth:9, 
       [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f c))+*]/id:402/depth:9, 
       [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f b))+*]/id:403/depth:9, 
       [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f a))+*]/id:404/depth:9]
0.490[zip.sup] @[neg_reflect did not simplify the clause @]
0.490[zip.sup] @[neg_reflect did not simplify the clause @]
0.490[zip.saturate] ### step   369 ###
0.490[zip.saturate]
    given (369 steps, penalty 1):
      `forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f d))+*]/id:401/depth:9`
0.490[zip.env] apply binary rule superposition_active
0.490[zip.env] apply binary rule superposition_passive
0.490[zip.env] apply binary rule ctx_narrow
0.490[zip.env] apply binary rule narrow_term_defs
0.490[zip.env] do unary inferences
0.490[zip.env] apply unary rule equality_resolution
0.490[zip.env] apply unary rule equality_factoring
0.490[zip.env] apply unary rule narrow_lit_defs
0.490[zip.env] apply unary rule ind_types.exhaustiveness
0.490[zip.env] apply unary rule ind_types.acyclicity
0.490[zip.env] apply unary rule avatar_check_empty
0.490[zip.env] apply generating rule avatar.lemmas (full: false)
0.490[zip.env] apply generating rule avatar_check_sat (full: false)
0.490[zip.avatar] SAT-solver reports "SAT"
0.490[zip.saturate] inferred new clauses: []
0.490[zip.sup] @[neg_reflect did not simplify the clause @]
0.490[zip.sup] @[neg_reflect did not simplify the clause @]
0.490[zip.saturate] ### step   370 ###
0.490[zip.saturate]
    given (370 steps, penalty 1):
      `[cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f c))+*]/id:402/depth:9`
0.491[zip.env] apply binary rule superposition_active
0.491[zip.env] apply binary rule superposition_passive
0.491[zip.env] apply binary rule ctx_narrow
0.491[zip.env] apply binary rule narrow_term_defs
0.491[zip.env] do unary inferences
0.491[zip.env] apply unary rule equality_resolution
0.491[zip.env] apply unary rule equality_factoring
0.491[zip.env] apply unary rule narrow_lit_defs
0.491[zip.env] apply unary rule ind_types.exhaustiveness
0.491[zip.env] apply unary rule ind_types.acyclicity
0.491[zip.env] apply unary rule avatar_check_empty
0.491[zip.env] apply generating rule avatar.lemmas (full: false)
0.491[zip.env] apply generating rule avatar_check_sat (full: false)
0.491[zip.avatar] SAT-solver reports "SAT"
0.491[zip.saturate] inferred new clauses: []
0.491[zip.sup] @[neg_reflect did not simplify the clause @]
0.491[zip.sup] @[neg_reflect did not simplify the clause @]
0.491[zip.saturate] ### step   371 ###
0.491[zip.saturate]
    given (371 steps, penalty 1):
      `[cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f b))+*]/id:403/depth:9`
0.491[zip.env] apply binary rule superposition_active
0.491[zip.env] apply binary rule superposition_passive
0.491[zip.env] apply binary rule ctx_narrow
0.491[zip.env] apply binary rule narrow_term_defs
0.491[zip.env] do unary inferences
0.491[zip.env] apply unary rule equality_resolution
0.491[zip.env] apply unary rule equality_factoring
0.491[zip.env] apply unary rule narrow_lit_defs
0.491[zip.env] apply unary rule ind_types.exhaustiveness
0.491[zip.env] apply unary rule ind_types.acyclicity
0.491[zip.env] apply unary rule avatar_check_empty
0.491[zip.env] apply generating rule avatar.lemmas (full: false)
0.491[zip.env] apply generating rule avatar_check_sat (full: false)
0.491[zip.avatar] SAT-solver reports "SAT"
0.491[zip.saturate] inferred new clauses: []
0.491[zip.sup] @[neg_reflect did not simplify the clause @]
0.491[zip.sup] @[neg_reflect did not simplify the clause @]
0.491[zip.saturate] ### step   372 ###
0.491[zip.saturate]
    given (372 steps, penalty 1):
      `[cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f a))+*]/id:404/depth:9`
0.492[zip.env] apply binary rule superposition_active
0.492[zip.env] apply binary rule superposition_passive
0.492[zip.env] apply binary rule ctx_narrow
0.492[zip.env] apply binary rule narrow_term_defs
0.492[zip.env] do unary inferences
0.492[zip.env] apply unary rule equality_resolution
0.492[zip.env] apply unary rule equality_factoring
0.492[zip.env] apply unary rule narrow_lit_defs
0.492[zip.env] apply unary rule ind_types.exhaustiveness
0.492[zip.env] apply unary rule ind_types.acyclicity
0.492[zip.env] apply unary rule avatar_check_empty
0.492[zip.env] apply generating rule avatar.lemmas (full: false)
0.492[zip.env] apply generating rule avatar_check_sat (full: false)
0.492[zip.avatar] SAT-solver reports "SAT"
0.492[zip.saturate] inferred new clauses: []
0.492[zip.sup] @[neg_reflect did not simplify the clause @]
0.492[zip.sup] @[neg_reflect did not simplify the clause @]
0.492[zip.saturate] ### step   373 ###
0.492[zip.saturate]
    given (373 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8`
0.492[zip.env] apply binary rule superposition_active
0.492[zip.env] apply binary rule superposition_passive
0.492[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.493[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9
0.493[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.493[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f d))+*]/id:406/depth:9
0.493[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.493[zip.sup]
    ... ok, conclusion
    [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f c))+*]/id:407/depth:9
0.493[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.493[zip.sup]
    ... ok, conclusion
    [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f b))+*]/id:408/depth:9
0.493[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f X1))* ∨ cQ_2 b b X0+*]/id:316/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.493[zip.sup]
    ... ok, conclusion
    [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f a))+*]/id:409/depth:9
0.494[zip.env] apply binary rule ctx_narrow
0.494[zip.env] apply binary rule narrow_term_defs
0.494[zip.env] do unary inferences
0.494[zip.env] apply unary rule equality_resolution
0.494[zip.env] apply unary rule equality_factoring
0.494[zip.env] apply unary rule narrow_lit_defs
0.494[zip.env] apply unary rule ind_types.exhaustiveness
0.494[zip.env] apply unary rule ind_types.acyclicity
0.494[zip.env] apply unary rule avatar_check_empty
0.494[zip.env] apply generating rule avatar.lemmas (full: false)
0.494[zip.env] apply generating rule avatar_check_sat (full: false)
0.494[zip.avatar] SAT-solver reports "SAT"
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9, 
       forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f d))+*]/id:406/depth:9, 
       [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f c))+*]/id:407/depth:9, 
       [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f b))+*]/id:408/depth:9, 
       [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f a))+*]/id:409/depth:9]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.sup] @[neg_reflect did not simplify the clause @]
0.494[zip.saturate] ### step   374 ###
0.494[zip.saturate]
    given (374 steps, penalty 1):
      `forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f d))+*]/id:406/depth:9`
0.494[zip.env] apply binary rule superposition_active
0.494[zip.env] apply binary rule superposition_passive
0.495[zip.env] apply binary rule ctx_narrow
0.495[zip.env] apply binary rule narrow_term_defs
0.495[zip.env] do unary inferences
0.495[zip.env] apply unary rule equality_resolution
0.495[zip.env] apply unary rule equality_factoring
0.495[zip.env] apply unary rule narrow_lit_defs
0.495[zip.env] apply unary rule ind_types.exhaustiveness
0.495[zip.env] apply unary rule ind_types.acyclicity
0.495[zip.env] apply unary rule avatar_check_empty
0.495[zip.env] apply generating rule avatar.lemmas (full: false)
0.495[zip.env] apply generating rule avatar_check_sat (full: false)
0.495[zip.avatar] SAT-solver reports "SAT"
0.495[zip.saturate] inferred new clauses: []
0.495[zip.sup] @[neg_reflect did not simplify the clause @]
0.495[zip.sup] @[neg_reflect did not simplify the clause @]
0.495[zip.saturate] ### step   375 ###
0.495[zip.saturate]
    given (375 steps, penalty 1):
      `[cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f c))+*]/id:407/depth:9`
0.495[zip.env] apply binary rule superposition_active
0.495[zip.env] apply binary rule superposition_passive
0.495[zip.env] apply binary rule ctx_narrow
0.495[zip.env] apply binary rule narrow_term_defs
0.495[zip.env] do unary inferences
0.495[zip.env] apply unary rule equality_resolution
0.495[zip.env] apply unary rule equality_factoring
0.495[zip.env] apply unary rule narrow_lit_defs
0.495[zip.env] apply unary rule ind_types.exhaustiveness
0.495[zip.env] apply unary rule ind_types.acyclicity
0.495[zip.env] apply unary rule avatar_check_empty
0.495[zip.env] apply generating rule avatar.lemmas (full: false)
0.495[zip.env] apply generating rule avatar_check_sat (full: false)
0.495[zip.avatar] SAT-solver reports "SAT"
0.495[zip.saturate] inferred new clauses: []
0.495[zip.sup] @[neg_reflect did not simplify the clause @]
0.495[zip.sup] @[neg_reflect did not simplify the clause @]
0.495[zip.saturate] ### step   376 ###
0.495[zip.saturate]
    given (376 steps, penalty 1):
      `[cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f b))+*]/id:408/depth:9`
0.495[zip.env] apply binary rule superposition_active
0.495[zip.env] apply binary rule superposition_passive
0.495[zip.env] apply binary rule ctx_narrow
0.495[zip.env] apply binary rule narrow_term_defs
0.496[zip.env] do unary inferences
0.496[zip.env] apply unary rule equality_resolution
0.496[zip.env] apply unary rule equality_factoring
0.496[zip.env] apply unary rule narrow_lit_defs
0.496[zip.env] apply unary rule ind_types.exhaustiveness
0.496[zip.env] apply unary rule ind_types.acyclicity
0.496[zip.env] apply unary rule avatar_check_empty
0.496[zip.env] apply generating rule avatar.lemmas (full: false)
0.496[zip.env] apply generating rule avatar_check_sat (full: false)
0.496[zip.avatar] SAT-solver reports "SAT"
0.496[zip.saturate] inferred new clauses: []
0.496[zip.sup] @[neg_reflect did not simplify the clause @]
0.496[zip.sup] @[neg_reflect did not simplify the clause @]
0.496[zip.saturate] ### step   377 ###
0.496[zip.saturate]
    given (377 steps, penalty 1):
      `[cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f a))+*]/id:409/depth:9`
0.496[zip.env] apply binary rule superposition_active
0.496[zip.env] apply binary rule superposition_passive
0.496[zip.env] apply binary rule ctx_narrow
0.496[zip.env] apply binary rule narrow_term_defs
0.496[zip.env] do unary inferences
0.496[zip.env] apply unary rule equality_resolution
0.496[zip.env] apply unary rule equality_factoring
0.496[zip.env] apply unary rule narrow_lit_defs
0.496[zip.env] apply unary rule ind_types.exhaustiveness
0.496[zip.env] apply unary rule ind_types.acyclicity
0.496[zip.env] apply unary rule avatar_check_empty
0.496[zip.env] apply generating rule avatar.lemmas (full: false)
0.496[zip.env] apply generating rule avatar_check_sat (full: false)
0.496[zip.avatar] SAT-solver reports "SAT"
0.496[zip.saturate] inferred new clauses: []
0.496[zip.sup] @[neg_reflect did not simplify the clause @]
0.496[zip.sup] @[neg_reflect did not simplify the clause @]
0.496[zip.saturate] ### step   378 ###
0.497[zip.saturate]
    given (378 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8`
0.497[zip.env] apply binary rule superposition_active
0.497[zip.env] apply binary rule superposition_passive
0.497[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.497[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9
0.497[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.497[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f d))+*]/id:411/depth:9
0.497[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.497[zip.sup]
    ... ok, conclusion
    [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f c))+*]/id:412/depth:9
0.497[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.497[zip.sup]
    ... ok, conclusion
    [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f b))+*]/id:413/depth:9
0.498[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.498[zip.sup]
    ... ok, conclusion
    [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f a))+*]/id:414/depth:9
0.498[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f X1))* ∨ cQ_2 a b X0+*]/id:321/depth:8[0]
         passive_lit=cQ_2 a b X0 p=2.←.ε)
      with subst={X0[1] → X0[0]}.

0.498[zip.sup] will yield a tautology
0.498[zip.sup] ... cancel, will yield a tautology
0.498[zip.env] apply binary rule ctx_narrow
0.498[zip.env] apply binary rule narrow_term_defs
0.498[zip.env] do unary inferences
0.498[zip.env] apply unary rule equality_resolution
0.498[zip.env] apply unary rule equality_factoring
0.498[zip.env] apply unary rule narrow_lit_defs
0.498[zip.env] apply unary rule ind_types.exhaustiveness
0.498[zip.env] apply unary rule ind_types.acyclicity
0.498[zip.env] apply unary rule avatar_check_empty
0.498[zip.env] apply generating rule avatar.lemmas (full: false)
0.498[zip.env] apply generating rule avatar_check_sat (full: false)
0.498[zip.avatar] SAT-solver reports "SAT"
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.498[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9, 
       forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f d))+*]/id:411/depth:9, 
       [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f c))+*]/id:412/depth:9, 
       [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f b))+*]/id:413/depth:9, 
       [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f a))+*]/id:414/depth:9]
0.498[zip.sup] @[neg_reflect did not simplify the clause @]
0.499[zip.sup] @[neg_reflect did not simplify the clause @]
0.499[zip.saturate] ### step   379 ###
0.499[zip.saturate]
    given (379 steps, penalty 1):
      `forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f d))+*]/id:411/depth:9`
0.499[zip.env] apply binary rule superposition_active
0.499[zip.env] apply binary rule superposition_passive
0.499[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f d))+*]/id:411/depth:9[0]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.500[zip.sup] will yield a tautology
0.500[zip.sup] ... cancel, will yield a tautology
0.500[zip.env] apply binary rule ctx_narrow
0.500[zip.env] apply binary rule narrow_term_defs
0.500[zip.env] do unary inferences
0.500[zip.env] apply unary rule equality_resolution
0.500[zip.env] apply unary rule equality_factoring
0.500[zip.env] apply unary rule narrow_lit_defs
0.500[zip.env] apply unary rule ind_types.exhaustiveness
0.500[zip.env] apply unary rule ind_types.acyclicity
0.500[zip.env] apply unary rule avatar_check_empty
0.500[zip.env] apply generating rule avatar.lemmas (full: false)
0.500[zip.env] apply generating rule avatar_check_sat (full: false)
0.500[zip.avatar] SAT-solver reports "SAT"
0.500[zip.saturate] inferred new clauses: []
0.500[zip.sup] @[neg_reflect did not simplify the clause @]
0.500[zip.sup] @[neg_reflect did not simplify the clause @]
0.500[zip.saturate] ### step   380 ###
0.501[zip.saturate]
    given (380 steps, penalty 1):
      `[cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f c))+*]/id:412/depth:9`
0.501[zip.env] apply binary rule superposition_active
0.501[zip.env] apply binary rule superposition_passive
0.501[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f c))+*]/id:412/depth:9[0]
         passive_lit=cQ_2 a b c p=0.←.ε)
      with subst={X0[1] → c[0]}.

0.501[zip.sup] will yield a tautology
0.501[zip.sup] ... cancel, will yield a tautology
0.501[zip.env] apply binary rule ctx_narrow
0.501[zip.env] apply binary rule narrow_term_defs
0.501[zip.env] do unary inferences
0.501[zip.env] apply unary rule equality_resolution
0.501[zip.env] apply unary rule equality_factoring
0.501[zip.env] apply unary rule narrow_lit_defs
0.501[zip.env] apply unary rule ind_types.exhaustiveness
0.501[zip.env] apply unary rule ind_types.acyclicity
0.501[zip.env] apply unary rule avatar_check_empty
0.501[zip.env] apply generating rule avatar.lemmas (full: false)
0.501[zip.env] apply generating rule avatar_check_sat (full: false)
0.501[zip.avatar] SAT-solver reports "SAT"
0.501[zip.saturate] inferred new clauses: []
0.501[zip.sup] @[neg_reflect did not simplify the clause @]
0.502[zip.sup] @[neg_reflect did not simplify the clause @]
0.502[zip.saturate] ### step   381 ###
0.502[zip.saturate]
    given (381 steps, penalty 1):
      `[cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f b))+*]/id:413/depth:9`
0.502[zip.env] apply binary rule superposition_active
0.502[zip.env] apply binary rule superposition_passive
0.502[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f b))+*]/id:413/depth:9[0]
         passive_lit=cQ_2 a b b p=0.←.ε)
      with subst={X0[1] → b[0]}.

0.502[zip.sup] will yield a tautology
0.502[zip.sup] ... cancel, will yield a tautology
0.502[zip.env] apply binary rule ctx_narrow
0.502[zip.env] apply binary rule narrow_term_defs
0.502[zip.env] do unary inferences
0.502[zip.env] apply unary rule equality_resolution
0.502[zip.env] apply unary rule equality_factoring
0.502[zip.env] apply unary rule narrow_lit_defs
0.502[zip.env] apply unary rule ind_types.exhaustiveness
0.502[zip.env] apply unary rule ind_types.acyclicity
0.502[zip.env] apply unary rule avatar_check_empty
0.502[zip.env] apply generating rule avatar.lemmas (full: false)
0.502[zip.env] apply generating rule avatar_check_sat (full: false)
0.502[zip.avatar] SAT-solver reports "SAT"
0.502[zip.saturate] inferred new clauses: []
0.502[zip.sup] @[neg_reflect did not simplify the clause @]
0.503[zip.sup] @[neg_reflect did not simplify the clause @]
0.503[zip.saturate] ### step   382 ###
0.503[zip.saturate]
    given (382 steps, penalty 1):
      `[cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f a))+*]/id:414/depth:9`
0.503[zip.env] apply binary rule superposition_active
0.503[zip.env] apply binary rule superposition_passive
0.503[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f a))+*]/id:414/depth:9[0]
         passive_lit=cQ_2 a b a p=0.←.ε)
      with subst={X0[1] → a[0]}.

0.503[zip.sup] will yield a tautology
0.503[zip.sup] ... cancel, will yield a tautology
0.503[zip.env] apply binary rule ctx_narrow
0.503[zip.env] apply binary rule narrow_term_defs
0.503[zip.env] do unary inferences
0.503[zip.env] apply unary rule equality_resolution
0.503[zip.env] apply unary rule equality_factoring
0.503[zip.env] apply unary rule narrow_lit_defs
0.503[zip.env] apply unary rule ind_types.exhaustiveness
0.503[zip.env] apply unary rule ind_types.acyclicity
0.503[zip.env] apply unary rule avatar_check_empty
0.503[zip.env] apply generating rule avatar.lemmas (full: false)
0.503[zip.env] apply generating rule avatar_check_sat (full: false)
0.503[zip.avatar] SAT-solver reports "SAT"
0.503[zip.saturate] inferred new clauses: []
0.503[zip.sup] @[neg_reflect did not simplify the clause @]
0.503[zip.sup] @[neg_reflect did not simplify the clause @]
0.504[zip.saturate] ### step   383 ###
0.504[zip.saturate]
    given (383 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 (f (f c)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 c X2 X1+*]/id:352/depth:6`
0.504[zip.env] apply binary rule superposition_active
0.504[zip.env] apply binary rule superposition_passive
0.504[zip.env] apply binary rule ctx_narrow
0.504[zip.env] apply binary rule narrow_term_defs
0.504[zip.env] do unary inferences
0.504[zip.env] apply unary rule equality_resolution
0.504[zip.env] apply unary rule equality_factoring
0.504[zip.env] apply unary rule narrow_lit_defs
0.504[zip.env] apply unary rule ind_types.exhaustiveness
0.504[zip.env] apply unary rule ind_types.acyclicity
0.504[zip.env] apply unary rule avatar_check_empty
0.504[zip.env] apply generating rule avatar.lemmas (full: false)
0.504[zip.env] apply generating rule avatar_check_sat (full: false)
0.504[zip.avatar] SAT-solver reports "SAT"
0.504[zip.saturate] inferred new clauses: []
0.504[zip.sup] @[neg_reflect did not simplify the clause @]
0.504[zip.sup] @[neg_reflect did not simplify the clause @]
0.504[zip.saturate] ### step   384 ###
0.504[zip.saturate]
    given (384 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 (f (f b)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 b X2 X1+*]/id:353/depth:6`
0.505[zip.env] apply binary rule superposition_active
0.505[zip.env] apply binary rule superposition_passive
0.505[zip.env] apply binary rule ctx_narrow
0.505[zip.env] apply binary rule narrow_term_defs
0.505[zip.env] do unary inferences
0.505[zip.env] apply unary rule equality_resolution
0.505[zip.env] apply unary rule equality_factoring
0.505[zip.env] apply unary rule narrow_lit_defs
0.505[zip.env] apply unary rule ind_types.exhaustiveness
0.505[zip.env] apply unary rule ind_types.acyclicity
0.505[zip.env] apply unary rule avatar_check_empty
0.505[zip.env] apply generating rule avatar.lemmas (full: false)
0.505[zip.env] apply generating rule avatar_check_sat (full: false)
0.505[zip.avatar] SAT-solver reports "SAT"
0.505[zip.saturate] inferred new clauses: []
0.505[zip.sup] @[neg_reflect did not simplify the clause @]
0.505[zip.sup] @[neg_reflect did not simplify the clause @]
0.505[zip.saturate] ### step   385 ###
0.505[zip.saturate]
    given (385 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cQ_1 (f (f a)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:354/depth:6`
0.505[zip.env] apply binary rule superposition_active
0.505[zip.env] apply binary rule superposition_passive
0.506[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cQ_1 (f (f a)) d X0+* ∨ ¬cP_1 (f X0) X1* ∨ cQ_2 a X2 X1+*]/id:354/depth:6[0]
         passive_lit=cQ_2 a X2 X1 p=2.←.ε)
      with subst={X2[0] → b[1], X0[1] → X1[0]}.

0.506[zip.sup] will yield a tautology
0.506[zip.sup] ... cancel, will yield a tautology
0.506[zip.env] apply binary rule ctx_narrow
0.506[zip.env] apply binary rule narrow_term_defs
0.506[zip.env] do unary inferences
0.506[zip.env] apply unary rule equality_resolution
0.506[zip.env] apply unary rule equality_factoring
0.506[zip.env] apply unary rule narrow_lit_defs
0.506[zip.env] apply unary rule ind_types.exhaustiveness
0.506[zip.env] apply unary rule ind_types.acyclicity
0.506[zip.env] apply unary rule avatar_check_empty
0.506[zip.env] apply generating rule avatar.lemmas (full: false)
0.506[zip.env] apply generating rule avatar_check_sat (full: false)
0.506[zip.avatar] SAT-solver reports "SAT"
0.506[zip.saturate] inferred new clauses: []
0.506[zip.sup] @[neg_reflect did not simplify the clause @]
0.506[zip.sup] @[neg_reflect did not simplify the clause @]
0.506[zip.saturate] ### step   386 ###
0.506[zip.saturate]
    given (386 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8`
0.507[zip.env] apply binary rule superposition_active
0.507[zip.env] apply binary rule superposition_passive
0.507[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.507[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9
0.507[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.507[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f d))+*]/id:416/depth:9
0.507[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.507[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f c))+*]/id:417/depth:9
0.508[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.508[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f b))+*]/id:418/depth:9
0.508[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f X1))* ∨ cQ_2 X2 a X0+*]/id:355/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.508[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f a))+*]/id:419/depth:9
0.508[zip.env] apply binary rule ctx_narrow
0.508[zip.env] apply binary rule narrow_term_defs
0.508[zip.env] do unary inferences
0.508[zip.env] apply unary rule equality_resolution
0.508[zip.env] apply unary rule equality_factoring
0.508[zip.env] apply unary rule narrow_lit_defs
0.508[zip.env] apply unary rule ind_types.exhaustiveness
0.508[zip.env] apply unary rule ind_types.acyclicity
0.508[zip.env] apply unary rule avatar_check_empty
0.508[zip.env] apply generating rule avatar.lemmas (full: false)
0.508[zip.env] apply generating rule avatar_check_sat (full: false)
0.508[zip.avatar] SAT-solver reports "SAT"
0.508[zip.sup] @[neg_reflect did not simplify the clause @]
0.508[zip.sup] @[neg_reflect did not simplify the clause @]
0.508[zip.sup] @[neg_reflect did not simplify the clause @]
0.508[zip.sup] @[neg_reflect did not simplify the clause @]
0.508[zip.sup] @[neg_reflect did not simplify the clause @]
0.508[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9, 
       forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f d))+*]/id:416/depth:9, 
       forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f c))+*]/id:417/depth:9, 
       forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f b))+*]/id:418/depth:9, 
       forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f a))+*]/id:419/depth:9]
0.509[zip.sup] @[neg_reflect did not simplify the clause @]
0.509[zip.sup] @[neg_reflect did not simplify the clause @]
0.509[zip.saturate] ### step   387 ###
0.509[zip.saturate]
    given (387 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f d))+*]/id:416/depth:9`
0.509[zip.env] apply binary rule superposition_active
0.509[zip.env] apply binary rule superposition_passive
0.509[zip.env] apply binary rule ctx_narrow
0.509[zip.env] apply binary rule narrow_term_defs
0.509[zip.env] do unary inferences
0.509[zip.env] apply unary rule equality_resolution
0.509[zip.env] apply unary rule equality_factoring
0.509[zip.env] apply unary rule narrow_lit_defs
0.509[zip.env] apply unary rule ind_types.exhaustiveness
0.509[zip.env] apply unary rule ind_types.acyclicity
0.509[zip.env] apply unary rule avatar_check_empty
0.509[zip.env] apply generating rule avatar.lemmas (full: false)
0.509[zip.env] apply generating rule avatar_check_sat (full: false)
0.509[zip.avatar] SAT-solver reports "SAT"
0.509[zip.saturate] inferred new clauses: []
0.509[zip.sup] @[neg_reflect did not simplify the clause @]
0.509[zip.sup] @[neg_reflect did not simplify the clause @]
0.509[zip.saturate] ### step   388 ###
0.509[zip.saturate]
    given (388 steps, penalty 1):
      `forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f c))+*]/id:417/depth:9`
0.510[zip.env] apply binary rule superposition_active
0.510[zip.env] apply binary rule superposition_passive
0.510[zip.env] apply binary rule ctx_narrow
0.510[zip.env] apply binary rule narrow_term_defs
0.510[zip.env] do unary inferences
0.510[zip.env] apply unary rule equality_resolution
0.510[zip.env] apply unary rule equality_factoring
0.510[zip.env] apply unary rule narrow_lit_defs
0.510[zip.env] apply unary rule ind_types.exhaustiveness
0.510[zip.env] apply unary rule ind_types.acyclicity
0.510[zip.env] apply unary rule avatar_check_empty
0.510[zip.env] apply generating rule avatar.lemmas (full: false)
0.510[zip.env] apply generating rule avatar_check_sat (full: false)
0.510[zip.avatar] SAT-solver reports "SAT"
0.510[zip.saturate] inferred new clauses: []
0.510[zip.sup] @[neg_reflect did not simplify the clause @]
0.510[zip.sup] @[neg_reflect did not simplify the clause @]
0.510[zip.saturate] ### step   389 ###
0.510[zip.saturate]
    given (389 steps, penalty 1):
      `forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f b))+*]/id:418/depth:9`
0.510[zip.env] apply binary rule superposition_active
0.510[zip.env] apply binary rule superposition_passive
0.510[zip.env] apply binary rule ctx_narrow
0.510[zip.env] apply binary rule narrow_term_defs
0.510[zip.env] do unary inferences
0.510[zip.env] apply unary rule equality_resolution
0.510[zip.env] apply unary rule equality_factoring
0.510[zip.env] apply unary rule narrow_lit_defs
0.510[zip.env] apply unary rule ind_types.exhaustiveness
0.510[zip.env] apply unary rule ind_types.acyclicity
0.510[zip.env] apply unary rule avatar_check_empty
0.510[zip.env] apply generating rule avatar.lemmas (full: false)
0.510[zip.env] apply generating rule avatar_check_sat (full: false)
0.510[zip.avatar] SAT-solver reports "SAT"
0.510[zip.saturate] inferred new clauses: []
0.510[zip.sup] @[neg_reflect did not simplify the clause @]
0.510[zip.sup] @[neg_reflect did not simplify the clause @]
0.510[zip.saturate] ### step   390 ###
0.511[zip.saturate]
    given (390 steps, penalty 1):
      `forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f a))+*]/id:419/depth:9`
0.511[zip.env] apply binary rule superposition_active
0.511[zip.env] apply binary rule superposition_passive
0.511[zip.env] apply binary rule ctx_narrow
0.511[zip.env] apply binary rule narrow_term_defs
0.511[zip.env] do unary inferences
0.511[zip.env] apply unary rule equality_resolution
0.511[zip.env] apply unary rule equality_factoring
0.511[zip.env] apply unary rule narrow_lit_defs
0.511[zip.env] apply unary rule ind_types.exhaustiveness
0.511[zip.env] apply unary rule ind_types.acyclicity
0.511[zip.env] apply unary rule avatar_check_empty
0.511[zip.env] apply generating rule avatar.lemmas (full: false)
0.511[zip.env] apply generating rule avatar_check_sat (full: false)
0.511[zip.avatar] SAT-solver reports "SAT"
0.511[zip.saturate] inferred new clauses: []
0.511[zip.sup] @[neg_reflect did not simplify the clause @]
0.511[zip.sup] @[neg_reflect did not simplify the clause @]
0.511[zip.saturate] ### step   391 ###
0.511[zip.saturate]
    given (391 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8`
0.511[zip.env] apply binary rule superposition_active
0.511[zip.env] apply binary rule superposition_passive
0.511[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.512[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9
0.512[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.512[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f d))+*]/id:421/depth:9
0.512[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.512[zip.sup]
    ... ok, conclusion
    [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f c))+*]/id:422/depth:9
0.512[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.512[zip.sup]
    ... ok, conclusion
    [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f b))+*]/id:423/depth:9
0.512[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f X1))* ∨ cQ_2 c a X0+*]/id:360/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.513[zip.sup]
    ... ok, conclusion
    [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f a))+*]/id:424/depth:9
0.513[zip.env] apply binary rule ctx_narrow
0.513[zip.env] apply binary rule narrow_term_defs
0.513[zip.env] do unary inferences
0.513[zip.env] apply unary rule equality_resolution
0.513[zip.env] apply unary rule equality_factoring
0.513[zip.env] apply unary rule narrow_lit_defs
0.513[zip.env] apply unary rule ind_types.exhaustiveness
0.513[zip.env] apply unary rule ind_types.acyclicity
0.513[zip.env] apply unary rule avatar_check_empty
0.513[zip.env] apply generating rule avatar.lemmas (full: false)
0.513[zip.env] apply generating rule avatar_check_sat (full: false)
0.513[zip.avatar] SAT-solver reports "SAT"
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9, 
       forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f d))+*]/id:421/depth:9, 
       [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f c))+*]/id:422/depth:9, 
       [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f b))+*]/id:423/depth:9, 
       [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f a))+*]/id:424/depth:9]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.sup] @[neg_reflect did not simplify the clause @]
0.513[zip.saturate] ### step   392 ###
0.514[zip.saturate]
    given (392 steps, penalty 1):
      `forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f d))+*]/id:421/depth:9`
0.514[zip.env] apply binary rule superposition_active
0.514[zip.env] apply binary rule superposition_passive
0.514[zip.env] apply binary rule ctx_narrow
0.514[zip.env] apply binary rule narrow_term_defs
0.514[zip.env] do unary inferences
0.514[zip.env] apply unary rule equality_resolution
0.514[zip.env] apply unary rule equality_factoring
0.514[zip.env] apply unary rule narrow_lit_defs
0.514[zip.env] apply unary rule ind_types.exhaustiveness
0.514[zip.env] apply unary rule ind_types.acyclicity
0.514[zip.env] apply unary rule avatar_check_empty
0.514[zip.env] apply generating rule avatar.lemmas (full: false)
0.514[zip.env] apply generating rule avatar_check_sat (full: false)
0.514[zip.avatar] SAT-solver reports "SAT"
0.514[zip.saturate] inferred new clauses: []
0.514[zip.sup] @[neg_reflect did not simplify the clause @]
0.514[zip.sup] @[neg_reflect did not simplify the clause @]
0.514[zip.saturate] ### step   393 ###
0.514[zip.saturate]
    given (393 steps, penalty 1):
      `[cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f c))+*]/id:422/depth:9`
0.514[zip.env] apply binary rule superposition_active
0.514[zip.env] apply binary rule superposition_passive
0.514[zip.env] apply binary rule ctx_narrow
0.514[zip.env] apply binary rule narrow_term_defs
0.514[zip.env] do unary inferences
0.514[zip.env] apply unary rule equality_resolution
0.514[zip.env] apply unary rule equality_factoring
0.514[zip.env] apply unary rule narrow_lit_defs
0.514[zip.env] apply unary rule ind_types.exhaustiveness
0.514[zip.env] apply unary rule ind_types.acyclicity
0.514[zip.env] apply unary rule avatar_check_empty
0.514[zip.env] apply generating rule avatar.lemmas (full: false)
0.514[zip.env] apply generating rule avatar_check_sat (full: false)
0.514[zip.avatar] SAT-solver reports "SAT"
0.514[zip.saturate] inferred new clauses: []
0.514[zip.sup] @[neg_reflect did not simplify the clause @]
0.514[zip.sup] @[neg_reflect did not simplify the clause @]
0.515[zip.saturate] ### step   394 ###
0.515[zip.saturate]
    given (394 steps, penalty 1):
      `[cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f b))+*]/id:423/depth:9`
0.515[zip.env] apply binary rule superposition_active
0.515[zip.env] apply binary rule superposition_passive
0.515[zip.env] apply binary rule ctx_narrow
0.515[zip.env] apply binary rule narrow_term_defs
0.515[zip.env] do unary inferences
0.515[zip.env] apply unary rule equality_resolution
0.515[zip.env] apply unary rule equality_factoring
0.515[zip.env] apply unary rule narrow_lit_defs
0.515[zip.env] apply unary rule ind_types.exhaustiveness
0.515[zip.env] apply unary rule ind_types.acyclicity
0.515[zip.env] apply unary rule avatar_check_empty
0.515[zip.env] apply generating rule avatar.lemmas (full: false)
0.515[zip.env] apply generating rule avatar_check_sat (full: false)
0.515[zip.avatar] SAT-solver reports "SAT"
0.515[zip.saturate] inferred new clauses: []
0.515[zip.sup] @[neg_reflect did not simplify the clause @]
0.515[zip.sup] @[neg_reflect did not simplify the clause @]
0.515[zip.saturate] ### step   395 ###
0.515[zip.saturate]
    given (395 steps, penalty 1):
      `[cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f a))+*]/id:424/depth:9`
0.515[zip.env] apply binary rule superposition_active
0.515[zip.env] apply binary rule superposition_passive
0.515[zip.env] apply binary rule ctx_narrow
0.515[zip.env] apply binary rule narrow_term_defs
0.515[zip.env] do unary inferences
0.515[zip.env] apply unary rule equality_resolution
0.515[zip.env] apply unary rule equality_factoring
0.516[zip.env] apply unary rule narrow_lit_defs
0.516[zip.env] apply unary rule ind_types.exhaustiveness
0.516[zip.env] apply unary rule ind_types.acyclicity
0.516[zip.env] apply unary rule avatar_check_empty
0.516[zip.env] apply generating rule avatar.lemmas (full: false)
0.516[zip.env] apply generating rule avatar_check_sat (full: false)
0.516[zip.avatar] SAT-solver reports "SAT"
0.516[zip.saturate] inferred new clauses: []
0.516[zip.sup] @[neg_reflect did not simplify the clause @]
0.516[zip.sup] @[neg_reflect did not simplify the clause @]
0.516[zip.saturate] ### step   396 ###
0.516[zip.saturate]
    given (396 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8`
0.516[zip.env] apply binary rule superposition_active
0.516[zip.env] apply binary rule superposition_passive
0.516[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.517[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9
0.517[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.517[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f d))+*]/id:426/depth:9
0.517[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.517[zip.sup]
    ... ok, conclusion
    [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f c))+*]/id:427/depth:9
0.517[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.517[zip.sup]
    ... ok, conclusion
    [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f b))+*]/id:428/depth:9
0.517[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f X1))* ∨ cQ_2 b a X0+*]/id:365/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.517[zip.sup]
    ... ok, conclusion
    [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f a))+*]/id:429/depth:9
0.517[zip.env] apply binary rule ctx_narrow
0.517[zip.env] apply binary rule narrow_term_defs
0.518[zip.env] do unary inferences
0.518[zip.env] apply unary rule equality_resolution
0.518[zip.env] apply unary rule equality_factoring
0.518[zip.env] apply unary rule narrow_lit_defs
0.518[zip.env] apply unary rule ind_types.exhaustiveness
0.518[zip.env] apply unary rule ind_types.acyclicity
0.518[zip.env] apply unary rule avatar_check_empty
0.518[zip.env] apply generating rule avatar.lemmas (full: false)
0.518[zip.env] apply generating rule avatar_check_sat (full: false)
0.518[zip.avatar] SAT-solver reports "SAT"
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9, 
       forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f d))+*]/id:426/depth:9, 
       [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f c))+*]/id:427/depth:9, 
       [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f b))+*]/id:428/depth:9, 
       [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f a))+*]/id:429/depth:9]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.sup] @[neg_reflect did not simplify the clause @]
0.518[zip.saturate] ### step   397 ###
0.518[zip.saturate]
    given (397 steps, penalty 1):
      `forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f d))+*]/id:426/depth:9`
0.518[zip.env] apply binary rule superposition_active
0.518[zip.env] apply binary rule superposition_passive
0.518[zip.env] apply binary rule ctx_narrow
0.518[zip.env] apply binary rule narrow_term_defs
0.519[zip.env] do unary inferences
0.519[zip.env] apply unary rule equality_resolution
0.519[zip.env] apply unary rule equality_factoring
0.519[zip.env] apply unary rule narrow_lit_defs
0.519[zip.env] apply unary rule ind_types.exhaustiveness
0.519[zip.env] apply unary rule ind_types.acyclicity
0.519[zip.env] apply unary rule avatar_check_empty
0.519[zip.env] apply generating rule avatar.lemmas (full: false)
0.519[zip.env] apply generating rule avatar_check_sat (full: false)
0.519[zip.avatar] SAT-solver reports "SAT"
0.519[zip.saturate] inferred new clauses: []
0.519[zip.sup] @[neg_reflect did not simplify the clause @]
0.519[zip.sup] @[neg_reflect did not simplify the clause @]
0.519[zip.saturate] ### step   398 ###
0.519[zip.saturate]
    given (398 steps, penalty 1):
      `[cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f c))+*]/id:427/depth:9`
0.519[zip.env] apply binary rule superposition_active
0.519[zip.env] apply binary rule superposition_passive
0.519[zip.env] apply binary rule ctx_narrow
0.519[zip.env] apply binary rule narrow_term_defs
0.519[zip.env] do unary inferences
0.519[zip.env] apply unary rule equality_resolution
0.519[zip.env] apply unary rule equality_factoring
0.519[zip.env] apply unary rule narrow_lit_defs
0.519[zip.env] apply unary rule ind_types.exhaustiveness
0.519[zip.env] apply unary rule ind_types.acyclicity
0.519[zip.env] apply unary rule avatar_check_empty
0.519[zip.env] apply generating rule avatar.lemmas (full: false)
0.519[zip.env] apply generating rule avatar_check_sat (full: false)
0.519[zip.avatar] SAT-solver reports "SAT"
0.519[zip.saturate] inferred new clauses: []
0.519[zip.sup] @[neg_reflect did not simplify the clause @]
0.519[zip.sup] @[neg_reflect did not simplify the clause @]
0.519[zip.saturate] ### step   399 ###
0.519[zip.saturate]
    given (399 steps, penalty 1):
      `[cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f b))+*]/id:428/depth:9`
0.519[zip.env] apply binary rule superposition_active
0.519[zip.env] apply binary rule superposition_passive
0.520[zip.env] apply binary rule ctx_narrow
0.520[zip.env] apply binary rule narrow_term_defs
0.520[zip.env] do unary inferences
0.520[zip.env] apply unary rule equality_resolution
0.520[zip.env] apply unary rule equality_factoring
0.520[zip.env] apply unary rule narrow_lit_defs
0.520[zip.env] apply unary rule ind_types.exhaustiveness
0.520[zip.env] apply unary rule ind_types.acyclicity
0.520[zip.env] apply unary rule avatar_check_empty
0.520[zip.env] apply generating rule avatar.lemmas (full: false)
0.520[zip.env] apply generating rule avatar_check_sat (full: false)
0.520[zip.avatar] SAT-solver reports "SAT"
0.520[zip.saturate] inferred new clauses: []
0.520[zip.sup] @[neg_reflect did not simplify the clause @]
0.520[zip.sup] @[neg_reflect did not simplify the clause @]
0.520[zip.saturate] ### step   400 ###
0.520[zip.saturate]
    given (400 steps, penalty 1):
      `[cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f a))+*]/id:429/depth:9`
0.520[zip.env] apply binary rule superposition_active
0.520[zip.env] apply binary rule superposition_passive
0.520[zip.env] apply binary rule ctx_narrow
0.520[zip.env] apply binary rule narrow_term_defs
0.520[zip.env] do unary inferences
0.520[zip.env] apply unary rule equality_resolution
0.520[zip.env] apply unary rule equality_factoring
0.520[zip.env] apply unary rule narrow_lit_defs
0.520[zip.env] apply unary rule ind_types.exhaustiveness
0.520[zip.env] apply unary rule ind_types.acyclicity
0.520[zip.env] apply unary rule avatar_check_empty
0.520[zip.env] apply generating rule avatar.lemmas (full: false)
0.520[zip.env] apply generating rule avatar_check_sat (full: false)
0.520[zip.avatar] SAT-solver reports "SAT"
0.520[zip.saturate] inferred new clauses: []
0.520[zip.sup] @[neg_reflect did not simplify the clause @]
0.520[zip.sup] @[neg_reflect did not simplify the clause @]
0.520[zip.saturate] ### step   401 ###
0.520[zip.saturate]
    given (401 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8`
0.521[zip.env] apply binary rule superposition_active
0.521[zip.env] apply binary rule superposition_passive
0.521[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.521[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9
0.521[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.521[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f d))+*]/id:431/depth:9
0.521[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.521[zip.sup]
    ... ok, conclusion
    [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f c))+*]/id:432/depth:9
0.521[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.521[zip.sup]
    ... ok, conclusion
    [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f b))+*]/id:433/depth:9
0.522[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f X1))* ∨ cQ_2 a a X0+*]/id:370/depth:8[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.522[zip.sup]
    ... ok, conclusion
    [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f a))+*]/id:434/depth:9
0.522[zip.env] apply binary rule ctx_narrow
0.522[zip.env] apply binary rule narrow_term_defs
0.522[zip.env] do unary inferences
0.522[zip.env] apply unary rule equality_resolution
0.522[zip.env] apply unary rule equality_factoring
0.522[zip.env] apply unary rule narrow_lit_defs
0.522[zip.env] apply unary rule ind_types.exhaustiveness
0.522[zip.env] apply unary rule ind_types.acyclicity
0.522[zip.env] apply unary rule avatar_check_empty
0.522[zip.env] apply generating rule avatar.lemmas (full: false)
0.522[zip.env] apply generating rule avatar_check_sat (full: false)
0.522[zip.avatar] SAT-solver reports "SAT"
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9, 
       forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f d))+*]/id:431/depth:9, 
       [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f c))+*]/id:432/depth:9, 
       [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f b))+*]/id:433/depth:9, 
       [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f a))+*]/id:434/depth:9]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.sup] @[neg_reflect did not simplify the clause @]
0.522[zip.saturate] ### step   402 ###
0.522[zip.saturate]
    given (402 steps, penalty 1):
      `forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f d))+*]/id:431/depth:9`
0.523[zip.env] apply binary rule superposition_active
0.523[zip.env] apply binary rule superposition_passive
0.523[zip.env] apply binary rule ctx_narrow
0.523[zip.env] apply binary rule narrow_term_defs
0.523[zip.env] do unary inferences
0.523[zip.env] apply unary rule equality_resolution
0.523[zip.env] apply unary rule equality_factoring
0.523[zip.env] apply unary rule narrow_lit_defs
0.523[zip.env] apply unary rule ind_types.exhaustiveness
0.523[zip.env] apply unary rule ind_types.acyclicity
0.523[zip.env] apply unary rule avatar_check_empty
0.523[zip.env] apply generating rule avatar.lemmas (full: false)
0.523[zip.env] apply generating rule avatar_check_sat (full: false)
0.523[zip.avatar] SAT-solver reports "SAT"
0.523[zip.saturate] inferred new clauses: []
0.523[zip.sup] @[neg_reflect did not simplify the clause @]
0.523[zip.sup] @[neg_reflect did not simplify the clause @]
0.523[zip.saturate] ### step   403 ###
0.523[zip.saturate]
    given (403 steps, penalty 1):
      `[cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f c))+*]/id:432/depth:9`
0.523[zip.env] apply binary rule superposition_active
0.523[zip.env] apply binary rule superposition_passive
0.523[zip.env] apply binary rule ctx_narrow
0.523[zip.env] apply binary rule narrow_term_defs
0.523[zip.env] do unary inferences
0.523[zip.env] apply unary rule equality_resolution
0.523[zip.env] apply unary rule equality_factoring
0.523[zip.env] apply unary rule narrow_lit_defs
0.523[zip.env] apply unary rule ind_types.exhaustiveness
0.523[zip.env] apply unary rule ind_types.acyclicity
0.523[zip.env] apply unary rule avatar_check_empty
0.523[zip.env] apply generating rule avatar.lemmas (full: false)
0.523[zip.env] apply generating rule avatar_check_sat (full: false)
0.523[zip.avatar] SAT-solver reports "SAT"
0.523[zip.saturate] inferred new clauses: []
0.523[zip.sup] @[neg_reflect did not simplify the clause @]
0.523[zip.sup] @[neg_reflect did not simplify the clause @]
0.523[zip.saturate] ### step   404 ###
0.523[zip.saturate]
    given (404 steps, penalty 1):
      `[cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f b))+*]/id:433/depth:9`
0.524[zip.env] apply binary rule superposition_active
0.524[zip.env] apply binary rule superposition_passive
0.524[zip.env] apply binary rule ctx_narrow
0.524[zip.env] apply binary rule narrow_term_defs
0.524[zip.env] do unary inferences
0.524[zip.env] apply unary rule equality_resolution
0.524[zip.env] apply unary rule equality_factoring
0.524[zip.env] apply unary rule narrow_lit_defs
0.524[zip.env] apply unary rule ind_types.exhaustiveness
0.524[zip.env] apply unary rule ind_types.acyclicity
0.524[zip.env] apply unary rule avatar_check_empty
0.524[zip.env] apply generating rule avatar.lemmas (full: false)
0.524[zip.env] apply generating rule avatar_check_sat (full: false)
0.524[zip.avatar] SAT-solver reports "SAT"
0.524[zip.saturate] inferred new clauses: []
0.524[zip.sup] @[neg_reflect did not simplify the clause @]
0.524[zip.sup] @[neg_reflect did not simplify the clause @]
0.524[zip.saturate] ### step   405 ###
0.524[zip.saturate]
    given (405 steps, penalty 1):
      `[cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f a))+*]/id:434/depth:9`
0.524[zip.env] apply binary rule superposition_active
0.524[zip.env] apply binary rule superposition_passive
0.524[zip.env] apply binary rule ctx_narrow
0.524[zip.env] apply binary rule narrow_term_defs
0.524[zip.env] do unary inferences
0.524[zip.env] apply unary rule equality_resolution
0.524[zip.env] apply unary rule equality_factoring
0.524[zip.env] apply unary rule narrow_lit_defs
0.524[zip.env] apply unary rule ind_types.exhaustiveness
0.524[zip.env] apply unary rule ind_types.acyclicity
0.524[zip.env] apply unary rule avatar_check_empty
0.524[zip.env] apply generating rule avatar.lemmas (full: false)
0.524[zip.env] apply generating rule avatar_check_sat (full: false)
0.524[zip.avatar] SAT-solver reports "SAT"
0.524[zip.saturate] inferred new clauses: []
0.524[zip.sup] @[neg_reflect did not simplify the clause @]
0.524[zip.sup] @[neg_reflect did not simplify the clause @]
0.525[zip.saturate] ### step   406 ###
0.525[zip.saturate]
    given (406 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9`
0.525[zip.env] apply binary rule superposition_active
0.525[zip.env] apply binary rule superposition_passive
0.525[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.525[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ cQ_2 X2 c X0+*]/id:435/depth:10
0.525[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.525[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) c (f (f (f d)))+* ∨ cQ_2 X1 c X0+*]/id:436/depth:10
0.525[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.525[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f c)))+* ∨ cQ_2 X0 c c+*]/id:437/depth:10
0.525[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.526[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f b)))+* ∨ cQ_2 X0 c b+*]/id:438/depth:10
0.526[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f X1)))*]/id:375/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.526[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f a)))+* ∨ cQ_2 X0 c a+*]/id:439/depth:10
0.526[zip.env] apply binary rule ctx_narrow
0.526[zip.env] apply binary rule narrow_term_defs
0.526[zip.env] do unary inferences
0.526[zip.env] apply unary rule equality_resolution
0.526[zip.env] apply unary rule equality_factoring
0.526[zip.env] apply unary rule narrow_lit_defs
0.526[zip.env] apply unary rule ind_types.exhaustiveness
0.526[zip.env] apply unary rule ind_types.acyclicity
0.526[zip.env] apply unary rule avatar_check_empty
0.526[zip.env] apply generating rule avatar.lemmas (full: false)
0.526[zip.env] apply generating rule avatar_check_sat (full: false)
0.526[zip.avatar] SAT-solver reports "SAT"
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.526[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) c (f (f (f d)))+* ∨ cQ_2 X1 c X0+*]/id:436/depth:10, 
       forall X0. [¬cQ_1 (f d) c (f (f (f c)))+* ∨ cQ_2 X0 c c+*]/id:437/depth:10, 
       forall X0. [¬cQ_1 (f d) c (f (f (f b)))+* ∨ cQ_2 X0 c b+*]/id:438/depth:10, 
       forall X0. [¬cQ_1 (f d) c (f (f (f a)))+* ∨ cQ_2 X0 c a+*]/id:439/depth:10]
0.526[zip.sup] @[neg_reflect did not simplify the clause @]
0.527[zip.sup] @[neg_reflect did not simplify the clause @]
0.527[zip.saturate] ### step   407 ###
0.527[zip.saturate]
    given (407 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) c (f (f (f d)))+* ∨ cQ_2 X1 c X0+*]/id:436/depth:10`
0.527[zip.env] apply binary rule superposition_active
0.527[zip.env] apply binary rule superposition_passive
0.527[zip.env] apply binary rule ctx_narrow
0.527[zip.env] apply binary rule narrow_term_defs
0.527[zip.env] do unary inferences
0.527[zip.env] apply unary rule equality_resolution
0.527[zip.env] apply unary rule equality_factoring
0.527[zip.env] apply unary rule narrow_lit_defs
0.527[zip.env] apply unary rule ind_types.exhaustiveness
0.527[zip.env] apply unary rule ind_types.acyclicity
0.527[zip.env] apply unary rule avatar_check_empty
0.527[zip.env] apply generating rule avatar.lemmas (full: false)
0.527[zip.env] apply generating rule avatar_check_sat (full: false)
0.527[zip.avatar] SAT-solver reports "SAT"
0.527[zip.saturate] inferred new clauses: []
0.527[zip.sup] @[neg_reflect did not simplify the clause @]
0.527[zip.sup] @[neg_reflect did not simplify the clause @]
0.527[zip.saturate] ### step   408 ###
0.527[zip.saturate]
    given (408 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f c)))+* ∨ cQ_2 X0 c c+*]/id:437/depth:10`
0.527[zip.env] apply binary rule superposition_active
0.527[zip.env] apply binary rule superposition_passive
0.527[zip.env] apply binary rule ctx_narrow
0.527[zip.env] apply binary rule narrow_term_defs
0.527[zip.env] do unary inferences
0.527[zip.env] apply unary rule equality_resolution
0.527[zip.env] apply unary rule equality_factoring
0.527[zip.env] apply unary rule narrow_lit_defs
0.527[zip.env] apply unary rule ind_types.exhaustiveness
0.527[zip.env] apply unary rule ind_types.acyclicity
0.527[zip.env] apply unary rule avatar_check_empty
0.527[zip.env] apply generating rule avatar.lemmas (full: false)
0.527[zip.env] apply generating rule avatar_check_sat (full: false)
0.527[zip.avatar] SAT-solver reports "SAT"
0.527[zip.saturate] inferred new clauses: []
0.527[zip.sup] @[neg_reflect did not simplify the clause @]
0.528[zip.sup] @[neg_reflect did not simplify the clause @]
0.528[zip.saturate] ### step   409 ###
0.528[zip.saturate]
    given (409 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f b)))+* ∨ cQ_2 X0 c b+*]/id:438/depth:10`
0.528[zip.env] apply binary rule superposition_active
0.528[zip.env] apply binary rule superposition_passive
0.528[zip.env] apply binary rule ctx_narrow
0.528[zip.env] apply binary rule narrow_term_defs
0.528[zip.env] do unary inferences
0.528[zip.env] apply unary rule equality_resolution
0.528[zip.env] apply unary rule equality_factoring
0.528[zip.env] apply unary rule narrow_lit_defs
0.528[zip.env] apply unary rule ind_types.exhaustiveness
0.528[zip.env] apply unary rule ind_types.acyclicity
0.528[zip.env] apply unary rule avatar_check_empty
0.528[zip.env] apply generating rule avatar.lemmas (full: false)
0.528[zip.env] apply generating rule avatar_check_sat (full: false)
0.528[zip.avatar] SAT-solver reports "SAT"
0.528[zip.saturate] inferred new clauses: []
0.528[zip.sup] @[neg_reflect did not simplify the clause @]
0.528[zip.sup] @[neg_reflect did not simplify the clause @]
0.528[zip.saturate] ### step   410 ###
0.528[zip.saturate]
    given (410 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f a)))+* ∨ cQ_2 X0 c a+*]/id:439/depth:10`
0.528[zip.env] apply binary rule superposition_active
0.528[zip.env] apply binary rule superposition_passive
0.528[zip.env] apply binary rule ctx_narrow
0.528[zip.env] apply binary rule narrow_term_defs
0.528[zip.env] do unary inferences
0.528[zip.env] apply unary rule equality_resolution
0.528[zip.env] apply unary rule equality_factoring
0.528[zip.env] apply unary rule narrow_lit_defs
0.528[zip.env] apply unary rule ind_types.exhaustiveness
0.528[zip.env] apply unary rule ind_types.acyclicity
0.528[zip.env] apply unary rule avatar_check_empty
0.528[zip.env] apply generating rule avatar.lemmas (full: false)
0.528[zip.env] apply generating rule avatar_check_sat (full: false)
0.528[zip.avatar] SAT-solver reports "SAT"
0.529[zip.saturate] inferred new clauses: []
0.529[zip.sup] @[neg_reflect did not simplify the clause @]
0.529[zip.sup] @[neg_reflect did not simplify the clause @]
0.529[zip.saturate] ### step   411 ###
0.529[zip.saturate]
    given (411 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9`
0.529[zip.env] apply binary rule superposition_active
0.529[zip.env] apply binary rule superposition_passive
0.529[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.529[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ cQ_2 c c X0+*]/id:440/depth:10
0.529[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.530[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) c (f (f (f d)))+* ∨ cQ_2 c c X0+*]/id:441/depth:10
0.530[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.530[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f c)))+* ∨ cQ_2 c c c+]/id:442/depth:10
0.530[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.530[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f b)))+* ∨ cQ_2 c c b+]/id:443/depth:10
0.530[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f X1)))*]/id:380/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.530[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f a)))+* ∨ cQ_2 c c a+]/id:444/depth:10
0.530[zip.env] apply binary rule ctx_narrow
0.530[zip.env] apply binary rule narrow_term_defs
0.530[zip.env] do unary inferences
0.530[zip.env] apply unary rule equality_resolution
0.530[zip.env] apply unary rule equality_factoring
0.530[zip.env] apply unary rule narrow_lit_defs
0.530[zip.env] apply unary rule ind_types.exhaustiveness
0.530[zip.env] apply unary rule ind_types.acyclicity
0.530[zip.env] apply unary rule avatar_check_empty
0.530[zip.env] apply generating rule avatar.lemmas (full: false)
0.530[zip.env] apply generating rule avatar_check_sat (full: false)
0.530[zip.avatar] SAT-solver reports "SAT"
0.530[zip.sup] @[neg_reflect did not simplify the clause @]
0.530[zip.sup] @[neg_reflect did not simplify the clause @]
0.530[zip.sup] @[neg_reflect did not simplify the clause @]
0.530[zip.sup] @[neg_reflect did not simplify the clause @]
0.530[zip.sup] @[neg_reflect did not simplify the clause @]
0.530[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10, 
       forall X0. [¬cQ_1 (f c) c (f (f (f d)))+* ∨ cQ_2 c c X0+*]/id:441/depth:10, 
       [¬cQ_1 (f c) c (f (f (f c)))+* ∨ cQ_2 c c c+]/id:442/depth:10, 
       [¬cQ_1 (f c) c (f (f (f b)))+* ∨ cQ_2 c c b+]/id:443/depth:10, 
       [¬cQ_1 (f c) c (f (f (f a)))+* ∨ cQ_2 c c a+]/id:444/depth:10]
0.531[zip.sup] @[neg_reflect did not simplify the clause @]
0.531[zip.sup] @[neg_reflect did not simplify the clause @]
0.531[zip.saturate] ### step   412 ###
0.531[zip.saturate]
    given (412 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) c (f (f (f d)))+* ∨ cQ_2 c c X0+*]/id:441/depth:10`
0.531[zip.env] apply binary rule superposition_active
0.531[zip.env] apply binary rule superposition_passive
0.531[zip.env] apply binary rule ctx_narrow
0.531[zip.env] apply binary rule narrow_term_defs
0.531[zip.env] do unary inferences
0.531[zip.env] apply unary rule equality_resolution
0.531[zip.env] apply unary rule equality_factoring
0.531[zip.env] apply unary rule narrow_lit_defs
0.531[zip.env] apply unary rule ind_types.exhaustiveness
0.531[zip.env] apply unary rule ind_types.acyclicity
0.531[zip.env] apply unary rule avatar_check_empty
0.531[zip.env] apply generating rule avatar.lemmas (full: false)
0.531[zip.env] apply generating rule avatar_check_sat (full: false)
0.531[zip.avatar] SAT-solver reports "SAT"
0.531[zip.saturate] inferred new clauses: []
0.531[zip.sup] @[neg_reflect did not simplify the clause @]
0.531[zip.sup] @[neg_reflect did not simplify the clause @]
0.531[zip.saturate] ### step   413 ###
0.531[zip.saturate]
    given (413 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f c)))+* ∨ cQ_2 c c c+]/id:442/depth:10`
0.532[zip.env] apply binary rule superposition_active
0.532[zip.env] apply binary rule superposition_passive
0.532[zip.env] apply binary rule ctx_narrow
0.532[zip.env] apply binary rule narrow_term_defs
0.532[zip.env] do unary inferences
0.532[zip.env] apply unary rule equality_resolution
0.532[zip.env] apply unary rule equality_factoring
0.532[zip.env] apply unary rule narrow_lit_defs
0.532[zip.env] apply unary rule ind_types.exhaustiveness
0.532[zip.env] apply unary rule ind_types.acyclicity
0.532[zip.env] apply unary rule avatar_check_empty
0.532[zip.env] apply generating rule avatar.lemmas (full: false)
0.532[zip.env] apply generating rule avatar_check_sat (full: false)
0.532[zip.avatar] SAT-solver reports "SAT"
0.532[zip.saturate] inferred new clauses: []
0.532[zip.sup] @[neg_reflect did not simplify the clause @]
0.532[zip.sup] @[neg_reflect did not simplify the clause @]
0.532[zip.saturate] ### step   414 ###
0.532[zip.saturate]
    given (414 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f b)))+* ∨ cQ_2 c c b+]/id:443/depth:10`
0.532[zip.env] apply binary rule superposition_active
0.532[zip.env] apply binary rule superposition_passive
0.532[zip.env] apply binary rule ctx_narrow
0.532[zip.env] apply binary rule narrow_term_defs
0.532[zip.env] do unary inferences
0.532[zip.env] apply unary rule equality_resolution
0.532[zip.env] apply unary rule equality_factoring
0.532[zip.env] apply unary rule narrow_lit_defs
0.532[zip.env] apply unary rule ind_types.exhaustiveness
0.532[zip.env] apply unary rule ind_types.acyclicity
0.532[zip.env] apply unary rule avatar_check_empty
0.532[zip.env] apply generating rule avatar.lemmas (full: false)
0.532[zip.env] apply generating rule avatar_check_sat (full: false)
0.532[zip.avatar] SAT-solver reports "SAT"
0.532[zip.saturate] inferred new clauses: []
0.532[zip.sup] @[neg_reflect did not simplify the clause @]
0.532[zip.sup] @[neg_reflect did not simplify the clause @]
0.533[zip.saturate] ### step   415 ###
0.533[zip.saturate]
    given (415 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f a)))+* ∨ cQ_2 c c a+]/id:444/depth:10`
0.533[zip.env] apply binary rule superposition_active
0.533[zip.env] apply binary rule superposition_passive
0.533[zip.env] apply binary rule ctx_narrow
0.533[zip.env] apply binary rule narrow_term_defs
0.533[zip.env] do unary inferences
0.533[zip.env] apply unary rule equality_resolution
0.533[zip.env] apply unary rule equality_factoring
0.533[zip.env] apply unary rule narrow_lit_defs
0.533[zip.env] apply unary rule ind_types.exhaustiveness
0.533[zip.env] apply unary rule ind_types.acyclicity
0.533[zip.env] apply unary rule avatar_check_empty
0.533[zip.env] apply generating rule avatar.lemmas (full: false)
0.533[zip.env] apply generating rule avatar_check_sat (full: false)
0.533[zip.avatar] SAT-solver reports "SAT"
0.533[zip.saturate] inferred new clauses: []
0.533[zip.sup] @[neg_reflect did not simplify the clause @]
0.533[zip.sup] @[neg_reflect did not simplify the clause @]
0.533[zip.saturate] ### step   416 ###
0.533[zip.saturate]
    given (416 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9`
0.534[zip.env] apply binary rule superposition_active
0.534[zip.env] apply binary rule superposition_passive
0.534[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.534[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ cQ_2 b c X0+*]/id:445/depth:10
0.534[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.534[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) c (f (f (f d)))+* ∨ cQ_2 b c X0+*]/id:446/depth:10
0.534[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.534[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f c)))+* ∨ cQ_2 b c c+]/id:447/depth:10
0.534[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.534[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f b)))+* ∨ cQ_2 b c b+]/id:448/depth:10
0.534[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f X1)))*]/id:385/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.535[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f a)))+* ∨ cQ_2 b c a+]/id:449/depth:10
0.535[zip.env] apply binary rule ctx_narrow
0.535[zip.env] apply binary rule narrow_term_defs
0.535[zip.env] do unary inferences
0.535[zip.env] apply unary rule equality_resolution
0.535[zip.env] apply unary rule equality_factoring
0.535[zip.env] apply unary rule narrow_lit_defs
0.535[zip.env] apply unary rule ind_types.exhaustiveness
0.535[zip.env] apply unary rule ind_types.acyclicity
0.535[zip.env] apply unary rule avatar_check_empty
0.535[zip.env] apply generating rule avatar.lemmas (full: false)
0.535[zip.env] apply generating rule avatar_check_sat (full: false)
0.535[zip.avatar] SAT-solver reports "SAT"
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10, 
       forall X0. [¬cQ_1 (f b) c (f (f (f d)))+* ∨ cQ_2 b c X0+*]/id:446/depth:10, 
       [¬cQ_1 (f b) c (f (f (f c)))+* ∨ cQ_2 b c c+]/id:447/depth:10, 
       [¬cQ_1 (f b) c (f (f (f b)))+* ∨ cQ_2 b c b+]/id:448/depth:10, 
       [¬cQ_1 (f b) c (f (f (f a)))+* ∨ cQ_2 b c a+]/id:449/depth:10]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.535[zip.sup] @[neg_reflect did not simplify the clause @]
0.536[zip.saturate] ### step   417 ###
0.536[zip.saturate]
    given (417 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) c (f (f (f d)))+* ∨ cQ_2 b c X0+*]/id:446/depth:10`
0.536[zip.env] apply binary rule superposition_active
0.536[zip.env] apply binary rule superposition_passive
0.536[zip.env] apply binary rule ctx_narrow
0.536[zip.env] apply binary rule narrow_term_defs
0.536[zip.env] do unary inferences
0.536[zip.env] apply unary rule equality_resolution
0.536[zip.env] apply unary rule equality_factoring
0.536[zip.env] apply unary rule narrow_lit_defs
0.536[zip.env] apply unary rule ind_types.exhaustiveness
0.536[zip.env] apply unary rule ind_types.acyclicity
0.536[zip.env] apply unary rule avatar_check_empty
0.536[zip.env] apply generating rule avatar.lemmas (full: false)
0.536[zip.env] apply generating rule avatar_check_sat (full: false)
0.536[zip.avatar] SAT-solver reports "SAT"
0.536[zip.saturate] inferred new clauses: []
0.536[zip.sup] @[neg_reflect did not simplify the clause @]
0.536[zip.sup] @[neg_reflect did not simplify the clause @]
0.536[zip.saturate] ### step   418 ###
0.536[zip.saturate]
    given (418 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f c)))+* ∨ cQ_2 b c c+]/id:447/depth:10`
0.536[zip.env] apply binary rule superposition_active
0.536[zip.env] apply binary rule superposition_passive
0.536[zip.env] apply binary rule ctx_narrow
0.536[zip.env] apply binary rule narrow_term_defs
0.537[zip.env] do unary inferences
0.537[zip.env] apply unary rule equality_resolution
0.537[zip.env] apply unary rule equality_factoring
0.537[zip.env] apply unary rule narrow_lit_defs
0.537[zip.env] apply unary rule ind_types.exhaustiveness
0.537[zip.env] apply unary rule ind_types.acyclicity
0.537[zip.env] apply unary rule avatar_check_empty
0.537[zip.env] apply generating rule avatar.lemmas (full: false)
0.537[zip.env] apply generating rule avatar_check_sat (full: false)
0.537[zip.avatar] SAT-solver reports "SAT"
0.537[zip.saturate] inferred new clauses: []
0.537[zip.sup] @[neg_reflect did not simplify the clause @]
0.537[zip.sup] @[neg_reflect did not simplify the clause @]
0.537[zip.saturate] ### step   419 ###
0.537[zip.saturate]
    given (419 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f b)))+* ∨ cQ_2 b c b+]/id:448/depth:10`
0.537[zip.env] apply binary rule superposition_active
0.537[zip.env] apply binary rule superposition_passive
0.537[zip.env] apply binary rule ctx_narrow
0.537[zip.env] apply binary rule narrow_term_defs
0.537[zip.env] do unary inferences
0.537[zip.env] apply unary rule equality_resolution
0.537[zip.env] apply unary rule equality_factoring
0.537[zip.env] apply unary rule narrow_lit_defs
0.537[zip.env] apply unary rule ind_types.exhaustiveness
0.537[zip.env] apply unary rule ind_types.acyclicity
0.537[zip.env] apply unary rule avatar_check_empty
0.537[zip.env] apply generating rule avatar.lemmas (full: false)
0.537[zip.env] apply generating rule avatar_check_sat (full: false)
0.537[zip.avatar] SAT-solver reports "SAT"
0.537[zip.saturate] inferred new clauses: []
0.537[zip.sup] @[neg_reflect did not simplify the clause @]
0.537[zip.sup] @[neg_reflect did not simplify the clause @]
0.538[zip.saturate] ### step   420 ###
0.538[zip.saturate]
    given (420 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f a)))+* ∨ cQ_2 b c a+]/id:449/depth:10`
0.538[zip.env] apply binary rule superposition_active
0.538[zip.env] apply binary rule superposition_passive
0.538[zip.env] apply binary rule ctx_narrow
0.538[zip.env] apply binary rule narrow_term_defs
0.538[zip.env] do unary inferences
0.538[zip.env] apply unary rule equality_resolution
0.538[zip.env] apply unary rule equality_factoring
0.538[zip.env] apply unary rule narrow_lit_defs
0.538[zip.env] apply unary rule ind_types.exhaustiveness
0.538[zip.env] apply unary rule ind_types.acyclicity
0.538[zip.env] apply unary rule avatar_check_empty
0.538[zip.env] apply generating rule avatar.lemmas (full: false)
0.538[zip.env] apply generating rule avatar_check_sat (full: false)
0.538[zip.avatar] SAT-solver reports "SAT"
0.538[zip.saturate] inferred new clauses: []
0.538[zip.sup] @[neg_reflect did not simplify the clause @]
0.538[zip.sup] @[neg_reflect did not simplify the clause @]
0.538[zip.saturate] ### step   421 ###
0.538[zip.saturate]
    given (421 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9`
0.539[zip.env] apply binary rule superposition_active
0.539[zip.env] apply binary rule superposition_passive
0.539[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.539[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ cQ_2 a c X0+*]/id:450/depth:10
0.539[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.539[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) c (f (f (f d)))+* ∨ cQ_2 a c X0+*]/id:451/depth:10
0.539[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.540[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f c)))+* ∨ cQ_2 a c c+]/id:452/depth:10
0.540[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.540[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f b)))+* ∨ cQ_2 a c b+]/id:453/depth:10
0.540[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f X1)))*]/id:390/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.540[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f a)))+* ∨ cQ_2 a c a+]/id:454/depth:10
0.540[zip.env] apply binary rule ctx_narrow
0.540[zip.env] apply binary rule narrow_term_defs
0.540[zip.env] do unary inferences
0.540[zip.env] apply unary rule equality_resolution
0.540[zip.env] apply unary rule equality_factoring
0.540[zip.env] apply unary rule narrow_lit_defs
0.540[zip.env] apply unary rule ind_types.exhaustiveness
0.540[zip.env] apply unary rule ind_types.acyclicity
0.540[zip.env] apply unary rule avatar_check_empty
0.540[zip.env] apply generating rule avatar.lemmas (full: false)
0.540[zip.env] apply generating rule avatar_check_sat (full: false)
0.540[zip.avatar] SAT-solver reports "SAT"
0.540[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10, 
       forall X0. [¬cQ_1 (f a) c (f (f (f d)))+* ∨ cQ_2 a c X0+*]/id:451/depth:10, 
       [¬cQ_1 (f a) c (f (f (f c)))+* ∨ cQ_2 a c c+]/id:452/depth:10, 
       [¬cQ_1 (f a) c (f (f (f b)))+* ∨ cQ_2 a c b+]/id:453/depth:10, 
       [¬cQ_1 (f a) c (f (f (f a)))+* ∨ cQ_2 a c a+]/id:454/depth:10]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.sup] @[neg_reflect did not simplify the clause @]
0.541[zip.saturate] ### step   422 ###
0.541[zip.saturate]
    given (422 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) c (f (f (f d)))+* ∨ cQ_2 a c X0+*]/id:451/depth:10`
0.542[zip.env] apply binary rule superposition_active
0.542[zip.env] apply binary rule superposition_passive
0.542[zip.env] apply binary rule ctx_narrow
0.542[zip.env] apply binary rule narrow_term_defs
0.542[zip.env] do unary inferences
0.542[zip.env] apply unary rule equality_resolution
0.542[zip.env] apply unary rule equality_factoring
0.542[zip.env] apply unary rule narrow_lit_defs
0.542[zip.env] apply unary rule ind_types.exhaustiveness
0.542[zip.env] apply unary rule ind_types.acyclicity
0.542[zip.env] apply unary rule avatar_check_empty
0.542[zip.env] apply generating rule avatar.lemmas (full: false)
0.542[zip.env] apply generating rule avatar_check_sat (full: false)
0.542[zip.avatar] SAT-solver reports "SAT"
0.542[zip.saturate] inferred new clauses: []
0.542[zip.sup] @[neg_reflect did not simplify the clause @]
0.542[zip.sup] @[neg_reflect did not simplify the clause @]
0.542[zip.saturate] ### step   423 ###
0.542[zip.saturate]
    given (423 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f c)))+* ∨ cQ_2 a c c+]/id:452/depth:10`
0.543[zip.env] apply binary rule superposition_active
0.543[zip.env] apply binary rule superposition_passive
0.543[zip.env] apply binary rule ctx_narrow
0.543[zip.env] apply binary rule narrow_term_defs
0.543[zip.env] do unary inferences
0.543[zip.env] apply unary rule equality_resolution
0.543[zip.env] apply unary rule equality_factoring
0.543[zip.env] apply unary rule narrow_lit_defs
0.543[zip.env] apply unary rule ind_types.exhaustiveness
0.543[zip.env] apply unary rule ind_types.acyclicity
0.543[zip.env] apply unary rule avatar_check_empty
0.543[zip.env] apply generating rule avatar.lemmas (full: false)
0.543[zip.env] apply generating rule avatar_check_sat (full: false)
0.543[zip.avatar] SAT-solver reports "SAT"
0.543[zip.saturate] inferred new clauses: []
0.543[zip.sup] @[neg_reflect did not simplify the clause @]
0.543[zip.sup] @[neg_reflect did not simplify the clause @]
0.543[zip.saturate] ### step   424 ###
0.543[zip.saturate]
    given (424 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f b)))+* ∨ cQ_2 a c b+]/id:453/depth:10`
0.543[zip.env] apply binary rule superposition_active
0.543[zip.env] apply binary rule superposition_passive
0.543[zip.env] apply binary rule ctx_narrow
0.543[zip.env] apply binary rule narrow_term_defs
0.543[zip.env] do unary inferences
0.543[zip.env] apply unary rule equality_resolution
0.543[zip.env] apply unary rule equality_factoring
0.543[zip.env] apply unary rule narrow_lit_defs
0.543[zip.env] apply unary rule ind_types.exhaustiveness
0.543[zip.env] apply unary rule ind_types.acyclicity
0.543[zip.env] apply unary rule avatar_check_empty
0.544[zip.env] apply generating rule avatar.lemmas (full: false)
0.544[zip.env] apply generating rule avatar_check_sat (full: false)
0.544[zip.avatar] SAT-solver reports "SAT"
0.544[zip.saturate] inferred new clauses: []
0.544[zip.sup] @[neg_reflect did not simplify the clause @]
0.544[zip.sup] @[neg_reflect did not simplify the clause @]
0.544[zip.saturate] ### step   425 ###
0.544[zip.saturate]
    given (425 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f a)))+* ∨ cQ_2 a c a+]/id:454/depth:10`
0.544[zip.env] apply binary rule superposition_active
0.544[zip.env] apply binary rule superposition_passive
0.544[zip.env] apply binary rule ctx_narrow
0.544[zip.env] apply binary rule narrow_term_defs
0.544[zip.env] do unary inferences
0.544[zip.env] apply unary rule equality_resolution
0.544[zip.env] apply unary rule equality_factoring
0.544[zip.env] apply unary rule narrow_lit_defs
0.544[zip.env] apply unary rule ind_types.exhaustiveness
0.544[zip.env] apply unary rule ind_types.acyclicity
0.544[zip.env] apply unary rule avatar_check_empty
0.544[zip.env] apply generating rule avatar.lemmas (full: false)
0.544[zip.env] apply generating rule avatar_check_sat (full: false)
0.544[zip.avatar] SAT-solver reports "SAT"
0.544[zip.saturate] inferred new clauses: []
0.544[zip.sup] @[neg_reflect did not simplify the clause @]
0.544[zip.sup] @[neg_reflect did not simplify the clause @]
0.544[zip.saturate] ### step   426 ###
0.544[zip.saturate]
    given (426 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9`
0.545[zip.env] apply binary rule superposition_active
0.545[zip.env] apply binary rule superposition_passive
0.545[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.545[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ cQ_2 X2 b X0+*]/id:455/depth:10
0.545[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.545[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) b (f (f (f d)))+* ∨ cQ_2 X1 b X0+*]/id:456/depth:10
0.545[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.545[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f c)))+* ∨ cQ_2 X0 b c+*]/id:457/depth:10
0.545[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.545[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f b)))+* ∨ cQ_2 X0 b b+*]/id:458/depth:10
0.545[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.545[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f a)))+* ∨ cQ_2 X0 b a+*]/id:459/depth:10
0.546[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f X1)))*]/id:395/depth:9[0]
         passive_lit=cQ_2 X2 b X0 p=1.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.546[zip.sup] will yield a tautology
0.546[zip.sup] ... cancel, will yield a tautology
0.546[zip.env] apply binary rule ctx_narrow
0.546[zip.env] apply binary rule narrow_term_defs
0.546[zip.env] do unary inferences
0.546[zip.env] apply unary rule equality_resolution
0.546[zip.env] apply unary rule equality_factoring
0.546[zip.env] apply unary rule narrow_lit_defs
0.546[zip.env] apply unary rule ind_types.exhaustiveness
0.546[zip.env] apply unary rule ind_types.acyclicity
0.546[zip.env] apply unary rule avatar_check_empty
0.546[zip.env] apply generating rule avatar.lemmas (full: false)
0.546[zip.env] apply generating rule avatar_check_sat (full: false)
0.546[zip.avatar] SAT-solver reports "SAT"
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) b (f (f (f d)))+* ∨ cQ_2 X1 b X0+*]/id:456/depth:10, 
       forall X0. [¬cQ_1 (f d) b (f (f (f c)))+* ∨ cQ_2 X0 b c+*]/id:457/depth:10, 
       forall X0. [¬cQ_1 (f d) b (f (f (f b)))+* ∨ cQ_2 X0 b b+*]/id:458/depth:10, 
       forall X0. [¬cQ_1 (f d) b (f (f (f a)))+* ∨ cQ_2 X0 b a+*]/id:459/depth:10]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.sup] @[neg_reflect did not simplify the clause @]
0.546[zip.saturate] ### step   427 ###
0.546[zip.saturate]
    given (427 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) b (f (f (f d)))+* ∨ cQ_2 X1 b X0+*]/id:456/depth:10`
0.547[zip.env] apply binary rule superposition_active
0.547[zip.env] apply binary rule superposition_passive
0.547[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [¬cQ_1 (f d) b (f (f (f d)))+* ∨ cQ_2 X1 b X0+*]/id:456/depth:10[0]
         passive_lit=cQ_2 X1 b X0 p=1.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.547[zip.sup] will yield a tautology
0.547[zip.sup] ... cancel, will yield a tautology
0.547[zip.env] apply binary rule ctx_narrow
0.547[zip.env] apply binary rule narrow_term_defs
0.547[zip.env] do unary inferences
0.547[zip.env] apply unary rule equality_resolution
0.547[zip.env] apply unary rule equality_factoring
0.547[zip.env] apply unary rule narrow_lit_defs
0.547[zip.env] apply unary rule ind_types.exhaustiveness
0.547[zip.env] apply unary rule ind_types.acyclicity
0.547[zip.env] apply unary rule avatar_check_empty
0.547[zip.env] apply generating rule avatar.lemmas (full: false)
0.547[zip.env] apply generating rule avatar_check_sat (full: false)
0.547[zip.avatar] SAT-solver reports "SAT"
0.547[zip.saturate] inferred new clauses: []
0.547[zip.sup] @[neg_reflect did not simplify the clause @]
0.547[zip.sup] @[neg_reflect did not simplify the clause @]
0.547[zip.saturate] ### step   428 ###
0.547[zip.saturate]
    given (428 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f c)))+* ∨ cQ_2 X0 b c+*]/id:457/depth:10`
0.547[zip.env] apply binary rule superposition_active
0.547[zip.env] apply binary rule superposition_passive
0.547[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f c)))+* ∨ cQ_2 X0 b c+*]/id:457/depth:10[0]
         passive_lit=cQ_2 X0 b c p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.547[zip.sup] will yield a tautology
0.547[zip.sup] ... cancel, will yield a tautology
0.547[zip.env] apply binary rule ctx_narrow
0.547[zip.env] apply binary rule narrow_term_defs
0.547[zip.env] do unary inferences
0.547[zip.env] apply unary rule equality_resolution
0.547[zip.env] apply unary rule equality_factoring
0.547[zip.env] apply unary rule narrow_lit_defs
0.547[zip.env] apply unary rule ind_types.exhaustiveness
0.547[zip.env] apply unary rule ind_types.acyclicity
0.547[zip.env] apply unary rule avatar_check_empty
0.547[zip.env] apply generating rule avatar.lemmas (full: false)
0.547[zip.env] apply generating rule avatar_check_sat (full: false)
0.547[zip.avatar] SAT-solver reports "SAT"
0.547[zip.saturate] inferred new clauses: []
0.547[zip.sup] @[neg_reflect did not simplify the clause @]
0.547[zip.sup] @[neg_reflect did not simplify the clause @]
0.548[zip.saturate] ### step   429 ###
0.548[zip.saturate]
    given (429 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f b)))+* ∨ cQ_2 X0 b b+*]/id:458/depth:10`
0.548[zip.env] apply binary rule superposition_active
0.548[zip.env] apply binary rule superposition_passive
0.548[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f b)))+* ∨ cQ_2 X0 b b+*]/id:458/depth:10[0]
         passive_lit=cQ_2 X0 b b p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.548[zip.sup] will yield a tautology
0.548[zip.sup] ... cancel, will yield a tautology
0.548[zip.env] apply binary rule ctx_narrow
0.548[zip.env] apply binary rule narrow_term_defs
0.548[zip.env] do unary inferences
0.548[zip.env] apply unary rule equality_resolution
0.548[zip.env] apply unary rule equality_factoring
0.548[zip.env] apply unary rule narrow_lit_defs
0.548[zip.env] apply unary rule ind_types.exhaustiveness
0.548[zip.env] apply unary rule ind_types.acyclicity
0.548[zip.env] apply unary rule avatar_check_empty
0.548[zip.env] apply generating rule avatar.lemmas (full: false)
0.548[zip.env] apply generating rule avatar_check_sat (full: false)
0.548[zip.avatar] SAT-solver reports "SAT"
0.548[zip.saturate] inferred new clauses: []
0.548[zip.sup] @[neg_reflect did not simplify the clause @]
0.548[zip.sup] @[neg_reflect did not simplify the clause @]
0.548[zip.saturate] ### step   430 ###
0.548[zip.saturate]
    given (430 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f a)))+* ∨ cQ_2 X0 b a+*]/id:459/depth:10`
0.548[zip.env] apply binary rule superposition_active
0.549[zip.env] apply binary rule superposition_passive
0.549[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f a)))+* ∨ cQ_2 X0 b a+*]/id:459/depth:10[0]
         passive_lit=cQ_2 X0 b a p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.549[zip.sup] will yield a tautology
0.549[zip.sup] ... cancel, will yield a tautology
0.549[zip.env] apply binary rule ctx_narrow
0.549[zip.env] apply binary rule narrow_term_defs
0.549[zip.env] do unary inferences
0.549[zip.env] apply unary rule equality_resolution
0.549[zip.env] apply unary rule equality_factoring
0.549[zip.env] apply unary rule narrow_lit_defs
0.549[zip.env] apply unary rule ind_types.exhaustiveness
0.549[zip.env] apply unary rule ind_types.acyclicity
0.549[zip.env] apply unary rule avatar_check_empty
0.549[zip.env] apply generating rule avatar.lemmas (full: false)
0.549[zip.env] apply generating rule avatar_check_sat (full: false)
0.549[zip.avatar] SAT-solver reports "SAT"
0.549[zip.saturate] inferred new clauses: []
0.549[zip.sup] @[neg_reflect did not simplify the clause @]
0.549[zip.sup] @[neg_reflect did not simplify the clause @]
0.550[zip.saturate] ### step   431 ###
0.550[zip.saturate]
    given (431 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9`
0.550[zip.env] apply binary rule superposition_active
0.550[zip.env] apply binary rule superposition_passive
0.550[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.551[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ cQ_2 c b X0+*]/id:460/depth:10
0.551[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.551[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) b (f (f (f d)))+* ∨ cQ_2 c b X0+*]/id:461/depth:10
0.551[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.551[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f c)))+* ∨ cQ_2 c b c+]/id:462/depth:10
0.551[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.552[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f b)))+* ∨ cQ_2 c b b+]/id:463/depth:10
0.552[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f X1)))*]/id:400/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.552[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f a)))+* ∨ cQ_2 c b a+]/id:464/depth:10
0.552[zip.env] apply binary rule ctx_narrow
0.552[zip.env] apply binary rule narrow_term_defs
0.552[zip.env] do unary inferences
0.552[zip.env] apply unary rule equality_resolution
0.552[zip.env] apply unary rule equality_factoring
0.552[zip.env] apply unary rule narrow_lit_defs
0.552[zip.env] apply unary rule ind_types.exhaustiveness
0.552[zip.env] apply unary rule ind_types.acyclicity
0.552[zip.env] apply unary rule avatar_check_empty
0.552[zip.env] apply generating rule avatar.lemmas (full: false)
0.552[zip.env] apply generating rule avatar_check_sat (full: false)
0.552[zip.avatar] SAT-solver reports "SAT"
0.552[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10, 
       forall X0. [¬cQ_1 (f c) b (f (f (f d)))+* ∨ cQ_2 c b X0+*]/id:461/depth:10, 
       [¬cQ_1 (f c) b (f (f (f c)))+* ∨ cQ_2 c b c+]/id:462/depth:10, 
       [¬cQ_1 (f c) b (f (f (f b)))+* ∨ cQ_2 c b b+]/id:463/depth:10, 
       [¬cQ_1 (f c) b (f (f (f a)))+* ∨ cQ_2 c b a+]/id:464/depth:10]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.sup] @[neg_reflect did not simplify the clause @]
0.553[zip.saturate] ### step   432 ###
0.554[zip.saturate]
    given (432 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) b (f (f (f d)))+* ∨ cQ_2 c b X0+*]/id:461/depth:10`
0.554[zip.env] apply binary rule superposition_active
0.554[zip.env] apply binary rule superposition_passive
0.554[zip.env] apply binary rule ctx_narrow
0.554[zip.env] apply binary rule narrow_term_defs
0.554[zip.env] do unary inferences
0.554[zip.env] apply unary rule equality_resolution
0.554[zip.env] apply unary rule equality_factoring
0.554[zip.env] apply unary rule narrow_lit_defs
0.554[zip.env] apply unary rule ind_types.exhaustiveness
0.554[zip.env] apply unary rule ind_types.acyclicity
0.554[zip.env] apply unary rule avatar_check_empty
0.554[zip.env] apply generating rule avatar.lemmas (full: false)
0.554[zip.env] apply generating rule avatar_check_sat (full: false)
0.554[zip.avatar] SAT-solver reports "SAT"
0.554[zip.saturate] inferred new clauses: []
0.554[zip.sup] @[neg_reflect did not simplify the clause @]
0.554[zip.sup] @[neg_reflect did not simplify the clause @]
0.555[zip.saturate] ### step   433 ###
0.555[zip.saturate]
    given (433 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f c)))+* ∨ cQ_2 c b c+]/id:462/depth:10`
0.555[zip.env] apply binary rule superposition_active
0.555[zip.env] apply binary rule superposition_passive
0.555[zip.env] apply binary rule ctx_narrow
0.555[zip.env] apply binary rule narrow_term_defs
0.555[zip.env] do unary inferences
0.555[zip.env] apply unary rule equality_resolution
0.555[zip.env] apply unary rule equality_factoring
0.555[zip.env] apply unary rule narrow_lit_defs
0.555[zip.env] apply unary rule ind_types.exhaustiveness
0.555[zip.env] apply unary rule ind_types.acyclicity
0.555[zip.env] apply unary rule avatar_check_empty
0.555[zip.env] apply generating rule avatar.lemmas (full: false)
0.555[zip.env] apply generating rule avatar_check_sat (full: false)
0.555[zip.avatar] SAT-solver reports "SAT"
0.555[zip.saturate] inferred new clauses: []
0.555[zip.sup] @[neg_reflect did not simplify the clause @]
0.555[zip.sup] @[neg_reflect did not simplify the clause @]
0.556[zip.saturate] ### step   434 ###
0.556[zip.saturate]
    given (434 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f b)))+* ∨ cQ_2 c b b+]/id:463/depth:10`
0.557[zip.env] apply binary rule superposition_active
0.557[zip.env] apply binary rule superposition_passive
0.557[zip.env] apply binary rule ctx_narrow
0.557[zip.env] apply binary rule narrow_term_defs
0.557[zip.env] do unary inferences
0.557[zip.env] apply unary rule equality_resolution
0.557[zip.env] apply unary rule equality_factoring
0.557[zip.env] apply unary rule narrow_lit_defs
0.557[zip.env] apply unary rule ind_types.exhaustiveness
0.557[zip.env] apply unary rule ind_types.acyclicity
0.557[zip.env] apply unary rule avatar_check_empty
0.557[zip.env] apply generating rule avatar.lemmas (full: false)
0.557[zip.env] apply generating rule avatar_check_sat (full: false)
0.557[zip.avatar] SAT-solver reports "SAT"
0.557[zip.saturate] inferred new clauses: []
0.557[zip.sup] @[neg_reflect did not simplify the clause @]
0.557[zip.sup] @[neg_reflect did not simplify the clause @]
0.558[zip.saturate] ### step   435 ###
0.558[zip.saturate]
    given (435 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f a)))+* ∨ cQ_2 c b a+]/id:464/depth:10`
0.558[zip.env] apply binary rule superposition_active
0.558[zip.env] apply binary rule superposition_passive
0.558[zip.env] apply binary rule ctx_narrow
0.558[zip.env] apply binary rule narrow_term_defs
0.558[zip.env] do unary inferences
0.558[zip.env] apply unary rule equality_resolution
0.558[zip.env] apply unary rule equality_factoring
0.558[zip.env] apply unary rule narrow_lit_defs
0.558[zip.env] apply unary rule ind_types.exhaustiveness
0.558[zip.env] apply unary rule ind_types.acyclicity
0.558[zip.env] apply unary rule avatar_check_empty
0.558[zip.env] apply generating rule avatar.lemmas (full: false)
0.558[zip.env] apply generating rule avatar_check_sat (full: false)
0.558[zip.avatar] SAT-solver reports "SAT"
0.558[zip.saturate] inferred new clauses: []
0.559[zip.sup] @[neg_reflect did not simplify the clause @]
0.559[zip.sup] @[neg_reflect did not simplify the clause @]
0.559[zip.saturate] ### step   436 ###
0.559[zip.saturate]
    given (436 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9`
0.560[zip.env] apply binary rule superposition_active
0.560[zip.env] apply binary rule superposition_passive
0.560[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.560[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ cQ_2 b b X0+*]/id:465/depth:10
0.560[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.560[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) b (f (f (f d)))+* ∨ cQ_2 b b X0+*]/id:466/depth:10
0.561[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.561[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f c)))+* ∨ cQ_2 b b c+]/id:467/depth:10
0.561[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.561[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f b)))+* ∨ cQ_2 b b b+]/id:468/depth:10
0.561[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f X1)))*]/id:405/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.562[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f a)))+* ∨ cQ_2 b b a+]/id:469/depth:10
0.562[zip.env] apply binary rule ctx_narrow
0.562[zip.env] apply binary rule narrow_term_defs
0.562[zip.env] do unary inferences
0.562[zip.env] apply unary rule equality_resolution
0.562[zip.env] apply unary rule equality_factoring
0.562[zip.env] apply unary rule narrow_lit_defs
0.562[zip.env] apply unary rule ind_types.exhaustiveness
0.562[zip.env] apply unary rule ind_types.acyclicity
0.562[zip.env] apply unary rule avatar_check_empty
0.562[zip.env] apply generating rule avatar.lemmas (full: false)
0.562[zip.env] apply generating rule avatar_check_sat (full: false)
0.562[zip.avatar] SAT-solver reports "SAT"
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10, 
       forall X0. [¬cQ_1 (f b) b (f (f (f d)))+* ∨ cQ_2 b b X0+*]/id:466/depth:10, 
       [¬cQ_1 (f b) b (f (f (f c)))+* ∨ cQ_2 b b c+]/id:467/depth:10, 
       [¬cQ_1 (f b) b (f (f (f b)))+* ∨ cQ_2 b b b+]/id:468/depth:10, 
       [¬cQ_1 (f b) b (f (f (f a)))+* ∨ cQ_2 b b a+]/id:469/depth:10]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.562[zip.sup] @[neg_reflect did not simplify the clause @]
0.563[zip.saturate] ### step   437 ###
0.563[zip.saturate]
    given (437 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) b (f (f (f d)))+* ∨ cQ_2 b b X0+*]/id:466/depth:10`
0.563[zip.env] apply binary rule superposition_active
0.563[zip.env] apply binary rule superposition_passive
0.563[zip.env] apply binary rule ctx_narrow
0.563[zip.env] apply binary rule narrow_term_defs
0.563[zip.env] do unary inferences
0.563[zip.env] apply unary rule equality_resolution
0.563[zip.env] apply unary rule equality_factoring
0.563[zip.env] apply unary rule narrow_lit_defs
0.563[zip.env] apply unary rule ind_types.exhaustiveness
0.563[zip.env] apply unary rule ind_types.acyclicity
0.563[zip.env] apply unary rule avatar_check_empty
0.563[zip.env] apply generating rule avatar.lemmas (full: false)
0.563[zip.env] apply generating rule avatar_check_sat (full: false)
0.563[zip.avatar] SAT-solver reports "SAT"
0.563[zip.saturate] inferred new clauses: []
0.563[zip.sup] @[neg_reflect did not simplify the clause @]
0.563[zip.sup] @[neg_reflect did not simplify the clause @]
0.563[zip.saturate] ### step   438 ###
0.563[zip.saturate]
    given (438 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f c)))+* ∨ cQ_2 b b c+]/id:467/depth:10`
0.563[zip.env] apply binary rule superposition_active
0.563[zip.env] apply binary rule superposition_passive
0.563[zip.env] apply binary rule ctx_narrow
0.563[zip.env] apply binary rule narrow_term_defs
0.563[zip.env] do unary inferences
0.563[zip.env] apply unary rule equality_resolution
0.563[zip.env] apply unary rule equality_factoring
0.564[zip.env] apply unary rule narrow_lit_defs
0.564[zip.env] apply unary rule ind_types.exhaustiveness
0.564[zip.env] apply unary rule ind_types.acyclicity
0.564[zip.env] apply unary rule avatar_check_empty
0.564[zip.env] apply generating rule avatar.lemmas (full: false)
0.564[zip.env] apply generating rule avatar_check_sat (full: false)
0.564[zip.avatar] SAT-solver reports "SAT"
0.564[zip.saturate] inferred new clauses: []
0.564[zip.sup] @[neg_reflect did not simplify the clause @]
0.564[zip.sup] @[neg_reflect did not simplify the clause @]
0.564[zip.saturate] ### step   439 ###
0.564[zip.saturate]
    given (439 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f b)))+* ∨ cQ_2 b b b+]/id:468/depth:10`
0.564[zip.env] apply binary rule superposition_active
0.564[zip.env] apply binary rule superposition_passive
0.564[zip.env] apply binary rule ctx_narrow
0.564[zip.env] apply binary rule narrow_term_defs
0.564[zip.env] do unary inferences
0.564[zip.env] apply unary rule equality_resolution
0.564[zip.env] apply unary rule equality_factoring
0.564[zip.env] apply unary rule narrow_lit_defs
0.564[zip.env] apply unary rule ind_types.exhaustiveness
0.564[zip.env] apply unary rule ind_types.acyclicity
0.564[zip.env] apply unary rule avatar_check_empty
0.564[zip.env] apply generating rule avatar.lemmas (full: false)
0.564[zip.env] apply generating rule avatar_check_sat (full: false)
0.564[zip.avatar] SAT-solver reports "SAT"
0.564[zip.saturate] inferred new clauses: []
0.564[zip.sup] @[neg_reflect did not simplify the clause @]
0.564[zip.sup] @[neg_reflect did not simplify the clause @]
0.564[zip.saturate] ### step   440 ###
0.564[zip.saturate]
    given (440 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f a)))+* ∨ cQ_2 b b a+]/id:469/depth:10`
0.565[zip.env] apply binary rule superposition_active
0.565[zip.env] apply binary rule superposition_passive
0.565[zip.env] apply binary rule ctx_narrow
0.565[zip.env] apply binary rule narrow_term_defs
0.565[zip.env] do unary inferences
0.565[zip.env] apply unary rule equality_resolution
0.565[zip.env] apply unary rule equality_factoring
0.565[zip.env] apply unary rule narrow_lit_defs
0.565[zip.env] apply unary rule ind_types.exhaustiveness
0.565[zip.env] apply unary rule ind_types.acyclicity
0.565[zip.env] apply unary rule avatar_check_empty
0.565[zip.env] apply generating rule avatar.lemmas (full: false)
0.565[zip.env] apply generating rule avatar_check_sat (full: false)
0.565[zip.avatar] SAT-solver reports "SAT"
0.565[zip.saturate] inferred new clauses: []
0.565[zip.sup] @[neg_reflect did not simplify the clause @]
0.565[zip.sup] @[neg_reflect did not simplify the clause @]
0.565[zip.saturate] ### step   441 ###
0.565[zip.saturate]
    given (441 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9`
0.565[zip.env] apply binary rule superposition_active
0.566[zip.env] apply binary rule superposition_passive
0.566[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.566[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ cQ_2 a b X0+*]/id:470/depth:10
0.566[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.566[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) b (f (f (f d)))+* ∨ cQ_2 a b X0+*]/id:471/depth:10
0.567[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.567[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f c)))+* ∨ cQ_2 a b c+]/id:472/depth:10
0.567[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.567[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f b)))+* ∨ cQ_2 a b b+]/id:473/depth:10
0.567[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.568[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f a)))+* ∨ cQ_2 a b a+]/id:474/depth:10
0.568[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f X1)))*]/id:410/depth:9[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.568[zip.sup] will yield a tautology
0.568[zip.sup] ... cancel, will yield a tautology
0.568[zip.env] apply binary rule ctx_narrow
0.568[zip.env] apply binary rule narrow_term_defs
0.568[zip.env] do unary inferences
0.568[zip.env] apply unary rule equality_resolution
0.568[zip.env] apply unary rule equality_factoring
0.568[zip.env] apply unary rule narrow_lit_defs
0.568[zip.env] apply unary rule ind_types.exhaustiveness
0.568[zip.env] apply unary rule ind_types.acyclicity
0.568[zip.env] apply unary rule avatar_check_empty
0.568[zip.env] apply generating rule avatar.lemmas (full: false)
0.568[zip.env] apply generating rule avatar_check_sat (full: false)
0.568[zip.avatar] SAT-solver reports "SAT"
0.568[zip.sup] @[neg_reflect did not simplify the clause @]
0.568[zip.sup] @[neg_reflect did not simplify the clause @]
0.568[zip.sup] @[neg_reflect did not simplify the clause @]
0.568[zip.sup] @[neg_reflect did not simplify the clause @]
0.568[zip.sup] @[neg_reflect did not simplify the clause @]
0.568[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10, 
       forall X0. [¬cQ_1 (f a) b (f (f (f d)))+* ∨ cQ_2 a b X0+*]/id:471/depth:10, 
       [¬cQ_1 (f a) b (f (f (f c)))+* ∨ cQ_2 a b c+]/id:472/depth:10, 
       [¬cQ_1 (f a) b (f (f (f b)))+* ∨ cQ_2 a b b+]/id:473/depth:10, 
       [¬cQ_1 (f a) b (f (f (f a)))+* ∨ cQ_2 a b a+]/id:474/depth:10]
0.569[zip.sup] @[neg_reflect did not simplify the clause @]
0.569[zip.sup] @[neg_reflect did not simplify the clause @]
0.569[zip.saturate] ### step   442 ###
0.569[zip.saturate]
    given (442 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) b (f (f (f d)))+* ∨ cQ_2 a b X0+*]/id:471/depth:10`
0.569[zip.env] apply binary rule superposition_active
0.569[zip.env] apply binary rule superposition_passive
0.569[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) b (f (f (f d)))+* ∨ cQ_2 a b X0+*]/id:471/depth:10[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.570[zip.sup] will yield a tautology
0.570[zip.sup] ... cancel, will yield a tautology
0.570[zip.env] apply binary rule ctx_narrow
0.570[zip.env] apply binary rule narrow_term_defs
0.570[zip.env] do unary inferences
0.570[zip.env] apply unary rule equality_resolution
0.570[zip.env] apply unary rule equality_factoring
0.570[zip.env] apply unary rule narrow_lit_defs
0.570[zip.env] apply unary rule ind_types.exhaustiveness
0.570[zip.env] apply unary rule ind_types.acyclicity
0.570[zip.env] apply unary rule avatar_check_empty
0.570[zip.env] apply generating rule avatar.lemmas (full: false)
0.570[zip.env] apply generating rule avatar_check_sat (full: false)
0.570[zip.avatar] SAT-solver reports "SAT"
0.570[zip.saturate] inferred new clauses: []
0.570[zip.sup] @[neg_reflect did not simplify the clause @]
0.570[zip.sup] @[neg_reflect did not simplify the clause @]
0.570[zip.saturate] ### step   443 ###
0.570[zip.saturate]
    given (443 steps, penalty 1):
      `[¬cQ_1 (f a) b (f (f (f c)))+* ∨ cQ_2 a b c+]/id:472/depth:10`
0.570[zip.env] apply binary rule superposition_active
0.570[zip.env] apply binary rule superposition_passive
0.570[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f (f (f c)))+* ∨ cQ_2 a b c+]/id:472/depth:10[0]
         passive_lit=cQ_2 a b c p=1.←.ε)
      with subst={X0[1] → c[0]}.

0.570[zip.sup] will yield a tautology
0.570[zip.sup] ... cancel, will yield a tautology
0.570[zip.env] apply binary rule ctx_narrow
0.570[zip.env] apply binary rule narrow_term_defs
0.571[zip.env] do unary inferences
0.571[zip.env] apply unary rule equality_resolution
0.571[zip.env] apply unary rule equality_factoring
0.571[zip.env] apply unary rule narrow_lit_defs
0.571[zip.env] apply unary rule ind_types.exhaustiveness
0.571[zip.env] apply unary rule ind_types.acyclicity
0.571[zip.env] apply unary rule avatar_check_empty
0.571[zip.env] apply generating rule avatar.lemmas (full: false)
0.571[zip.env] apply generating rule avatar_check_sat (full: false)
0.571[zip.avatar] SAT-solver reports "SAT"
0.571[zip.saturate] inferred new clauses: []
0.571[zip.sup] @[neg_reflect did not simplify the clause @]
0.571[zip.sup] @[neg_reflect did not simplify the clause @]
0.571[zip.saturate] ### step   444 ###
0.571[zip.saturate]
    given (444 steps, penalty 1):
      `[¬cQ_1 (f a) b (f (f (f b)))+* ∨ cQ_2 a b b+]/id:473/depth:10`
0.571[zip.env] apply binary rule superposition_active
0.571[zip.env] apply binary rule superposition_passive
0.571[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f (f (f b)))+* ∨ cQ_2 a b b+]/id:473/depth:10[0]
         passive_lit=cQ_2 a b b p=1.←.ε)
      with subst={X0[1] → b[0]}.

0.571[zip.sup] will yield a tautology
0.571[zip.sup] ... cancel, will yield a tautology
0.571[zip.env] apply binary rule ctx_narrow
0.571[zip.env] apply binary rule narrow_term_defs
0.571[zip.env] do unary inferences
0.571[zip.env] apply unary rule equality_resolution
0.571[zip.env] apply unary rule equality_factoring
0.571[zip.env] apply unary rule narrow_lit_defs
0.571[zip.env] apply unary rule ind_types.exhaustiveness
0.571[zip.env] apply unary rule ind_types.acyclicity
0.571[zip.env] apply unary rule avatar_check_empty
0.571[zip.env] apply generating rule avatar.lemmas (full: false)
0.571[zip.env] apply generating rule avatar_check_sat (full: false)
0.571[zip.avatar] SAT-solver reports "SAT"
0.571[zip.saturate] inferred new clauses: []
0.571[zip.sup] @[neg_reflect did not simplify the clause @]
0.571[zip.sup] @[neg_reflect did not simplify the clause @]
0.572[zip.saturate] ### step   445 ###
0.572[zip.saturate]
    given (445 steps, penalty 1):
      `[¬cQ_1 (f a) b (f (f (f a)))+* ∨ cQ_2 a b a+]/id:474/depth:10`
0.572[zip.env] apply binary rule superposition_active
0.572[zip.env] apply binary rule superposition_passive
0.572[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([¬cQ_1 (f a) b (f (f (f a)))+* ∨ cQ_2 a b a+]/id:474/depth:10[0]
         passive_lit=cQ_2 a b a p=1.←.ε)
      with subst={X0[1] → a[0]}.

0.572[zip.sup] will yield a tautology
0.572[zip.sup] ... cancel, will yield a tautology
0.572[zip.env] apply binary rule ctx_narrow
0.572[zip.env] apply binary rule narrow_term_defs
0.572[zip.env] do unary inferences
0.572[zip.env] apply unary rule equality_resolution
0.572[zip.env] apply unary rule equality_factoring
0.572[zip.env] apply unary rule narrow_lit_defs
0.572[zip.env] apply unary rule ind_types.exhaustiveness
0.572[zip.env] apply unary rule ind_types.acyclicity
0.572[zip.env] apply unary rule avatar_check_empty
0.572[zip.env] apply generating rule avatar.lemmas (full: false)
0.572[zip.env] apply generating rule avatar_check_sat (full: false)
0.572[zip.avatar] SAT-solver reports "SAT"
0.572[zip.saturate] inferred new clauses: []
0.572[zip.sup] @[neg_reflect did not simplify the clause @]
0.572[zip.sup] @[neg_reflect did not simplify the clause @]
0.573[zip.saturate] ### step   446 ###
0.573[zip.saturate]
    given (446 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9`
0.573[zip.env] apply binary rule superposition_active
0.573[zip.env] apply binary rule superposition_passive
0.573[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.573[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ cQ_2 X2 a X0+*]/id:475/depth:10
0.573[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.574[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) a (f (f (f d)))+* ∨ cQ_2 X1 a X0+*]/id:476/depth:10
0.574[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.574[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f (f (f c)))+* ∨ cQ_2 X0 a c+*]/id:477/depth:10
0.574[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.574[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f (f (f b)))+* ∨ cQ_2 X0 a b+*]/id:478/depth:10
0.574[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f X1)))*]/id:415/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.574[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) a (f (f (f a)))+* ∨ cQ_2 X0 a a+*]/id:479/depth:10
0.574[zip.env] apply binary rule ctx_narrow
0.575[zip.env] apply binary rule narrow_term_defs
0.575[zip.env] do unary inferences
0.575[zip.env] apply unary rule equality_resolution
0.575[zip.env] apply unary rule equality_factoring
0.575[zip.env] apply unary rule narrow_lit_defs
0.575[zip.env] apply unary rule ind_types.exhaustiveness
0.575[zip.env] apply unary rule ind_types.acyclicity
0.575[zip.env] apply unary rule avatar_check_empty
0.575[zip.env] apply generating rule avatar.lemmas (full: false)
0.575[zip.env] apply generating rule avatar_check_sat (full: false)
0.575[zip.avatar] SAT-solver reports "SAT"
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10, 
       forall X0 X1. [¬cQ_1 (f d) a (f (f (f d)))+* ∨ cQ_2 X1 a X0+*]/id:476/depth:10, 
       forall X0. [¬cQ_1 (f d) a (f (f (f c)))+* ∨ cQ_2 X0 a c+*]/id:477/depth:10, 
       forall X0. [¬cQ_1 (f d) a (f (f (f b)))+* ∨ cQ_2 X0 a b+*]/id:478/depth:10, 
       forall X0. [¬cQ_1 (f d) a (f (f (f a)))+* ∨ cQ_2 X0 a a+*]/id:479/depth:10]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.575[zip.sup] @[neg_reflect did not simplify the clause @]
0.576[zip.saturate] ### step   447 ###
0.576[zip.saturate]
    given (447 steps, penalty 1):
      `forall X0 X1. [¬cQ_1 (f d) a (f (f (f d)))+* ∨ cQ_2 X1 a X0+*]/id:476/depth:10`
0.576[zip.env] apply binary rule superposition_active
0.576[zip.env] apply binary rule superposition_passive
0.576[zip.env] apply binary rule ctx_narrow
0.576[zip.env] apply binary rule narrow_term_defs
0.576[zip.env] do unary inferences
0.576[zip.env] apply unary rule equality_resolution
0.576[zip.env] apply unary rule equality_factoring
0.576[zip.env] apply unary rule narrow_lit_defs
0.576[zip.env] apply unary rule ind_types.exhaustiveness
0.576[zip.env] apply unary rule ind_types.acyclicity
0.576[zip.env] apply unary rule avatar_check_empty
0.576[zip.env] apply generating rule avatar.lemmas (full: false)
0.576[zip.env] apply generating rule avatar_check_sat (full: false)
0.576[zip.avatar] SAT-solver reports "SAT"
0.576[zip.saturate] inferred new clauses: []
0.576[zip.sup] @[neg_reflect did not simplify the clause @]
0.576[zip.sup] @[neg_reflect did not simplify the clause @]
0.576[zip.saturate] ### step   448 ###
0.576[zip.saturate]
    given (448 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f (f (f c)))+* ∨ cQ_2 X0 a c+*]/id:477/depth:10`
0.577[zip.env] apply binary rule superposition_active
0.577[zip.env] apply binary rule superposition_passive
0.577[zip.env] apply binary rule ctx_narrow
0.577[zip.env] apply binary rule narrow_term_defs
0.577[zip.env] do unary inferences
0.577[zip.env] apply unary rule equality_resolution
0.577[zip.env] apply unary rule equality_factoring
0.577[zip.env] apply unary rule narrow_lit_defs
0.577[zip.env] apply unary rule ind_types.exhaustiveness
0.577[zip.env] apply unary rule ind_types.acyclicity
0.577[zip.env] apply unary rule avatar_check_empty
0.577[zip.env] apply generating rule avatar.lemmas (full: false)
0.577[zip.env] apply generating rule avatar_check_sat (full: false)
0.577[zip.avatar] SAT-solver reports "SAT"
0.577[zip.saturate] inferred new clauses: []
0.577[zip.sup] @[neg_reflect did not simplify the clause @]
0.577[zip.sup] @[neg_reflect did not simplify the clause @]
0.577[zip.saturate] ### step   449 ###
0.577[zip.saturate]
    given (449 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f (f (f b)))+* ∨ cQ_2 X0 a b+*]/id:478/depth:10`
0.577[zip.env] apply binary rule superposition_active
0.577[zip.env] apply binary rule superposition_passive
0.577[zip.env] apply binary rule ctx_narrow
0.577[zip.env] apply binary rule narrow_term_defs
0.577[zip.env] do unary inferences
0.577[zip.env] apply unary rule equality_resolution
0.577[zip.env] apply unary rule equality_factoring
0.577[zip.env] apply unary rule narrow_lit_defs
0.577[zip.env] apply unary rule ind_types.exhaustiveness
0.577[zip.env] apply unary rule ind_types.acyclicity
0.577[zip.env] apply unary rule avatar_check_empty
0.577[zip.env] apply generating rule avatar.lemmas (full: false)
0.577[zip.env] apply generating rule avatar_check_sat (full: false)
0.577[zip.avatar] SAT-solver reports "SAT"
0.577[zip.saturate] inferred new clauses: []
0.577[zip.sup] @[neg_reflect did not simplify the clause @]
0.577[zip.sup] @[neg_reflect did not simplify the clause @]
0.578[zip.saturate] ### step   450 ###
0.578[zip.saturate]
    given (450 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) a (f (f (f a)))+* ∨ cQ_2 X0 a a+*]/id:479/depth:10`
0.578[zip.env] apply binary rule superposition_active
0.578[zip.env] apply binary rule superposition_passive
0.578[zip.env] apply binary rule ctx_narrow
0.578[zip.env] apply binary rule narrow_term_defs
0.578[zip.env] do unary inferences
0.578[zip.env] apply unary rule equality_resolution
0.578[zip.env] apply unary rule equality_factoring
0.578[zip.env] apply unary rule narrow_lit_defs
0.578[zip.env] apply unary rule ind_types.exhaustiveness
0.578[zip.env] apply unary rule ind_types.acyclicity
0.578[zip.env] apply unary rule avatar_check_empty
0.578[zip.env] apply generating rule avatar.lemmas (full: false)
0.578[zip.env] apply generating rule avatar_check_sat (full: false)
0.578[zip.avatar] SAT-solver reports "SAT"
0.578[zip.saturate] inferred new clauses: []
0.578[zip.sup] @[neg_reflect did not simplify the clause @]
0.578[zip.sup] @[neg_reflect did not simplify the clause @]
0.578[zip.saturate] ### step   451 ###
0.579[zip.saturate]
    given (451 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9`
0.579[zip.env] apply binary rule superposition_active
0.579[zip.env] apply binary rule superposition_passive
0.579[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.579[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ cQ_2 c a X0+*]/id:480/depth:10
0.579[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.579[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) a (f (f (f d)))+* ∨ cQ_2 c a X0+*]/id:481/depth:10
0.579[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.579[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f (f (f c)))+* ∨ cQ_2 c a c+]/id:482/depth:10
0.580[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.580[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f (f (f b)))+* ∨ cQ_2 c a b+]/id:483/depth:10
0.580[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f X1)))*]/id:420/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.580[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) a (f (f (f a)))+* ∨ cQ_2 c a a+]/id:484/depth:10
0.580[zip.env] apply binary rule ctx_narrow
0.580[zip.env] apply binary rule narrow_term_defs
0.580[zip.env] do unary inferences
0.580[zip.env] apply unary rule equality_resolution
0.580[zip.env] apply unary rule equality_factoring
0.580[zip.env] apply unary rule narrow_lit_defs
0.580[zip.env] apply unary rule ind_types.exhaustiveness
0.580[zip.env] apply unary rule ind_types.acyclicity
0.580[zip.env] apply unary rule avatar_check_empty
0.580[zip.env] apply generating rule avatar.lemmas (full: false)
0.580[zip.env] apply generating rule avatar_check_sat (full: false)
0.580[zip.avatar] SAT-solver reports "SAT"
0.580[zip.sup] @[neg_reflect did not simplify the clause @]
0.580[zip.sup] @[neg_reflect did not simplify the clause @]
0.580[zip.sup] @[neg_reflect did not simplify the clause @]
0.581[zip.sup] @[neg_reflect did not simplify the clause @]
0.581[zip.sup] @[neg_reflect did not simplify the clause @]
0.581[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10, 
       forall X0. [¬cQ_1 (f c) a (f (f (f d)))+* ∨ cQ_2 c a X0+*]/id:481/depth:10, 
       [¬cQ_1 (f c) a (f (f (f c)))+* ∨ cQ_2 c a c+]/id:482/depth:10, 
       [¬cQ_1 (f c) a (f (f (f b)))+* ∨ cQ_2 c a b+]/id:483/depth:10, 
       [¬cQ_1 (f c) a (f (f (f a)))+* ∨ cQ_2 c a a+]/id:484/depth:10]
0.581[zip.sup] @[neg_reflect did not simplify the clause @]
0.581[zip.sup] @[neg_reflect did not simplify the clause @]
0.581[zip.saturate] ### step   452 ###
0.581[zip.saturate]
    given (452 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) a (f (f (f d)))+* ∨ cQ_2 c a X0+*]/id:481/depth:10`
0.581[zip.env] apply binary rule superposition_active
0.581[zip.env] apply binary rule superposition_passive
0.581[zip.env] apply binary rule ctx_narrow
0.581[zip.env] apply binary rule narrow_term_defs
0.581[zip.env] do unary inferences
0.581[zip.env] apply unary rule equality_resolution
0.581[zip.env] apply unary rule equality_factoring
0.581[zip.env] apply unary rule narrow_lit_defs
0.581[zip.env] apply unary rule ind_types.exhaustiveness
0.582[zip.env] apply unary rule ind_types.acyclicity
0.582[zip.env] apply unary rule avatar_check_empty
0.582[zip.env] apply generating rule avatar.lemmas (full: false)
0.582[zip.env] apply generating rule avatar_check_sat (full: false)
0.582[zip.avatar] SAT-solver reports "SAT"
0.582[zip.saturate] inferred new clauses: []
0.582[zip.sup] @[neg_reflect did not simplify the clause @]
0.582[zip.sup] @[neg_reflect did not simplify the clause @]
0.582[zip.saturate] ### step   453 ###
0.582[zip.saturate]
    given (453 steps, penalty 1):
      `[¬cQ_1 (f c) a (f (f (f c)))+* ∨ cQ_2 c a c+]/id:482/depth:10`
0.582[zip.env] apply binary rule superposition_active
0.582[zip.env] apply binary rule superposition_passive
0.582[zip.env] apply binary rule ctx_narrow
0.582[zip.env] apply binary rule narrow_term_defs
0.582[zip.env] do unary inferences
0.582[zip.env] apply unary rule equality_resolution
0.582[zip.env] apply unary rule equality_factoring
0.582[zip.env] apply unary rule narrow_lit_defs
0.582[zip.env] apply unary rule ind_types.exhaustiveness
0.582[zip.env] apply unary rule ind_types.acyclicity
0.582[zip.env] apply unary rule avatar_check_empty
0.582[zip.env] apply generating rule avatar.lemmas (full: false)
0.582[zip.env] apply generating rule avatar_check_sat (full: false)
0.583[zip.avatar] SAT-solver reports "SAT"
0.583[zip.saturate] inferred new clauses: []
0.583[zip.sup] @[neg_reflect did not simplify the clause @]
0.583[zip.sup] @[neg_reflect did not simplify the clause @]
0.583[zip.saturate] ### step   454 ###
0.583[zip.saturate]
    given (454 steps, penalty 1):
      `[¬cQ_1 (f c) a (f (f (f b)))+* ∨ cQ_2 c a b+]/id:483/depth:10`
0.584[zip.env] apply binary rule superposition_active
0.584[zip.env] apply binary rule superposition_passive
0.584[zip.env] apply binary rule ctx_narrow
0.584[zip.env] apply binary rule narrow_term_defs
0.584[zip.env] do unary inferences
0.584[zip.env] apply unary rule equality_resolution
0.584[zip.env] apply unary rule equality_factoring
0.584[zip.env] apply unary rule narrow_lit_defs
0.584[zip.env] apply unary rule ind_types.exhaustiveness
0.584[zip.env] apply unary rule ind_types.acyclicity
0.584[zip.env] apply unary rule avatar_check_empty
0.584[zip.env] apply generating rule avatar.lemmas (full: false)
0.584[zip.env] apply generating rule avatar_check_sat (full: false)
0.584[zip.avatar] SAT-solver reports "SAT"
0.584[zip.saturate] inferred new clauses: []
0.584[zip.sup] @[neg_reflect did not simplify the clause @]
0.584[zip.sup] @[neg_reflect did not simplify the clause @]
0.585[zip.saturate] ### step   455 ###
0.585[zip.saturate]
    given (455 steps, penalty 1):
      `[¬cQ_1 (f c) a (f (f (f a)))+* ∨ cQ_2 c a a+]/id:484/depth:10`
0.585[zip.env] apply binary rule superposition_active
0.585[zip.env] apply binary rule superposition_passive
0.585[zip.env] apply binary rule ctx_narrow
0.585[zip.env] apply binary rule narrow_term_defs
0.585[zip.env] do unary inferences
0.585[zip.env] apply unary rule equality_resolution
0.585[zip.env] apply unary rule equality_factoring
0.585[zip.env] apply unary rule narrow_lit_defs
0.585[zip.env] apply unary rule ind_types.exhaustiveness
0.585[zip.env] apply unary rule ind_types.acyclicity
0.585[zip.env] apply unary rule avatar_check_empty
0.585[zip.env] apply generating rule avatar.lemmas (full: false)
0.585[zip.env] apply generating rule avatar_check_sat (full: false)
0.585[zip.avatar] SAT-solver reports "SAT"
0.585[zip.saturate] inferred new clauses: []
0.585[zip.sup] @[neg_reflect did not simplify the clause @]
0.586[zip.sup] @[neg_reflect did not simplify the clause @]
0.586[zip.saturate] ### step   456 ###
0.586[zip.saturate]
    given (456 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9`
0.587[zip.env] apply binary rule superposition_active
0.588[zip.env] apply binary rule superposition_passive
0.588[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.588[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ cQ_2 b a X0+*]/id:485/depth:10
0.588[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.588[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) a (f (f (f d)))+* ∨ cQ_2 b a X0+*]/id:486/depth:10
0.588[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.588[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f (f (f c)))+* ∨ cQ_2 b a c+]/id:487/depth:10
0.589[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.589[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f (f (f b)))+* ∨ cQ_2 b a b+]/id:488/depth:10
0.589[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f X1)))*]/id:425/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.589[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) a (f (f (f a)))+* ∨ cQ_2 b a a+]/id:489/depth:10
0.589[zip.env] apply binary rule ctx_narrow
0.589[zip.env] apply binary rule narrow_term_defs
0.589[zip.env] do unary inferences
0.589[zip.env] apply unary rule equality_resolution
0.589[zip.env] apply unary rule equality_factoring
0.589[zip.env] apply unary rule narrow_lit_defs
0.589[zip.env] apply unary rule ind_types.exhaustiveness
0.589[zip.env] apply unary rule ind_types.acyclicity
0.589[zip.env] apply unary rule avatar_check_empty
0.589[zip.env] apply generating rule avatar.lemmas (full: false)
0.589[zip.env] apply generating rule avatar_check_sat (full: false)
0.589[zip.avatar] SAT-solver reports "SAT"
0.589[zip.sup] @[neg_reflect did not simplify the clause @]
0.589[zip.sup] @[neg_reflect did not simplify the clause @]
0.589[zip.sup] @[neg_reflect did not simplify the clause @]
0.589[zip.sup] @[neg_reflect did not simplify the clause @]
0.589[zip.sup] @[neg_reflect did not simplify the clause @]
0.589[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10, 
       forall X0. [¬cQ_1 (f b) a (f (f (f d)))+* ∨ cQ_2 b a X0+*]/id:486/depth:10, 
       [¬cQ_1 (f b) a (f (f (f c)))+* ∨ cQ_2 b a c+]/id:487/depth:10, 
       [¬cQ_1 (f b) a (f (f (f b)))+* ∨ cQ_2 b a b+]/id:488/depth:10, 
       [¬cQ_1 (f b) a (f (f (f a)))+* ∨ cQ_2 b a a+]/id:489/depth:10]
0.590[zip.sup] @[neg_reflect did not simplify the clause @]
0.590[zip.sup] @[neg_reflect did not simplify the clause @]
0.590[zip.saturate] ### step   457 ###
0.590[zip.saturate]
    given (457 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) a (f (f (f d)))+* ∨ cQ_2 b a X0+*]/id:486/depth:10`
0.591[zip.env] apply binary rule superposition_active
0.591[zip.env] apply binary rule superposition_passive
0.591[zip.env] apply binary rule ctx_narrow
0.591[zip.env] apply binary rule narrow_term_defs
0.591[zip.env] do unary inferences
0.591[zip.env] apply unary rule equality_resolution
0.591[zip.env] apply unary rule equality_factoring
0.591[zip.env] apply unary rule narrow_lit_defs
0.591[zip.env] apply unary rule ind_types.exhaustiveness
0.591[zip.env] apply unary rule ind_types.acyclicity
0.591[zip.env] apply unary rule avatar_check_empty
0.591[zip.env] apply generating rule avatar.lemmas (full: false)
0.591[zip.env] apply generating rule avatar_check_sat (full: false)
0.591[zip.avatar] SAT-solver reports "SAT"
0.591[zip.saturate] inferred new clauses: []
0.591[zip.sup] @[neg_reflect did not simplify the clause @]
0.591[zip.sup] @[neg_reflect did not simplify the clause @]
0.591[zip.saturate] ### step   458 ###
0.591[zip.saturate]
    given (458 steps, penalty 1):
      `[¬cQ_1 (f b) a (f (f (f c)))+* ∨ cQ_2 b a c+]/id:487/depth:10`
0.591[zip.env] apply binary rule superposition_active
0.591[zip.env] apply binary rule superposition_passive
0.591[zip.env] apply binary rule ctx_narrow
0.591[zip.env] apply binary rule narrow_term_defs
0.591[zip.env] do unary inferences
0.591[zip.env] apply unary rule equality_resolution
0.591[zip.env] apply unary rule equality_factoring
0.591[zip.env] apply unary rule narrow_lit_defs
0.591[zip.env] apply unary rule ind_types.exhaustiveness
0.591[zip.env] apply unary rule ind_types.acyclicity
0.591[zip.env] apply unary rule avatar_check_empty
0.591[zip.env] apply generating rule avatar.lemmas (full: false)
0.591[zip.env] apply generating rule avatar_check_sat (full: false)
0.591[zip.avatar] SAT-solver reports "SAT"
0.591[zip.saturate] inferred new clauses: []
0.591[zip.sup] @[neg_reflect did not simplify the clause @]
0.591[zip.sup] @[neg_reflect did not simplify the clause @]
0.592[zip.saturate] ### step   459 ###
0.592[zip.saturate]
    given (459 steps, penalty 1):
      `[¬cQ_1 (f b) a (f (f (f b)))+* ∨ cQ_2 b a b+]/id:488/depth:10`
0.592[zip.env] apply binary rule superposition_active
0.592[zip.env] apply binary rule superposition_passive
0.592[zip.env] apply binary rule ctx_narrow
0.592[zip.env] apply binary rule narrow_term_defs
0.592[zip.env] do unary inferences
0.592[zip.env] apply unary rule equality_resolution
0.592[zip.env] apply unary rule equality_factoring
0.592[zip.env] apply unary rule narrow_lit_defs
0.592[zip.env] apply unary rule ind_types.exhaustiveness
0.592[zip.env] apply unary rule ind_types.acyclicity
0.592[zip.env] apply unary rule avatar_check_empty
0.592[zip.env] apply generating rule avatar.lemmas (full: false)
0.592[zip.env] apply generating rule avatar_check_sat (full: false)
0.592[zip.avatar] SAT-solver reports "SAT"
0.592[zip.saturate] inferred new clauses: []
0.592[zip.sup] @[neg_reflect did not simplify the clause @]
0.592[zip.sup] @[neg_reflect did not simplify the clause @]
0.592[zip.saturate] ### step   460 ###
0.592[zip.saturate]
    given (460 steps, penalty 1):
      `[¬cQ_1 (f b) a (f (f (f a)))+* ∨ cQ_2 b a a+]/id:489/depth:10`
0.592[zip.env] apply binary rule superposition_active
0.592[zip.env] apply binary rule superposition_passive
0.592[zip.env] apply binary rule ctx_narrow
0.592[zip.env] apply binary rule narrow_term_defs
0.593[zip.env] do unary inferences
0.593[zip.env] apply unary rule equality_resolution
0.593[zip.env] apply unary rule equality_factoring
0.593[zip.env] apply unary rule narrow_lit_defs
0.593[zip.env] apply unary rule ind_types.exhaustiveness
0.593[zip.env] apply unary rule ind_types.acyclicity
0.593[zip.env] apply unary rule avatar_check_empty
0.593[zip.env] apply generating rule avatar.lemmas (full: false)
0.593[zip.env] apply generating rule avatar_check_sat (full: false)
0.593[zip.avatar] SAT-solver reports "SAT"
0.593[zip.saturate] inferred new clauses: []
0.593[zip.sup] @[neg_reflect did not simplify the clause @]
0.593[zip.sup] @[neg_reflect did not simplify the clause @]
0.593[zip.saturate] ### step   461 ###
0.593[zip.saturate]
    given (461 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9`
0.593[zip.env] apply binary rule superposition_active
0.593[zip.env] apply binary rule superposition_passive
0.593[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.593[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ cQ_2 a a X0+*]/id:490/depth:10
0.594[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.594[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) a (f (f (f d)))+* ∨ cQ_2 a a X0+*]/id:491/depth:10
0.594[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.594[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f (f (f c)))+* ∨ cQ_2 a a c+]/id:492/depth:10
0.594[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.594[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f (f (f b)))+* ∨ cQ_2 a a b+]/id:493/depth:10
0.594[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f X1)))*]/id:430/depth:9[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.594[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) a (f (f (f a)))+* ∨ cQ_2 a a a+]/id:494/depth:10
0.594[zip.env] apply binary rule ctx_narrow
0.594[zip.env] apply binary rule narrow_term_defs
0.595[zip.env] do unary inferences
0.595[zip.env] apply unary rule equality_resolution
0.595[zip.env] apply unary rule equality_factoring
0.595[zip.env] apply unary rule narrow_lit_defs
0.595[zip.env] apply unary rule ind_types.exhaustiveness
0.595[zip.env] apply unary rule ind_types.acyclicity
0.595[zip.env] apply unary rule avatar_check_empty
0.595[zip.env] apply generating rule avatar.lemmas (full: false)
0.595[zip.env] apply generating rule avatar_check_sat (full: false)
0.595[zip.avatar] SAT-solver reports "SAT"
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10, 
       forall X0. [¬cQ_1 (f a) a (f (f (f d)))+* ∨ cQ_2 a a X0+*]/id:491/depth:10, 
       [¬cQ_1 (f a) a (f (f (f c)))+* ∨ cQ_2 a a c+]/id:492/depth:10, 
       [¬cQ_1 (f a) a (f (f (f b)))+* ∨ cQ_2 a a b+]/id:493/depth:10, 
       [¬cQ_1 (f a) a (f (f (f a)))+* ∨ cQ_2 a a a+]/id:494/depth:10]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.sup] @[neg_reflect did not simplify the clause @]
0.595[zip.saturate] ### step   462 ###
0.595[zip.saturate]
    given (462 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) a (f (f (f d)))+* ∨ cQ_2 a a X0+*]/id:491/depth:10`
0.596[zip.env] apply binary rule superposition_active
0.596[zip.env] apply binary rule superposition_passive
0.596[zip.env] apply binary rule ctx_narrow
0.596[zip.env] apply binary rule narrow_term_defs
0.596[zip.env] do unary inferences
0.596[zip.env] apply unary rule equality_resolution
0.596[zip.env] apply unary rule equality_factoring
0.596[zip.env] apply unary rule narrow_lit_defs
0.596[zip.env] apply unary rule ind_types.exhaustiveness
0.596[zip.env] apply unary rule ind_types.acyclicity
0.596[zip.env] apply unary rule avatar_check_empty
0.596[zip.env] apply generating rule avatar.lemmas (full: false)
0.596[zip.env] apply generating rule avatar_check_sat (full: false)
0.596[zip.avatar] SAT-solver reports "SAT"
0.596[zip.saturate] inferred new clauses: []
0.596[zip.sup] @[neg_reflect did not simplify the clause @]
0.596[zip.sup] @[neg_reflect did not simplify the clause @]
0.596[zip.saturate] ### step   463 ###
0.596[zip.saturate]
    given (463 steps, penalty 1):
      `[¬cQ_1 (f a) a (f (f (f c)))+* ∨ cQ_2 a a c+]/id:492/depth:10`
0.596[zip.env] apply binary rule superposition_active
0.596[zip.env] apply binary rule superposition_passive
0.596[zip.env] apply binary rule ctx_narrow
0.596[zip.env] apply binary rule narrow_term_defs
0.596[zip.env] do unary inferences
0.596[zip.env] apply unary rule equality_resolution
0.596[zip.env] apply unary rule equality_factoring
0.596[zip.env] apply unary rule narrow_lit_defs
0.596[zip.env] apply unary rule ind_types.exhaustiveness
0.596[zip.env] apply unary rule ind_types.acyclicity
0.596[zip.env] apply unary rule avatar_check_empty
0.596[zip.env] apply generating rule avatar.lemmas (full: false)
0.596[zip.env] apply generating rule avatar_check_sat (full: false)
0.596[zip.avatar] SAT-solver reports "SAT"
0.596[zip.saturate] inferred new clauses: []
0.596[zip.sup] @[neg_reflect did not simplify the clause @]
0.596[zip.sup] @[neg_reflect did not simplify the clause @]
0.597[zip.saturate] ### step   464 ###
0.597[zip.saturate]
    given (464 steps, penalty 1):
      `[¬cQ_1 (f a) a (f (f (f b)))+* ∨ cQ_2 a a b+]/id:493/depth:10`
0.597[zip.env] apply binary rule superposition_active
0.597[zip.env] apply binary rule superposition_passive
0.597[zip.env] apply binary rule ctx_narrow
0.597[zip.env] apply binary rule narrow_term_defs
0.597[zip.env] do unary inferences
0.597[zip.env] apply unary rule equality_resolution
0.597[zip.env] apply unary rule equality_factoring
0.597[zip.env] apply unary rule narrow_lit_defs
0.597[zip.env] apply unary rule ind_types.exhaustiveness
0.597[zip.env] apply unary rule ind_types.acyclicity
0.597[zip.env] apply unary rule avatar_check_empty
0.597[zip.env] apply generating rule avatar.lemmas (full: false)
0.597[zip.env] apply generating rule avatar_check_sat (full: false)
0.597[zip.avatar] SAT-solver reports "SAT"
0.597[zip.saturate] inferred new clauses: []
0.597[zip.sup] @[neg_reflect did not simplify the clause @]
0.597[zip.sup] @[neg_reflect did not simplify the clause @]
0.597[zip.saturate] ### step   465 ###
0.597[zip.saturate]
    given (465 steps, penalty 1):
      `[¬cQ_1 (f a) a (f (f (f a)))+* ∨ cQ_2 a a a+]/id:494/depth:10`
0.597[zip.env] apply binary rule superposition_active
0.597[zip.env] apply binary rule superposition_passive
0.597[zip.env] apply binary rule ctx_narrow
0.598[zip.env] apply binary rule narrow_term_defs
0.598[zip.env] do unary inferences
0.598[zip.env] apply unary rule equality_resolution
0.598[zip.env] apply unary rule equality_factoring
0.598[zip.env] apply unary rule narrow_lit_defs
0.598[zip.env] apply unary rule ind_types.exhaustiveness
0.598[zip.env] apply unary rule ind_types.acyclicity
0.598[zip.env] apply unary rule avatar_check_empty
0.598[zip.env] apply generating rule avatar.lemmas (full: false)
0.598[zip.env] apply generating rule avatar_check_sat (full: false)
0.598[zip.avatar] SAT-solver reports "SAT"
0.598[zip.saturate] inferred new clauses: []
0.598[zip.sup] @[neg_reflect did not simplify the clause @]
0.598[zip.sup] @[neg_reflect did not simplify the clause @]
0.598[zip.saturate] ### step   466 ###
0.598[zip.saturate]
    given (466 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10`
0.598[zip.env] apply binary rule superposition_active
0.598[zip.env] apply binary rule superposition_passive
0.598[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.599[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
     ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11
0.599[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.599[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f d))))+*]/id:496/depth:11
0.599[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.599[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f (f (f c))))+*]/id:497/depth:11
0.599[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.600[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f (f (f b))))+*]/id:498/depth:11
0.600[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f X1))))* ∨ 
        cQ_2 X2 c X0+*]/id:435/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.600[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f (f (f a))))+*]/id:499/depth:11
0.600[zip.env] apply binary rule ctx_narrow
0.600[zip.env] apply binary rule narrow_term_defs
0.600[zip.env] do unary inferences
0.600[zip.env] apply unary rule equality_resolution
0.600[zip.env] apply unary rule equality_factoring
0.600[zip.env] apply unary rule narrow_lit_defs
0.600[zip.env] apply unary rule ind_types.exhaustiveness
0.600[zip.env] apply unary rule ind_types.acyclicity
0.600[zip.env] apply unary rule avatar_check_empty
0.600[zip.env] apply generating rule avatar.lemmas (full: false)
0.600[zip.env] apply generating rule avatar_check_sat (full: false)
0.600[zip.avatar] SAT-solver reports "SAT"
0.600[zip.sup] @[neg_reflect did not simplify the clause @]
0.600[zip.sup] @[neg_reflect did not simplify the clause @]
0.601[zip.sup] @[neg_reflect did not simplify the clause @]
0.601[zip.sup] @[neg_reflect did not simplify the clause @]
0.601[zip.sup] @[neg_reflect did not simplify the clause @]
0.601[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11, 
       forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f d))))+*]/id:496/depth:11, 
       forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f (f (f c))))+*]/id:497/depth:11, 
       forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f (f (f b))))+*]/id:498/depth:11, 
       forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f (f (f a))))+*]/id:499/depth:11]
0.601[zip.sup] @[neg_reflect did not simplify the clause @]
0.601[zip.sup] @[neg_reflect did not simplify the clause @]
0.602[zip.saturate] ### step   467 ###
0.602[zip.saturate]
    given (467 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 c X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f d))))+*]/id:496/depth:11`
0.602[zip.env] apply binary rule superposition_active
0.602[zip.env] apply binary rule superposition_passive
0.603[zip.env] apply binary rule ctx_narrow
0.603[zip.env] apply binary rule narrow_term_defs
0.603[zip.env] do unary inferences
0.603[zip.env] apply unary rule equality_resolution
0.603[zip.env] apply unary rule equality_factoring
0.603[zip.env] apply unary rule narrow_lit_defs
0.603[zip.env] apply unary rule ind_types.exhaustiveness
0.603[zip.env] apply unary rule ind_types.acyclicity
0.603[zip.env] apply unary rule avatar_check_empty
0.603[zip.env] apply generating rule avatar.lemmas (full: false)
0.603[zip.env] apply generating rule avatar_check_sat (full: false)
0.603[zip.avatar] SAT-solver reports "SAT"
0.603[zip.saturate] inferred new clauses: []
0.603[zip.sup] @[neg_reflect did not simplify the clause @]
0.603[zip.sup] @[neg_reflect did not simplify the clause @]
0.603[zip.saturate] ### step   468 ###
0.603[zip.saturate]
    given (468 steps, penalty 1):
      `forall X0. [cQ_2 X0 c c+* ∨ ¬cQ_1 (f d) c (f (f (f (f c))))+*]/id:497/depth:11`
0.604[zip.env] apply binary rule superposition_active
0.604[zip.env] apply binary rule superposition_passive
0.604[zip.env] apply binary rule ctx_narrow
0.604[zip.env] apply binary rule narrow_term_defs
0.604[zip.env] do unary inferences
0.604[zip.env] apply unary rule equality_resolution
0.604[zip.env] apply unary rule equality_factoring
0.604[zip.env] apply unary rule narrow_lit_defs
0.604[zip.env] apply unary rule ind_types.exhaustiveness
0.604[zip.env] apply unary rule ind_types.acyclicity
0.604[zip.env] apply unary rule avatar_check_empty
0.604[zip.env] apply generating rule avatar.lemmas (full: false)
0.604[zip.env] apply generating rule avatar_check_sat (full: false)
0.604[zip.avatar] SAT-solver reports "SAT"
0.604[zip.saturate] inferred new clauses: []
0.604[zip.sup] @[neg_reflect did not simplify the clause @]
0.604[zip.sup] @[neg_reflect did not simplify the clause @]
0.605[zip.saturate] ### step   469 ###
0.605[zip.saturate]
    given (469 steps, penalty 1):
      `forall X0. [cQ_2 X0 c b+* ∨ ¬cQ_1 (f d) c (f (f (f (f b))))+*]/id:498/depth:11`
0.605[zip.env] apply binary rule superposition_active
0.605[zip.env] apply binary rule superposition_passive
0.605[zip.env] apply binary rule ctx_narrow
0.605[zip.env] apply binary rule narrow_term_defs
0.605[zip.env] do unary inferences
0.605[zip.env] apply unary rule equality_resolution
0.605[zip.env] apply unary rule equality_factoring
0.605[zip.env] apply unary rule narrow_lit_defs
0.605[zip.env] apply unary rule ind_types.exhaustiveness
0.605[zip.env] apply unary rule ind_types.acyclicity
0.605[zip.env] apply unary rule avatar_check_empty
0.605[zip.env] apply generating rule avatar.lemmas (full: false)
0.605[zip.env] apply generating rule avatar_check_sat (full: false)
0.605[zip.avatar] SAT-solver reports "SAT"
0.605[zip.saturate] inferred new clauses: []
0.605[zip.sup] @[neg_reflect did not simplify the clause @]
0.605[zip.sup] @[neg_reflect did not simplify the clause @]
0.606[zip.saturate] ### step   470 ###
0.606[zip.saturate]
    given (470 steps, penalty 1):
      `forall X0. [cQ_2 X0 c a+* ∨ ¬cQ_1 (f d) c (f (f (f (f a))))+*]/id:499/depth:11`
0.606[zip.env] apply binary rule superposition_active
0.606[zip.env] apply binary rule superposition_passive
0.606[zip.env] apply binary rule ctx_narrow
0.606[zip.env] apply binary rule narrow_term_defs
0.606[zip.env] do unary inferences
0.606[zip.env] apply unary rule equality_resolution
0.606[zip.env] apply unary rule equality_factoring
0.606[zip.env] apply unary rule narrow_lit_defs
0.606[zip.env] apply unary rule ind_types.exhaustiveness
0.606[zip.env] apply unary rule ind_types.acyclicity
0.606[zip.env] apply unary rule avatar_check_empty
0.606[zip.env] apply generating rule avatar.lemmas (full: false)
0.606[zip.env] apply generating rule avatar_check_sat (full: false)
0.606[zip.avatar] SAT-solver reports "SAT"
0.606[zip.saturate] inferred new clauses: []
0.606[zip.sup] @[neg_reflect did not simplify the clause @]
0.607[zip.sup] @[neg_reflect did not simplify the clause @]
0.607[zip.saturate] ### step   471 ###
0.607[zip.saturate]
    given (471 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10`
0.607[zip.env] apply binary rule superposition_active
0.607[zip.env] apply binary rule superposition_passive
0.608[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.608[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
     ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11
0.608[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.608[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f d))))+*]/id:501/depth:11
0.609[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.609[zip.sup]
    ... ok, conclusion
    [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f (f (f c))))+*]/id:502/depth:11
0.609[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.609[zip.sup]
    ... ok, conclusion
    [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f (f (f b))))+*]/id:503/depth:11
0.609[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f X1))))* ∨ 
        cQ_2 c c X0+*]/id:440/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.609[zip.sup]
    ... ok, conclusion
    [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f (f (f a))))+*]/id:504/depth:11
0.609[zip.env] apply binary rule ctx_narrow
0.609[zip.env] apply binary rule narrow_term_defs
0.609[zip.env] do unary inferences
0.609[zip.env] apply unary rule equality_resolution
0.609[zip.env] apply unary rule equality_factoring
0.609[zip.env] apply unary rule narrow_lit_defs
0.609[zip.env] apply unary rule ind_types.exhaustiveness
0.609[zip.env] apply unary rule ind_types.acyclicity
0.609[zip.env] apply unary rule avatar_check_empty
0.609[zip.env] apply generating rule avatar.lemmas (full: false)
0.609[zip.env] apply generating rule avatar_check_sat (full: false)
0.609[zip.avatar] SAT-solver reports "SAT"
0.609[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11, 
       forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f d))))+*]/id:501/depth:11, 
       [cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f (f (f c))))+*]/id:502/depth:11, 
       [cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f (f (f b))))+*]/id:503/depth:11, 
       [cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f (f (f a))))+*]/id:504/depth:11]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.sup] @[neg_reflect did not simplify the clause @]
0.610[zip.saturate] ### step   472 ###
0.610[zip.saturate]
    given (472 steps, penalty 1):
      `forall X0. [cQ_2 c c X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f d))))+*]/id:501/depth:11`
0.611[zip.env] apply binary rule superposition_active
0.611[zip.env] apply binary rule superposition_passive
0.611[zip.env] apply binary rule ctx_narrow
0.611[zip.env] apply binary rule narrow_term_defs
0.611[zip.env] do unary inferences
0.611[zip.env] apply unary rule equality_resolution
0.611[zip.env] apply unary rule equality_factoring
0.611[zip.env] apply unary rule narrow_lit_defs
0.611[zip.env] apply unary rule ind_types.exhaustiveness
0.611[zip.env] apply unary rule ind_types.acyclicity
0.611[zip.env] apply unary rule avatar_check_empty
0.611[zip.env] apply generating rule avatar.lemmas (full: false)
0.611[zip.env] apply generating rule avatar_check_sat (full: false)
0.611[zip.avatar] SAT-solver reports "SAT"
0.611[zip.saturate] inferred new clauses: []
0.611[zip.sup] @[neg_reflect did not simplify the clause @]
0.611[zip.sup] @[neg_reflect did not simplify the clause @]
0.611[zip.saturate] ### step   473 ###
0.611[zip.saturate]
    given (473 steps, penalty 1):
      `[cQ_2 c c c+ ∨ ¬cQ_1 (f c) c (f (f (f (f c))))+*]/id:502/depth:11`
0.611[zip.env] apply binary rule superposition_active
0.611[zip.env] apply binary rule superposition_passive
0.611[zip.env] apply binary rule ctx_narrow
0.611[zip.env] apply binary rule narrow_term_defs
0.611[zip.env] do unary inferences
0.611[zip.env] apply unary rule equality_resolution
0.611[zip.env] apply unary rule equality_factoring
0.611[zip.env] apply unary rule narrow_lit_defs
0.611[zip.env] apply unary rule ind_types.exhaustiveness
0.611[zip.env] apply unary rule ind_types.acyclicity
0.611[zip.env] apply unary rule avatar_check_empty
0.611[zip.env] apply generating rule avatar.lemmas (full: false)
0.611[zip.env] apply generating rule avatar_check_sat (full: false)
0.611[zip.avatar] SAT-solver reports "SAT"
0.611[zip.saturate] inferred new clauses: []
0.611[zip.sup] @[neg_reflect did not simplify the clause @]
0.611[zip.sup] @[neg_reflect did not simplify the clause @]
0.612[zip.saturate] ### step   474 ###
0.612[zip.saturate]
    given (474 steps, penalty 1):
      `[cQ_2 c c b+ ∨ ¬cQ_1 (f c) c (f (f (f (f b))))+*]/id:503/depth:11`
0.612[zip.env] apply binary rule superposition_active
0.612[zip.env] apply binary rule superposition_passive
0.612[zip.env] apply binary rule ctx_narrow
0.612[zip.env] apply binary rule narrow_term_defs
0.612[zip.env] do unary inferences
0.612[zip.env] apply unary rule equality_resolution
0.612[zip.env] apply unary rule equality_factoring
0.612[zip.env] apply unary rule narrow_lit_defs
0.612[zip.env] apply unary rule ind_types.exhaustiveness
0.612[zip.env] apply unary rule ind_types.acyclicity
0.612[zip.env] apply unary rule avatar_check_empty
0.612[zip.env] apply generating rule avatar.lemmas (full: false)
0.612[zip.env] apply generating rule avatar_check_sat (full: false)
0.612[zip.avatar] SAT-solver reports "SAT"
0.612[zip.saturate] inferred new clauses: []
0.612[zip.sup] @[neg_reflect did not simplify the clause @]
0.612[zip.sup] @[neg_reflect did not simplify the clause @]
0.612[zip.saturate] ### step   475 ###
0.612[zip.saturate]
    given (475 steps, penalty 1):
      `[cQ_2 c c a+ ∨ ¬cQ_1 (f c) c (f (f (f (f a))))+*]/id:504/depth:11`
0.613[zip.env] apply binary rule superposition_active
0.613[zip.env] apply binary rule superposition_passive
0.613[zip.env] apply binary rule ctx_narrow
0.613[zip.env] apply binary rule narrow_term_defs
0.613[zip.env] do unary inferences
0.613[zip.env] apply unary rule equality_resolution
0.613[zip.env] apply unary rule equality_factoring
0.613[zip.env] apply unary rule narrow_lit_defs
0.613[zip.env] apply unary rule ind_types.exhaustiveness
0.613[zip.env] apply unary rule ind_types.acyclicity
0.613[zip.env] apply unary rule avatar_check_empty
0.613[zip.env] apply generating rule avatar.lemmas (full: false)
0.613[zip.env] apply generating rule avatar_check_sat (full: false)
0.613[zip.avatar] SAT-solver reports "SAT"
0.613[zip.saturate] inferred new clauses: []
0.613[zip.sup] @[neg_reflect did not simplify the clause @]
0.613[zip.sup] @[neg_reflect did not simplify the clause @]
0.613[zip.saturate] ### step   476 ###
0.613[zip.saturate]
    given (476 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10`
0.613[zip.env] apply binary rule superposition_active
0.613[zip.env] apply binary rule superposition_passive
0.614[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.614[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
     ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11
0.614[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.614[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f d))))+*]/id:506/depth:11
0.614[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.614[zip.sup]
    ... ok, conclusion
    [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f (f (f c))))+*]/id:507/depth:11
0.614[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.615[zip.sup]
    ... ok, conclusion
    [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f (f (f b))))+*]/id:508/depth:11
0.615[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f X1))))* ∨ 
        cQ_2 b c X0+*]/id:445/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.615[zip.sup]
    ... ok, conclusion
    [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f (f (f a))))+*]/id:509/depth:11
0.615[zip.env] apply binary rule ctx_narrow
0.615[zip.env] apply binary rule narrow_term_defs
0.615[zip.env] do unary inferences
0.615[zip.env] apply unary rule equality_resolution
0.615[zip.env] apply unary rule equality_factoring
0.615[zip.env] apply unary rule narrow_lit_defs
0.615[zip.env] apply unary rule ind_types.exhaustiveness
0.615[zip.env] apply unary rule ind_types.acyclicity
0.615[zip.env] apply unary rule avatar_check_empty
0.615[zip.env] apply generating rule avatar.lemmas (full: false)
0.615[zip.env] apply generating rule avatar_check_sat (full: false)
0.615[zip.avatar] SAT-solver reports "SAT"
0.615[zip.sup] @[neg_reflect did not simplify the clause @]
0.615[zip.sup] @[neg_reflect did not simplify the clause @]
0.615[zip.sup] @[neg_reflect did not simplify the clause @]
0.615[zip.sup] @[neg_reflect did not simplify the clause @]
0.615[zip.sup] @[neg_reflect did not simplify the clause @]
0.615[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11, 
       forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f d))))+*]/id:506/depth:11, 
       [cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f (f (f c))))+*]/id:507/depth:11, 
       [cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f (f (f b))))+*]/id:508/depth:11, 
       [cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f (f (f a))))+*]/id:509/depth:11]
0.616[zip.sup] @[neg_reflect did not simplify the clause @]
0.616[zip.sup] @[neg_reflect did not simplify the clause @]
0.616[zip.saturate] ### step   477 ###
0.616[zip.saturate]
    given (477 steps, penalty 1):
      `forall X0. [cQ_2 b c X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f d))))+*]/id:506/depth:11`
0.617[zip.env] apply binary rule superposition_active
0.617[zip.env] apply binary rule superposition_passive
0.617[zip.env] apply binary rule ctx_narrow
0.617[zip.env] apply binary rule narrow_term_defs
0.617[zip.env] do unary inferences
0.617[zip.env] apply unary rule equality_resolution
0.617[zip.env] apply unary rule equality_factoring
0.617[zip.env] apply unary rule narrow_lit_defs
0.617[zip.env] apply unary rule ind_types.exhaustiveness
0.617[zip.env] apply unary rule ind_types.acyclicity
0.617[zip.env] apply unary rule avatar_check_empty
0.617[zip.env] apply generating rule avatar.lemmas (full: false)
0.617[zip.env] apply generating rule avatar_check_sat (full: false)
0.617[zip.avatar] SAT-solver reports "SAT"
0.617[zip.saturate] inferred new clauses: []
0.617[zip.sup] @[neg_reflect did not simplify the clause @]
0.617[zip.sup] @[neg_reflect did not simplify the clause @]
0.617[zip.saturate] ### step   478 ###
0.617[zip.saturate]
    given (478 steps, penalty 1):
      `[cQ_2 b c c+ ∨ ¬cQ_1 (f b) c (f (f (f (f c))))+*]/id:507/depth:11`
0.618[zip.env] apply binary rule superposition_active
0.618[zip.env] apply binary rule superposition_passive
0.618[zip.env] apply binary rule ctx_narrow
0.618[zip.env] apply binary rule narrow_term_defs
0.618[zip.env] do unary inferences
0.618[zip.env] apply unary rule equality_resolution
0.618[zip.env] apply unary rule equality_factoring
0.618[zip.env] apply unary rule narrow_lit_defs
0.618[zip.env] apply unary rule ind_types.exhaustiveness
0.618[zip.env] apply unary rule ind_types.acyclicity
0.618[zip.env] apply unary rule avatar_check_empty
0.618[zip.env] apply generating rule avatar.lemmas (full: false)
0.618[zip.env] apply generating rule avatar_check_sat (full: false)
0.618[zip.avatar] SAT-solver reports "SAT"
0.618[zip.saturate] inferred new clauses: []
0.618[zip.sup] @[neg_reflect did not simplify the clause @]
0.618[zip.sup] @[neg_reflect did not simplify the clause @]
0.618[zip.saturate] ### step   479 ###
0.618[zip.saturate]
    given (479 steps, penalty 1):
      `[cQ_2 b c b+ ∨ ¬cQ_1 (f b) c (f (f (f (f b))))+*]/id:508/depth:11`
0.619[zip.env] apply binary rule superposition_active
0.619[zip.env] apply binary rule superposition_passive
0.619[zip.env] apply binary rule ctx_narrow
0.619[zip.env] apply binary rule narrow_term_defs
0.619[zip.env] do unary inferences
0.619[zip.env] apply unary rule equality_resolution
0.619[zip.env] apply unary rule equality_factoring
0.619[zip.env] apply unary rule narrow_lit_defs
0.619[zip.env] apply unary rule ind_types.exhaustiveness
0.619[zip.env] apply unary rule ind_types.acyclicity
0.619[zip.env] apply unary rule avatar_check_empty
0.619[zip.env] apply generating rule avatar.lemmas (full: false)
0.619[zip.env] apply generating rule avatar_check_sat (full: false)
0.619[zip.avatar] SAT-solver reports "SAT"
0.619[zip.saturate] inferred new clauses: []
0.619[zip.sup] @[neg_reflect did not simplify the clause @]
0.619[zip.sup] @[neg_reflect did not simplify the clause @]
0.620[zip.saturate] ### step   480 ###
0.620[zip.saturate]
    given (480 steps, penalty 1):
      `[cQ_2 b c a+ ∨ ¬cQ_1 (f b) c (f (f (f (f a))))+*]/id:509/depth:11`
0.620[zip.env] apply binary rule superposition_active
0.620[zip.env] apply binary rule superposition_passive
0.620[zip.env] apply binary rule ctx_narrow
0.620[zip.env] apply binary rule narrow_term_defs
0.620[zip.env] do unary inferences
0.620[zip.env] apply unary rule equality_resolution
0.620[zip.env] apply unary rule equality_factoring
0.620[zip.env] apply unary rule narrow_lit_defs
0.620[zip.env] apply unary rule ind_types.exhaustiveness
0.620[zip.env] apply unary rule ind_types.acyclicity
0.620[zip.env] apply unary rule avatar_check_empty
0.620[zip.env] apply generating rule avatar.lemmas (full: false)
0.620[zip.env] apply generating rule avatar_check_sat (full: false)
0.620[zip.avatar] SAT-solver reports "SAT"
0.620[zip.saturate] inferred new clauses: []
0.620[zip.sup] @[neg_reflect did not simplify the clause @]
0.620[zip.sup] @[neg_reflect did not simplify the clause @]
0.621[zip.saturate] ### step   481 ###
0.621[zip.saturate]
    given (481 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10`
0.622[zip.env] apply binary rule superposition_active
0.622[zip.env] apply binary rule superposition_passive
0.622[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.622[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
     ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11
0.622[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.623[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f d))))+*]/id:511/depth:11
0.623[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.623[zip.sup]
    ... ok, conclusion
    [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f (f (f c))))+*]/id:512/depth:11
0.624[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.624[zip.sup]
    ... ok, conclusion
    [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f (f (f b))))+*]/id:513/depth:11
0.624[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f X1))))* ∨ 
        cQ_2 a c X0+*]/id:450/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.624[zip.sup]
    ... ok, conclusion
    [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f (f (f a))))+*]/id:514/depth:11
0.624[zip.env] apply binary rule ctx_narrow
0.624[zip.env] apply binary rule narrow_term_defs
0.624[zip.env] do unary inferences
0.624[zip.env] apply unary rule equality_resolution
0.624[zip.env] apply unary rule equality_factoring
0.624[zip.env] apply unary rule narrow_lit_defs
0.624[zip.env] apply unary rule ind_types.exhaustiveness
0.624[zip.env] apply unary rule ind_types.acyclicity
0.624[zip.env] apply unary rule avatar_check_empty
0.624[zip.env] apply generating rule avatar.lemmas (full: false)
0.624[zip.env] apply generating rule avatar_check_sat (full: false)
0.625[zip.avatar] SAT-solver reports "SAT"
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11, 
       forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f d))))+*]/id:511/depth:11, 
       [cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f (f (f c))))+*]/id:512/depth:11, 
       [cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f (f (f b))))+*]/id:513/depth:11, 
       [cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f (f (f a))))+*]/id:514/depth:11]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.625[zip.sup] @[neg_reflect did not simplify the clause @]
0.626[zip.saturate] ### step   482 ###
0.626[zip.saturate]
    given (482 steps, penalty 1):
      `forall X0. [cQ_2 a c X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f d))))+*]/id:511/depth:11`
0.626[zip.env] apply binary rule superposition_active
0.626[zip.env] apply binary rule superposition_passive
0.626[zip.env] apply binary rule ctx_narrow
0.626[zip.env] apply binary rule narrow_term_defs
0.626[zip.env] do unary inferences
0.626[zip.env] apply unary rule equality_resolution
0.626[zip.env] apply unary rule equality_factoring
0.626[zip.env] apply unary rule narrow_lit_defs
0.626[zip.env] apply unary rule ind_types.exhaustiveness
0.626[zip.env] apply unary rule ind_types.acyclicity
0.626[zip.env] apply unary rule avatar_check_empty
0.626[zip.env] apply generating rule avatar.lemmas (full: false)
0.626[zip.env] apply generating rule avatar_check_sat (full: false)
0.626[zip.avatar] SAT-solver reports "SAT"
0.626[zip.saturate] inferred new clauses: []
0.626[zip.sup] @[neg_reflect did not simplify the clause @]
0.626[zip.sup] @[neg_reflect did not simplify the clause @]
0.626[zip.saturate] ### step   483 ###
0.627[zip.saturate]
    given (483 steps, penalty 1):
      `[cQ_2 a c c+ ∨ ¬cQ_1 (f a) c (f (f (f (f c))))+*]/id:512/depth:11`
0.627[zip.env] apply binary rule superposition_active
0.627[zip.env] apply binary rule superposition_passive
0.627[zip.env] apply binary rule ctx_narrow
0.627[zip.env] apply binary rule narrow_term_defs
0.627[zip.env] do unary inferences
0.627[zip.env] apply unary rule equality_resolution
0.627[zip.env] apply unary rule equality_factoring
0.627[zip.env] apply unary rule narrow_lit_defs
0.627[zip.env] apply unary rule ind_types.exhaustiveness
0.627[zip.env] apply unary rule ind_types.acyclicity
0.627[zip.env] apply unary rule avatar_check_empty
0.627[zip.env] apply generating rule avatar.lemmas (full: false)
0.627[zip.env] apply generating rule avatar_check_sat (full: false)
0.627[zip.avatar] SAT-solver reports "SAT"
0.627[zip.saturate] inferred new clauses: []
0.627[zip.sup] @[neg_reflect did not simplify the clause @]
0.627[zip.sup] @[neg_reflect did not simplify the clause @]
0.628[zip.saturate] ### step   484 ###
0.628[zip.saturate]
    given (484 steps, penalty 1):
      `[cQ_2 a c b+ ∨ ¬cQ_1 (f a) c (f (f (f (f b))))+*]/id:513/depth:11`
0.628[zip.env] apply binary rule superposition_active
0.628[zip.env] apply binary rule superposition_passive
0.628[zip.env] apply binary rule ctx_narrow
0.628[zip.env] apply binary rule narrow_term_defs
0.628[zip.env] do unary inferences
0.628[zip.env] apply unary rule equality_resolution
0.628[zip.env] apply unary rule equality_factoring
0.628[zip.env] apply unary rule narrow_lit_defs
0.628[zip.env] apply unary rule ind_types.exhaustiveness
0.628[zip.env] apply unary rule ind_types.acyclicity
0.628[zip.env] apply unary rule avatar_check_empty
0.628[zip.env] apply generating rule avatar.lemmas (full: false)
0.628[zip.env] apply generating rule avatar_check_sat (full: false)
0.628[zip.avatar] SAT-solver reports "SAT"
0.628[zip.saturate] inferred new clauses: []
0.628[zip.sup] @[neg_reflect did not simplify the clause @]
0.628[zip.sup] @[neg_reflect did not simplify the clause @]
0.628[zip.saturate] ### step   485 ###
0.628[zip.saturate]
    given (485 steps, penalty 1):
      `[cQ_2 a c a+ ∨ ¬cQ_1 (f a) c (f (f (f (f a))))+*]/id:514/depth:11`
0.629[zip.env] apply binary rule superposition_active
0.629[zip.env] apply binary rule superposition_passive
0.629[zip.env] apply binary rule ctx_narrow
0.629[zip.env] apply binary rule narrow_term_defs
0.629[zip.env] do unary inferences
0.629[zip.env] apply unary rule equality_resolution
0.629[zip.env] apply unary rule equality_factoring
0.629[zip.env] apply unary rule narrow_lit_defs
0.629[zip.env] apply unary rule ind_types.exhaustiveness
0.629[zip.env] apply unary rule ind_types.acyclicity
0.629[zip.env] apply unary rule avatar_check_empty
0.629[zip.env] apply generating rule avatar.lemmas (full: false)
0.629[zip.env] apply generating rule avatar_check_sat (full: false)
0.629[zip.avatar] SAT-solver reports "SAT"
0.629[zip.saturate] inferred new clauses: []
0.629[zip.sup] @[neg_reflect did not simplify the clause @]
0.629[zip.sup] @[neg_reflect did not simplify the clause @]
0.630[zip.saturate] ### step   486 ###
0.630[zip.saturate]
    given (486 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10`
0.630[zip.env] apply binary rule superposition_active
0.630[zip.env] apply binary rule superposition_passive
0.630[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.630[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
     ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11
0.631[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.631[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f d))))+*]/id:516/depth:11
0.631[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.631[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f (f (f c))))+*]/id:517/depth:11
0.631[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.631[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f (f (f b))))+*]/id:518/depth:11
0.631[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.632[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f (f (f a))))+*]/id:519/depth:11
0.632[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f X1))))* ∨ 
        cQ_2 X2 b X0+*]/id:455/depth:10[0] passive_lit=cQ_2 X2 b X0
         p=2.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.632[zip.sup] will yield a tautology
0.632[zip.sup] ... cancel, will yield a tautology
0.632[zip.env] apply binary rule ctx_narrow
0.632[zip.env] apply binary rule narrow_term_defs
0.632[zip.env] do unary inferences
0.632[zip.env] apply unary rule equality_resolution
0.632[zip.env] apply unary rule equality_factoring
0.632[zip.env] apply unary rule narrow_lit_defs
0.632[zip.env] apply unary rule ind_types.exhaustiveness
0.632[zip.env] apply unary rule ind_types.acyclicity
0.632[zip.env] apply unary rule avatar_check_empty
0.632[zip.env] apply generating rule avatar.lemmas (full: false)
0.632[zip.env] apply generating rule avatar_check_sat (full: false)
0.632[zip.avatar] SAT-solver reports "SAT"
0.632[zip.sup] @[neg_reflect did not simplify the clause @]
0.632[zip.sup] @[neg_reflect did not simplify the clause @]
0.633[zip.sup] @[neg_reflect did not simplify the clause @]
0.633[zip.sup] @[neg_reflect did not simplify the clause @]
0.633[zip.sup] @[neg_reflect did not simplify the clause @]
0.633[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11, 
       forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f d))))+*]/id:516/depth:11, 
       forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f (f (f c))))+*]/id:517/depth:11, 
       forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f (f (f b))))+*]/id:518/depth:11, 
       forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f (f (f a))))+*]/id:519/depth:11]
0.634[zip.sup] @[neg_reflect did not simplify the clause @]
0.634[zip.sup] @[neg_reflect did not simplify the clause @]
0.634[zip.saturate] ### step   487 ###
0.634[zip.saturate]
    given (487 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f d))))+*]/id:516/depth:11`
0.634[zip.env] apply binary rule superposition_active
0.634[zip.env] apply binary rule superposition_passive
0.634[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1. [cQ_2 X1 b X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f d))))+*]/id:516/depth:11[0]
         passive_lit=cQ_2 X1 b X0 p=0.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.634[zip.sup] will yield a tautology
0.634[zip.sup] ... cancel, will yield a tautology
0.634[zip.env] apply binary rule ctx_narrow
0.634[zip.env] apply binary rule narrow_term_defs
0.634[zip.env] do unary inferences
0.635[zip.env] apply unary rule equality_resolution
0.635[zip.env] apply unary rule equality_factoring
0.635[zip.env] apply unary rule narrow_lit_defs
0.635[zip.env] apply unary rule ind_types.exhaustiveness
0.635[zip.env] apply unary rule ind_types.acyclicity
0.635[zip.env] apply unary rule avatar_check_empty
0.635[zip.env] apply generating rule avatar.lemmas (full: false)
0.635[zip.env] apply generating rule avatar_check_sat (full: false)
0.635[zip.avatar] SAT-solver reports "SAT"
0.635[zip.saturate] inferred new clauses: []
0.635[zip.sup] @[neg_reflect did not simplify the clause @]
0.635[zip.sup] @[neg_reflect did not simplify the clause @]
0.635[zip.saturate] ### step   488 ###
0.635[zip.saturate]
    given (488 steps, penalty 1):
      `forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f (f (f c))))+*]/id:517/depth:11`
0.636[zip.env] apply binary rule superposition_active
0.636[zip.env] apply binary rule superposition_passive
0.636[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b c+* ∨ ¬cQ_1 (f d) b (f (f (f (f c))))+*]/id:517/depth:11[0]
         passive_lit=cQ_2 X0 b c p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.636[zip.sup] will yield a tautology
0.636[zip.sup] ... cancel, will yield a tautology
0.636[zip.env] apply binary rule ctx_narrow
0.636[zip.env] apply binary rule narrow_term_defs
0.636[zip.env] do unary inferences
0.636[zip.env] apply unary rule equality_resolution
0.636[zip.env] apply unary rule equality_factoring
0.636[zip.env] apply unary rule narrow_lit_defs
0.637[zip.env] apply unary rule ind_types.exhaustiveness
0.637[zip.env] apply unary rule ind_types.acyclicity
0.637[zip.env] apply unary rule avatar_check_empty
0.637[zip.env] apply generating rule avatar.lemmas (full: false)
0.637[zip.env] apply generating rule avatar_check_sat (full: false)
0.637[zip.avatar] SAT-solver reports "SAT"
0.637[zip.saturate] inferred new clauses: []
0.637[zip.sup] @[neg_reflect did not simplify the clause @]
0.637[zip.sup] @[neg_reflect did not simplify the clause @]
0.637[zip.saturate] ### step   489 ###
0.637[zip.saturate]
    given (489 steps, penalty 1):
      `forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f (f (f b))))+*]/id:518/depth:11`
0.637[zip.env] apply binary rule superposition_active
0.637[zip.env] apply binary rule superposition_passive
0.637[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b b+* ∨ ¬cQ_1 (f d) b (f (f (f (f b))))+*]/id:518/depth:11[0]
         passive_lit=cQ_2 X0 b b p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.638[zip.sup] will yield a tautology
0.638[zip.sup] ... cancel, will yield a tautology
0.638[zip.env] apply binary rule ctx_narrow
0.638[zip.env] apply binary rule narrow_term_defs
0.638[zip.env] do unary inferences
0.638[zip.env] apply unary rule equality_resolution
0.638[zip.env] apply unary rule equality_factoring
0.638[zip.env] apply unary rule narrow_lit_defs
0.638[zip.env] apply unary rule ind_types.exhaustiveness
0.638[zip.env] apply unary rule ind_types.acyclicity
0.638[zip.env] apply unary rule avatar_check_empty
0.638[zip.env] apply generating rule avatar.lemmas (full: false)
0.638[zip.env] apply generating rule avatar_check_sat (full: false)
0.638[zip.avatar] SAT-solver reports "SAT"
0.638[zip.saturate] inferred new clauses: []
0.638[zip.sup] @[neg_reflect did not simplify the clause @]
0.638[zip.sup] @[neg_reflect did not simplify the clause @]
0.638[zip.saturate] ### step   490 ###
0.638[zip.saturate]
    given (490 steps, penalty 1):
      `forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f (f (f a))))+*]/id:519/depth:11`
0.639[zip.env] apply binary rule superposition_active
0.639[zip.env] apply binary rule superposition_passive
0.639[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 X0 b a+* ∨ ¬cQ_1 (f d) b (f (f (f (f a))))+*]/id:519/depth:11[0]
         passive_lit=cQ_2 X0 b a p=0.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.639[zip.sup] will yield a tautology
0.639[zip.sup] ... cancel, will yield a tautology
0.639[zip.env] apply binary rule ctx_narrow
0.639[zip.env] apply binary rule narrow_term_defs
0.639[zip.env] do unary inferences
0.639[zip.env] apply unary rule equality_resolution
0.639[zip.env] apply unary rule equality_factoring
0.639[zip.env] apply unary rule narrow_lit_defs
0.639[zip.env] apply unary rule ind_types.exhaustiveness
0.639[zip.env] apply unary rule ind_types.acyclicity
0.639[zip.env] apply unary rule avatar_check_empty
0.639[zip.env] apply generating rule avatar.lemmas (full: false)
0.639[zip.env] apply generating rule avatar_check_sat (full: false)
0.639[zip.avatar] SAT-solver reports "SAT"
0.639[zip.saturate] inferred new clauses: []
0.639[zip.sup] @[neg_reflect did not simplify the clause @]
0.640[zip.sup] @[neg_reflect did not simplify the clause @]
0.640[zip.saturate] ### step   491 ###
0.640[zip.saturate]
    given (491 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10`
0.641[zip.env] apply binary rule superposition_active
0.641[zip.env] apply binary rule superposition_passive
0.641[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.641[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
     ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11
0.641[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.641[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f d))))+*]/id:521/depth:11
0.642[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.642[zip.sup]
    ... ok, conclusion
    [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f (f (f c))))+*]/id:522/depth:11
0.642[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.642[zip.sup]
    ... ok, conclusion
    [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f (f (f b))))+*]/id:523/depth:11
0.642[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f X1))))* ∨ 
        cQ_2 c b X0+*]/id:460/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.642[zip.sup]
    ... ok, conclusion
    [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f (f (f a))))+*]/id:524/depth:11
0.643[zip.env] apply binary rule ctx_narrow
0.643[zip.env] apply binary rule narrow_term_defs
0.643[zip.env] do unary inferences
0.643[zip.env] apply unary rule equality_resolution
0.643[zip.env] apply unary rule equality_factoring
0.643[zip.env] apply unary rule narrow_lit_defs
0.643[zip.env] apply unary rule ind_types.exhaustiveness
0.643[zip.env] apply unary rule ind_types.acyclicity
0.643[zip.env] apply unary rule avatar_check_empty
0.643[zip.env] apply generating rule avatar.lemmas (full: false)
0.643[zip.env] apply generating rule avatar_check_sat (full: false)
0.643[zip.avatar] SAT-solver reports "SAT"
0.643[zip.sup] @[neg_reflect did not simplify the clause @]
0.643[zip.sup] @[neg_reflect did not simplify the clause @]
0.643[zip.sup] @[neg_reflect did not simplify the clause @]
0.643[zip.sup] @[neg_reflect did not simplify the clause @]
0.643[zip.sup] @[neg_reflect did not simplify the clause @]
0.643[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11, 
       forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f d))))+*]/id:521/depth:11, 
       [cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f (f (f c))))+*]/id:522/depth:11, 
       [cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f (f (f b))))+*]/id:523/depth:11, 
       [cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f (f (f a))))+*]/id:524/depth:11]
0.644[zip.sup] @[neg_reflect did not simplify the clause @]
0.644[zip.sup] @[neg_reflect did not simplify the clause @]
0.644[zip.saturate] ### step   492 ###
0.644[zip.saturate]
    given (492 steps, penalty 1):
      `forall X0. [cQ_2 c b X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f d))))+*]/id:521/depth:11`
0.644[zip.env] apply binary rule superposition_active
0.644[zip.env] apply binary rule superposition_passive
0.644[zip.env] apply binary rule ctx_narrow
0.644[zip.env] apply binary rule narrow_term_defs
0.644[zip.env] do unary inferences
0.644[zip.env] apply unary rule equality_resolution
0.644[zip.env] apply unary rule equality_factoring
0.644[zip.env] apply unary rule narrow_lit_defs
0.644[zip.env] apply unary rule ind_types.exhaustiveness
0.645[zip.env] apply unary rule ind_types.acyclicity
0.645[zip.env] apply unary rule avatar_check_empty
0.645[zip.env] apply generating rule avatar.lemmas (full: false)
0.645[zip.env] apply generating rule avatar_check_sat (full: false)
0.645[zip.avatar] SAT-solver reports "SAT"
0.645[zip.saturate] inferred new clauses: []
0.645[zip.sup] @[neg_reflect did not simplify the clause @]
0.645[zip.sup] @[neg_reflect did not simplify the clause @]
0.645[zip.saturate] ### step   493 ###
0.645[zip.saturate]
    given (493 steps, penalty 1):
      `[cQ_2 c b c+ ∨ ¬cQ_1 (f c) b (f (f (f (f c))))+*]/id:522/depth:11`
0.645[zip.env] apply binary rule superposition_active
0.645[zip.env] apply binary rule superposition_passive
0.645[zip.env] apply binary rule ctx_narrow
0.645[zip.env] apply binary rule narrow_term_defs
0.645[zip.env] do unary inferences
0.645[zip.env] apply unary rule equality_resolution
0.645[zip.env] apply unary rule equality_factoring
0.645[zip.env] apply unary rule narrow_lit_defs
0.645[zip.env] apply unary rule ind_types.exhaustiveness
0.645[zip.env] apply unary rule ind_types.acyclicity
0.645[zip.env] apply unary rule avatar_check_empty
0.645[zip.env] apply generating rule avatar.lemmas (full: false)
0.645[zip.env] apply generating rule avatar_check_sat (full: false)
0.645[zip.avatar] SAT-solver reports "SAT"
0.645[zip.saturate] inferred new clauses: []
0.645[zip.sup] @[neg_reflect did not simplify the clause @]
0.646[zip.sup] @[neg_reflect did not simplify the clause @]
0.646[zip.saturate] ### step   494 ###
0.646[zip.saturate]
    given (494 steps, penalty 1):
      `[cQ_2 c b b+ ∨ ¬cQ_1 (f c) b (f (f (f (f b))))+*]/id:523/depth:11`
0.646[zip.env] apply binary rule superposition_active
0.646[zip.env] apply binary rule superposition_passive
0.646[zip.env] apply binary rule ctx_narrow
0.646[zip.env] apply binary rule narrow_term_defs
0.646[zip.env] do unary inferences
0.646[zip.env] apply unary rule equality_resolution
0.646[zip.env] apply unary rule equality_factoring
0.646[zip.env] apply unary rule narrow_lit_defs
0.646[zip.env] apply unary rule ind_types.exhaustiveness
0.646[zip.env] apply unary rule ind_types.acyclicity
0.646[zip.env] apply unary rule avatar_check_empty
0.646[zip.env] apply generating rule avatar.lemmas (full: false)
0.646[zip.env] apply generating rule avatar_check_sat (full: false)
0.646[zip.avatar] SAT-solver reports "SAT"
0.646[zip.saturate] inferred new clauses: []
0.646[zip.sup] @[neg_reflect did not simplify the clause @]
0.646[zip.sup] @[neg_reflect did not simplify the clause @]
0.647[zip.saturate] ### step   495 ###
0.647[zip.saturate]
    given (495 steps, penalty 1):
      `[cQ_2 c b a+ ∨ ¬cQ_1 (f c) b (f (f (f (f a))))+*]/id:524/depth:11`
0.647[zip.env] apply binary rule superposition_active
0.647[zip.env] apply binary rule superposition_passive
0.647[zip.env] apply binary rule ctx_narrow
0.647[zip.env] apply binary rule narrow_term_defs
0.647[zip.env] do unary inferences
0.647[zip.env] apply unary rule equality_resolution
0.647[zip.env] apply unary rule equality_factoring
0.647[zip.env] apply unary rule narrow_lit_defs
0.647[zip.env] apply unary rule ind_types.exhaustiveness
0.647[zip.env] apply unary rule ind_types.acyclicity
0.647[zip.env] apply unary rule avatar_check_empty
0.647[zip.env] apply generating rule avatar.lemmas (full: false)
0.647[zip.env] apply generating rule avatar_check_sat (full: false)
0.647[zip.avatar] SAT-solver reports "SAT"
0.647[zip.saturate] inferred new clauses: []
0.647[zip.sup] @[neg_reflect did not simplify the clause @]
0.648[zip.sup] @[neg_reflect did not simplify the clause @]
0.648[zip.saturate] ### step   496 ###
0.648[zip.saturate]
    given (496 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10`
0.648[zip.env] apply binary rule superposition_active
0.648[zip.env] apply binary rule superposition_passive
0.648[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.649[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
     ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11
0.649[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.649[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f d))))+*]/id:526/depth:11
0.649[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.649[zip.sup]
    ... ok, conclusion
    [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f (f (f c))))+*]/id:527/depth:11
0.650[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.650[zip.sup]
    ... ok, conclusion
    [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f (f (f b))))+*]/id:528/depth:11
0.650[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f X1))))* ∨ 
        cQ_2 b b X0+*]/id:465/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.650[zip.sup]
    ... ok, conclusion
    [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f (f (f a))))+*]/id:529/depth:11
0.650[zip.env] apply binary rule ctx_narrow
0.650[zip.env] apply binary rule narrow_term_defs
0.650[zip.env] do unary inferences
0.650[zip.env] apply unary rule equality_resolution
0.650[zip.env] apply unary rule equality_factoring
0.650[zip.env] apply unary rule narrow_lit_defs
0.650[zip.env] apply unary rule ind_types.exhaustiveness
0.650[zip.env] apply unary rule ind_types.acyclicity
0.650[zip.env] apply unary rule avatar_check_empty
0.650[zip.env] apply generating rule avatar.lemmas (full: false)
0.650[zip.env] apply generating rule avatar_check_sat (full: false)
0.650[zip.avatar] SAT-solver reports "SAT"
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11, 
       forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f d))))+*]/id:526/depth:11, 
       [cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f (f (f c))))+*]/id:527/depth:11, 
       [cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f (f (f b))))+*]/id:528/depth:11, 
       [cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f (f (f a))))+*]/id:529/depth:11]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.651[zip.sup] @[neg_reflect did not simplify the clause @]
0.652[zip.saturate] ### step   497 ###
0.652[zip.saturate]
    given (497 steps, penalty 1):
      `forall X0. [cQ_2 b b X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f d))))+*]/id:526/depth:11`
0.652[zip.env] apply binary rule superposition_active
0.652[zip.env] apply binary rule superposition_passive
0.652[zip.env] apply binary rule ctx_narrow
0.652[zip.env] apply binary rule narrow_term_defs
0.652[zip.env] do unary inferences
0.652[zip.env] apply unary rule equality_resolution
0.653[zip.env] apply unary rule equality_factoring
0.653[zip.env] apply unary rule narrow_lit_defs
0.653[zip.env] apply unary rule ind_types.exhaustiveness
0.653[zip.env] apply unary rule ind_types.acyclicity
0.653[zip.env] apply unary rule avatar_check_empty
0.653[zip.env] apply generating rule avatar.lemmas (full: false)
0.653[zip.env] apply generating rule avatar_check_sat (full: false)
0.653[zip.avatar] SAT-solver reports "SAT"
0.653[zip.saturate] inferred new clauses: []
0.653[zip.sup] @[neg_reflect did not simplify the clause @]
0.653[zip.sup] @[neg_reflect did not simplify the clause @]
0.653[zip.saturate] ### step   498 ###
0.653[zip.saturate]
    given (498 steps, penalty 1):
      `[cQ_2 b b c+ ∨ ¬cQ_1 (f b) b (f (f (f (f c))))+*]/id:527/depth:11`
0.653[zip.env] apply binary rule superposition_active
0.653[zip.env] apply binary rule superposition_passive
0.653[zip.env] apply binary rule ctx_narrow
0.653[zip.env] apply binary rule narrow_term_defs
0.654[zip.env] do unary inferences
0.654[zip.env] apply unary rule equality_resolution
0.654[zip.env] apply unary rule equality_factoring
0.654[zip.env] apply unary rule narrow_lit_defs
0.654[zip.env] apply unary rule ind_types.exhaustiveness
0.654[zip.env] apply unary rule ind_types.acyclicity
0.654[zip.env] apply unary rule avatar_check_empty
0.654[zip.env] apply generating rule avatar.lemmas (full: false)
0.654[zip.env] apply generating rule avatar_check_sat (full: false)
0.654[zip.avatar] SAT-solver reports "SAT"
0.654[zip.saturate] inferred new clauses: []
0.654[zip.sup] @[neg_reflect did not simplify the clause @]
0.654[zip.sup] @[neg_reflect did not simplify the clause @]
0.654[zip.saturate] ### step   499 ###
0.654[zip.saturate]
    given (499 steps, penalty 1):
      `[cQ_2 b b b+ ∨ ¬cQ_1 (f b) b (f (f (f (f b))))+*]/id:528/depth:11`
0.654[zip.env] apply binary rule superposition_active
0.654[zip.env] apply binary rule superposition_passive
0.654[zip.env] apply binary rule ctx_narrow
0.654[zip.env] apply binary rule narrow_term_defs
0.654[zip.env] do unary inferences
0.654[zip.env] apply unary rule equality_resolution
0.654[zip.env] apply unary rule equality_factoring
0.654[zip.env] apply unary rule narrow_lit_defs
0.654[zip.env] apply unary rule ind_types.exhaustiveness
0.654[zip.env] apply unary rule ind_types.acyclicity
0.654[zip.env] apply unary rule avatar_check_empty
0.654[zip.env] apply generating rule avatar.lemmas (full: false)
0.654[zip.env] apply generating rule avatar_check_sat (full: false)
0.655[zip.avatar] SAT-solver reports "SAT"
0.655[zip.saturate] inferred new clauses: []
0.655[zip.sup] @[neg_reflect did not simplify the clause @]
0.655[zip.sup] @[neg_reflect did not simplify the clause @]
0.655[zip.saturate] ### step   500 ###
0.655[zip.saturate]
    given (500 steps, penalty 1):
      `[cQ_2 b b a+ ∨ ¬cQ_1 (f b) b (f (f (f (f a))))+*]/id:529/depth:11`
0.655[zip.env] apply binary rule superposition_active
0.655[zip.env] apply binary rule superposition_passive
0.655[zip.env] apply binary rule ctx_narrow
0.655[zip.env] apply binary rule narrow_term_defs
0.655[zip.env] do unary inferences
0.655[zip.env] apply unary rule equality_resolution
0.655[zip.env] apply unary rule equality_factoring
0.655[zip.env] apply unary rule narrow_lit_defs
0.655[zip.env] apply unary rule ind_types.exhaustiveness
0.655[zip.env] apply unary rule ind_types.acyclicity
0.655[zip.env] apply unary rule avatar_check_empty
0.655[zip.env] apply generating rule avatar.lemmas (full: false)
0.655[zip.env] apply generating rule avatar_check_sat (full: false)
0.656[zip.avatar] SAT-solver reports "SAT"
0.656[zip.saturate] inferred new clauses: []
0.656[zip.sup] @[neg_reflect did not simplify the clause @]
0.656[zip.sup] @[neg_reflect did not simplify the clause @]
0.656[zip.saturate] ### step   501 ###
0.656[zip.saturate]
    given (501 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10`
0.657[zip.env] apply binary rule superposition_active
0.657[zip.env] apply binary rule superposition_passive
0.657[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.657[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
     ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11
0.657[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.658[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f d))))+*]/id:531/depth:11
0.658[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.658[zip.sup]
    ... ok, conclusion
    [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f (f (f c))))+*]/id:532/depth:11
0.658[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.658[zip.sup]
    ... ok, conclusion
    [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f (f (f b))))+*]/id:533/depth:11
0.659[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.659[zip.sup]
    ... ok, conclusion
    [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f (f (f a))))+*]/id:534/depth:11
0.659[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f X1))))* ∨ 
        cQ_2 a b X0+*]/id:470/depth:10[0] passive_lit=cQ_2 a b X0 p=2.←.ε)
      with subst={X0[1] → X0[0]}.

0.659[zip.sup] will yield a tautology
0.659[zip.sup] ... cancel, will yield a tautology
0.659[zip.env] apply binary rule ctx_narrow
0.659[zip.env] apply binary rule narrow_term_defs
0.659[zip.env] do unary inferences
0.659[zip.env] apply unary rule equality_resolution
0.659[zip.env] apply unary rule equality_factoring
0.659[zip.env] apply unary rule narrow_lit_defs
0.659[zip.env] apply unary rule ind_types.exhaustiveness
0.659[zip.env] apply unary rule ind_types.acyclicity
0.659[zip.env] apply unary rule avatar_check_empty
0.659[zip.env] apply generating rule avatar.lemmas (full: false)
0.659[zip.env] apply generating rule avatar_check_sat (full: false)
0.659[zip.avatar] SAT-solver reports "SAT"
0.659[zip.sup] @[neg_reflect did not simplify the clause @]
0.659[zip.sup] @[neg_reflect did not simplify the clause @]
0.660[zip.sup] @[neg_reflect did not simplify the clause @]
0.660[zip.sup] @[neg_reflect did not simplify the clause @]
0.660[zip.sup] @[neg_reflect did not simplify the clause @]
0.660[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11, 
       forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f d))))+*]/id:531/depth:11, 
       [cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f (f (f c))))+*]/id:532/depth:11, 
       [cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f (f (f b))))+*]/id:533/depth:11, 
       [cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f (f (f a))))+*]/id:534/depth:11]
0.660[zip.sup] @[neg_reflect did not simplify the clause @]
0.660[zip.sup] @[neg_reflect did not simplify the clause @]
0.661[zip.saturate] ### step   502 ###
0.661[zip.saturate]
    given (502 steps, penalty 1):
      `forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f d))))+*]/id:531/depth:11`
0.661[zip.env] apply binary rule superposition_active
0.661[zip.env] apply binary rule superposition_passive
0.661[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [cQ_2 a b X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f d))))+*]/id:531/depth:11[0]
         passive_lit=cQ_2 a b X0 p=0.←.ε)
      with subst={X0[1] → X0[0]}.

0.661[zip.sup] will yield a tautology
0.661[zip.sup] ... cancel, will yield a tautology
0.661[zip.env] apply binary rule ctx_narrow
0.661[zip.env] apply binary rule narrow_term_defs
0.661[zip.env] do unary inferences
0.661[zip.env] apply unary rule equality_resolution
0.661[zip.env] apply unary rule equality_factoring
0.661[zip.env] apply unary rule narrow_lit_defs
0.661[zip.env] apply unary rule ind_types.exhaustiveness
0.661[zip.env] apply unary rule ind_types.acyclicity
0.661[zip.env] apply unary rule avatar_check_empty
0.661[zip.env] apply generating rule avatar.lemmas (full: false)
0.661[zip.env] apply generating rule avatar_check_sat (full: false)
0.661[zip.avatar] SAT-solver reports "SAT"
0.661[zip.saturate] inferred new clauses: []
0.662[zip.sup] @[neg_reflect did not simplify the clause @]
0.662[zip.sup] @[neg_reflect did not simplify the clause @]
0.662[zip.saturate] ### step   503 ###
0.662[zip.saturate]
    given (503 steps, penalty 1):
      `[cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f (f (f c))))+*]/id:532/depth:11`
0.662[zip.env] apply binary rule superposition_active
0.662[zip.env] apply binary rule superposition_passive
0.662[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b c+ ∨ ¬cQ_1 (f a) b (f (f (f (f c))))+*]/id:532/depth:11[0]
         passive_lit=cQ_2 a b c p=0.←.ε)
      with subst={X0[1] → c[0]}.

0.663[zip.sup] will yield a tautology
0.663[zip.sup] ... cancel, will yield a tautology
0.663[zip.env] apply binary rule ctx_narrow
0.663[zip.env] apply binary rule narrow_term_defs
0.663[zip.env] do unary inferences
0.663[zip.env] apply unary rule equality_resolution
0.663[zip.env] apply unary rule equality_factoring
0.663[zip.env] apply unary rule narrow_lit_defs
0.663[zip.env] apply unary rule ind_types.exhaustiveness
0.663[zip.env] apply unary rule ind_types.acyclicity
0.663[zip.env] apply unary rule avatar_check_empty
0.663[zip.env] apply generating rule avatar.lemmas (full: false)
0.663[zip.env] apply generating rule avatar_check_sat (full: false)
0.663[zip.avatar] SAT-solver reports "SAT"
0.663[zip.saturate] inferred new clauses: []
0.663[zip.sup] @[neg_reflect did not simplify the clause @]
0.663[zip.sup] @[neg_reflect did not simplify the clause @]
0.663[zip.saturate] ### step   504 ###
0.663[zip.saturate]
    given (504 steps, penalty 1):
      `[cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f (f (f b))))+*]/id:533/depth:11`
0.663[zip.env] apply binary rule superposition_active
0.663[zip.env] apply binary rule superposition_passive
0.664[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b b+ ∨ ¬cQ_1 (f a) b (f (f (f (f b))))+*]/id:533/depth:11[0]
         passive_lit=cQ_2 a b b p=0.←.ε)
      with subst={X0[1] → b[0]}.

0.664[zip.sup] will yield a tautology
0.664[zip.sup] ... cancel, will yield a tautology
0.664[zip.env] apply binary rule ctx_narrow
0.664[zip.env] apply binary rule narrow_term_defs
0.664[zip.env] do unary inferences
0.664[zip.env] apply unary rule equality_resolution
0.664[zip.env] apply unary rule equality_factoring
0.664[zip.env] apply unary rule narrow_lit_defs
0.664[zip.env] apply unary rule ind_types.exhaustiveness
0.664[zip.env] apply unary rule ind_types.acyclicity
0.664[zip.env] apply unary rule avatar_check_empty
0.664[zip.env] apply generating rule avatar.lemmas (full: false)
0.664[zip.env] apply generating rule avatar_check_sat (full: false)
0.664[zip.avatar] SAT-solver reports "SAT"
0.664[zip.saturate] inferred new clauses: []
0.664[zip.sup] @[neg_reflect did not simplify the clause @]
0.664[zip.sup] @[neg_reflect did not simplify the clause @]
0.664[zip.saturate] ### step   505 ###
0.664[zip.saturate]
    given (505 steps, penalty 1):
      `[cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f (f (f a))))+*]/id:534/depth:11`
0.664[zip.env] apply binary rule superposition_active
0.664[zip.env] apply binary rule superposition_passive
0.664[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      ([cQ_2 a b a+ ∨ ¬cQ_1 (f a) b (f (f (f (f a))))+*]/id:534/depth:11[0]
         passive_lit=cQ_2 a b a p=0.←.ε)
      with subst={X0[1] → a[0]}.

0.664[zip.sup] will yield a tautology
0.664[zip.sup] ... cancel, will yield a tautology
0.664[zip.env] apply binary rule ctx_narrow
0.664[zip.env] apply binary rule narrow_term_defs
0.664[zip.env] do unary inferences
0.664[zip.env] apply unary rule equality_resolution
0.664[zip.env] apply unary rule equality_factoring
0.664[zip.env] apply unary rule narrow_lit_defs
0.664[zip.env] apply unary rule ind_types.exhaustiveness
0.664[zip.env] apply unary rule ind_types.acyclicity
0.664[zip.env] apply unary rule avatar_check_empty
0.664[zip.env] apply generating rule avatar.lemmas (full: false)
0.664[zip.env] apply generating rule avatar_check_sat (full: false)
0.664[zip.avatar] SAT-solver reports "SAT"
0.664[zip.saturate] inferred new clauses: []
0.664[zip.sup] @[neg_reflect did not simplify the clause @]
0.665[zip.sup] @[neg_reflect did not simplify the clause @]
0.665[zip.saturate] ### step   506 ###
0.665[zip.saturate]
    given (506 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10`
0.666[zip.env] apply binary rule superposition_active
0.666[zip.env] apply binary rule superposition_passive
0.666[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.666[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ 
     ¬cQ_1 (f d) a (f (f (f (f (f X1)))))*]/id:535/depth:11
0.666[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.667[zip.sup]
    ... ok, conclusion
    forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f d))))+*]/id:536/depth:11
0.667[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.667[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f (f (f c))))+*]/id:537/depth:11
0.667[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.667[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f (f (f b))))+*]/id:538/depth:11
0.668[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f X1))))* ∨ 
        cQ_2 X2 a X0+*]/id:475/depth:10[0] passive_lit=¬cP_1 X1 X0
         p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.668[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f (f (f a))))+*]/id:539/depth:11
0.668[zip.env] apply binary rule ctx_narrow
0.668[zip.env] apply binary rule narrow_term_defs
0.668[zip.env] do unary inferences
0.668[zip.env] apply unary rule equality_resolution
0.668[zip.env] apply unary rule equality_factoring
0.668[zip.env] apply unary rule narrow_lit_defs
0.669[zip.env] apply unary rule ind_types.exhaustiveness
0.669[zip.env] apply unary rule ind_types.acyclicity
0.669[zip.env] apply unary rule avatar_check_empty
0.669[zip.env] apply generating rule avatar.lemmas (full: false)
0.669[zip.env] apply generating rule avatar_check_sat (full: false)
0.669[zip.avatar] SAT-solver reports "SAT"
0.669[zip.sup] @[neg_reflect did not simplify the clause @]
0.669[zip.sup] @[neg_reflect did not simplify the clause @]
0.669[zip.sup] @[neg_reflect did not simplify the clause @]
0.669[zip.sup] @[neg_reflect did not simplify the clause @]
0.669[zip.sup] @[neg_reflect did not simplify the clause @]
0.669[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 a X0+* ∨ 
        ¬cQ_1 (f d) a (f (f (f (f (f X1)))))*]/id:535/depth:11, 
       forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f d))))+*]/id:536/depth:11, 
       forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f (f (f c))))+*]/id:537/depth:11, 
       forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f (f (f b))))+*]/id:538/depth:11, 
       forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f (f (f a))))+*]/id:539/depth:11]
0.670[zip.sup] @[neg_reflect did not simplify the clause @]
0.670[zip.sup] @[neg_reflect did not simplify the clause @]
0.670[zip.saturate] ### step   507 ###
0.670[zip.saturate]
    given (507 steps, penalty 1):
      `forall X0 X1. [cQ_2 X1 a X0+* ∨ ¬cQ_1 (f d) a (f (f (f (f d))))+*]/id:536/depth:11`
0.670[zip.env] apply binary rule superposition_active
0.670[zip.env] apply binary rule superposition_passive
0.670[zip.env] apply binary rule ctx_narrow
0.670[zip.env] apply binary rule narrow_term_defs
0.670[zip.env] do unary inferences
0.670[zip.env] apply unary rule equality_resolution
0.670[zip.env] apply unary rule equality_factoring
0.670[zip.env] apply unary rule narrow_lit_defs
0.670[zip.env] apply unary rule ind_types.exhaustiveness
0.670[zip.env] apply unary rule ind_types.acyclicity
0.670[zip.env] apply unary rule avatar_check_empty
0.670[zip.env] apply generating rule avatar.lemmas (full: false)
0.670[zip.env] apply generating rule avatar_check_sat (full: false)
0.670[zip.avatar] SAT-solver reports "SAT"
0.670[zip.saturate] inferred new clauses: []
0.671[zip.sup] @[neg_reflect did not simplify the clause @]
0.671[zip.sup] @[neg_reflect did not simplify the clause @]
0.671[zip.saturate] ### step   508 ###
0.671[zip.saturate]
    given (508 steps, penalty 1):
      `forall X0. [cQ_2 X0 a c+* ∨ ¬cQ_1 (f d) a (f (f (f (f c))))+*]/id:537/depth:11`
0.671[zip.env] apply binary rule superposition_active
0.671[zip.env] apply binary rule superposition_passive
0.672[zip.env] apply binary rule ctx_narrow
0.672[zip.env] apply binary rule narrow_term_defs
0.672[zip.env] do unary inferences
0.672[zip.env] apply unary rule equality_resolution
0.672[zip.env] apply unary rule equality_factoring
0.672[zip.env] apply unary rule narrow_lit_defs
0.672[zip.env] apply unary rule ind_types.exhaustiveness
0.672[zip.env] apply unary rule ind_types.acyclicity
0.672[zip.env] apply unary rule avatar_check_empty
0.672[zip.env] apply generating rule avatar.lemmas (full: false)
0.672[zip.env] apply generating rule avatar_check_sat (full: false)
0.672[zip.avatar] SAT-solver reports "SAT"
0.672[zip.saturate] inferred new clauses: []
0.672[zip.sup] @[neg_reflect did not simplify the clause @]
0.672[zip.sup] @[neg_reflect did not simplify the clause @]
0.672[zip.saturate] ### step   509 ###
0.672[zip.saturate]
    given (509 steps, penalty 1):
      `forall X0. [cQ_2 X0 a b+* ∨ ¬cQ_1 (f d) a (f (f (f (f b))))+*]/id:538/depth:11`
0.673[zip.env] apply binary rule superposition_active
0.673[zip.env] apply binary rule superposition_passive
0.673[zip.env] apply binary rule ctx_narrow
0.673[zip.env] apply binary rule narrow_term_defs
0.673[zip.env] do unary inferences
0.673[zip.env] apply unary rule equality_resolution
0.673[zip.env] apply unary rule equality_factoring
0.673[zip.env] apply unary rule narrow_lit_defs
0.673[zip.env] apply unary rule ind_types.exhaustiveness
0.673[zip.env] apply unary rule ind_types.acyclicity
0.673[zip.env] apply unary rule avatar_check_empty
0.673[zip.env] apply generating rule avatar.lemmas (full: false)
0.673[zip.env] apply generating rule avatar_check_sat (full: false)
0.673[zip.avatar] SAT-solver reports "SAT"
0.673[zip.saturate] inferred new clauses: []
0.673[zip.sup] @[neg_reflect did not simplify the clause @]
0.673[zip.sup] @[neg_reflect did not simplify the clause @]
0.674[zip.saturate] ### step   510 ###
0.674[zip.saturate]
    given (510 steps, penalty 1):
      `forall X0. [cQ_2 X0 a a+* ∨ ¬cQ_1 (f d) a (f (f (f (f a))))+*]/id:539/depth:11`
0.674[zip.env] apply binary rule superposition_active
0.674[zip.env] apply binary rule superposition_passive
0.674[zip.env] apply binary rule ctx_narrow
0.674[zip.env] apply binary rule narrow_term_defs
0.674[zip.env] do unary inferences
0.675[zip.env] apply unary rule equality_resolution
0.675[zip.env] apply unary rule equality_factoring
0.675[zip.env] apply unary rule narrow_lit_defs
0.675[zip.env] apply unary rule ind_types.exhaustiveness
0.675[zip.env] apply unary rule ind_types.acyclicity
0.675[zip.env] apply unary rule avatar_check_empty
0.675[zip.env] apply generating rule avatar.lemmas (full: false)
0.675[zip.env] apply generating rule avatar_check_sat (full: false)
0.675[zip.avatar] SAT-solver reports "SAT"
0.675[zip.saturate] inferred new clauses: []
0.675[zip.sup] @[neg_reflect did not simplify the clause @]
0.675[zip.sup] @[neg_reflect did not simplify the clause @]
0.675[zip.saturate] ### step   511 ###
0.675[zip.saturate]
    given (511 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10`
0.676[zip.env] apply binary rule superposition_active
0.676[zip.env] apply binary rule superposition_passive
0.676[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.676[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ 
     ¬cQ_1 (f c) a (f (f (f (f (f X1)))))*]/id:540/depth:11
0.676[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.676[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f d))))+*]/id:541/depth:11
0.676[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.677[zip.sup]
    ... ok, conclusion
    [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f (f (f c))))+*]/id:542/depth:11
0.677[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.677[zip.sup]
    ... ok, conclusion
    [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f (f (f b))))+*]/id:543/depth:11
0.677[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f X1))))* ∨ 
        cQ_2 c a X0+*]/id:480/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.677[zip.sup]
    ... ok, conclusion
    [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f (f (f a))))+*]/id:544/depth:11
0.677[zip.env] apply binary rule ctx_narrow
0.677[zip.env] apply binary rule narrow_term_defs
0.677[zip.env] do unary inferences
0.677[zip.env] apply unary rule equality_resolution
0.678[zip.env] apply unary rule equality_factoring
0.678[zip.env] apply unary rule narrow_lit_defs
0.678[zip.env] apply unary rule ind_types.exhaustiveness
0.678[zip.env] apply unary rule ind_types.acyclicity
0.678[zip.env] apply unary rule avatar_check_empty
0.678[zip.env] apply generating rule avatar.lemmas (full: false)
0.678[zip.env] apply generating rule avatar_check_sat (full: false)
0.678[zip.avatar] SAT-solver reports "SAT"
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c a X0+* ∨ 
        ¬cQ_1 (f c) a (f (f (f (f (f X1)))))*]/id:540/depth:11, 
       forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f d))))+*]/id:541/depth:11, 
       [cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f (f (f c))))+*]/id:542/depth:11, 
       [cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f (f (f b))))+*]/id:543/depth:11, 
       [cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f (f (f a))))+*]/id:544/depth:11]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.678[zip.sup] @[neg_reflect did not simplify the clause @]
0.679[zip.saturate] ### step   512 ###
0.679[zip.saturate]
    given (512 steps, penalty 1):
      `forall X0. [cQ_2 c a X0+* ∨ ¬cQ_1 (f c) a (f (f (f (f d))))+*]/id:541/depth:11`
0.679[zip.env] apply binary rule superposition_active
0.679[zip.env] apply binary rule superposition_passive
0.679[zip.env] apply binary rule ctx_narrow
0.679[zip.env] apply binary rule narrow_term_defs
0.679[zip.env] do unary inferences
0.679[zip.env] apply unary rule equality_resolution
0.679[zip.env] apply unary rule equality_factoring
0.679[zip.env] apply unary rule narrow_lit_defs
0.679[zip.env] apply unary rule ind_types.exhaustiveness
0.679[zip.env] apply unary rule ind_types.acyclicity
0.679[zip.env] apply unary rule avatar_check_empty
0.679[zip.env] apply generating rule avatar.lemmas (full: false)
0.679[zip.env] apply generating rule avatar_check_sat (full: false)
0.679[zip.avatar] SAT-solver reports "SAT"
0.679[zip.saturate] inferred new clauses: []
0.679[zip.sup] @[neg_reflect did not simplify the clause @]
0.679[zip.sup] @[neg_reflect did not simplify the clause @]
0.680[zip.saturate] ### step   513 ###
0.680[zip.saturate]
    given (513 steps, penalty 1):
      `[cQ_2 c a c+ ∨ ¬cQ_1 (f c) a (f (f (f (f c))))+*]/id:542/depth:11`
0.680[zip.env] apply binary rule superposition_active
0.680[zip.env] apply binary rule superposition_passive
0.680[zip.env] apply binary rule ctx_narrow
0.680[zip.env] apply binary rule narrow_term_defs
0.680[zip.env] do unary inferences
0.680[zip.env] apply unary rule equality_resolution
0.680[zip.env] apply unary rule equality_factoring
0.680[zip.env] apply unary rule narrow_lit_defs
0.680[zip.env] apply unary rule ind_types.exhaustiveness
0.680[zip.env] apply unary rule ind_types.acyclicity
0.680[zip.env] apply unary rule avatar_check_empty
0.680[zip.env] apply generating rule avatar.lemmas (full: false)
0.680[zip.env] apply generating rule avatar_check_sat (full: false)
0.680[zip.avatar] SAT-solver reports "SAT"
0.680[zip.saturate] inferred new clauses: []
0.680[zip.sup] @[neg_reflect did not simplify the clause @]
0.680[zip.sup] @[neg_reflect did not simplify the clause @]
0.681[zip.saturate] ### step   514 ###
0.681[zip.saturate]
    given (514 steps, penalty 1):
      `[cQ_2 c a b+ ∨ ¬cQ_1 (f c) a (f (f (f (f b))))+*]/id:543/depth:11`
0.681[zip.env] apply binary rule superposition_active
0.681[zip.env] apply binary rule superposition_passive
0.681[zip.env] apply binary rule ctx_narrow
0.681[zip.env] apply binary rule narrow_term_defs
0.681[zip.env] do unary inferences
0.681[zip.env] apply unary rule equality_resolution
0.681[zip.env] apply unary rule equality_factoring
0.681[zip.env] apply unary rule narrow_lit_defs
0.681[zip.env] apply unary rule ind_types.exhaustiveness
0.681[zip.env] apply unary rule ind_types.acyclicity
0.681[zip.env] apply unary rule avatar_check_empty
0.681[zip.env] apply generating rule avatar.lemmas (full: false)
0.681[zip.env] apply generating rule avatar_check_sat (full: false)
0.681[zip.avatar] SAT-solver reports "SAT"
0.681[zip.saturate] inferred new clauses: []
0.681[zip.sup] @[neg_reflect did not simplify the clause @]
0.681[zip.sup] @[neg_reflect did not simplify the clause @]
0.682[zip.saturate] ### step   515 ###
0.682[zip.saturate]
    given (515 steps, penalty 1):
      `[cQ_2 c a a+ ∨ ¬cQ_1 (f c) a (f (f (f (f a))))+*]/id:544/depth:11`
0.682[zip.env] apply binary rule superposition_active
0.682[zip.env] apply binary rule superposition_passive
0.682[zip.env] apply binary rule ctx_narrow
0.682[zip.env] apply binary rule narrow_term_defs
0.682[zip.env] do unary inferences
0.682[zip.env] apply unary rule equality_resolution
0.682[zip.env] apply unary rule equality_factoring
0.682[zip.env] apply unary rule narrow_lit_defs
0.682[zip.env] apply unary rule ind_types.exhaustiveness
0.682[zip.env] apply unary rule ind_types.acyclicity
0.682[zip.env] apply unary rule avatar_check_empty
0.682[zip.env] apply generating rule avatar.lemmas (full: false)
0.682[zip.env] apply generating rule avatar_check_sat (full: false)
0.682[zip.avatar] SAT-solver reports "SAT"
0.682[zip.saturate] inferred new clauses: []
0.682[zip.sup] @[neg_reflect did not simplify the clause @]
0.683[zip.sup] @[neg_reflect did not simplify the clause @]
0.683[zip.saturate] ### step   516 ###
0.683[zip.saturate]
    given (516 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10`
0.684[zip.env] apply binary rule superposition_active
0.684[zip.env] apply binary rule superposition_passive
0.684[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.684[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ 
     ¬cQ_1 (f b) a (f (f (f (f (f X1)))))*]/id:545/depth:11
0.684[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.685[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f d))))+*]/id:546/depth:11
0.685[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.685[zip.sup]
    ... ok, conclusion
    [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f (f (f c))))+*]/id:547/depth:11
0.685[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.685[zip.sup]
    ... ok, conclusion
    [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f (f (f b))))+*]/id:548/depth:11
0.686[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f X1))))* ∨ 
        cQ_2 b a X0+*]/id:485/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.686[zip.sup]
    ... ok, conclusion
    [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f (f (f a))))+*]/id:549/depth:11
0.686[zip.env] apply binary rule ctx_narrow
0.686[zip.env] apply binary rule narrow_term_defs
0.686[zip.env] do unary inferences
0.686[zip.env] apply unary rule equality_resolution
0.686[zip.env] apply unary rule equality_factoring
0.686[zip.env] apply unary rule narrow_lit_defs
0.686[zip.env] apply unary rule ind_types.exhaustiveness
0.686[zip.env] apply unary rule ind_types.acyclicity
0.686[zip.env] apply unary rule avatar_check_empty
0.686[zip.env] apply generating rule avatar.lemmas (full: false)
0.686[zip.env] apply generating rule avatar_check_sat (full: false)
0.686[zip.avatar] SAT-solver reports "SAT"
0.686[zip.sup] @[neg_reflect did not simplify the clause @]
0.686[zip.sup] @[neg_reflect did not simplify the clause @]
0.686[zip.sup] @[neg_reflect did not simplify the clause @]
0.686[zip.sup] @[neg_reflect did not simplify the clause @]
0.686[zip.sup] @[neg_reflect did not simplify the clause @]
0.687[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b a X0+* ∨ 
        ¬cQ_1 (f b) a (f (f (f (f (f X1)))))*]/id:545/depth:11, 
       forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f d))))+*]/id:546/depth:11, 
       [cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f (f (f c))))+*]/id:547/depth:11, 
       [cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f (f (f b))))+*]/id:548/depth:11, 
       [cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f (f (f a))))+*]/id:549/depth:11]
0.687[zip.sup] @[neg_reflect did not simplify the clause @]
0.687[zip.sup] @[neg_reflect did not simplify the clause @]
0.688[zip.saturate] ### step   517 ###
0.688[zip.saturate]
    given (517 steps, penalty 1):
      `forall X0. [cQ_2 b a X0+* ∨ ¬cQ_1 (f b) a (f (f (f (f d))))+*]/id:546/depth:11`
0.688[zip.env] apply binary rule superposition_active
0.688[zip.env] apply binary rule superposition_passive
0.688[zip.env] apply binary rule ctx_narrow
0.688[zip.env] apply binary rule narrow_term_defs
0.688[zip.env] do unary inferences
0.688[zip.env] apply unary rule equality_resolution
0.688[zip.env] apply unary rule equality_factoring
0.688[zip.env] apply unary rule narrow_lit_defs
0.688[zip.env] apply unary rule ind_types.exhaustiveness
0.688[zip.env] apply unary rule ind_types.acyclicity
0.688[zip.env] apply unary rule avatar_check_empty
0.688[zip.env] apply generating rule avatar.lemmas (full: false)
0.688[zip.env] apply generating rule avatar_check_sat (full: false)
0.688[zip.avatar] SAT-solver reports "SAT"
0.688[zip.saturate] inferred new clauses: []
0.688[zip.sup] @[neg_reflect did not simplify the clause @]
0.688[zip.sup] @[neg_reflect did not simplify the clause @]
0.688[zip.saturate] ### step   518 ###
0.688[zip.saturate]
    given (518 steps, penalty 1):
      `[cQ_2 b a c+ ∨ ¬cQ_1 (f b) a (f (f (f (f c))))+*]/id:547/depth:11`
0.689[zip.env] apply binary rule superposition_active
0.689[zip.env] apply binary rule superposition_passive
0.689[zip.env] apply binary rule ctx_narrow
0.689[zip.env] apply binary rule narrow_term_defs
0.689[zip.env] do unary inferences
0.689[zip.env] apply unary rule equality_resolution
0.689[zip.env] apply unary rule equality_factoring
0.689[zip.env] apply unary rule narrow_lit_defs
0.689[zip.env] apply unary rule ind_types.exhaustiveness
0.689[zip.env] apply unary rule ind_types.acyclicity
0.689[zip.env] apply unary rule avatar_check_empty
0.689[zip.env] apply generating rule avatar.lemmas (full: false)
0.689[zip.env] apply generating rule avatar_check_sat (full: false)
0.689[zip.avatar] SAT-solver reports "SAT"
0.689[zip.saturate] inferred new clauses: []
0.689[zip.sup] @[neg_reflect did not simplify the clause @]
0.689[zip.sup] @[neg_reflect did not simplify the clause @]
0.689[zip.saturate] ### step   519 ###
0.689[zip.saturate]
    given (519 steps, penalty 1):
      `[cQ_2 b a b+ ∨ ¬cQ_1 (f b) a (f (f (f (f b))))+*]/id:548/depth:11`
0.689[zip.env] apply binary rule superposition_active
0.689[zip.env] apply binary rule superposition_passive
0.690[zip.env] apply binary rule ctx_narrow
0.690[zip.env] apply binary rule narrow_term_defs
0.690[zip.env] do unary inferences
0.690[zip.env] apply unary rule equality_resolution
0.690[zip.env] apply unary rule equality_factoring
0.690[zip.env] apply unary rule narrow_lit_defs
0.690[zip.env] apply unary rule ind_types.exhaustiveness
0.690[zip.env] apply unary rule ind_types.acyclicity
0.690[zip.env] apply unary rule avatar_check_empty
0.690[zip.env] apply generating rule avatar.lemmas (full: false)
0.690[zip.env] apply generating rule avatar_check_sat (full: false)
0.690[zip.avatar] SAT-solver reports "SAT"
0.690[zip.saturate] inferred new clauses: []
0.690[zip.sup] @[neg_reflect did not simplify the clause @]
0.690[zip.sup] @[neg_reflect did not simplify the clause @]
0.690[zip.saturate] ### step   520 ###
0.690[zip.saturate]
    given (520 steps, penalty 1):
      `[cQ_2 b a a+ ∨ ¬cQ_1 (f b) a (f (f (f (f a))))+*]/id:549/depth:11`
0.690[zip.env] apply binary rule superposition_active
0.690[zip.env] apply binary rule superposition_passive
0.690[zip.env] apply binary rule ctx_narrow
0.690[zip.env] apply binary rule narrow_term_defs
0.690[zip.env] do unary inferences
0.691[zip.env] apply unary rule equality_resolution
0.691[zip.env] apply unary rule equality_factoring
0.691[zip.env] apply unary rule narrow_lit_defs
0.691[zip.env] apply unary rule ind_types.exhaustiveness
0.691[zip.env] apply unary rule ind_types.acyclicity
0.691[zip.env] apply unary rule avatar_check_empty
0.691[zip.env] apply generating rule avatar.lemmas (full: false)
0.691[zip.env] apply generating rule avatar_check_sat (full: false)
0.691[zip.avatar] SAT-solver reports "SAT"
0.691[zip.saturate] inferred new clauses: []
0.691[zip.sup] @[neg_reflect did not simplify the clause @]
0.691[zip.sup] @[neg_reflect did not simplify the clause @]
0.691[zip.saturate] ### step   521 ###
0.691[zip.saturate]
    given (521 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10`
0.692[zip.env] apply binary rule superposition_active
0.692[zip.env] apply binary rule superposition_passive
0.692[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.692[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ 
     ¬cQ_1 (f a) a (f (f (f (f (f X1)))))*]/id:550/depth:11
0.692[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.693[zip.sup]
    ... ok, conclusion
    forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f d))))+*]/id:551/depth:11
0.693[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.693[zip.sup]
    ... ok, conclusion
    [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f (f (f c))))+*]/id:552/depth:11
0.693[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.693[zip.sup]
    ... ok, conclusion
    [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f (f (f b))))+*]/id:553/depth:11
0.693[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f X1))))* ∨ 
        cQ_2 a a X0+*]/id:490/depth:10[0] passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.693[zip.sup]
    ... ok, conclusion
    [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f (f (f a))))+*]/id:554/depth:11
0.693[zip.env] apply binary rule ctx_narrow
0.693[zip.env] apply binary rule narrow_term_defs
0.694[zip.env] do unary inferences
0.694[zip.env] apply unary rule equality_resolution
0.694[zip.env] apply unary rule equality_factoring
0.694[zip.env] apply unary rule narrow_lit_defs
0.694[zip.env] apply unary rule ind_types.exhaustiveness
0.694[zip.env] apply unary rule ind_types.acyclicity
0.694[zip.env] apply unary rule avatar_check_empty
0.694[zip.env] apply generating rule avatar.lemmas (full: false)
0.694[zip.env] apply generating rule avatar_check_sat (full: false)
0.694[zip.avatar] SAT-solver reports "SAT"
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.694[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a a X0+* ∨ 
        ¬cQ_1 (f a) a (f (f (f (f (f X1)))))*]/id:550/depth:11, 
       forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f d))))+*]/id:551/depth:11, 
       [cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f (f (f c))))+*]/id:552/depth:11, 
       [cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f (f (f b))))+*]/id:553/depth:11, 
       [cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f (f (f a))))+*]/id:554/depth:11]
0.694[zip.sup] @[neg_reflect did not simplify the clause @]
0.695[zip.sup] @[neg_reflect did not simplify the clause @]
0.695[zip.saturate] ### step   522 ###
0.695[zip.saturate]
    given (522 steps, penalty 1):
      `forall X0. [cQ_2 a a X0+* ∨ ¬cQ_1 (f a) a (f (f (f (f d))))+*]/id:551/depth:11`
0.695[zip.env] apply binary rule superposition_active
0.695[zip.env] apply binary rule superposition_passive
0.695[zip.env] apply binary rule ctx_narrow
0.695[zip.env] apply binary rule narrow_term_defs
0.695[zip.env] do unary inferences
0.695[zip.env] apply unary rule equality_resolution
0.695[zip.env] apply unary rule equality_factoring
0.695[zip.env] apply unary rule narrow_lit_defs
0.695[zip.env] apply unary rule ind_types.exhaustiveness
0.695[zip.env] apply unary rule ind_types.acyclicity
0.695[zip.env] apply unary rule avatar_check_empty
0.695[zip.env] apply generating rule avatar.lemmas (full: false)
0.695[zip.env] apply generating rule avatar_check_sat (full: false)
0.695[zip.avatar] SAT-solver reports "SAT"
0.695[zip.saturate] inferred new clauses: []
0.695[zip.sup] @[neg_reflect did not simplify the clause @]
0.695[zip.sup] @[neg_reflect did not simplify the clause @]
0.696[zip.saturate] ### step   523 ###
0.696[zip.saturate]
    given (523 steps, penalty 1):
      `[cQ_2 a a c+ ∨ ¬cQ_1 (f a) a (f (f (f (f c))))+*]/id:552/depth:11`
0.696[zip.env] apply binary rule superposition_active
0.696[zip.env] apply binary rule superposition_passive
0.696[zip.env] apply binary rule ctx_narrow
0.696[zip.env] apply binary rule narrow_term_defs
0.696[zip.env] do unary inferences
0.696[zip.env] apply unary rule equality_resolution
0.696[zip.env] apply unary rule equality_factoring
0.696[zip.env] apply unary rule narrow_lit_defs
0.696[zip.env] apply unary rule ind_types.exhaustiveness
0.696[zip.env] apply unary rule ind_types.acyclicity
0.696[zip.env] apply unary rule avatar_check_empty
0.696[zip.env] apply generating rule avatar.lemmas (full: false)
0.696[zip.env] apply generating rule avatar_check_sat (full: false)
0.696[zip.avatar] SAT-solver reports "SAT"
0.696[zip.saturate] inferred new clauses: []
0.696[zip.sup] @[neg_reflect did not simplify the clause @]
0.696[zip.sup] @[neg_reflect did not simplify the clause @]
0.696[zip.saturate] ### step   524 ###
0.696[zip.saturate]
    given (524 steps, penalty 1):
      `[cQ_2 a a b+ ∨ ¬cQ_1 (f a) a (f (f (f (f b))))+*]/id:553/depth:11`
0.697[zip.env] apply binary rule superposition_active
0.697[zip.env] apply binary rule superposition_passive
0.697[zip.env] apply binary rule ctx_narrow
0.697[zip.env] apply binary rule narrow_term_defs
0.697[zip.env] do unary inferences
0.697[zip.env] apply unary rule equality_resolution
0.697[zip.env] apply unary rule equality_factoring
0.697[zip.env] apply unary rule narrow_lit_defs
0.697[zip.env] apply unary rule ind_types.exhaustiveness
0.697[zip.env] apply unary rule ind_types.acyclicity
0.697[zip.env] apply unary rule avatar_check_empty
0.697[zip.env] apply generating rule avatar.lemmas (full: false)
0.697[zip.env] apply generating rule avatar_check_sat (full: false)
0.697[zip.avatar] SAT-solver reports "SAT"
0.697[zip.saturate] inferred new clauses: []
0.697[zip.sup] @[neg_reflect did not simplify the clause @]
0.697[zip.sup] @[neg_reflect did not simplify the clause @]
0.697[zip.saturate] ### step   525 ###
0.697[zip.saturate]
    given (525 steps, penalty 1):
      `[cQ_2 a a a+ ∨ ¬cQ_1 (f a) a (f (f (f (f a))))+*]/id:554/depth:11`
0.697[zip.env] apply binary rule superposition_active
0.697[zip.env] apply binary rule superposition_passive
0.697[zip.env] apply binary rule ctx_narrow
0.697[zip.env] apply binary rule narrow_term_defs
0.697[zip.env] do unary inferences
0.697[zip.env] apply unary rule equality_resolution
0.697[zip.env] apply unary rule equality_factoring
0.697[zip.env] apply unary rule narrow_lit_defs
0.697[zip.env] apply unary rule ind_types.exhaustiveness
0.697[zip.env] apply unary rule ind_types.acyclicity
0.697[zip.env] apply unary rule avatar_check_empty
0.697[zip.env] apply generating rule avatar.lemmas (full: false)
0.697[zip.env] apply generating rule avatar_check_sat (full: false)
0.697[zip.avatar] SAT-solver reports "SAT"
0.697[zip.saturate] inferred new clauses: []
0.698[zip.sup] @[neg_reflect did not simplify the clause @]
0.698[zip.sup] @[neg_reflect did not simplify the clause @]
0.698[zip.saturate] ### step   526 ###
0.698[zip.saturate]
    given (526 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11`
0.698[zip.env] apply binary rule superposition_active
0.698[zip.env] apply binary rule superposition_passive
0.698[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.699[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 X2 c X0+*]/id:555/depth:12
0.699[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.700[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) c (f (f (f (f (f d)))))+* ∨ cQ_2 X1 c X0+*]/id:556/depth:12
0.700[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.700[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f (f (f c)))))+* ∨ cQ_2 X0 c c+*]/id:557/depth:12
0.700[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.701[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f (f (f b)))))+* ∨ cQ_2 X0 c b+*]/id:558/depth:12
0.701[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 c X0+* ∨ 
        ¬cQ_1 (f d) c (f (f (f (f (f X1)))))*]/id:495/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.701[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) c (f (f (f (f (f a)))))+* ∨ cQ_2 X0 c a+*]/id:559/depth:12
0.702[zip.env] apply binary rule ctx_narrow
0.702[zip.env] apply binary rule narrow_term_defs
0.702[zip.env] do unary inferences
0.702[zip.env] apply unary rule equality_resolution
0.702[zip.env] apply unary rule equality_factoring
0.702[zip.env] apply unary rule narrow_lit_defs
0.702[zip.env] apply unary rule ind_types.exhaustiveness
0.702[zip.env] apply unary rule ind_types.acyclicity
0.702[zip.env] apply unary rule avatar_check_empty
0.702[zip.env] apply generating rule avatar.lemmas (full: false)
0.702[zip.env] apply generating rule avatar_check_sat (full: false)
0.702[zip.avatar] SAT-solver reports "SAT"
0.702[zip.sup] @[neg_reflect did not simplify the clause @]
0.702[zip.sup] @[neg_reflect did not simplify the clause @]
0.702[zip.sup] @[neg_reflect did not simplify the clause @]
0.703[zip.sup] @[neg_reflect did not simplify the clause @]
0.703[zip.sup] @[neg_reflect did not simplify the clause @]
0.703[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) c (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 X2 c X0+*]/id:555/depth:12, 
       forall X0 X1.
       [¬cQ_1 (f d) c (f (f (f (f (f d)))))+* ∨ cQ_2 X1 c X0+*]/id:556/depth:12, 
       forall X0. [¬cQ_1 (f d) c (f (f (f (f (f c)))))+* ∨ cQ_2 X0 c c+*]/id:557/depth:12, 
       forall X0. [¬cQ_1 (f d) c (f (f (f (f (f b)))))+* ∨ cQ_2 X0 c b+*]/id:558/depth:12, 
       forall X0. [¬cQ_1 (f d) c (f (f (f (f (f a)))))+* ∨ cQ_2 X0 c a+*]/id:559/depth:12]
0.703[zip.sup] @[neg_reflect did not simplify the clause @]
0.704[zip.sup] @[neg_reflect did not simplify the clause @]
0.704[zip.saturate] ### step   527 ###
0.704[zip.saturate]
    given (527 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f d) c (f (f (f (f (f d)))))+* ∨ cQ_2 X1 c X0+*]/id:556/depth:12`
0.705[zip.env] apply binary rule superposition_active
0.705[zip.env] apply binary rule superposition_passive
0.705[zip.env] apply binary rule ctx_narrow
0.705[zip.env] apply binary rule narrow_term_defs
0.705[zip.env] do unary inferences
0.705[zip.env] apply unary rule equality_resolution
0.705[zip.env] apply unary rule equality_factoring
0.705[zip.env] apply unary rule narrow_lit_defs
0.705[zip.env] apply unary rule ind_types.exhaustiveness
0.705[zip.env] apply unary rule ind_types.acyclicity
0.705[zip.env] apply unary rule avatar_check_empty
0.705[zip.env] apply generating rule avatar.lemmas (full: false)
0.705[zip.env] apply generating rule avatar_check_sat (full: false)
0.705[zip.avatar] SAT-solver reports "SAT"
0.705[zip.saturate] inferred new clauses: []
0.705[zip.sup] @[neg_reflect did not simplify the clause @]
0.705[zip.sup] @[neg_reflect did not simplify the clause @]
0.706[zip.saturate] ### step   528 ###
0.706[zip.saturate]
    given (528 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f (f (f c)))))+* ∨ cQ_2 X0 c c+*]/id:557/depth:12`
0.706[zip.env] apply binary rule superposition_active
0.706[zip.env] apply binary rule superposition_passive
0.706[zip.env] apply binary rule ctx_narrow
0.706[zip.env] apply binary rule narrow_term_defs
0.706[zip.env] do unary inferences
0.706[zip.env] apply unary rule equality_resolution
0.706[zip.env] apply unary rule equality_factoring
0.706[zip.env] apply unary rule narrow_lit_defs
0.706[zip.env] apply unary rule ind_types.exhaustiveness
0.707[zip.env] apply unary rule ind_types.acyclicity
0.707[zip.env] apply unary rule avatar_check_empty
0.707[zip.env] apply generating rule avatar.lemmas (full: false)
0.707[zip.env] apply generating rule avatar_check_sat (full: false)
0.707[zip.avatar] SAT-solver reports "SAT"
0.707[zip.saturate] inferred new clauses: []
0.707[zip.sup] @[neg_reflect did not simplify the clause @]
0.707[zip.sup] @[neg_reflect did not simplify the clause @]
0.707[zip.saturate] ### step   529 ###
0.707[zip.saturate]
    given (529 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f (f (f b)))))+* ∨ cQ_2 X0 c b+*]/id:558/depth:12`
0.708[zip.env] apply binary rule superposition_active
0.708[zip.env] apply binary rule superposition_passive
0.708[zip.env] apply binary rule ctx_narrow
0.708[zip.env] apply binary rule narrow_term_defs
0.708[zip.env] do unary inferences
0.708[zip.env] apply unary rule equality_resolution
0.708[zip.env] apply unary rule equality_factoring
0.708[zip.env] apply unary rule narrow_lit_defs
0.708[zip.env] apply unary rule ind_types.exhaustiveness
0.708[zip.env] apply unary rule ind_types.acyclicity
0.708[zip.env] apply unary rule avatar_check_empty
0.708[zip.env] apply generating rule avatar.lemmas (full: false)
0.708[zip.env] apply generating rule avatar_check_sat (full: false)
0.708[zip.avatar] SAT-solver reports "SAT"
0.708[zip.saturate] inferred new clauses: []
0.708[zip.sup] @[neg_reflect did not simplify the clause @]
0.708[zip.sup] @[neg_reflect did not simplify the clause @]
0.709[zip.saturate] ### step   530 ###
0.709[zip.saturate]
    given (530 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) c (f (f (f (f (f a)))))+* ∨ cQ_2 X0 c a+*]/id:559/depth:12`
0.709[zip.env] apply binary rule superposition_active
0.709[zip.env] apply binary rule superposition_passive
0.709[zip.env] apply binary rule ctx_narrow
0.709[zip.env] apply binary rule narrow_term_defs
0.709[zip.env] do unary inferences
0.709[zip.env] apply unary rule equality_resolution
0.709[zip.env] apply unary rule equality_factoring
0.709[zip.env] apply unary rule narrow_lit_defs
0.709[zip.env] apply unary rule ind_types.exhaustiveness
0.709[zip.env] apply unary rule ind_types.acyclicity
0.709[zip.env] apply unary rule avatar_check_empty
0.709[zip.env] apply generating rule avatar.lemmas (full: false)
0.709[zip.env] apply generating rule avatar_check_sat (full: false)
0.709[zip.avatar] SAT-solver reports "SAT"
0.709[zip.saturate] inferred new clauses: []
0.709[zip.sup] @[neg_reflect did not simplify the clause @]
0.709[zip.sup] @[neg_reflect did not simplify the clause @]
0.710[zip.saturate] ### step   531 ###
0.710[zip.saturate]
    given (531 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11`
0.710[zip.env] apply binary rule superposition_active
0.710[zip.env] apply binary rule superposition_passive
0.710[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.710[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 c c X0+*]/id:560/depth:12
0.710[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.711[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) c (f (f (f (f (f d)))))+* ∨ cQ_2 c c X0+*]/id:561/depth:12
0.711[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.711[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f (f (f c)))))+* ∨ cQ_2 c c c+]/id:562/depth:12
0.711[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.711[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f (f (f b)))))+* ∨ cQ_2 c c b+]/id:563/depth:12
0.711[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c c X0+* ∨ 
        ¬cQ_1 (f c) c (f (f (f (f (f X1)))))*]/id:500/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.711[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) c (f (f (f (f (f a)))))+* ∨ cQ_2 c c a+]/id:564/depth:12
0.711[zip.env] apply binary rule ctx_narrow
0.711[zip.env] apply binary rule narrow_term_defs
0.712[zip.env] do unary inferences
0.712[zip.env] apply unary rule equality_resolution
0.712[zip.env] apply unary rule equality_factoring
0.712[zip.env] apply unary rule narrow_lit_defs
0.712[zip.env] apply unary rule ind_types.exhaustiveness
0.712[zip.env] apply unary rule ind_types.acyclicity
0.712[zip.env] apply unary rule avatar_check_empty
0.712[zip.env] apply generating rule avatar.lemmas (full: false)
0.712[zip.env] apply generating rule avatar_check_sat (full: false)
0.712[zip.avatar] SAT-solver reports "SAT"
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) c (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c c X0+*]/id:560/depth:12, 
       forall X0. [¬cQ_1 (f c) c (f (f (f (f (f d)))))+* ∨ cQ_2 c c X0+*]/id:561/depth:12, 
       [¬cQ_1 (f c) c (f (f (f (f (f c)))))+* ∨ cQ_2 c c c+]/id:562/depth:12, 
       [¬cQ_1 (f c) c (f (f (f (f (f b)))))+* ∨ cQ_2 c c b+]/id:563/depth:12, 
       [¬cQ_1 (f c) c (f (f (f (f (f a)))))+* ∨ cQ_2 c c a+]/id:564/depth:12]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.sup] @[neg_reflect did not simplify the clause @]
0.712[zip.saturate] ### step   532 ###
0.712[zip.saturate]
    given (532 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) c (f (f (f (f (f d)))))+* ∨ cQ_2 c c X0+*]/id:561/depth:12`
0.713[zip.env] apply binary rule superposition_active
0.713[zip.env] apply binary rule superposition_passive
0.713[zip.env] apply binary rule ctx_narrow
0.713[zip.env] apply binary rule narrow_term_defs
0.713[zip.env] do unary inferences
0.713[zip.env] apply unary rule equality_resolution
0.713[zip.env] apply unary rule equality_factoring
0.713[zip.env] apply unary rule narrow_lit_defs
0.713[zip.env] apply unary rule ind_types.exhaustiveness
0.713[zip.env] apply unary rule ind_types.acyclicity
0.713[zip.env] apply unary rule avatar_check_empty
0.713[zip.env] apply generating rule avatar.lemmas (full: false)
0.713[zip.env] apply generating rule avatar_check_sat (full: false)
0.713[zip.avatar] SAT-solver reports "SAT"
0.713[zip.saturate] inferred new clauses: []
0.713[zip.sup] @[neg_reflect did not simplify the clause @]
0.713[zip.sup] @[neg_reflect did not simplify the clause @]
0.713[zip.saturate] ### step   533 ###
0.713[zip.saturate]
    given (533 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f (f (f c)))))+* ∨ cQ_2 c c c+]/id:562/depth:12`
0.713[zip.env] apply binary rule superposition_active
0.713[zip.env] apply binary rule superposition_passive
0.713[zip.env] apply binary rule ctx_narrow
0.713[zip.env] apply binary rule narrow_term_defs
0.713[zip.env] do unary inferences
0.713[zip.env] apply unary rule equality_resolution
0.713[zip.env] apply unary rule equality_factoring
0.713[zip.env] apply unary rule narrow_lit_defs
0.713[zip.env] apply unary rule ind_types.exhaustiveness
0.713[zip.env] apply unary rule ind_types.acyclicity
0.713[zip.env] apply unary rule avatar_check_empty
0.713[zip.env] apply generating rule avatar.lemmas (full: false)
0.714[zip.env] apply generating rule avatar_check_sat (full: false)
0.714[zip.avatar] SAT-solver reports "SAT"
0.714[zip.saturate] inferred new clauses: []
0.714[zip.sup] @[neg_reflect did not simplify the clause @]
0.714[zip.sup] @[neg_reflect did not simplify the clause @]
0.714[zip.saturate] ### step   534 ###
0.714[zip.saturate]
    given (534 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f (f (f b)))))+* ∨ cQ_2 c c b+]/id:563/depth:12`
0.714[zip.env] apply binary rule superposition_active
0.714[zip.env] apply binary rule superposition_passive
0.714[zip.env] apply binary rule ctx_narrow
0.714[zip.env] apply binary rule narrow_term_defs
0.714[zip.env] do unary inferences
0.714[zip.env] apply unary rule equality_resolution
0.714[zip.env] apply unary rule equality_factoring
0.714[zip.env] apply unary rule narrow_lit_defs
0.714[zip.env] apply unary rule ind_types.exhaustiveness
0.714[zip.env] apply unary rule ind_types.acyclicity
0.714[zip.env] apply unary rule avatar_check_empty
0.714[zip.env] apply generating rule avatar.lemmas (full: false)
0.714[zip.env] apply generating rule avatar_check_sat (full: false)
0.714[zip.avatar] SAT-solver reports "SAT"
0.714[zip.saturate] inferred new clauses: []
0.714[zip.sup] @[neg_reflect did not simplify the clause @]
0.714[zip.sup] @[neg_reflect did not simplify the clause @]
0.714[zip.saturate] ### step   535 ###
0.714[zip.saturate]
    given (535 steps, penalty 1):
      `[¬cQ_1 (f c) c (f (f (f (f (f a)))))+* ∨ cQ_2 c c a+]/id:564/depth:12`
0.715[zip.env] apply binary rule superposition_active
0.715[zip.env] apply binary rule superposition_passive
0.715[zip.env] apply binary rule ctx_narrow
0.715[zip.env] apply binary rule narrow_term_defs
0.715[zip.env] do unary inferences
0.715[zip.env] apply unary rule equality_resolution
0.715[zip.env] apply unary rule equality_factoring
0.715[zip.env] apply unary rule narrow_lit_defs
0.715[zip.env] apply unary rule ind_types.exhaustiveness
0.715[zip.env] apply unary rule ind_types.acyclicity
0.715[zip.env] apply unary rule avatar_check_empty
0.715[zip.env] apply generating rule avatar.lemmas (full: false)
0.715[zip.env] apply generating rule avatar_check_sat (full: false)
0.715[zip.avatar] SAT-solver reports "SAT"
0.715[zip.saturate] inferred new clauses: []
0.715[zip.sup] @[neg_reflect did not simplify the clause @]
0.715[zip.sup] @[neg_reflect did not simplify the clause @]
0.715[zip.saturate] ### step   536 ###
0.715[zip.saturate]
    given (536 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11`
0.716[zip.env] apply binary rule superposition_active
0.716[zip.env] apply binary rule superposition_passive
0.716[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.716[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 b c X0+*]/id:565/depth:12
0.716[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.716[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) c (f (f (f (f (f d)))))+* ∨ cQ_2 b c X0+*]/id:566/depth:12
0.716[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.717[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f (f (f c)))))+* ∨ cQ_2 b c c+]/id:567/depth:12
0.717[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.717[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f (f (f b)))))+* ∨ cQ_2 b c b+]/id:568/depth:12
0.717[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b c X0+* ∨ 
        ¬cQ_1 (f b) c (f (f (f (f (f X1)))))*]/id:505/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.717[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) c (f (f (f (f (f a)))))+* ∨ cQ_2 b c a+]/id:569/depth:12
0.717[zip.env] apply binary rule ctx_narrow
0.717[zip.env] apply binary rule narrow_term_defs
0.717[zip.env] do unary inferences
0.717[zip.env] apply unary rule equality_resolution
0.717[zip.env] apply unary rule equality_factoring
0.717[zip.env] apply unary rule narrow_lit_defs
0.717[zip.env] apply unary rule ind_types.exhaustiveness
0.717[zip.env] apply unary rule ind_types.acyclicity
0.717[zip.env] apply unary rule avatar_check_empty
0.717[zip.env] apply generating rule avatar.lemmas (full: false)
0.717[zip.env] apply generating rule avatar_check_sat (full: false)
0.717[zip.avatar] SAT-solver reports "SAT"
0.717[zip.sup] @[neg_reflect did not simplify the clause @]
0.717[zip.sup] @[neg_reflect did not simplify the clause @]
0.717[zip.sup] @[neg_reflect did not simplify the clause @]
0.717[zip.sup] @[neg_reflect did not simplify the clause @]
0.717[zip.sup] @[neg_reflect did not simplify the clause @]
0.717[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) c (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b c X0+*]/id:565/depth:12, 
       forall X0. [¬cQ_1 (f b) c (f (f (f (f (f d)))))+* ∨ cQ_2 b c X0+*]/id:566/depth:12, 
       [¬cQ_1 (f b) c (f (f (f (f (f c)))))+* ∨ cQ_2 b c c+]/id:567/depth:12, 
       [¬cQ_1 (f b) c (f (f (f (f (f b)))))+* ∨ cQ_2 b c b+]/id:568/depth:12, 
       [¬cQ_1 (f b) c (f (f (f (f (f a)))))+* ∨ cQ_2 b c a+]/id:569/depth:12]
0.718[zip.sup] @[neg_reflect did not simplify the clause @]
0.718[zip.sup] @[neg_reflect did not simplify the clause @]
0.718[zip.saturate] ### step   537 ###
0.718[zip.saturate]
    given (537 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) c (f (f (f (f (f d)))))+* ∨ cQ_2 b c X0+*]/id:566/depth:12`
0.718[zip.env] apply binary rule superposition_active
0.718[zip.env] apply binary rule superposition_passive
0.718[zip.env] apply binary rule ctx_narrow
0.719[zip.env] apply binary rule narrow_term_defs
0.719[zip.env] do unary inferences
0.719[zip.env] apply unary rule equality_resolution
0.719[zip.env] apply unary rule equality_factoring
0.719[zip.env] apply unary rule narrow_lit_defs
0.719[zip.env] apply unary rule ind_types.exhaustiveness
0.719[zip.env] apply unary rule ind_types.acyclicity
0.719[zip.env] apply unary rule avatar_check_empty
0.719[zip.env] apply generating rule avatar.lemmas (full: false)
0.719[zip.env] apply generating rule avatar_check_sat (full: false)
0.719[zip.avatar] SAT-solver reports "SAT"
0.719[zip.saturate] inferred new clauses: []
0.719[zip.sup] @[neg_reflect did not simplify the clause @]
0.719[zip.sup] @[neg_reflect did not simplify the clause @]
0.719[zip.saturate] ### step   538 ###
0.719[zip.saturate]
    given (538 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f (f (f c)))))+* ∨ cQ_2 b c c+]/id:567/depth:12`
0.719[zip.env] apply binary rule superposition_active
0.719[zip.env] apply binary rule superposition_passive
0.719[zip.env] apply binary rule ctx_narrow
0.719[zip.env] apply binary rule narrow_term_defs
0.720[zip.env] do unary inferences
0.720[zip.env] apply unary rule equality_resolution
0.720[zip.env] apply unary rule equality_factoring
0.720[zip.env] apply unary rule narrow_lit_defs
0.720[zip.env] apply unary rule ind_types.exhaustiveness
0.720[zip.env] apply unary rule ind_types.acyclicity
0.720[zip.env] apply unary rule avatar_check_empty
0.720[zip.env] apply generating rule avatar.lemmas (full: false)
0.720[zip.env] apply generating rule avatar_check_sat (full: false)
0.720[zip.avatar] SAT-solver reports "SAT"
0.720[zip.saturate] inferred new clauses: []
0.720[zip.sup] @[neg_reflect did not simplify the clause @]
0.720[zip.sup] @[neg_reflect did not simplify the clause @]
0.720[zip.saturate] ### step   539 ###
0.720[zip.saturate]
    given (539 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f (f (f b)))))+* ∨ cQ_2 b c b+]/id:568/depth:12`
0.720[zip.env] apply binary rule superposition_active
0.720[zip.env] apply binary rule superposition_passive
0.720[zip.env] apply binary rule ctx_narrow
0.720[zip.env] apply binary rule narrow_term_defs
0.720[zip.env] do unary inferences
0.720[zip.env] apply unary rule equality_resolution
0.720[zip.env] apply unary rule equality_factoring
0.720[zip.env] apply unary rule narrow_lit_defs
0.720[zip.env] apply unary rule ind_types.exhaustiveness
0.720[zip.env] apply unary rule ind_types.acyclicity
0.720[zip.env] apply unary rule avatar_check_empty
0.720[zip.env] apply generating rule avatar.lemmas (full: false)
0.720[zip.env] apply generating rule avatar_check_sat (full: false)
0.720[zip.avatar] SAT-solver reports "SAT"
0.720[zip.saturate] inferred new clauses: []
0.720[zip.sup] @[neg_reflect did not simplify the clause @]
0.720[zip.sup] @[neg_reflect did not simplify the clause @]
0.721[zip.saturate] ### step   540 ###
0.721[zip.saturate]
    given (540 steps, penalty 1):
      `[¬cQ_1 (f b) c (f (f (f (f (f a)))))+* ∨ cQ_2 b c a+]/id:569/depth:12`
0.721[zip.env] apply binary rule superposition_active
0.721[zip.env] apply binary rule superposition_passive
0.721[zip.env] apply binary rule ctx_narrow
0.721[zip.env] apply binary rule narrow_term_defs
0.721[zip.env] do unary inferences
0.721[zip.env] apply unary rule equality_resolution
0.721[zip.env] apply unary rule equality_factoring
0.721[zip.env] apply unary rule narrow_lit_defs
0.721[zip.env] apply unary rule ind_types.exhaustiveness
0.721[zip.env] apply unary rule ind_types.acyclicity
0.721[zip.env] apply unary rule avatar_check_empty
0.721[zip.env] apply generating rule avatar.lemmas (full: false)
0.721[zip.env] apply generating rule avatar_check_sat (full: false)
0.721[zip.avatar] SAT-solver reports "SAT"
0.721[zip.saturate] inferred new clauses: []
0.721[zip.sup] @[neg_reflect did not simplify the clause @]
0.721[zip.sup] @[neg_reflect did not simplify the clause @]
0.722[zip.saturate] ### step   541 ###
0.722[zip.saturate]
    given (541 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11`
0.722[zip.env] apply binary rule superposition_active
0.722[zip.env] apply binary rule superposition_passive
0.722[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.722[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 a c X0+*]/id:570/depth:12
0.722[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.723[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) c (f (f (f (f (f d)))))+* ∨ cQ_2 a c X0+*]/id:571/depth:12
0.723[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.723[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f (f (f c)))))+* ∨ cQ_2 a c c+]/id:572/depth:12
0.723[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.723[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f (f (f b)))))+* ∨ cQ_2 a c b+]/id:573/depth:12
0.723[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a c X0+* ∨ 
        ¬cQ_1 (f a) c (f (f (f (f (f X1)))))*]/id:510/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.723[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) c (f (f (f (f (f a)))))+* ∨ cQ_2 a c a+]/id:574/depth:12
0.724[zip.env] apply binary rule ctx_narrow
0.724[zip.env] apply binary rule narrow_term_defs
0.724[zip.env] do unary inferences
0.724[zip.env] apply unary rule equality_resolution
0.724[zip.env] apply unary rule equality_factoring
0.724[zip.env] apply unary rule narrow_lit_defs
0.724[zip.env] apply unary rule ind_types.exhaustiveness
0.724[zip.env] apply unary rule ind_types.acyclicity
0.724[zip.env] apply unary rule avatar_check_empty
0.724[zip.env] apply generating rule avatar.lemmas (full: false)
0.724[zip.env] apply generating rule avatar_check_sat (full: false)
0.724[zip.avatar] SAT-solver reports "SAT"
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) c (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a c X0+*]/id:570/depth:12, 
       forall X0. [¬cQ_1 (f a) c (f (f (f (f (f d)))))+* ∨ cQ_2 a c X0+*]/id:571/depth:12, 
       [¬cQ_1 (f a) c (f (f (f (f (f c)))))+* ∨ cQ_2 a c c+]/id:572/depth:12, 
       [¬cQ_1 (f a) c (f (f (f (f (f b)))))+* ∨ cQ_2 a c b+]/id:573/depth:12, 
       [¬cQ_1 (f a) c (f (f (f (f (f a)))))+* ∨ cQ_2 a c a+]/id:574/depth:12]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.724[zip.sup] @[neg_reflect did not simplify the clause @]
0.725[zip.saturate] ### step   542 ###
0.725[zip.saturate]
    given (542 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) c (f (f (f (f (f d)))))+* ∨ cQ_2 a c X0+*]/id:571/depth:12`
0.725[zip.env] apply binary rule superposition_active
0.725[zip.env] apply binary rule superposition_passive
0.725[zip.env] apply binary rule ctx_narrow
0.725[zip.env] apply binary rule narrow_term_defs
0.725[zip.env] do unary inferences
0.725[zip.env] apply unary rule equality_resolution
0.725[zip.env] apply unary rule equality_factoring
0.725[zip.env] apply unary rule narrow_lit_defs
0.725[zip.env] apply unary rule ind_types.exhaustiveness
0.725[zip.env] apply unary rule ind_types.acyclicity
0.725[zip.env] apply unary rule avatar_check_empty
0.725[zip.env] apply generating rule avatar.lemmas (full: false)
0.725[zip.env] apply generating rule avatar_check_sat (full: false)
0.725[zip.avatar] SAT-solver reports "SAT"
0.725[zip.saturate] inferred new clauses: []
0.725[zip.sup] @[neg_reflect did not simplify the clause @]
0.725[zip.sup] @[neg_reflect did not simplify the clause @]
0.725[zip.saturate] ### step   543 ###
0.725[zip.saturate]
    given (543 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f (f (f c)))))+* ∨ cQ_2 a c c+]/id:572/depth:12`
0.725[zip.env] apply binary rule superposition_active
0.725[zip.env] apply binary rule superposition_passive
0.725[zip.env] apply binary rule ctx_narrow
0.725[zip.env] apply binary rule narrow_term_defs
0.726[zip.env] do unary inferences
0.726[zip.env] apply unary rule equality_resolution
0.726[zip.env] apply unary rule equality_factoring
0.726[zip.env] apply unary rule narrow_lit_defs
0.726[zip.env] apply unary rule ind_types.exhaustiveness
0.726[zip.env] apply unary rule ind_types.acyclicity
0.726[zip.env] apply unary rule avatar_check_empty
0.726[zip.env] apply generating rule avatar.lemmas (full: false)
0.726[zip.env] apply generating rule avatar_check_sat (full: false)
0.726[zip.avatar] SAT-solver reports "SAT"
0.726[zip.saturate] inferred new clauses: []
0.726[zip.sup] @[neg_reflect did not simplify the clause @]
0.726[zip.sup] @[neg_reflect did not simplify the clause @]
0.726[zip.saturate] ### step   544 ###
0.726[zip.saturate]
    given (544 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f (f (f b)))))+* ∨ cQ_2 a c b+]/id:573/depth:12`
0.726[zip.env] apply binary rule superposition_active
0.726[zip.env] apply binary rule superposition_passive
0.726[zip.env] apply binary rule ctx_narrow
0.726[zip.env] apply binary rule narrow_term_defs
0.726[zip.env] do unary inferences
0.726[zip.env] apply unary rule equality_resolution
0.726[zip.env] apply unary rule equality_factoring
0.726[zip.env] apply unary rule narrow_lit_defs
0.726[zip.env] apply unary rule ind_types.exhaustiveness
0.726[zip.env] apply unary rule ind_types.acyclicity
0.726[zip.env] apply unary rule avatar_check_empty
0.726[zip.env] apply generating rule avatar.lemmas (full: false)
0.726[zip.env] apply generating rule avatar_check_sat (full: false)
0.726[zip.avatar] SAT-solver reports "SAT"
0.726[zip.saturate] inferred new clauses: []
0.726[zip.sup] @[neg_reflect did not simplify the clause @]
0.726[zip.sup] @[neg_reflect did not simplify the clause @]
0.727[zip.saturate] ### step   545 ###
0.727[zip.saturate]
    given (545 steps, penalty 1):
      `[¬cQ_1 (f a) c (f (f (f (f (f a)))))+* ∨ cQ_2 a c a+]/id:574/depth:12`
0.727[zip.env] apply binary rule superposition_active
0.727[zip.env] apply binary rule superposition_passive
0.727[zip.env] apply binary rule ctx_narrow
0.727[zip.env] apply binary rule narrow_term_defs
0.727[zip.env] do unary inferences
0.727[zip.env] apply unary rule equality_resolution
0.727[zip.env] apply unary rule equality_factoring
0.727[zip.env] apply unary rule narrow_lit_defs
0.727[zip.env] apply unary rule ind_types.exhaustiveness
0.727[zip.env] apply unary rule ind_types.acyclicity
0.727[zip.env] apply unary rule avatar_check_empty
0.727[zip.env] apply generating rule avatar.lemmas (full: false)
0.727[zip.env] apply generating rule avatar_check_sat (full: false)
0.727[zip.avatar] SAT-solver reports "SAT"
0.727[zip.saturate] inferred new clauses: []
0.727[zip.sup] @[neg_reflect did not simplify the clause @]
0.727[zip.sup] @[neg_reflect did not simplify the clause @]
0.727[zip.saturate] ### step   546 ###
0.727[zip.saturate]
    given (546 steps, penalty 1):
      `forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11`
0.728[zip.env] apply binary rule superposition_active
0.728[zip.env] apply binary rule superposition_passive
0.728[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.728[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 X2 b X0+*]/id:575/depth:12
0.728[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.728[zip.sup]
    ... ok, conclusion
    forall X0 X1. [¬cQ_1 (f d) b (f (f (f (f (f d)))))+* ∨ cQ_2 X1 b X0+*]/id:576/depth:12
0.728[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.728[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f (f (f c)))))+* ∨ cQ_2 X0 b c+*]/id:577/depth:12
0.729[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.729[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f (f (f b)))))+* ∨ cQ_2 X0 b b+*]/id:578/depth:12
0.729[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.729[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f d) b (f (f (f (f (f a)))))+* ∨ cQ_2 X0 b a+*]/id:579/depth:12
0.729[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ cQ_2 X2 b X0+* ∨ 
        ¬cQ_1 (f d) b (f (f (f (f (f X1)))))*]/id:515/depth:11[0]
         passive_lit=cQ_2 X2 b X0 p=1.←.ε)
      with subst={X2[0] → a[1], X0[1] → X0[0]}.

0.729[zip.sup] will yield a tautology
0.729[zip.sup] ... cancel, will yield a tautology
0.729[zip.env] apply binary rule ctx_narrow
0.729[zip.env] apply binary rule narrow_term_defs
0.729[zip.env] do unary inferences
0.729[zip.env] apply unary rule equality_resolution
0.729[zip.env] apply unary rule equality_factoring
0.729[zip.env] apply unary rule narrow_lit_defs
0.729[zip.env] apply unary rule ind_types.exhaustiveness
0.729[zip.env] apply unary rule ind_types.acyclicity
0.729[zip.env] apply unary rule avatar_check_empty
0.729[zip.env] apply generating rule avatar.lemmas (full: false)
0.729[zip.env] apply generating rule avatar_check_sat (full: false)
0.729[zip.avatar] SAT-solver reports "SAT"
0.729[zip.sup] @[neg_reflect did not simplify the clause @]
0.729[zip.sup] @[neg_reflect did not simplify the clause @]
0.729[zip.sup] @[neg_reflect did not simplify the clause @]
0.730[zip.sup] @[neg_reflect did not simplify the clause @]
0.730[zip.sup] @[neg_reflect did not simplify the clause @]
0.730[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f d) b (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 X2 b X0+*]/id:575/depth:12, 
       forall X0 X1.
       [¬cQ_1 (f d) b (f (f (f (f (f d)))))+* ∨ cQ_2 X1 b X0+*]/id:576/depth:12, 
       forall X0. [¬cQ_1 (f d) b (f (f (f (f (f c)))))+* ∨ cQ_2 X0 b c+*]/id:577/depth:12, 
       forall X0. [¬cQ_1 (f d) b (f (f (f (f (f b)))))+* ∨ cQ_2 X0 b b+*]/id:578/depth:12, 
       forall X0. [¬cQ_1 (f d) b (f (f (f (f (f a)))))+* ∨ cQ_2 X0 b a+*]/id:579/depth:12]
0.730[zip.sup] @[neg_reflect did not simplify the clause @]
0.730[zip.sup] @[neg_reflect did not simplify the clause @]
0.730[zip.saturate] ### step   547 ###
0.730[zip.saturate]
    given (547 steps, penalty 1):
      `forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1`
0.730[zip.env] apply binary rule superposition_active
0.730[zip.env] apply binary rule superposition_passive
0.730[zip.sup]
    sup, kind sup
      (forall X10 X11. [cP_2 (f X10) X11* ∨ ¬cP_2 X10 X11]/id:11/depth:0[1]
         s=cP_2 (f X10) X11 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1[0]
         passive_lit=¬cP_2 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X10[1], X11[1] → X0[0]}.

0.731[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4 X5.
    [¬cP_2 X1 X0+* ∨ ¬cP_2 (f X3) X2* ∨ ¬cQ_2 X3 (f X1) X4* ∨ 
     ¬cP_2 (f X4) X5* ∨ cQ_3 X2 X0 X5+*]/id:580/depth:2
0.731[zip.sup]
    sup, kind sup
      (forall X9. [cP_2 d X9*]/id:10/depth:0[1] s=cP_2 d X9 t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1[0]
         passive_lit=¬cP_2 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X9[1] → X0[0]}.

0.731[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3 X4.
    [¬cP_2 (f X2) X1+* ∨ ¬cQ_2 X2 d X3* ∨ ¬cP_2 (f X3) X4* ∨ 
     cQ_3 X1 X0 X4+*]/id:581/depth:2
0.731[zip.sup]
    sup, kind sup ([cP_2 c c*]/id:9/depth:0[1] s=cP_2 c c t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1[0]
         passive_lit=¬cP_2 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.732[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 c X2* ∨ ¬cP_2 (f X2) X3* ∨ 
     cQ_3 X0 c X3+*]/id:582/depth:2
0.732[zip.sup]
    sup, kind sup ([cP_2 b b*]/id:8/depth:0[1] s=cP_2 b b t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1[0]
         passive_lit=¬cP_2 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.732[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 b X2* ∨ ¬cP_2 (f X2) X3* ∨ 
     cQ_3 X0 b X3+*]/id:583/depth:2
0.733[zip.sup]
    sup, kind sup ([cP_2 a a*]/id:7/depth:0[1] s=cP_2 a a t=true)
      (forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ cQ_3 X3 X0 X2+* ∨ ¬cP_2 (f X4) X2* ∨ 
        ¬cQ_2 X5 X1 X4* ∨ ¬cP_2 (f X5) X3*]/id:89/depth:1[0]
         passive_lit=¬cP_2 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.733[zip.sup]
    ... ok, conclusion
    forall X0 X1 X2 X3.
    [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 a X2* ∨ ¬cP_2 (f X2) X3* ∨ 
     cQ_3 X0 a X3+*]/id:584/depth:2
0.733[zip.env] apply binary rule ctx_narrow
0.733[zip.env] apply binary rule narrow_term_defs
0.733[zip.env] do unary inferences
0.733[zip.env] apply unary rule equality_resolution
0.733[zip.env] apply unary rule equality_factoring
0.734[zip.env] apply unary rule narrow_lit_defs
0.734[zip.env] apply unary rule ind_types.exhaustiveness
0.734[zip.env] apply unary rule ind_types.acyclicity
0.734[zip.env] apply unary rule avatar_check_empty
0.734[zip.env] apply generating rule avatar.lemmas (full: false)
0.734[zip.env] apply generating rule avatar_check_sat (full: false)
0.734[zip.avatar] SAT-solver reports "SAT"
0.734[zip.sup] @[neg_reflect did not simplify the clause @]
0.734[zip.sup] @[neg_reflect did not simplify the clause @]
0.734[zip.sup] @[neg_reflect did not simplify the clause @]
0.734[zip.sup] @[neg_reflect did not simplify the clause @]
0.734[zip.sup] @[neg_reflect did not simplify the clause @]
0.734[zip.saturate]
    inferred new clauses:
      [forall X0 X1 X2 X3 X4 X5.
       [¬cP_2 X1 X0+* ∨ ¬cP_2 (f X3) X2* ∨ ¬cQ_2 X3 (f X1) X4* ∨ 
        ¬cP_2 (f X4) X5* ∨ cQ_3 X2 X0 X5+*]/id:580/depth:2, 
       forall X0 X1 X2 X3 X4.
       [¬cP_2 (f X2) X1+* ∨ ¬cQ_2 X2 d X3* ∨ ¬cP_2 (f X3) X4* ∨ 
        cQ_3 X1 X0 X4+*]/id:581/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 c X2* ∨ ¬cP_2 (f X2) X3* ∨ 
        cQ_3 X0 c X3+*]/id:582/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 b X2* ∨ ¬cP_2 (f X2) X3* ∨ 
        cQ_3 X0 b X3+*]/id:583/depth:2, 
       forall X0 X1 X2 X3.
       [¬cP_2 (f X1) X0+* ∨ ¬cQ_2 X1 a X2* ∨ ¬cP_2 (f X2) X3* ∨ 
        cQ_3 X0 a X3+*]/id:584/depth:2]
0.735[zip.sup] @[neg_reflect did not simplify the clause @]
0.735[zip.sup] @[neg_reflect did not simplify the clause @]
0.735[zip.saturate] ### step   548 ###
0.735[zip.saturate]
    given (548 steps, penalty 1):
      `forall X0 X1.
       [¬cQ_1 (f d) b (f (f (f (f (f d)))))+* ∨ cQ_2 X1 b X0+*]/id:576/depth:12`
0.736[zip.env] apply binary rule superposition_active
0.736[zip.env] apply binary rule superposition_passive
0.736[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cQ_1 (f d) b (f (f (f (f (f d)))))+* ∨ cQ_2 X1 b X0+*]/id:576/depth:12[0]
         passive_lit=cQ_2 X1 b X0 p=1.←.ε)
      with subst={X1[0] → a[1], X0[1] → X0[0]}.

0.736[zip.sup] will yield a tautology
0.736[zip.sup] ... cancel, will yield a tautology
0.736[zip.env] apply binary rule ctx_narrow
0.736[zip.env] apply binary rule narrow_term_defs
0.736[zip.env] do unary inferences
0.736[zip.env] apply unary rule equality_resolution
0.736[zip.env] apply unary rule equality_factoring
0.736[zip.env] apply unary rule narrow_lit_defs
0.736[zip.env] apply unary rule ind_types.exhaustiveness
0.736[zip.env] apply unary rule ind_types.acyclicity
0.736[zip.env] apply unary rule avatar_check_empty
0.736[zip.env] apply generating rule avatar.lemmas (full: false)
0.736[zip.env] apply generating rule avatar_check_sat (full: false)
0.736[zip.avatar] SAT-solver reports "SAT"
0.736[zip.saturate] inferred new clauses: []
0.736[zip.sup] @[neg_reflect did not simplify the clause @]
0.736[zip.sup] @[neg_reflect did not simplify the clause @]
0.737[zip.saturate] ### step   549 ###
0.737[zip.saturate]
    given (549 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f (f (f c)))))+* ∨ cQ_2 X0 b c+*]/id:577/depth:12`
0.737[zip.env] apply binary rule superposition_active
0.737[zip.env] apply binary rule superposition_passive
0.737[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f (f (f c)))))+* ∨ cQ_2 X0 b c+*]/id:577/depth:12[0]
         passive_lit=cQ_2 X0 b c p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → c[0]}.

0.737[zip.sup] will yield a tautology
0.737[zip.sup] ... cancel, will yield a tautology
0.737[zip.env] apply binary rule ctx_narrow
0.737[zip.env] apply binary rule narrow_term_defs
0.737[zip.env] do unary inferences
0.737[zip.env] apply unary rule equality_resolution
0.737[zip.env] apply unary rule equality_factoring
0.737[zip.env] apply unary rule narrow_lit_defs
0.737[zip.env] apply unary rule ind_types.exhaustiveness
0.738[zip.env] apply unary rule ind_types.acyclicity
0.738[zip.env] apply unary rule avatar_check_empty
0.738[zip.env] apply generating rule avatar.lemmas (full: false)
0.738[zip.env] apply generating rule avatar_check_sat (full: false)
0.738[zip.avatar] SAT-solver reports "SAT"
0.738[zip.saturate] inferred new clauses: []
0.738[zip.sup] @[neg_reflect did not simplify the clause @]
0.738[zip.sup] @[neg_reflect did not simplify the clause @]
0.738[zip.saturate] ### step   550 ###
0.738[zip.saturate]
    given (550 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f (f (f b)))))+* ∨ cQ_2 X0 b b+*]/id:578/depth:12`
0.738[zip.env] apply binary rule superposition_active
0.738[zip.env] apply binary rule superposition_passive
0.738[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f (f (f b)))))+* ∨ cQ_2 X0 b b+*]/id:578/depth:12[0]
         passive_lit=cQ_2 X0 b b p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → b[0]}.

0.739[zip.sup] will yield a tautology
0.739[zip.sup] ... cancel, will yield a tautology
0.739[zip.env] apply binary rule ctx_narrow
0.739[zip.env] apply binary rule narrow_term_defs
0.739[zip.env] do unary inferences
0.739[zip.env] apply unary rule equality_resolution
0.739[zip.env] apply unary rule equality_factoring
0.739[zip.env] apply unary rule narrow_lit_defs
0.739[zip.env] apply unary rule ind_types.exhaustiveness
0.739[zip.env] apply unary rule ind_types.acyclicity
0.739[zip.env] apply unary rule avatar_check_empty
0.739[zip.env] apply generating rule avatar.lemmas (full: false)
0.739[zip.env] apply generating rule avatar_check_sat (full: false)
0.739[zip.avatar] SAT-solver reports "SAT"
0.739[zip.saturate] inferred new clauses: []
0.739[zip.sup] @[neg_reflect did not simplify the clause @]
0.739[zip.sup] @[neg_reflect did not simplify the clause @]
0.739[zip.saturate] ### step   551 ###
0.739[zip.saturate]
    given (551 steps, penalty 1):
      `forall X0. [¬cQ_1 (f d) b (f (f (f (f (f a)))))+* ∨ cQ_2 X0 b a+*]/id:579/depth:12`
0.739[zip.env] apply binary rule superposition_active
0.739[zip.env] apply binary rule superposition_passive
0.740[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f d) b (f (f (f (f (f a)))))+* ∨ cQ_2 X0 b a+*]/id:579/depth:12[0]
         passive_lit=cQ_2 X0 b a p=1.←.ε)
      with subst={X0[0] → a[1], X0[1] → a[0]}.

0.740[zip.sup] will yield a tautology
0.740[zip.sup] ... cancel, will yield a tautology
0.740[zip.env] apply binary rule ctx_narrow
0.740[zip.env] apply binary rule narrow_term_defs
0.740[zip.env] do unary inferences
0.740[zip.env] apply unary rule equality_resolution
0.740[zip.env] apply unary rule equality_factoring
0.740[zip.env] apply unary rule narrow_lit_defs
0.740[zip.env] apply unary rule ind_types.exhaustiveness
0.740[zip.env] apply unary rule ind_types.acyclicity
0.740[zip.env] apply unary rule avatar_check_empty
0.740[zip.env] apply generating rule avatar.lemmas (full: false)
0.740[zip.env] apply generating rule avatar_check_sat (full: false)
0.740[zip.avatar] SAT-solver reports "SAT"
0.740[zip.saturate] inferred new clauses: []
0.740[zip.sup] @[neg_reflect did not simplify the clause @]
0.740[zip.sup] @[neg_reflect did not simplify the clause @]
0.741[zip.saturate] ### step   552 ###
0.741[zip.saturate]
    given (552 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11`
0.741[zip.env] apply binary rule superposition_active
0.741[zip.env] apply binary rule superposition_passive
0.741[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.741[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 c b X0+*]/id:585/depth:12
0.742[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.742[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f c) b (f (f (f (f (f d)))))+* ∨ cQ_2 c b X0+*]/id:586/depth:12
0.742[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.742[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f (f (f c)))))+* ∨ cQ_2 c b c+]/id:587/depth:12
0.742[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.742[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f (f (f b)))))+* ∨ cQ_2 c b b+]/id:588/depth:12
0.743[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 c b X0+* ∨ 
        ¬cQ_1 (f c) b (f (f (f (f (f X1)))))*]/id:520/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.743[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f c) b (f (f (f (f (f a)))))+* ∨ cQ_2 c b a+]/id:589/depth:12
0.743[zip.env] apply binary rule ctx_narrow
0.743[zip.env] apply binary rule narrow_term_defs
0.743[zip.env] do unary inferences
0.743[zip.env] apply unary rule equality_resolution
0.743[zip.env] apply unary rule equality_factoring
0.743[zip.env] apply unary rule narrow_lit_defs
0.743[zip.env] apply unary rule ind_types.exhaustiveness
0.743[zip.env] apply unary rule ind_types.acyclicity
0.743[zip.env] apply unary rule avatar_check_empty
0.743[zip.env] apply generating rule avatar.lemmas (full: false)
0.743[zip.env] apply generating rule avatar_check_sat (full: false)
0.743[zip.avatar] SAT-solver reports "SAT"
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.743[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f c) b (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 c b X0+*]/id:585/depth:12, 
       forall X0. [¬cQ_1 (f c) b (f (f (f (f (f d)))))+* ∨ cQ_2 c b X0+*]/id:586/depth:12, 
       [¬cQ_1 (f c) b (f (f (f (f (f c)))))+* ∨ cQ_2 c b c+]/id:587/depth:12, 
       [¬cQ_1 (f c) b (f (f (f (f (f b)))))+* ∨ cQ_2 c b b+]/id:588/depth:12, 
       [¬cQ_1 (f c) b (f (f (f (f (f a)))))+* ∨ cQ_2 c b a+]/id:589/depth:12]
0.743[zip.sup] @[neg_reflect did not simplify the clause @]
0.744[zip.sup] @[neg_reflect did not simplify the clause @]
0.744[zip.saturate] ### step   553 ###
0.744[zip.saturate]
    given (553 steps, penalty 1):
      `forall X0. [¬cQ_1 (f c) b (f (f (f (f (f d)))))+* ∨ cQ_2 c b X0+*]/id:586/depth:12`
0.744[zip.env] apply binary rule superposition_active
0.744[zip.env] apply binary rule superposition_passive
0.744[zip.env] apply binary rule ctx_narrow
0.744[zip.env] apply binary rule narrow_term_defs
0.744[zip.env] do unary inferences
0.744[zip.env] apply unary rule equality_resolution
0.744[zip.env] apply unary rule equality_factoring
0.744[zip.env] apply unary rule narrow_lit_defs
0.744[zip.env] apply unary rule ind_types.exhaustiveness
0.744[zip.env] apply unary rule ind_types.acyclicity
0.744[zip.env] apply unary rule avatar_check_empty
0.744[zip.env] apply generating rule avatar.lemmas (full: false)
0.744[zip.env] apply generating rule avatar_check_sat (full: false)
0.744[zip.avatar] SAT-solver reports "SAT"
0.744[zip.saturate] inferred new clauses: []
0.744[zip.sup] @[neg_reflect did not simplify the clause @]
0.744[zip.sup] @[neg_reflect did not simplify the clause @]
0.744[zip.saturate] ### step   554 ###
0.744[zip.saturate]
    given (554 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f (f (f c)))))+* ∨ cQ_2 c b c+]/id:587/depth:12`
0.745[zip.env] apply binary rule superposition_active
0.745[zip.env] apply binary rule superposition_passive
0.745[zip.env] apply binary rule ctx_narrow
0.745[zip.env] apply binary rule narrow_term_defs
0.745[zip.env] do unary inferences
0.745[zip.env] apply unary rule equality_resolution
0.745[zip.env] apply unary rule equality_factoring
0.745[zip.env] apply unary rule narrow_lit_defs
0.745[zip.env] apply unary rule ind_types.exhaustiveness
0.745[zip.env] apply unary rule ind_types.acyclicity
0.745[zip.env] apply unary rule avatar_check_empty
0.745[zip.env] apply generating rule avatar.lemmas (full: false)
0.745[zip.env] apply generating rule avatar_check_sat (full: false)
0.745[zip.avatar] SAT-solver reports "SAT"
0.745[zip.saturate] inferred new clauses: []
0.745[zip.sup] @[neg_reflect did not simplify the clause @]
0.745[zip.sup] @[neg_reflect did not simplify the clause @]
0.745[zip.saturate] ### step   555 ###
0.745[zip.saturate]
    given (555 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f (f (f b)))))+* ∨ cQ_2 c b b+]/id:588/depth:12`
0.745[zip.env] apply binary rule superposition_active
0.745[zip.env] apply binary rule superposition_passive
0.745[zip.env] apply binary rule ctx_narrow
0.745[zip.env] apply binary rule narrow_term_defs
0.745[zip.env] do unary inferences
0.745[zip.env] apply unary rule equality_resolution
0.745[zip.env] apply unary rule equality_factoring
0.745[zip.env] apply unary rule narrow_lit_defs
0.745[zip.env] apply unary rule ind_types.exhaustiveness
0.745[zip.env] apply unary rule ind_types.acyclicity
0.745[zip.env] apply unary rule avatar_check_empty
0.745[zip.env] apply generating rule avatar.lemmas (full: false)
0.745[zip.env] apply generating rule avatar_check_sat (full: false)
0.745[zip.avatar] SAT-solver reports "SAT"
0.745[zip.saturate] inferred new clauses: []
0.746[zip.sup] @[neg_reflect did not simplify the clause @]
0.746[zip.sup] @[neg_reflect did not simplify the clause @]
0.746[zip.saturate] ### step   556 ###
0.746[zip.saturate]
    given (556 steps, penalty 1):
      `[¬cQ_1 (f c) b (f (f (f (f (f a)))))+* ∨ cQ_2 c b a+]/id:589/depth:12`
0.746[zip.env] apply binary rule superposition_active
0.746[zip.env] apply binary rule superposition_passive
0.746[zip.env] apply binary rule ctx_narrow
0.746[zip.env] apply binary rule narrow_term_defs
0.746[zip.env] do unary inferences
0.746[zip.env] apply unary rule equality_resolution
0.746[zip.env] apply unary rule equality_factoring
0.746[zip.env] apply unary rule narrow_lit_defs
0.746[zip.env] apply unary rule ind_types.exhaustiveness
0.746[zip.env] apply unary rule ind_types.acyclicity
0.746[zip.env] apply unary rule avatar_check_empty
0.746[zip.env] apply generating rule avatar.lemmas (full: false)
0.746[zip.env] apply generating rule avatar_check_sat (full: false)
0.746[zip.avatar] SAT-solver reports "SAT"
0.746[zip.saturate] inferred new clauses: []
0.747[zip.sup] @[neg_reflect did not simplify the clause @]
0.747[zip.sup] @[neg_reflect did not simplify the clause @]
0.747[zip.saturate] ### step   557 ###
0.747[zip.saturate]
    given (557 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11`
0.748[zip.env] apply binary rule superposition_active
0.748[zip.env] apply binary rule superposition_passive
0.748[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.748[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 b b X0+*]/id:590/depth:12
0.748[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.749[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f b) b (f (f (f (f (f d)))))+* ∨ cQ_2 b b X0+*]/id:591/depth:12
0.749[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.749[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f (f (f c)))))+* ∨ cQ_2 b b c+]/id:592/depth:12
0.749[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.749[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f (f (f b)))))+* ∨ cQ_2 b b b+]/id:593/depth:12
0.749[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 b b X0+* ∨ 
        ¬cQ_1 (f b) b (f (f (f (f (f X1)))))*]/id:525/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.750[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f b) b (f (f (f (f (f a)))))+* ∨ cQ_2 b b a+]/id:594/depth:12
0.750[zip.env] apply binary rule ctx_narrow
0.750[zip.env] apply binary rule narrow_term_defs
0.750[zip.env] do unary inferences
0.750[zip.env] apply unary rule equality_resolution
0.750[zip.env] apply unary rule equality_factoring
0.750[zip.env] apply unary rule narrow_lit_defs
0.750[zip.env] apply unary rule ind_types.exhaustiveness
0.750[zip.env] apply unary rule ind_types.acyclicity
0.750[zip.env] apply unary rule avatar_check_empty
0.750[zip.env] apply generating rule avatar.lemmas (full: false)
0.750[zip.env] apply generating rule avatar_check_sat (full: false)
0.750[zip.avatar] SAT-solver reports "SAT"
0.750[zip.sup] @[neg_reflect did not simplify the clause @]
0.750[zip.sup] @[neg_reflect did not simplify the clause @]
0.751[zip.sup] @[neg_reflect did not simplify the clause @]
0.751[zip.sup] @[neg_reflect did not simplify the clause @]
0.751[zip.sup] @[neg_reflect did not simplify the clause @]
0.751[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f b) b (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 b b X0+*]/id:590/depth:12, 
       forall X0. [¬cQ_1 (f b) b (f (f (f (f (f d)))))+* ∨ cQ_2 b b X0+*]/id:591/depth:12, 
       [¬cQ_1 (f b) b (f (f (f (f (f c)))))+* ∨ cQ_2 b b c+]/id:592/depth:12, 
       [¬cQ_1 (f b) b (f (f (f (f (f b)))))+* ∨ cQ_2 b b b+]/id:593/depth:12, 
       [¬cQ_1 (f b) b (f (f (f (f (f a)))))+* ∨ cQ_2 b b a+]/id:594/depth:12]
0.752[zip.sup] @[neg_reflect did not simplify the clause @]
0.752[zip.sup] @[neg_reflect did not simplify the clause @]
0.752[zip.saturate] ### step   558 ###
0.752[zip.saturate]
    given (558 steps, penalty 1):
      `forall X0. [¬cQ_1 (f b) b (f (f (f (f (f d)))))+* ∨ cQ_2 b b X0+*]/id:591/depth:12`
0.753[zip.env] apply binary rule superposition_active
0.753[zip.env] apply binary rule superposition_passive
0.753[zip.env] apply binary rule ctx_narrow
0.753[zip.env] apply binary rule narrow_term_defs
0.753[zip.env] do unary inferences
0.753[zip.env] apply unary rule equality_resolution
0.753[zip.env] apply unary rule equality_factoring
0.753[zip.env] apply unary rule narrow_lit_defs
0.753[zip.env] apply unary rule ind_types.exhaustiveness
0.753[zip.env] apply unary rule ind_types.acyclicity
0.753[zip.env] apply unary rule avatar_check_empty
0.753[zip.env] apply generating rule avatar.lemmas (full: false)
0.753[zip.env] apply generating rule avatar_check_sat (full: false)
0.753[zip.avatar] SAT-solver reports "SAT"
0.753[zip.saturate] inferred new clauses: []
0.753[zip.sup] @[neg_reflect did not simplify the clause @]
0.753[zip.sup] @[neg_reflect did not simplify the clause @]
0.754[zip.saturate] ### step   559 ###
0.754[zip.saturate]
    given (559 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f (f (f c)))))+* ∨ cQ_2 b b c+]/id:592/depth:12`
0.754[zip.env] apply binary rule superposition_active
0.754[zip.env] apply binary rule superposition_passive
0.754[zip.env] apply binary rule ctx_narrow
0.754[zip.env] apply binary rule narrow_term_defs
0.754[zip.env] do unary inferences
0.754[zip.env] apply unary rule equality_resolution
0.754[zip.env] apply unary rule equality_factoring
0.754[zip.env] apply unary rule narrow_lit_defs
0.754[zip.env] apply unary rule ind_types.exhaustiveness
0.754[zip.env] apply unary rule ind_types.acyclicity
0.754[zip.env] apply unary rule avatar_check_empty
0.754[zip.env] apply generating rule avatar.lemmas (full: false)
0.754[zip.env] apply generating rule avatar_check_sat (full: false)
0.754[zip.avatar] SAT-solver reports "SAT"
0.754[zip.saturate] inferred new clauses: []
0.754[zip.sup] @[neg_reflect did not simplify the clause @]
0.754[zip.sup] @[neg_reflect did not simplify the clause @]
0.755[zip.saturate] ### step   560 ###
0.755[zip.saturate]
    given (560 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f (f (f b)))))+* ∨ cQ_2 b b b+]/id:593/depth:12`
0.756[zip.env] apply binary rule superposition_active
0.756[zip.env] apply binary rule superposition_passive
0.756[zip.env] apply binary rule ctx_narrow
0.756[zip.env] apply binary rule narrow_term_defs
0.756[zip.env] do unary inferences
0.756[zip.env] apply unary rule equality_resolution
0.756[zip.env] apply unary rule equality_factoring
0.756[zip.env] apply unary rule narrow_lit_defs
0.757[zip.env] apply unary rule ind_types.exhaustiveness
0.757[zip.env] apply unary rule ind_types.acyclicity
0.757[zip.env] apply unary rule avatar_check_empty
0.757[zip.env] apply generating rule avatar.lemmas (full: false)
0.757[zip.env] apply generating rule avatar_check_sat (full: false)
0.757[zip.avatar] SAT-solver reports "SAT"
0.757[zip.saturate] inferred new clauses: []
0.757[zip.sup] @[neg_reflect did not simplify the clause @]
0.757[zip.sup] @[neg_reflect did not simplify the clause @]
0.757[zip.saturate] ### step   561 ###
0.758[zip.saturate]
    given (561 steps, penalty 1):
      `[¬cQ_1 (f b) b (f (f (f (f (f a)))))+* ∨ cQ_2 b b a+]/id:594/depth:12`
0.758[zip.env] apply binary rule superposition_active
0.758[zip.env] apply binary rule superposition_passive
0.758[zip.env] apply binary rule ctx_narrow
0.758[zip.env] apply binary rule narrow_term_defs
0.758[zip.env] do unary inferences
0.758[zip.env] apply unary rule equality_resolution
0.758[zip.env] apply unary rule equality_factoring
0.758[zip.env] apply unary rule narrow_lit_defs
0.758[zip.env] apply unary rule ind_types.exhaustiveness
0.758[zip.env] apply unary rule ind_types.acyclicity
0.758[zip.env] apply unary rule avatar_check_empty
0.758[zip.env] apply generating rule avatar.lemmas (full: false)
0.758[zip.env] apply generating rule avatar_check_sat (full: false)
0.758[zip.avatar] SAT-solver reports "SAT"
0.758[zip.saturate] inferred new clauses: []
0.758[zip.sup] @[neg_reflect did not simplify the clause @]
0.759[zip.sup] @[neg_reflect did not simplify the clause @]
0.759[zip.saturate] ### step   562 ###
0.759[zip.saturate]
    given (562 steps, penalty 1):
      `forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11`
0.760[zip.env] apply binary rule superposition_active
0.760[zip.env] apply binary rule superposition_passive
0.760[zip.sup]
    sup, kind sup
      (forall X1 X2. [cP_1 (f X1) X2* ∨ ¬cP_1 X1 X2]/id:5/depth:0[1]
         s=cP_1 (f X1) X2 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → f X1[1], X2[1] → X0[0]}.

0.760[zip.sup]
    ... ok, conclusion
    forall X0 X1.
    [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f (f (f X1))))))* ∨ 
     cQ_2 a b X0+*]/id:595/depth:12
0.760[zip.sup]
    sup, kind sup
      (forall X0. [cP_1 d X0*]/id:4/depth:0[1] s=cP_1 d X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X1[0] → d[1], X0[1] → X0[0]}.

0.761[zip.sup]
    ... ok, conclusion
    forall X0. [¬cQ_1 (f a) b (f (f (f (f (f d)))))+* ∨ cQ_2 a b X0+*]/id:596/depth:12
0.761[zip.sup]
    sup, kind sup ([cP_1 c c*]/id:3/depth:0[1] s=cP_1 c c t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → c[1], X1[0] → c[1]}.

0.761[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f (f (f c)))))+* ∨ cQ_2 a b c+]/id:597/depth:12
0.761[zip.sup]
    sup, kind sup ([cP_1 b b*]/id:2/depth:0[1] s=cP_1 b b t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → b[1], X1[0] → b[1]}.

0.761[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f (f (f b)))))+* ∨ cQ_2 a b b+]/id:598/depth:12
0.761[zip.sup]
    sup, kind sup ([cP_1 a a*]/id:1/depth:0[1] s=cP_1 a a t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=¬cP_1 X1 X0 p=0.←.ε)
      with subst={X0[0] → a[1], X1[0] → a[1]}.

0.762[zip.sup]
    ... ok, conclusion
    [¬cQ_1 (f a) b (f (f (f (f (f a)))))+* ∨ cQ_2 a b a+]/id:599/depth:12
0.762[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0 X1.
       [¬cP_1 X1 X0+* ∨ cQ_2 a b X0+* ∨ 
        ¬cQ_1 (f a) b (f (f (f (f (f X1)))))*]/id:530/depth:11[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.762[zip.sup] will yield a tautology
0.762[zip.sup] ... cancel, will yield a tautology
0.762[zip.env] apply binary rule ctx_narrow
0.762[zip.env] apply binary rule narrow_term_defs
0.762[zip.env] do unary inferences
0.762[zip.env] apply unary rule equality_resolution
0.762[zip.env] apply unary rule equality_factoring
0.762[zip.env] apply unary rule narrow_lit_defs
0.762[zip.env] apply unary rule ind_types.exhaustiveness
0.762[zip.env] apply unary rule ind_types.acyclicity
0.762[zip.env] apply unary rule avatar_check_empty
0.762[zip.env] apply generating rule avatar.lemmas (full: false)
0.762[zip.env] apply generating rule avatar_check_sat (full: false)
0.762[zip.avatar] SAT-solver reports "SAT"
0.762[zip.sup] @[neg_reflect did not simplify the clause @]
0.762[zip.sup] @[neg_reflect did not simplify the clause @]
0.762[zip.sup] @[neg_reflect did not simplify the clause @]
0.762[zip.sup] @[neg_reflect did not simplify the clause @]
0.762[zip.sup] @[neg_reflect did not simplify the clause @]
0.762[zip.saturate]
    inferred new clauses:
      [forall X0 X1.
       [¬cP_1 X1 X0+* ∨ ¬cQ_1 (f a) b (f (f (f (f (f (f X1))))))* ∨ 
        cQ_2 a b X0+*]/id:595/depth:12, 
       forall X0. [¬cQ_1 (f a) b (f (f (f (f (f d)))))+* ∨ cQ_2 a b X0+*]/id:596/depth:12, 
       [¬cQ_1 (f a) b (f (f (f (f (f c)))))+* ∨ cQ_2 a b c+]/id:597/depth:12, 
       [¬cQ_1 (f a) b (f (f (f (f (f b)))))+* ∨ cQ_2 a b b+]/id:598/depth:12, 
       [¬cQ_1 (f a) b (f (f (f (f (f a)))))+* ∨ cQ_2 a b a+]/id:599/depth:12]
0.763[zip.sup] @[neg_reflect did not simplify the clause @]
0.763[zip.sup] @[neg_reflect did not simplify the clause @]
0.763[zip.saturate] ### step   563 ###
0.763[zip.saturate]
    given (563 steps, penalty 1):
      `forall X0. [¬cQ_1 (f a) b (f (f (f (f (f d)))))+* ∨ cQ_2 a b X0+*]/id:596/depth:12`
0.763[zip.env] apply binary rule superposition_active
0.763[zip.env] apply binary rule superposition_passive
0.763[zip.sup]
    sup, kind sup
      (forall X0. [cQ_2 a b X0* ∨ ¬cP_1 (f c) X0]/id:44/depth:5[1]
         s=cQ_2 a b X0 t=true)
      (forall X0. [¬cQ_1 (f a) b (f (f (f (f (f d)))))+* ∨ cQ_2 a b X0+*]/id:596/depth:12[0]
         passive_lit=cQ_2 a b X0 p=1.←.ε)
      with subst={X0[1] → X0[0]}.

0.764[zip.sup] will yield a tautology
0.764[zip.sup] ... cancel, will yield a tautology
0.764[zip.env] apply binary rule ctx_narrow
0.764[zip.env] apply binary rule narrow_term_defs
0.764[zip.env] do unary inferences
0.764[zip.env] apply unary rule equality_resolution
0.764[zip.env] apply unary rule equality_factoring
0.764[zip.env] apply unary rule narrow_lit_defs
0.764[zip.env] apply unary rule ind_types.exhaustiveness
0.764[zip.env] apply unary rule ind_types.acyclicity
0.764[zip.env] apply unary rule avatar_check_empty
0.764[zip.env] apply generating rule avatar.lemmas (full: false)
0.764[zip.env] apply generating rule avatar_check_sat (full: false)
0.764[zip.avatar] SAT-solver reports "SAT"
0.764[zip.saturate] inferred new clauses: []
done 564 iterations in 0.764s
0.764[zip]
    final precedence:
      [f < cP_1 < cP_2 < cP_3 < a < b < c < d < cQ_1 < cQ_2 < cQ_3 < cQ_4]
0.764[zip] terminate phase saturate
0.764[zip] start phase print_result
SZS status ResourceOut for '/media/petar/4AF7-98BC/TPTP-v7.2.0/Problems/SYO/SYO386^5.p'
0.764[zip] terminate phase print_result
0.764[zip] start phase print_dot
0.764[zip] terminate phase print_dot
0.764[zip] start phase check_proof
0.764[zip] terminate phase check_proof
0.764[zip] start phase print_stats
0.764[zip] terminate phase print_stats
0.764[zip] start phase exit
0.764[zip] terminate phase exit
0.764[zip] run time: 0.764
